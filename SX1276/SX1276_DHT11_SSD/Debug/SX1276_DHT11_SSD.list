
SX1276_DHT11_SSD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000643c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee4  0800654c  0800654c  0001654c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007430  08007430  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007438  08007438  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007438  08007438  00017438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800743c  0800743c  0001743c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08007440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009fc  20000070  080074b0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a6c  080074b0  00020a6c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013e65  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000338d  00000000  00000000  00033f41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013f8  00000000  00000000  000372d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f96  00000000  00000000  000386c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a7f3  00000000  00000000  0003965e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018ea3  00000000  00000000  00053e51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091998  00000000  00000000  0006ccf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cf0  00000000  00000000  000fe68c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0010437c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08006534 	.word	0x08006534

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08006534 	.word	0x08006534

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b972 	b.w	800044c <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14c      	bne.n	800022a <__udivmoddi4+0xaa>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d967      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000196:	fab2 f382 	clz	r3, r2
 800019a:	b153      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa02 fc03 	lsl.w	ip, r2, r3
 80001a0:	f1c3 0220 	rsb	r2, r3, #32
 80001a4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001a8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b6:	fbbe f1f7 	udiv	r1, lr, r7
 80001ba:	fa1f f58c 	uxth.w	r5, ip
 80001be:	fb07 ee11 	mls	lr, r7, r1, lr
 80001c2:	fb01 f005 	mul.w	r0, r1, r5
 80001c6:	0c22      	lsrs	r2, r4, #16
 80001c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0202 	adds.w	r2, ip, r2
 80001d4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001d8:	f080 8119 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001dc:	4290      	cmp	r0, r2
 80001de:	f240 8116 	bls.w	800040e <__udivmoddi4+0x28e>
 80001e2:	3902      	subs	r1, #2
 80001e4:	4462      	add	r2, ip
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80001ec:	fb07 2210 	mls	r2, r7, r0, r2
 80001f0:	fb00 f505 	mul.w	r5, r0, r5
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a5      	cmp	r5, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 32ff 	add.w	r2, r0, #4294967295
 8000206:	f080 8104 	bcs.w	8000412 <__udivmoddi4+0x292>
 800020a:	42a5      	cmp	r5, r4
 800020c:	f240 8101 	bls.w	8000412 <__udivmoddi4+0x292>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000218:	2100      	movs	r1, #0
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	b11e      	cbz	r6, 8000226 <__udivmoddi4+0xa6>
 800021e:	40dc      	lsrs	r4, r3
 8000220:	2300      	movs	r3, #0
 8000222:	e9c6 4300 	strd	r4, r3, [r6]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d908      	bls.n	8000240 <__udivmoddi4+0xc0>
 800022e:	2e00      	cmp	r6, #0
 8000230:	f000 80ea 	beq.w	8000408 <__udivmoddi4+0x288>
 8000234:	2100      	movs	r1, #0
 8000236:	e9c6 0500 	strd	r0, r5, [r6]
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	fab3 f183 	clz	r1, r3
 8000244:	2900      	cmp	r1, #0
 8000246:	d148      	bne.n	80002da <__udivmoddi4+0x15a>
 8000248:	42ab      	cmp	r3, r5
 800024a:	d302      	bcc.n	8000252 <__udivmoddi4+0xd2>
 800024c:	4282      	cmp	r2, r0
 800024e:	f200 80f8 	bhi.w	8000442 <__udivmoddi4+0x2c2>
 8000252:	1a84      	subs	r4, r0, r2
 8000254:	eb65 0203 	sbc.w	r2, r5, r3
 8000258:	2001      	movs	r0, #1
 800025a:	4696      	mov	lr, r2
 800025c:	2e00      	cmp	r6, #0
 800025e:	d0e2      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000260:	e9c6 4e00 	strd	r4, lr, [r6]
 8000264:	e7df      	b.n	8000226 <__udivmoddi4+0xa6>
 8000266:	b902      	cbnz	r2, 800026a <__udivmoddi4+0xea>
 8000268:	deff      	udf	#255	; 0xff
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 808e 	bne.w	8000390 <__udivmoddi4+0x210>
 8000274:	1a88      	subs	r0, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	0c17      	lsrs	r7, r2, #16
 800027a:	fa1f fe82 	uxth.w	lr, r2
 800027e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000282:	fb07 0015 	mls	r0, r7, r5, r0
 8000286:	0c22      	lsrs	r2, r4, #16
 8000288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800028c:	fb0e f005 	mul.w	r0, lr, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d908      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f105 38ff 	add.w	r8, r5, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4290      	cmp	r0, r2
 80002a0:	f200 80cc 	bhi.w	800043c <__udivmoddi4+0x2bc>
 80002a4:	4645      	mov	r5, r8
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ac:	fb07 2210 	mls	r2, r7, r0, r2
 80002b0:	fb0e fe00 	mul.w	lr, lr, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x150>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x14e>
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	f200 80b4 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 80002ce:	4610      	mov	r0, r2
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002d8:	e7a0      	b.n	800021c <__udivmoddi4+0x9c>
 80002da:	f1c1 0720 	rsb	r7, r1, #32
 80002de:	408b      	lsls	r3, r1
 80002e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e8:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f0:	fbba f8f9 	udiv	r8, sl, r9
 80002f4:	408d      	lsls	r5, r1
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	432b      	orrs	r3, r5
 8000304:	fa00 f501 	lsl.w	r5, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x1b2>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000322:	f080 8086 	bcs.w	8000432 <__udivmoddi4+0x2b2>
 8000326:	42a0      	cmp	r0, r4
 8000328:	f240 8083 	bls.w	8000432 <__udivmoddi4+0x2b2>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4464      	add	r4, ip
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	b298      	uxth	r0, r3
 8000336:	fbb4 f3f9 	udiv	r3, r4, r9
 800033a:	fb09 4413 	mls	r4, r9, r3, r4
 800033e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000342:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d26a      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d968      	bls.n	800042a <__udivmoddi4+0x2aa>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 9302 	umull	r9, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c8      	mov	r8, r9
 800036c:	469e      	mov	lr, r3
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d067      	beq.n	8000446 <__udivmoddi4+0x2c6>
 8000376:	ebb5 0308 	subs.w	r3, r5, r8
 800037a:	eb64 040e 	sbc.w	r4, r4, lr
 800037e:	40cb      	lsrs	r3, r1
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	431f      	orrs	r7, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c6 7400 	strd	r7, r4, [r6]
 800038c:	2100      	movs	r1, #0
 800038e:	e74a      	b.n	8000226 <__udivmoddi4+0xa6>
 8000390:	fa02 fc03 	lsl.w	ip, r2, r3
 8000394:	f1c3 0020 	rsb	r0, r3, #32
 8000398:	40c1      	lsrs	r1, r0
 800039a:	409d      	lsls	r5, r3
 800039c:	fa24 f000 	lsr.w	r0, r4, r0
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	4328      	orrs	r0, r5
 80003a6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003aa:	fb07 1115 	mls	r1, r7, r5, r1
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	0c02      	lsrs	r2, r0, #16
 80003b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003b8:	fb05 f10e 	mul.w	r1, r5, lr
 80003bc:	4291      	cmp	r1, r2
 80003be:	fa04 f403 	lsl.w	r4, r4, r3
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x256>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	d22f      	bcs.n	800042e <__udivmoddi4+0x2ae>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d92d      	bls.n	800042e <__udivmoddi4+0x2ae>
 80003d2:	3d02      	subs	r5, #2
 80003d4:	4462      	add	r2, ip
 80003d6:	1a52      	subs	r2, r2, r1
 80003d8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003dc:	fb07 2211 	mls	r2, r7, r1, r2
 80003e0:	b280      	uxth	r0, r0
 80003e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003e6:	fb01 f20e 	mul.w	r2, r1, lr
 80003ea:	4282      	cmp	r2, r0
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x280>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d216      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d914      	bls.n	8000426 <__udivmoddi4+0x2a6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1a80      	subs	r0, r0, r2
 8000402:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4631      	mov	r1, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e70b      	b.n	8000226 <__udivmoddi4+0xa6>
 800040e:	4671      	mov	r1, lr
 8000410:	e6e9      	b.n	80001e6 <__udivmoddi4+0x66>
 8000412:	4610      	mov	r0, r2
 8000414:	e6fe      	b.n	8000214 <__udivmoddi4+0x94>
 8000416:	454d      	cmp	r5, r9
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb9 0802 	subs.w	r8, r9, r2
 800041e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000422:	3801      	subs	r0, #1
 8000424:	e7a5      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000426:	4641      	mov	r1, r8
 8000428:	e7ea      	b.n	8000400 <__udivmoddi4+0x280>
 800042a:	4603      	mov	r3, r0
 800042c:	e796      	b.n	800035c <__udivmoddi4+0x1dc>
 800042e:	4645      	mov	r5, r8
 8000430:	e7d1      	b.n	80003d6 <__udivmoddi4+0x256>
 8000432:	46d0      	mov	r8, sl
 8000434:	e77d      	b.n	8000332 <__udivmoddi4+0x1b2>
 8000436:	4464      	add	r4, ip
 8000438:	3802      	subs	r0, #2
 800043a:	e749      	b.n	80002d0 <__udivmoddi4+0x150>
 800043c:	3d02      	subs	r5, #2
 800043e:	4462      	add	r2, ip
 8000440:	e731      	b.n	80002a6 <__udivmoddi4+0x126>
 8000442:	4608      	mov	r0, r1
 8000444:	e70a      	b.n	800025c <__udivmoddi4+0xdc>
 8000446:	4631      	mov	r1, r6
 8000448:	e6ed      	b.n	8000226 <__udivmoddi4+0xa6>
 800044a:	bf00      	nop

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <SX1276_SPIRead>:
 */

#include <string.h>
#include <SX1276.h>

uint8_t SX1276_SPIRead(SX1276_t *module, uint8_t addr) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1276_hw_SPICommand(module->hw, addr);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	78fa      	ldrb	r2, [r7, #3]
 8000462:	4611      	mov	r1, r2
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fac9 	bl	80009fc <SX1276_hw_SPICommand>
	tmp = SX1276_hw_SPIReadByte(module->hw);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fae4 	bl	8000a3c <SX1276_hw_SPIReadByte>
 8000474:	4603      	mov	r3, r0
 8000476:	73fb      	strb	r3, [r7, #15]
	SX1276_hw_SetNSS(module->hw, 1);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f000 fa81 	bl	8000986 <SX1276_hw_SetNSS>
	return tmp;
 8000484:	7bfb      	ldrb	r3, [r7, #15]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <SX1276_SPIWrite>:

void SX1276_SPIWrite(SX1276_t *module, uint8_t addr, uint8_t cmd) {
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	70fb      	strb	r3, [r7, #3]
 800049a:	4613      	mov	r3, r2
 800049c:	70bb      	strb	r3, [r7, #2]
	SX1276_hw_SetNSS(module->hw, 0);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fa6e 	bl	8000986 <SX1276_hw_SetNSS>
	SX1276_hw_SPICommand(module->hw, addr | 0x80);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	4610      	mov	r0, r2
 80004ba:	f000 fa9f 	bl	80009fc <SX1276_hw_SPICommand>
	SX1276_hw_SPICommand(module->hw, cmd);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	78ba      	ldrb	r2, [r7, #2]
 80004c4:	4611      	mov	r1, r2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fa98 	bl	80009fc <SX1276_hw_SPICommand>
	SX1276_hw_SetNSS(module->hw, 1);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fa57 	bl	8000986 <SX1276_hw_SetNSS>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <SX1276_SPIBurstWrite>:
		SX1276_hw_SetNSS(module->hw, 1);
	}
}

void SX1276_SPIBurstWrite(SX1276_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b086      	sub	sp, #24
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	607a      	str	r2, [r7, #4]
 80004ea:	461a      	mov	r2, r3
 80004ec:	460b      	mov	r3, r1
 80004ee:	72fb      	strb	r3, [r7, #11]
 80004f0:	4613      	mov	r3, r2
 80004f2:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80004f4:	7abb      	ldrb	r3, [r7, #10]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d929      	bls.n	800054e <SX1276_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1276_hw_SetNSS(module->hw, 0);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fa40 	bl	8000986 <SX1276_hw_SetNSS>
		SX1276_hw_SPICommand(module->hw, addr | 0x80);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681a      	ldr	r2, [r3, #0]
 800050a:	7afb      	ldrb	r3, [r7, #11]
 800050c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000510:	b2db      	uxtb	r3, r3
 8000512:	4619      	mov	r1, r3
 8000514:	4610      	mov	r0, r2
 8000516:	f000 fa71 	bl	80009fc <SX1276_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	75fb      	strb	r3, [r7, #23]
 800051e:	e00b      	b.n	8000538 <SX1276_SPIBurstWrite+0x58>
			SX1276_hw_SPICommand(module->hw, *(txBuf + i));
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	6818      	ldr	r0, [r3, #0]
 8000524:	7dfb      	ldrb	r3, [r7, #23]
 8000526:	687a      	ldr	r2, [r7, #4]
 8000528:	4413      	add	r3, r2
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f000 fa65 	bl	80009fc <SX1276_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000532:	7dfb      	ldrb	r3, [r7, #23]
 8000534:	3301      	adds	r3, #1
 8000536:	75fb      	strb	r3, [r7, #23]
 8000538:	7dfa      	ldrb	r2, [r7, #23]
 800053a:	7abb      	ldrb	r3, [r7, #10]
 800053c:	429a      	cmp	r2, r3
 800053e:	d3ef      	bcc.n	8000520 <SX1276_SPIBurstWrite+0x40>
		}
		SX1276_hw_SetNSS(module->hw, 1);
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2101      	movs	r1, #1
 8000546:	4618      	mov	r0, r3
 8000548:	f000 fa1d 	bl	8000986 <SX1276_hw_SetNSS>
 800054c:	e000      	b.n	8000550 <SX1276_SPIBurstWrite+0x70>
		return;
 800054e:	bf00      	nop
	}
}
 8000550:	3718      	adds	r7, #24
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
	...

08000558 <SX1276_config>:

void SX1276_config(SX1276_t *module) {
 8000558:	b580      	push	{r7, lr}
 800055a:	b086      	sub	sp, #24
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
	SX1276_sleep(module); //Change modem mode Must in Sleep mode
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f000 f90d 	bl	8000780 <SX1276_sleep>
	SX1276_hw_DelayMs(15);
 8000566:	200f      	movs	r0, #15
 8000568:	f000 fa8e 	bl	8000a88 <SX1276_hw_DelayMs>

	SX1276_entryLoRa(module);
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f000 f917 	bl	80007a0 <SX1276_entryLoRa>
	//SX1276_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000578:	f04f 0000 	mov.w	r0, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	04d9      	lsls	r1, r3, #19
 8000582:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000586:	04d0      	lsls	r0, r2, #19
 8000588:	4a6f      	ldr	r2, [pc, #444]	; (8000748 <SX1276_config+0x1f0>)
 800058a:	f04f 0300 	mov.w	r3, #0
 800058e:	f7ff fddf 	bl	8000150 <__aeabi_uldivmod>
 8000592:	4602      	mov	r2, r0
 8000594:	460b      	mov	r3, r1
 8000596:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800059a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800059e:	f04f 0200 	mov.w	r2, #0
 80005a2:	f04f 0300 	mov.w	r3, #0
 80005a6:	0c02      	lsrs	r2, r0, #16
 80005a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005ac:	0c0b      	lsrs	r3, r1, #16
 80005ae:	b2d3      	uxtb	r3, r2
 80005b0:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80005b2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80005b6:	f04f 0200 	mov.w	r2, #0
 80005ba:	f04f 0300 	mov.w	r3, #0
 80005be:	0a02      	lsrs	r2, r0, #8
 80005c0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80005c4:	0a0b      	lsrs	r3, r1, #8
 80005c6:	b2d3      	uxtb	r3, r2
 80005c8:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80005ca:	7c3b      	ldrb	r3, [r7, #16]
 80005cc:	73bb      	strb	r3, [r7, #14]
	SX1276_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80005ce:	f107 020c 	add.w	r2, r7, #12
 80005d2:	2303      	movs	r3, #3
 80005d4:	2106      	movs	r1, #6
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff ff82 	bl	80004e0 <SX1276_SPIBurstWrite>

	SX1276_SPIWrite(module, RegSyncWord, 0x34);
 80005dc:	2234      	movs	r2, #52	; 0x34
 80005de:	2139      	movs	r1, #57	; 0x39
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f7ff ff54 	bl	800048e <SX1276_SPIWrite>

	//setting base parameter
	SX1276_SPIWrite(module, LR_RegPaConfig, SX1276_Power[module->power]); //Setting output power parameter
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	7c1b      	ldrb	r3, [r3, #16]
 80005ea:	461a      	mov	r2, r3
 80005ec:	4b57      	ldr	r3, [pc, #348]	; (800074c <SX1276_config+0x1f4>)
 80005ee:	5c9b      	ldrb	r3, [r3, r2]
 80005f0:	461a      	mov	r2, r3
 80005f2:	2109      	movs	r1, #9
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f7ff ff4a 	bl	800048e <SX1276_SPIWrite>

	SX1276_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80005fa:	220b      	movs	r2, #11
 80005fc:	210b      	movs	r1, #11
 80005fe:	6878      	ldr	r0, [r7, #4]
 8000600:	f7ff ff45 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000604:	2223      	movs	r2, #35	; 0x23
 8000606:	210c      	movs	r1, #12
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f7ff ff40 	bl	800048e <SX1276_SPIWrite>
	if (SX1276_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	7c5b      	ldrb	r3, [r3, #17]
 8000612:	461a      	mov	r2, r3
 8000614:	4b4e      	ldr	r3, [pc, #312]	; (8000750 <SX1276_config+0x1f8>)
 8000616:	5c9b      	ldrb	r3, [r3, r2]
 8000618:	2b06      	cmp	r3, #6
 800061a:	d147      	bne.n	80006ac <SX1276_config+0x154>
		uint8_t tmp;
		SX1276_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1276_LoRaBandwidth[module->LoRa_BW] << 4)
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	7c9b      	ldrb	r3, [r3, #18]
 8000620:	461a      	mov	r2, r3
 8000622:	4b4c      	ldr	r3, [pc, #304]	; (8000754 <SX1276_config+0x1fc>)
 8000624:	5c9b      	ldrb	r3, [r3, r2]
 8000626:	011b      	lsls	r3, r3, #4
 8000628:	b2da      	uxtb	r2, r3
						+ (SX1276_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	7cdb      	ldrb	r3, [r3, #19]
 800062e:	4619      	mov	r1, r3
 8000630:	4b49      	ldr	r3, [pc, #292]	; (8000758 <SX1276_config+0x200>)
 8000632:	5c5b      	ldrb	r3, [r3, r1]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	b2db      	uxtb	r3, r3
 8000638:	4413      	add	r3, r2
 800063a:	b2db      	uxtb	r3, r3
		SX1276_SPIWrite(module,
 800063c:	3301      	adds	r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	461a      	mov	r2, r3
 8000642:	211d      	movs	r1, #29
 8000644:	6878      	ldr	r0, [r7, #4]
 8000646:	f7ff ff22 	bl	800048e <SX1276_SPIWrite>

		SX1276_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1276_SpreadFactor[module->LoRa_SF] << 4)
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	7c5b      	ldrb	r3, [r3, #17]
 800064e:	461a      	mov	r2, r3
 8000650:	4b3f      	ldr	r3, [pc, #252]	; (8000750 <SX1276_config+0x1f8>)
 8000652:	5c9b      	ldrb	r3, [r3, r2]
 8000654:	011b      	lsls	r3, r3, #4
 8000656:	b2da      	uxtb	r2, r3
						+ (SX1276_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	7d1b      	ldrb	r3, [r3, #20]
 800065c:	4619      	mov	r1, r3
 800065e:	4b3f      	ldr	r3, [pc, #252]	; (800075c <SX1276_config+0x204>)
 8000660:	5c5b      	ldrb	r3, [r3, r1]
 8000662:	009b      	lsls	r3, r3, #2
 8000664:	b2db      	uxtb	r3, r3
 8000666:	4413      	add	r3, r2
 8000668:	b2db      	uxtb	r3, r3
		SX1276_SPIWrite(module,
 800066a:	3303      	adds	r3, #3
 800066c:	b2db      	uxtb	r3, r3
 800066e:	461a      	mov	r2, r3
 8000670:	211e      	movs	r1, #30
 8000672:	6878      	ldr	r0, [r7, #4]
 8000674:	f7ff ff0b 	bl	800048e <SX1276_SPIWrite>

		tmp = SX1276_SPIRead(module, 0x31);
 8000678:	2131      	movs	r1, #49	; 0x31
 800067a:	6878      	ldr	r0, [r7, #4]
 800067c:	f7ff fee8 	bl	8000450 <SX1276_SPIRead>
 8000680:	4603      	mov	r3, r0
 8000682:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	f023 0307 	bic.w	r3, r3, #7
 800068a:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	f043 0305 	orr.w	r3, r3, #5
 8000692:	73fb      	strb	r3, [r7, #15]
		SX1276_SPIWrite(module, 0x31, tmp);
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	461a      	mov	r2, r3
 8000698:	2131      	movs	r1, #49	; 0x31
 800069a:	6878      	ldr	r0, [r7, #4]
 800069c:	f7ff fef7 	bl	800048e <SX1276_SPIWrite>
		SX1276_SPIWrite(module, 0x37, 0x0C);
 80006a0:	220c      	movs	r2, #12
 80006a2:	2137      	movs	r1, #55	; 0x37
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff fef2 	bl	800048e <SX1276_SPIWrite>
 80006aa:	e029      	b.n	8000700 <SX1276_config+0x1a8>
	} else {
		SX1276_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1276_LoRaBandwidth[module->LoRa_BW] << 4)
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	7c9b      	ldrb	r3, [r3, #18]
 80006b0:	461a      	mov	r2, r3
 80006b2:	4b28      	ldr	r3, [pc, #160]	; (8000754 <SX1276_config+0x1fc>)
 80006b4:	5c9b      	ldrb	r3, [r3, r2]
 80006b6:	011b      	lsls	r3, r3, #4
 80006b8:	b2da      	uxtb	r2, r3
						+ (SX1276_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7cdb      	ldrb	r3, [r3, #19]
 80006be:	4619      	mov	r1, r3
 80006c0:	4b25      	ldr	r3, [pc, #148]	; (8000758 <SX1276_config+0x200>)
 80006c2:	5c5b      	ldrb	r3, [r3, r1]
 80006c4:	005b      	lsls	r3, r3, #1
 80006c6:	b2db      	uxtb	r3, r3
		SX1276_SPIWrite(module,
 80006c8:	4413      	add	r3, r2
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	461a      	mov	r2, r3
 80006ce:	211d      	movs	r1, #29
 80006d0:	6878      	ldr	r0, [r7, #4]
 80006d2:	f7ff fedc 	bl	800048e <SX1276_SPIWrite>

		SX1276_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1276_SpreadFactor[module->LoRa_SF] << 4)
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7c5b      	ldrb	r3, [r3, #17]
 80006da:	461a      	mov	r2, r3
 80006dc:	4b1c      	ldr	r3, [pc, #112]	; (8000750 <SX1276_config+0x1f8>)
 80006de:	5c9b      	ldrb	r3, [r3, r2]
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	b2da      	uxtb	r2, r3
						+ (SX1276_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	7d1b      	ldrb	r3, [r3, #20]
 80006e8:	4619      	mov	r1, r3
 80006ea:	4b1c      	ldr	r3, [pc, #112]	; (800075c <SX1276_config+0x204>)
 80006ec:	5c5b      	ldrb	r3, [r3, r1]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	b2db      	uxtb	r3, r3
		SX1276_SPIWrite(module,
 80006f2:	4413      	add	r3, r2
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	461a      	mov	r2, r3
 80006f8:	211e      	movs	r1, #30
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f7ff fec7 	bl	800048e <SX1276_SPIWrite>
	}

	SX1276_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000700:	2204      	movs	r2, #4
 8000702:	2126      	movs	r1, #38	; 0x26
 8000704:	6878      	ldr	r0, [r7, #4]
 8000706:	f7ff fec2 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800070a:	2208      	movs	r2, #8
 800070c:	211f      	movs	r1, #31
 800070e:	6878      	ldr	r0, [r7, #4]
 8000710:	f7ff febd 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000714:	2200      	movs	r2, #0
 8000716:	2120      	movs	r1, #32
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f7ff feb8 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800071e:	2208      	movs	r2, #8
 8000720:	2121      	movs	r1, #33	; 0x21
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff feb3 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000728:	2201      	movs	r2, #1
 800072a:	2141      	movs	r1, #65	; 0x41
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f7ff feae 	bl	800048e <SX1276_SPIWrite>
	module->readBytes = 0;
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	2200      	movs	r2, #0
 8000736:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1276_standby(module); //Entry standby mode
 800073a:	6878      	ldr	r0, [r7, #4]
 800073c:	f000 f810 	bl	8000760 <SX1276_standby>
}
 8000740:	bf00      	nop
 8000742:	3718      	adds	r7, #24
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	01e84800 	.word	0x01e84800
 800074c:	08006654 	.word	0x08006654
 8000750:	08006658 	.word	0x08006658
 8000754:	08006660 	.word	0x08006660
 8000758:	0800666c 	.word	0x0800666c
 800075c:	08006670 	.word	0x08006670

08000760 <SX1276_standby>:

void SX1276_standby(SX1276_t *module) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	SX1276_SPIWrite(module, LR_RegOpMode, 0x09);
 8000768:	2209      	movs	r2, #9
 800076a:	2101      	movs	r1, #1
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff fe8e 	bl	800048e <SX1276_SPIWrite>
	module->status = STANDBY;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	2201      	movs	r2, #1
 8000776:	759a      	strb	r2, [r3, #22]
}
 8000778:	bf00      	nop
 800077a:	3708      	adds	r7, #8
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}

08000780 <SX1276_sleep>:

void SX1276_sleep(SX1276_t *module) {
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
	SX1276_SPIWrite(module, LR_RegOpMode, 0x08);
 8000788:	2208      	movs	r2, #8
 800078a:	2101      	movs	r1, #1
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f7ff fe7e 	bl	800048e <SX1276_SPIWrite>
	module->status = SLEEP;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2200      	movs	r2, #0
 8000796:	759a      	strb	r2, [r3, #22]
}
 8000798:	bf00      	nop
 800079a:	3708      	adds	r7, #8
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}

080007a0 <SX1276_entryLoRa>:

void SX1276_entryLoRa(SX1276_t *module) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
	SX1276_SPIWrite(module, LR_RegOpMode, 0x88);
 80007a8:	2288      	movs	r2, #136	; 0x88
 80007aa:	2101      	movs	r1, #1
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f7ff fe6e 	bl	800048e <SX1276_SPIWrite>
}
 80007b2:	bf00      	nop
 80007b4:	3708      	adds	r7, #8
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}

080007ba <SX1276_clearLoRaIrq>:

void SX1276_clearLoRaIrq(SX1276_t *module) {
 80007ba:	b580      	push	{r7, lr}
 80007bc:	b082      	sub	sp, #8
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
	SX1276_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80007c2:	22ff      	movs	r2, #255	; 0xff
 80007c4:	2112      	movs	r1, #18
 80007c6:	6878      	ldr	r0, [r7, #4]
 80007c8:	f7ff fe61 	bl	800048e <SX1276_SPIWrite>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <SX1276_LoRaEntryTx>:
		SX1276_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1276_LoRaEntryTx(SX1276_t *module, uint8_t length, uint32_t timeout) {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b086      	sub	sp, #24
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	460b      	mov	r3, r1
 80007de:	607a      	str	r2, [r7, #4]
 80007e0:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 80007e2:	68fb      	ldr	r3, [r7, #12]
 80007e4:	7afa      	ldrb	r2, [r7, #11]
 80007e6:	755a      	strb	r2, [r3, #21]

	SX1276_config(module); //setting base parameter
 80007e8:	68f8      	ldr	r0, [r7, #12]
 80007ea:	f7ff feb5 	bl	8000558 <SX1276_config>
	SX1276_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 80007ee:	2287      	movs	r2, #135	; 0x87
 80007f0:	214d      	movs	r1, #77	; 0x4d
 80007f2:	68f8      	ldr	r0, [r7, #12]
 80007f4:	f7ff fe4b 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80007f8:	2200      	movs	r2, #0
 80007fa:	2124      	movs	r1, #36	; 0x24
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff fe46 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 8000802:	2241      	movs	r2, #65	; 0x41
 8000804:	2140      	movs	r1, #64	; 0x40
 8000806:	68f8      	ldr	r0, [r7, #12]
 8000808:	f7ff fe41 	bl	800048e <SX1276_SPIWrite>
	SX1276_clearLoRaIrq(module);
 800080c:	68f8      	ldr	r0, [r7, #12]
 800080e:	f7ff ffd4 	bl	80007ba <SX1276_clearLoRaIrq>
	SX1276_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 8000812:	22f7      	movs	r2, #247	; 0xf7
 8000814:	2111      	movs	r1, #17
 8000816:	68f8      	ldr	r0, [r7, #12]
 8000818:	f7ff fe39 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 800081c:	7afb      	ldrb	r3, [r7, #11]
 800081e:	461a      	mov	r2, r3
 8000820:	2122      	movs	r1, #34	; 0x22
 8000822:	68f8      	ldr	r0, [r7, #12]
 8000824:	f7ff fe33 	bl	800048e <SX1276_SPIWrite>
	addr = SX1276_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 8000828:	210e      	movs	r1, #14
 800082a:	68f8      	ldr	r0, [r7, #12]
 800082c:	f7ff fe10 	bl	8000450 <SX1276_SPIRead>
 8000830:	4603      	mov	r3, r0
 8000832:	75fb      	strb	r3, [r7, #23]
	SX1276_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 8000834:	7dfb      	ldrb	r3, [r7, #23]
 8000836:	461a      	mov	r2, r3
 8000838:	210d      	movs	r1, #13
 800083a:	68f8      	ldr	r0, [r7, #12]
 800083c:	f7ff fe27 	bl	800048e <SX1276_SPIWrite>

	while (1) {
		temp = SX1276_SPIRead(module, LR_RegPayloadLength);
 8000840:	2122      	movs	r1, #34	; 0x22
 8000842:	68f8      	ldr	r0, [r7, #12]
 8000844:	f7ff fe04 	bl	8000450 <SX1276_SPIRead>
 8000848:	4603      	mov	r3, r0
 800084a:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 800084c:	7dba      	ldrb	r2, [r7, #22]
 800084e:	7afb      	ldrb	r3, [r7, #11]
 8000850:	429a      	cmp	r2, r3
 8000852:	d104      	bne.n	800085e <SX1276_LoRaEntryTx+0x8a>
			module->status = TX;
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2202      	movs	r2, #2
 8000858:	759a      	strb	r2, [r3, #22]
			return 1;
 800085a:	2301      	movs	r3, #1
 800085c:	e00e      	b.n	800087c <SX1276_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	3b01      	subs	r3, #1
 8000862:	607b      	str	r3, [r7, #4]
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	2b00      	cmp	r3, #0
 8000868:	d1ea      	bne.n	8000840 <SX1276_LoRaEntryTx+0x6c>
			SX1276_hw_Reset(module->hw);
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4618      	mov	r0, r3
 8000870:	f000 f8a0 	bl	80009b4 <SX1276_hw_Reset>
			SX1276_config(module);
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fe6f 	bl	8000558 <SX1276_config>
			return 0;
 800087a:	2300      	movs	r3, #0
		}
	}
}
 800087c:	4618      	mov	r0, r3
 800087e:	3718      	adds	r7, #24
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}

08000884 <SX1276_LoRaTxPacket>:

int SX1276_LoRaTxPacket(SX1276_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	60f8      	str	r0, [r7, #12]
 800088c:	60b9      	str	r1, [r7, #8]
 800088e:	603b      	str	r3, [r7, #0]
 8000890:	4613      	mov	r3, r2
 8000892:	71fb      	strb	r3, [r7, #7]
	SX1276_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	68ba      	ldr	r2, [r7, #8]
 8000898:	2100      	movs	r1, #0
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fe20 	bl	80004e0 <SX1276_SPIBurstWrite>
	SX1276_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 80008a0:	228b      	movs	r2, #139	; 0x8b
 80008a2:	2101      	movs	r1, #1
 80008a4:	68f8      	ldr	r0, [r7, #12]
 80008a6:	f7ff fdf2 	bl	800048e <SX1276_SPIWrite>
	while (1) {
		if (SX1276_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f000 f8f5 	bl	8000a9e <SX1276_hw_GetDIO0>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d00b      	beq.n	80008d2 <SX1276_LoRaTxPacket+0x4e>
			SX1276_SPIRead(module, LR_RegIrqFlags);
 80008ba:	2112      	movs	r1, #18
 80008bc:	68f8      	ldr	r0, [r7, #12]
 80008be:	f7ff fdc7 	bl	8000450 <SX1276_SPIRead>
			SX1276_clearLoRaIrq(module); //Clear irq
 80008c2:	68f8      	ldr	r0, [r7, #12]
 80008c4:	f7ff ff79 	bl	80007ba <SX1276_clearLoRaIrq>
			SX1276_standby(module); //Entry Standby mode
 80008c8:	68f8      	ldr	r0, [r7, #12]
 80008ca:	f7ff ff49 	bl	8000760 <SX1276_standby>
			return 1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	e013      	b.n	80008fa <SX1276_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d109      	bne.n	80008f2 <SX1276_LoRaTxPacket+0x6e>
			SX1276_hw_Reset(module->hw);
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 f866 	bl	80009b4 <SX1276_hw_Reset>
			SX1276_config(module);
 80008e8:	68f8      	ldr	r0, [r7, #12]
 80008ea:	f7ff fe35 	bl	8000558 <SX1276_config>
			return 0;
 80008ee:	2300      	movs	r3, #0
 80008f0:	e003      	b.n	80008fa <SX1276_LoRaTxPacket+0x76>
		}
		SX1276_hw_DelayMs(1);
 80008f2:	2001      	movs	r0, #1
 80008f4:	f000 f8c8 	bl	8000a88 <SX1276_hw_DelayMs>
		if (SX1276_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80008f8:	e7d7      	b.n	80008aa <SX1276_LoRaTxPacket+0x26>
	}
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3710      	adds	r7, #16
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}

08000902 <SX1276_init>:

void SX1276_init(SX1276_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000902:	b580      	push	{r7, lr}
 8000904:	b084      	sub	sp, #16
 8000906:	af00      	add	r7, sp, #0
 8000908:	60f8      	str	r0, [r7, #12]
 800090a:	e9c7 2300 	strd	r2, r3, [r7]
	SX1276_hw_init(module->hw);
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	4618      	mov	r0, r3
 8000914:	f000 f822 	bl	800095c <SX1276_hw_init>
	module->frequency = frequency;
 8000918:	68f9      	ldr	r1, [r7, #12]
 800091a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800091e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	7e3a      	ldrb	r2, [r7, #24]
 8000926:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	7f3a      	ldrb	r2, [r7, #28]
 800092c:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000934:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800093c:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8000944:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800094c:	755a      	strb	r2, [r3, #21]
	SX1276_config(module);
 800094e:	68f8      	ldr	r0, [r7, #12]
 8000950:	f7ff fe02 	bl	8000558 <SX1276_config>
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <SX1276_hw_init>:
#include <SX1276_HW.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1276_hw_init(SX1276_hw_t *hw) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	SX1276_hw_SetNSS(hw, 1);
 8000964:	2101      	movs	r1, #1
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f80d 	bl	8000986 <SX1276_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6858      	ldr	r0, [r3, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	b29b      	uxth	r3, r3
 8000976:	2201      	movs	r2, #1
 8000978:	4619      	mov	r1, r3
 800097a:	f001 fd70 	bl	800245e <HAL_GPIO_WritePin>
}
 800097e:	bf00      	nop
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <SX1276_hw_SetNSS>:

__weak void SX1276_hw_SetNSS(SX1276_hw_t *hw, int value) {
 8000986:	b580      	push	{r7, lr}
 8000988:	b082      	sub	sp, #8
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6958      	ldr	r0, [r3, #20]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	691b      	ldr	r3, [r3, #16]
 8000998:	b299      	uxth	r1, r3
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b01      	cmp	r3, #1
 800099e:	bf0c      	ite	eq
 80009a0:	2301      	moveq	r3, #1
 80009a2:	2300      	movne	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	f001 fd59 	bl	800245e <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 80009ac:	bf00      	nop
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SX1276_hw_Reset>:

__weak void SX1276_hw_Reset(SX1276_hw_t *hw) {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	SX1276_hw_SetNSS(hw, 1);
 80009bc:	2101      	movs	r1, #1
 80009be:	6878      	ldr	r0, [r7, #4]
 80009c0:	f7ff ffe1 	bl	8000986 <SX1276_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6858      	ldr	r0, [r3, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	f001 fd44 	bl	800245e <HAL_GPIO_WritePin>

	SX1276_hw_DelayMs(1);
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 f856 	bl	8000a88 <SX1276_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6858      	ldr	r0, [r3, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	2201      	movs	r2, #1
 80009e8:	4619      	mov	r1, r3
 80009ea:	f001 fd38 	bl	800245e <HAL_GPIO_WritePin>

	SX1276_hw_DelayMs(100);
 80009ee:	2064      	movs	r0, #100	; 0x64
 80009f0:	f000 f84a 	bl	8000a88 <SX1276_hw_DelayMs>
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SX1276_hw_SPICommand>:

__weak void SX1276_hw_SPICommand(SX1276_hw_t *hw, uint8_t cmd) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	460b      	mov	r3, r1
 8000a06:	70fb      	strb	r3, [r7, #3]
	SX1276_hw_SetNSS(hw, 0);
 8000a08:	2100      	movs	r1, #0
 8000a0a:	6878      	ldr	r0, [r7, #4]
 8000a0c:	f7ff ffbb 	bl	8000986 <SX1276_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	6998      	ldr	r0, [r3, #24]
 8000a14:	1cf9      	adds	r1, r7, #3
 8000a16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	f002 ff96 	bl	800394c <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000a20:	bf00      	nop
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	4618      	mov	r0, r3
 8000a28:	f003 fa83 	bl	8003f32 <HAL_SPI_GetState>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	2b01      	cmp	r3, #1
 8000a30:	d1f7      	bne.n	8000a22 <SX1276_hw_SPICommand+0x26>
		;
}
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	3708      	adds	r7, #8
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <SX1276_hw_SPIReadByte>:

__weak uint8_t SX1276_hw_SPIReadByte(SX1276_hw_t *hw) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b086      	sub	sp, #24
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	73bb      	strb	r3, [r7, #14]

	SX1276_hw_SetNSS(hw, 0);
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ff99 	bl	8000986 <SX1276_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6998      	ldr	r0, [r3, #24]
 8000a58:	f107 020e 	add.w	r2, r7, #14
 8000a5c:	f107 010f 	add.w	r1, r7, #15
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2301      	movs	r3, #1
 8000a68:	f003 f8b3 	bl	8003bd2 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000a6c:	bf00      	nop
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	699b      	ldr	r3, [r3, #24]
 8000a72:	4618      	mov	r0, r3
 8000a74:	f003 fa5d 	bl	8003f32 <HAL_SPI_GetState>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b01      	cmp	r3, #1
 8000a7c:	d1f7      	bne.n	8000a6e <SX1276_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3710      	adds	r7, #16
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <SX1276_hw_DelayMs>:

__weak void SX1276_hw_DelayMs(uint32_t msec) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f001 f965 	bl	8001d60 <HAL_Delay>
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <SX1276_hw_GetDIO0>:

__weak int SX1276_hw_GetDIO0(SX1276_hw_t *hw) {
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	b082      	sub	sp, #8
 8000aa2:	af00      	add	r7, sp, #0
 8000aa4:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	68da      	ldr	r2, [r3, #12]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	689b      	ldr	r3, [r3, #8]
 8000aae:	b29b      	uxth	r3, r3
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4610      	mov	r0, r2
 8000ab4:	f001 fcbc 	bl	8002430 <HAL_GPIO_ReadPin>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	bf0c      	ite	eq
 8000abe:	2301      	moveq	r3, #1
 8000ac0:	2300      	movne	r3, #0
 8000ac2:	b2db      	uxtb	r3, r3
}
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	3708      	adds	r7, #8
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bd80      	pop	{r7, pc}

08000acc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b088      	sub	sp, #32
 8000ad0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad2:	f107 0310 	add.w	r3, r7, #16
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae0:	4b3a      	ldr	r3, [pc, #232]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	4a39      	ldr	r2, [pc, #228]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000ae6:	f043 0310 	orr.w	r3, r3, #16
 8000aea:	6193      	str	r3, [r2, #24]
 8000aec:	4b37      	ldr	r3, [pc, #220]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000aee:	699b      	ldr	r3, [r3, #24]
 8000af0:	f003 0310 	and.w	r3, r3, #16
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af8:	4b34      	ldr	r3, [pc, #208]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a33      	ldr	r2, [pc, #204]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0320 	and.w	r3, r3, #32
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b10:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000b12:	699b      	ldr	r3, [r3, #24]
 8000b14:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000b16:	f043 0304 	orr.w	r3, r3, #4
 8000b1a:	6193      	str	r3, [r2, #24]
 8000b1c:	4b2b      	ldr	r3, [pc, #172]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000b1e:	699b      	ldr	r3, [r3, #24]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	607b      	str	r3, [r7, #4]
 8000b26:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a27      	ldr	r2, [pc, #156]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000b2e:	f043 0308 	orr.w	r3, r3, #8
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b25      	ldr	r3, [pc, #148]	; (8000bcc <MX_GPIO_Init+0x100>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0308 	and.w	r3, r3, #8
 8000b3c:	603b      	str	r3, [r7, #0]
 8000b3e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NSS_Pin|DHT_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 7104 	mov.w	r1, #528	; 0x210
 8000b46:	4822      	ldr	r0, [pc, #136]	; (8000bd0 <MX_GPIO_Init+0x104>)
 8000b48:	f001 fc89 	bl	800245e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2101      	movs	r1, #1
 8000b50:	4820      	ldr	r0, [pc, #128]	; (8000bd4 <MX_GPIO_Init+0x108>)
 8000b52:	f001 fc84 	bl	800245e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8000b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	4619      	mov	r1, r3
 8000b6a:	481b      	ldr	r0, [pc, #108]	; (8000bd8 <MX_GPIO_Init+0x10c>)
 8000b6c:	f001 fadc 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000b70:	2302      	movs	r3, #2
 8000b72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 0310 	add.w	r3, r7, #16
 8000b80:	4619      	mov	r1, r3
 8000b82:	4813      	ldr	r0, [pc, #76]	; (8000bd0 <MX_GPIO_Init+0x104>)
 8000b84:	f001 fad0 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = NSS_Pin|DHT_Pin;
 8000b88:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000b8c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0310 	add.w	r3, r7, #16
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	480b      	ldr	r0, [pc, #44]	; (8000bd0 <MX_GPIO_Init+0x104>)
 8000ba2:	f001 fac1 	bl	8002128 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0310 	add.w	r3, r7, #16
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_GPIO_Init+0x108>)
 8000bbe:	f001 fab3 	bl	8002128 <HAL_GPIO_Init>

}
 8000bc2:	bf00      	nop
 8000bc4:	3720      	adds	r7, #32
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	40010800 	.word	0x40010800
 8000bd4:	40010c00 	.word	0x40010c00
 8000bd8:	40011000 	.word	0x40011000

08000bdc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000be2:	4a13      	ldr	r2, [pc, #76]	; (8000c30 <MX_I2C1_Init+0x54>)
 8000be4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000be8:	4a12      	ldr	r2, [pc, #72]	; (8000c34 <MX_I2C1_Init+0x58>)
 8000bea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000bfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000bfe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c00:	4b0a      	ldr	r3, [pc, #40]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c06:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c12:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c18:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_I2C1_Init+0x50>)
 8000c1a:	f001 fc39 	bl	8002490 <HAL_I2C_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c24:	f000 fb07 	bl	8001236 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000008c 	.word	0x2000008c
 8000c30:	40005400 	.word	0x40005400
 8000c34:	00061a80 	.word	0x00061a80

08000c38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08a      	sub	sp, #40	; 0x28
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a1d      	ldr	r2, [pc, #116]	; (8000cc8 <HAL_I2C_MspInit+0x90>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d132      	bne.n	8000cbe <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <HAL_I2C_MspInit+0x94>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a1b      	ldr	r2, [pc, #108]	; (8000ccc <HAL_I2C_MspInit+0x94>)
 8000c5e:	f043 0308 	orr.w	r3, r3, #8
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <HAL_I2C_MspInit+0x94>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0308 	and.w	r3, r3, #8
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c76:	2312      	movs	r3, #18
 8000c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c7e:	f107 0314 	add.w	r3, r7, #20
 8000c82:	4619      	mov	r1, r3
 8000c84:	4812      	ldr	r0, [pc, #72]	; (8000cd0 <HAL_I2C_MspInit+0x98>)
 8000c86:	f001 fa4f 	bl	8002128 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000c8a:	4b12      	ldr	r3, [pc, #72]	; (8000cd4 <HAL_I2C_MspInit+0x9c>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
 8000c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c92:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	f043 0302 	orr.w	r3, r3, #2
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8000ca0:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <HAL_I2C_MspInit+0x9c>)
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ca6:	4b09      	ldr	r3, [pc, #36]	; (8000ccc <HAL_I2C_MspInit+0x94>)
 8000ca8:	69db      	ldr	r3, [r3, #28]
 8000caa:	4a08      	ldr	r2, [pc, #32]	; (8000ccc <HAL_I2C_MspInit+0x94>)
 8000cac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb0:	61d3      	str	r3, [r2, #28]
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_I2C_MspInit+0x94>)
 8000cb4:	69db      	ldr	r3, [r3, #28]
 8000cb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cba:	60fb      	str	r3, [r7, #12]
 8000cbc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	3728      	adds	r7, #40	; 0x28
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40005400 	.word	0x40005400
 8000ccc:	40021000 	.word	0x40021000
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	40010000 	.word	0x40010000

08000cd8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ce0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000ce4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000ce8:	f003 0301 	and.w	r3, r3, #1
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d013      	beq.n	8000d18 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cf0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000cf4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000cf8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d00b      	beq.n	8000d18 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d00:	e000      	b.n	8000d04 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000d02:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000d04:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d0f9      	beq.n	8000d02 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d0e:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	b2d2      	uxtb	r2, r2
 8000d16:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
    int i;
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	b29a      	uxth	r2, r3
 8000d34:	2332      	movs	r3, #50	; 0x32
 8000d36:	68b9      	ldr	r1, [r7, #8]
 8000d38:	480c      	ldr	r0, [pc, #48]	; (8000d6c <_write+0x48>)
 8000d3a:	f003 fcb5 	bl	80046a8 <HAL_UART_Transmit>
    for (i = 0; i < len; i++) {
 8000d3e:	2300      	movs	r3, #0
 8000d40:	617b      	str	r3, [r7, #20]
 8000d42:	e009      	b.n	8000d58 <_write+0x34>
        ITM_SendChar(*ptr++);
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	1c5a      	adds	r2, r3, #1
 8000d48:	60ba      	str	r2, [r7, #8]
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff ffc3 	bl	8000cd8 <ITM_SendChar>
    for (i = 0; i < len; i++) {
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	3301      	adds	r3, #1
 8000d56:	617b      	str	r3, [r7, #20]
 8000d58:	697a      	ldr	r2, [r7, #20]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	dbf1      	blt.n	8000d44 <_write+0x20>
    }
    return len;
 8000d60:	687b      	ldr	r3, [r7, #4]
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3718      	adds	r7, #24
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200008d4 	.word	0x200008d4

08000d70 <delay_us>:
int message;
int message_length;


//DHT11 센서 코드 -------------------------------------------------------------
void delay_us(uint16_t time) {
 8000d70:	b480      	push	{r7}
 8000d72:	b083      	sub	sp, #12
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000d7a:	4b08      	ldr	r3, [pc, #32]	; (8000d9c <delay_us+0x2c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim1))<time);
 8000d82:	bf00      	nop
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <delay_us+0x2c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d8a:	88fb      	ldrh	r3, [r7, #6]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d3f9      	bcc.n	8000d84 <delay_us+0x14>
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr
 8000d9c:	2000088c 	.word	0x2000088c

08000da0 <wait_pulse>:

//----- 펄스 대기 함수
int wait_pulse(int state) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000da8:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <wait_pulse+0x40>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	2200      	movs	r2, #0
 8000dae:	625a      	str	r2, [r3, #36]	; 0x24
	while (HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin) != state) {  // 설정한 상태로 변할 때까지 대기
 8000db0:	e006      	b.n	8000dc0 <wait_pulse+0x20>
		if(__HAL_TIM_GET_COUNTER(&htim1) >= 100) {              // 100us 안에 신호 들어오지 않으면 타임아웃으로 간주
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <wait_pulse+0x40>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000db8:	2b63      	cmp	r3, #99	; 0x63
 8000dba:	d901      	bls.n	8000dc0 <wait_pulse+0x20>
			return 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	e00a      	b.n	8000dd6 <wait_pulse+0x36>
	while (HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin) != state) {  // 설정한 상태로 변할 때까지 대기
 8000dc0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc4:	4807      	ldr	r0, [pc, #28]	; (8000de4 <wait_pulse+0x44>)
 8000dc6:	f001 fb33 	bl	8002430 <HAL_GPIO_ReadPin>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	461a      	mov	r2, r3
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d1ee      	bne.n	8000db2 <wait_pulse+0x12>
		}
	}
	return 1;
 8000dd4:	2301      	movs	r3, #1
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	2000088c 	.word	0x2000088c
 8000de4:	40010800 	.word	0x40010800

08000de8 <dht11_read>:

// 온도, 습도 저장하는 전역변수 선언
int Temperature = 0;
int Humidity = 0;

int dht11_read (void) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b088      	sub	sp, #32
 8000dec:	af00      	add	r7, sp, #0
	//----- Start Signal 전송
	// 포트를 출력으로 설정
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dee:	f107 030c 	add.w	r3, r7, #12
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = DHT_Pin;
 8000dfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e00:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e06:	2302      	movs	r3, #2
 8000e08:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	4619      	mov	r1, r3
 8000e10:	485c      	ldr	r0, [pc, #368]	; (8000f84 <dht11_read+0x19c>)
 8000e12:	f001 f989 	bl	8002128 <HAL_GPIO_Init>

	// Low 18ms, High 20us 펄스 생성
	HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e1c:	4859      	ldr	r0, [pc, #356]	; (8000f84 <dht11_read+0x19c>)
 8000e1e:	f001 fb1e 	bl	800245e <HAL_GPIO_WritePin>
	delay_us(18000);
 8000e22:	f244 6050 	movw	r0, #18000	; 0x4650
 8000e26:	f7ff ffa3 	bl	8000d70 <delay_us>
    HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, 1);
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e30:	4854      	ldr	r0, [pc, #336]	; (8000f84 <dht11_read+0x19c>)
 8000e32:	f001 fb14 	bl	800245e <HAL_GPIO_WritePin>
    delay_us(20);
 8000e36:	2014      	movs	r0, #20
 8000e38:	f7ff ff9a 	bl	8000d70 <delay_us>

	// 포트를 입력으로 설정
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	4619      	mov	r1, r3
 8000e4a:	484e      	ldr	r0, [pc, #312]	; (8000f84 <dht11_read+0x19c>)
 8000e4c:	f001 f96c 	bl	8002128 <HAL_GPIO_Init>

	//----- DHT11 응답 확인
	delay_us(40);  // 40us 대기
 8000e50:	2028      	movs	r0, #40	; 0x28
 8000e52:	f7ff ff8d 	bl	8000d70 <delay_us>
	if(!(HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin))) {   // DHT11 응답 체크(Low)
 8000e56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e5a:	484a      	ldr	r0, [pc, #296]	; (8000f84 <dht11_read+0x19c>)
 8000e5c:	f001 fae8 	bl	8002430 <HAL_GPIO_ReadPin>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10d      	bne.n	8000e82 <dht11_read+0x9a>
		delay_us(80);
 8000e66:	2050      	movs	r0, #80	; 0x50
 8000e68:	f7ff ff82 	bl	8000d70 <delay_us>
		if(!(HAL_GPIO_ReadPin(DHT_GPIO_Port, DHT_Pin))) // 80us뒤 DHT11 High 응답 없으면 timeout으로 간주
 8000e6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e70:	4844      	ldr	r0, [pc, #272]	; (8000f84 <dht11_read+0x19c>)
 8000e72:	f001 fadd 	bl	8002430 <HAL_GPIO_ReadPin>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d102      	bne.n	8000e82 <dht11_read+0x9a>
			return -1;
 8000e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e80:	e07c      	b.n	8000f7c <dht11_read+0x194>
	}
	if(wait_pulse(GPIO_PIN_RESET) == 0) // 데이터 전송 시작 대기
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff ff8c 	bl	8000da0 <wait_pulse>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d102      	bne.n	8000e94 <dht11_read+0xac>
		return -1; // timeout
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e92:	e073      	b.n	8000f7c <dht11_read+0x194>

	//----- DHT11 데이터 읽기
	uint8_t out[5], i, j;
	for(i = 0; i < 5; i++) {               // 습도 정수자리, 습도 소수자리, 온도 정수자리, 온도 소수자리, 체크섬 순으로 읽음
 8000e94:	2300      	movs	r3, #0
 8000e96:	77fb      	strb	r3, [r7, #31]
 8000e98:	e055      	b.n	8000f46 <dht11_read+0x15e>
		for(j = 0; j < 8; j++) {           // 하나의 데이터는 8비트로 구성되며, 최상위 비트부터 하나씩 읽기 시작함
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	77bb      	strb	r3, [r7, #30]
 8000e9e:	e04c      	b.n	8000f3a <dht11_read+0x152>
			if(!wait_pulse(GPIO_PIN_SET))  // 데이터 전송 시작까지 대기
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff ff7d 	bl	8000da0 <wait_pulse>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d102      	bne.n	8000eb2 <dht11_read+0xca>
				return -1;
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	e064      	b.n	8000f7c <dht11_read+0x194>

			delay_us(40);  // 40us 대기 후 High상태이면 1, Low상태이면 0 수신
 8000eb2:	2028      	movs	r0, #40	; 0x28
 8000eb4:	f7ff ff5c 	bl	8000d70 <delay_us>
			if(!(HAL_GPIO_ReadPin (DHT_GPIO_Port, DHT_Pin)))   // Low일 경우 0
 8000eb8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ebc:	4831      	ldr	r0, [pc, #196]	; (8000f84 <dht11_read+0x19c>)
 8000ebe:	f001 fab7 	bl	8002430 <HAL_GPIO_ReadPin>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d117      	bne.n	8000ef8 <dht11_read+0x110>
				out[i] &= ~(1<<(7-j));
 8000ec8:	7ffb      	ldrb	r3, [r7, #31]
 8000eca:	3320      	adds	r3, #32
 8000ecc:	443b      	add	r3, r7
 8000ece:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000ed2:	b25a      	sxtb	r2, r3
 8000ed4:	7fbb      	ldrb	r3, [r7, #30]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2101      	movs	r1, #1
 8000edc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee0:	b25b      	sxtb	r3, r3
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	b25b      	sxtb	r3, r3
 8000ee6:	4013      	ands	r3, r2
 8000ee8:	b25a      	sxtb	r2, r3
 8000eea:	7ffb      	ldrb	r3, [r7, #31]
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	3320      	adds	r3, #32
 8000ef0:	443b      	add	r3, r7
 8000ef2:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8000ef6:	e014      	b.n	8000f22 <dht11_read+0x13a>
			else                                              // High일 경우 1
				out[i] |= (1<<(7-j));
 8000ef8:	7ffb      	ldrb	r3, [r7, #31]
 8000efa:	3320      	adds	r3, #32
 8000efc:	443b      	add	r3, r7
 8000efe:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8000f02:	b25a      	sxtb	r2, r3
 8000f04:	7fbb      	ldrb	r3, [r7, #30]
 8000f06:	f1c3 0307 	rsb	r3, r3, #7
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b25a      	sxtb	r2, r3
 8000f16:	7ffb      	ldrb	r3, [r7, #31]
 8000f18:	b2d2      	uxtb	r2, r2
 8000f1a:	3320      	adds	r3, #32
 8000f1c:	443b      	add	r3, r7
 8000f1e:	f803 2c1c 	strb.w	r2, [r3, #-28]

			if(!wait_pulse(GPIO_PIN_RESET)) // 다음 데이터 전송 시작까지 대기
 8000f22:	2000      	movs	r0, #0
 8000f24:	f7ff ff3c 	bl	8000da0 <wait_pulse>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d102      	bne.n	8000f34 <dht11_read+0x14c>
				return -1;
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	e023      	b.n	8000f7c <dht11_read+0x194>
		for(j = 0; j < 8; j++) {           // 하나의 데이터는 8비트로 구성되며, 최상위 비트부터 하나씩 읽기 시작함
 8000f34:	7fbb      	ldrb	r3, [r7, #30]
 8000f36:	3301      	adds	r3, #1
 8000f38:	77bb      	strb	r3, [r7, #30]
 8000f3a:	7fbb      	ldrb	r3, [r7, #30]
 8000f3c:	2b07      	cmp	r3, #7
 8000f3e:	d9af      	bls.n	8000ea0 <dht11_read+0xb8>
	for(i = 0; i < 5; i++) {               // 습도 정수자리, 습도 소수자리, 온도 정수자리, 온도 소수자리, 체크섬 순으로 읽음
 8000f40:	7ffb      	ldrb	r3, [r7, #31]
 8000f42:	3301      	adds	r3, #1
 8000f44:	77fb      	strb	r3, [r7, #31]
 8000f46:	7ffb      	ldrb	r3, [r7, #31]
 8000f48:	2b04      	cmp	r3, #4
 8000f4a:	d9a6      	bls.n	8000e9a <dht11_read+0xb2>
		}
	}

	//----- 체크섬 판별
	if(out[4] != (out[0] + out[1] + out[2] + out[3]))
 8000f4c:	7a3b      	ldrb	r3, [r7, #8]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	793b      	ldrb	r3, [r7, #4]
 8000f52:	4619      	mov	r1, r3
 8000f54:	797b      	ldrb	r3, [r7, #5]
 8000f56:	440b      	add	r3, r1
 8000f58:	79b9      	ldrb	r1, [r7, #6]
 8000f5a:	440b      	add	r3, r1
 8000f5c:	79f9      	ldrb	r1, [r7, #7]
 8000f5e:	440b      	add	r3, r1
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d002      	beq.n	8000f6a <dht11_read+0x182>
		return -2;
 8000f64:	f06f 0301 	mvn.w	r3, #1
 8000f68:	e008      	b.n	8000f7c <dht11_read+0x194>

	//----- 필요 데이터 분리
	Temperature = out[2];
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <dht11_read+0x1a0>)
 8000f70:	601a      	str	r2, [r3, #0]
	Humidity = out[0];
 8000f72:	793b      	ldrb	r3, [r7, #4]
 8000f74:	461a      	mov	r2, r3
 8000f76:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <dht11_read+0x1a4>)
 8000f78:	601a      	str	r2, [r3, #0]

	return 1;
 8000f7a:	2301      	movs	r3, #1
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3720      	adds	r7, #32
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010800 	.word	0x40010800
 8000f88:	20000420 	.word	0x20000420
 8000f8c:	20000424 	.word	0x20000424

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08e      	sub	sp, #56	; 0x38
 8000f94:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f96:	f000 fe81 	bl	8001c9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f9a:	f000 f907 	bl	80011ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f9e:	f7ff fd95 	bl	8000acc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000fa2:	f000 fde5 	bl	8001b70 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000fa6:	f000 f94b 	bl	8001240 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000faa:	f7ff fe17 	bl	8000bdc <MX_I2C1_Init>
  MX_TIM1_Init();
 8000fae:	f000 fd71 	bl	8001a94 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

	  printf("Mode: Master\r\n");     // Print mode information
 8000fb2:	4863      	ldr	r0, [pc, #396]	; (8001140 <main+0x1b0>)
 8000fb4:	f004 fa74 	bl	80054a0 <puts>
	  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_RESET);  // Set MODE pin low for master mode
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fbe:	4861      	ldr	r0, [pc, #388]	; (8001144 <main+0x1b4>)
 8000fc0:	f001 fa4d 	bl	800245e <HAL_GPIO_WritePin>


      // Initialize SX1276 LoRa module
      SX1276_hw.dio0.port = DIO0_GPIO_Port;
 8000fc4:	4b60      	ldr	r3, [pc, #384]	; (8001148 <main+0x1b8>)
 8000fc6:	4a61      	ldr	r2, [pc, #388]	; (800114c <main+0x1bc>)
 8000fc8:	60da      	str	r2, [r3, #12]
      SX1276_hw.dio0.pin = DIO0_Pin;
 8000fca:	4b5f      	ldr	r3, [pc, #380]	; (8001148 <main+0x1b8>)
 8000fcc:	2202      	movs	r2, #2
 8000fce:	609a      	str	r2, [r3, #8]
      SX1276_hw.nss.port = NSS_GPIO_Port;
 8000fd0:	4b5d      	ldr	r3, [pc, #372]	; (8001148 <main+0x1b8>)
 8000fd2:	4a5e      	ldr	r2, [pc, #376]	; (800114c <main+0x1bc>)
 8000fd4:	615a      	str	r2, [r3, #20]
      SX1276_hw.nss.pin = NSS_Pin;
 8000fd6:	4b5c      	ldr	r3, [pc, #368]	; (8001148 <main+0x1b8>)
 8000fd8:	2210      	movs	r2, #16
 8000fda:	611a      	str	r2, [r3, #16]
      SX1276_hw.reset.port = RESET_GPIO_Port;
 8000fdc:	4b5a      	ldr	r3, [pc, #360]	; (8001148 <main+0x1b8>)
 8000fde:	4a5c      	ldr	r2, [pc, #368]	; (8001150 <main+0x1c0>)
 8000fe0:	605a      	str	r2, [r3, #4]
      SX1276_hw.reset.pin = RESET_Pin;
 8000fe2:	4b59      	ldr	r3, [pc, #356]	; (8001148 <main+0x1b8>)
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]
      SX1276_hw.spi = &hspi1;
 8000fe8:	4b57      	ldr	r3, [pc, #348]	; (8001148 <main+0x1b8>)
 8000fea:	4a5a      	ldr	r2, [pc, #360]	; (8001154 <main+0x1c4>)
 8000fec:	619a      	str	r2, [r3, #24]

      SX1276.hw = &SX1276_hw;
 8000fee:	4b5a      	ldr	r3, [pc, #360]	; (8001158 <main+0x1c8>)
 8000ff0:	4a55      	ldr	r2, [pc, #340]	; (8001148 <main+0x1b8>)
 8000ff2:	601a      	str	r2, [r3, #0]

      printf("Configuring LoRa module\r\n");
 8000ff4:	4859      	ldr	r0, [pc, #356]	; (800115c <main+0x1cc>)
 8000ff6:	f004 fa53 	bl	80054a0 <puts>
      SX1276_init(&SX1276, 923100000, SX1276_POWER_20DBM, SX1276_LORA_SF_7,  // Configure LoRa module
 8000ffa:	230a      	movs	r3, #10
 8000ffc:	9305      	str	r3, [sp, #20]
 8000ffe:	2300      	movs	r3, #0
 8001000:	9304      	str	r3, [sp, #16]
 8001002:	2300      	movs	r3, #0
 8001004:	9303      	str	r3, [sp, #12]
 8001006:	2307      	movs	r3, #7
 8001008:	9302      	str	r3, [sp, #8]
 800100a:	2301      	movs	r3, #1
 800100c:	9301      	str	r3, [sp, #4]
 800100e:	2300      	movs	r3, #0
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	a349      	add	r3, pc, #292	; (adr r3, 8001138 <main+0x1a8>)
 8001014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001018:	484f      	ldr	r0, [pc, #316]	; (8001158 <main+0x1c8>)
 800101a:	f7ff fc72 	bl	8000902 <SX1276_init>
                  SX1276_LORA_BW_125KHZ, SX1276_LORA_CR_4_5, SX1276_LORA_CRC_EN, 10);
      printf("Done configuring LoRaModule\r\n");
 800101e:	4850      	ldr	r0, [pc, #320]	; (8001160 <main+0x1d0>)
 8001020:	f004 fa3e 	bl	80054a0 <puts>



	  ret = SX1276_LoRaEntryTx(&SX1276, 16, 2000);     // Configure LoRa module for transmission in master mode
 8001024:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001028:	2110      	movs	r1, #16
 800102a:	484b      	ldr	r0, [pc, #300]	; (8001158 <main+0x1c8>)
 800102c:	f7ff fbd2 	bl	80007d4 <SX1276_LoRaEntryTx>
 8001030:	4603      	mov	r3, r0
 8001032:	4a4c      	ldr	r2, [pc, #304]	; (8001164 <main+0x1d4>)
 8001034:	6013      	str	r3, [r2, #0]
	  printf("Transmit Mode !\r\n");
 8001036:	484c      	ldr	r0, [pc, #304]	; (8001168 <main+0x1d8>)
 8001038:	f004 fa32 	bl	80054a0 <puts>

      SSD1306_Init();
 800103c:	f000 f980 	bl	8001340 <SSD1306_Init>
      HAL_TIM_Base_Start(&htim1);
 8001040:	484a      	ldr	r0, [pc, #296]	; (800116c <main+0x1dc>)
 8001042:	f003 f879 	bl	8004138 <HAL_TIM_Base_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		 printf("Master ...\r\n");
 8001046:	484a      	ldr	r0, [pc, #296]	; (8001170 <main+0x1e0>)
 8001048:	f004 fa2a 	bl	80054a0 <puts>
		 HAL_Delay(1000);
 800104c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001050:	f000 fe86 	bl	8001d60 <HAL_Delay>
		 printf("Connect DHT11...\r\n");
 8001054:	4847      	ldr	r0, [pc, #284]	; (8001174 <main+0x1e4>)
 8001056:	f004 fa23 	bl	80054a0 <puts>

		 if(dht11_read() == 1){
 800105a:	f7ff fec5 	bl	8000de8 <dht11_read>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	d1f0      	bne.n	8001046 <main+0xb6>
			 message_length = sprintf(buffer, "Temp : %dC, Humd : %d%%.", Temperature, Humidity);
 8001064:	4b44      	ldr	r3, [pc, #272]	; (8001178 <main+0x1e8>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b44      	ldr	r3, [pc, #272]	; (800117c <main+0x1ec>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4944      	ldr	r1, [pc, #272]	; (8001180 <main+0x1f0>)
 800106e:	4845      	ldr	r0, [pc, #276]	; (8001184 <main+0x1f4>)
 8001070:	f004 fa1e 	bl	80054b0 <siprintf>
 8001074:	4603      	mov	r3, r0
 8001076:	4a44      	ldr	r2, [pc, #272]	; (8001188 <main+0x1f8>)
 8001078:	6013      	str	r3, [r2, #0]
			 ret = SX1276_LoRaEntryTx(&SX1276, message_length, 2000);
 800107a:	4b43      	ldr	r3, [pc, #268]	; (8001188 <main+0x1f8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001084:	4619      	mov	r1, r3
 8001086:	4834      	ldr	r0, [pc, #208]	; (8001158 <main+0x1c8>)
 8001088:	f7ff fba4 	bl	80007d4 <SX1276_LoRaEntryTx>
 800108c:	4603      	mov	r3, r0
 800108e:	4a35      	ldr	r2, [pc, #212]	; (8001164 <main+0x1d4>)
 8001090:	6013      	str	r3, [r2, #0]
			 printf("Entry: %d\r\n", ret);
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <main+0x1d4>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4619      	mov	r1, r3
 8001098:	483c      	ldr	r0, [pc, #240]	; (800118c <main+0x1fc>)
 800109a:	f004 f99b 	bl	80053d4 <iprintf>

			 printf("Sending %s\r\n", buffer);
 800109e:	4939      	ldr	r1, [pc, #228]	; (8001184 <main+0x1f4>)
 80010a0:	483b      	ldr	r0, [pc, #236]	; (8001190 <main+0x200>)
 80010a2:	f004 f997 	bl	80053d4 <iprintf>
			 ret = SX1276_LoRaTxPacket(&SX1276, (uint8_t*) buffer,
 80010a6:	4b38      	ldr	r3, [pc, #224]	; (8001188 <main+0x1f8>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80010b0:	4934      	ldr	r1, [pc, #208]	; (8001184 <main+0x1f4>)
 80010b2:	4829      	ldr	r0, [pc, #164]	; (8001158 <main+0x1c8>)
 80010b4:	f7ff fbe6 	bl	8000884 <SX1276_LoRaTxPacket>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4a2a      	ldr	r2, [pc, #168]	; (8001164 <main+0x1d4>)
 80010bc:	6013      	str	r3, [r2, #0]
									   message_length, 2000);
			 printf("Transmission: %d\r\n", ret);
 80010be:	4b29      	ldr	r3, [pc, #164]	; (8001164 <main+0x1d4>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4619      	mov	r1, r3
 80010c4:	4833      	ldr	r0, [pc, #204]	; (8001194 <main+0x204>)
 80010c6:	f004 f985 	bl	80053d4 <iprintf>
			 printf("Package sent...\r\n");
 80010ca:	4833      	ldr	r0, [pc, #204]	; (8001198 <main+0x208>)
 80010cc:	f004 f9e8 	bl	80054a0 <puts>

			 sprintf(t_str, "Temp : %d C", Temperature);
 80010d0:	4b29      	ldr	r3, [pc, #164]	; (8001178 <main+0x1e8>)
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	463b      	mov	r3, r7
 80010d6:	4931      	ldr	r1, [pc, #196]	; (800119c <main+0x20c>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f004 f9e9 	bl	80054b0 <siprintf>
			 sprintf(h_str, "Humd : %d %%", Humidity);
 80010de:	4b27      	ldr	r3, [pc, #156]	; (800117c <main+0x1ec>)
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	f107 0310 	add.w	r3, r7, #16
 80010e6:	492e      	ldr	r1, [pc, #184]	; (80011a0 <main+0x210>)
 80010e8:	4618      	mov	r0, r3
 80010ea:	f004 f9e1 	bl	80054b0 <siprintf>
			 SSD1306_GotoXY(20,0);
 80010ee:	2100      	movs	r1, #0
 80010f0:	2014      	movs	r0, #20
 80010f2:	f000 fa8d 	bl	8001610 <SSD1306_GotoXY>
			 SSD1306_Puts("TRANSMIT",&Font_11x18, 1);
 80010f6:	2201      	movs	r2, #1
 80010f8:	492a      	ldr	r1, [pc, #168]	; (80011a4 <main+0x214>)
 80010fa:	482b      	ldr	r0, [pc, #172]	; (80011a8 <main+0x218>)
 80010fc:	f000 fb1e 	bl	800173c <SSD1306_Puts>
			 SSD1306_GotoXY(0,20);
 8001100:	2114      	movs	r1, #20
 8001102:	2000      	movs	r0, #0
 8001104:	f000 fa84 	bl	8001610 <SSD1306_GotoXY>
			 SSD1306_Puts(t_str,&Font_11x18, 1);
 8001108:	463b      	mov	r3, r7
 800110a:	2201      	movs	r2, #1
 800110c:	4925      	ldr	r1, [pc, #148]	; (80011a4 <main+0x214>)
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fb14 	bl	800173c <SSD1306_Puts>
			 SSD1306_GotoXY(0,40);
 8001114:	2128      	movs	r1, #40	; 0x28
 8001116:	2000      	movs	r0, #0
 8001118:	f000 fa7a 	bl	8001610 <SSD1306_GotoXY>
			 SSD1306_Puts(h_str,&Font_11x18, 1);
 800111c:	f107 0310 	add.w	r3, r7, #16
 8001120:	2201      	movs	r2, #1
 8001122:	4920      	ldr	r1, [pc, #128]	; (80011a4 <main+0x214>)
 8001124:	4618      	mov	r0, r3
 8001126:	f000 fb09 	bl	800173c <SSD1306_Puts>
			 SSD1306_UpdateScreen();
 800112a:	f000 f9cd 	bl	80014c8 <SSD1306_UpdateScreen>
			 HAL_Delay(500);
 800112e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001132:	f000 fe15 	bl	8001d60 <HAL_Delay>
		 printf("Master ...\r\n");
 8001136:	e786      	b.n	8001046 <main+0xb6>
 8001138:	37056360 	.word	0x37056360
 800113c:	00000000 	.word	0x00000000
 8001140:	0800654c 	.word	0x0800654c
 8001144:	40011000 	.word	0x40011000
 8001148:	200000e0 	.word	0x200000e0
 800114c:	40010800 	.word	0x40010800
 8001150:	40010c00 	.word	0x40010c00
 8001154:	20000428 	.word	0x20000428
 8001158:	20000100 	.word	0x20000100
 800115c:	0800655c 	.word	0x0800655c
 8001160:	08006578 	.word	0x08006578
 8001164:	20000218 	.word	0x20000218
 8001168:	08006598 	.word	0x08006598
 800116c:	2000088c 	.word	0x2000088c
 8001170:	080065ac 	.word	0x080065ac
 8001174:	080065b8 	.word	0x080065b8
 8001178:	20000420 	.word	0x20000420
 800117c:	20000424 	.word	0x20000424
 8001180:	080065cc 	.word	0x080065cc
 8001184:	2000021c 	.word	0x2000021c
 8001188:	2000041c 	.word	0x2000041c
 800118c:	080065e8 	.word	0x080065e8
 8001190:	080065f4 	.word	0x080065f4
 8001194:	08006604 	.word	0x08006604
 8001198:	08006618 	.word	0x08006618
 800119c:	0800662c 	.word	0x0800662c
 80011a0:	08006638 	.word	0x08006638
 80011a4:	20000000 	.word	0x20000000
 80011a8:	08006648 	.word	0x08006648

080011ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b090      	sub	sp, #64	; 0x40
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0318 	add.w	r3, r7, #24
 80011b6:	2228      	movs	r2, #40	; 0x28
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f004 fa70 	bl	80056a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	1d3b      	adds	r3, r7, #4
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
 80011cc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011ce:	2301      	movs	r3, #1
 80011d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80011d2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80011d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80011d8:	2300      	movs	r3, #0
 80011da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011dc:	2301      	movs	r3, #1
 80011de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80011ea:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f0:	f107 0318 	add.w	r3, r7, #24
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 ff15 	bl	8003024 <HAL_RCC_OscConfig>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001200:	f000 f819 	bl	8001236 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001204:	230f      	movs	r3, #15
 8001206:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	2302      	movs	r3, #2
 800120a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001210:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001214:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800121a:	1d3b      	adds	r3, r7, #4
 800121c:	2102      	movs	r1, #2
 800121e:	4618      	mov	r0, r3
 8001220:	f002 f982 	bl	8003528 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800122a:	f000 f804 	bl	8001236 <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3740      	adds	r7, #64	; 0x40
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800123a:	b672      	cpsid	i
}
 800123c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800123e:	e7fe      	b.n	800123e <Error_Handler+0x8>

08001240 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001246:	4a18      	ldr	r2, [pc, #96]	; (80012a8 <MX_SPI1_Init+0x68>)
 8001248:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_SPI1_Init+0x64>)
 800124c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001250:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001254:	2200      	movs	r2, #0
 8001256:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_SPI1_Init+0x64>)
 800125a:	2200      	movs	r2, #0
 800125c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001264:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001266:	2200      	movs	r2, #0
 8001268:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800126a:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <MX_SPI1_Init+0x64>)
 800126c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001270:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001274:	2218      	movs	r2, #24
 8001276:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001278:	4b0a      	ldr	r3, [pc, #40]	; (80012a4 <MX_SPI1_Init+0x64>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <MX_SPI1_Init+0x64>)
 800128c:	220a      	movs	r2, #10
 800128e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_SPI1_Init+0x64>)
 8001292:	f002 fad7 	bl	8003844 <HAL_SPI_Init>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800129c:	f7ff ffcb 	bl	8001236 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000428 	.word	0x20000428
 80012a8:	40013000 	.word	0x40013000

080012ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b088      	sub	sp, #32
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b4:	f107 0310 	add.w	r3, r7, #16
 80012b8:	2200      	movs	r2, #0
 80012ba:	601a      	str	r2, [r3, #0]
 80012bc:	605a      	str	r2, [r3, #4]
 80012be:	609a      	str	r2, [r3, #8]
 80012c0:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_SPI_MspInit+0x88>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d12f      	bne.n	800132c <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012cc:	4b1a      	ldr	r3, [pc, #104]	; (8001338 <HAL_SPI_MspInit+0x8c>)
 80012ce:	699b      	ldr	r3, [r3, #24]
 80012d0:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_SPI_MspInit+0x8c>)
 80012d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012d6:	6193      	str	r3, [r2, #24]
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <HAL_SPI_MspInit+0x8c>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012e0:	60fb      	str	r3, [r7, #12]
 80012e2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <HAL_SPI_MspInit+0x8c>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	4a13      	ldr	r2, [pc, #76]	; (8001338 <HAL_SPI_MspInit+0x8c>)
 80012ea:	f043 0304 	orr.w	r3, r3, #4
 80012ee:	6193      	str	r3, [r2, #24]
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <HAL_SPI_MspInit+0x8c>)
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	f003 0304 	and.w	r3, r3, #4
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012fc:	23a0      	movs	r3, #160	; 0xa0
 80012fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001300:	2302      	movs	r3, #2
 8001302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4619      	mov	r1, r3
 800130e:	480b      	ldr	r0, [pc, #44]	; (800133c <HAL_SPI_MspInit+0x90>)
 8001310:	f000 ff0a 	bl	8002128 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001314:	2340      	movs	r3, #64	; 0x40
 8001316:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001318:	2300      	movs	r3, #0
 800131a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001320:	f107 0310 	add.w	r3, r7, #16
 8001324:	4619      	mov	r1, r3
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <HAL_SPI_MspInit+0x90>)
 8001328:	f000 fefe 	bl	8002128 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800132c:	bf00      	nop
 800132e:	3720      	adds	r7, #32
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	40013000 	.word	0x40013000
 8001338:	40021000 	.word	0x40021000
 800133c:	40010800 	.word	0x40010800

08001340 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001346:	f000 fa1f 	bl	8001788 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800134a:	f644 6320 	movw	r3, #20000	; 0x4e20
 800134e:	2201      	movs	r2, #1
 8001350:	2178      	movs	r1, #120	; 0x78
 8001352:	485b      	ldr	r0, [pc, #364]	; (80014c0 <SSD1306_Init+0x180>)
 8001354:	f001 fade 	bl	8002914 <HAL_I2C_IsDeviceReady>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800135e:	2300      	movs	r3, #0
 8001360:	e0a9      	b.n	80014b6 <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 8001362:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001366:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001368:	e002      	b.n	8001370 <SSD1306_Init+0x30>
		p--;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3b01      	subs	r3, #1
 800136e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f9      	bne.n	800136a <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001376:	22ae      	movs	r2, #174	; 0xae
 8001378:	2100      	movs	r1, #0
 800137a:	2078      	movs	r0, #120	; 0x78
 800137c:	f000 fa7e 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 8001380:	2220      	movs	r2, #32
 8001382:	2100      	movs	r1, #0
 8001384:	2078      	movs	r0, #120	; 0x78
 8001386:	f000 fa79 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800138a:	2210      	movs	r2, #16
 800138c:	2100      	movs	r1, #0
 800138e:	2078      	movs	r0, #120	; 0x78
 8001390:	f000 fa74 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001394:	22b0      	movs	r2, #176	; 0xb0
 8001396:	2100      	movs	r1, #0
 8001398:	2078      	movs	r0, #120	; 0x78
 800139a:	f000 fa6f 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800139e:	22c8      	movs	r2, #200	; 0xc8
 80013a0:	2100      	movs	r1, #0
 80013a2:	2078      	movs	r0, #120	; 0x78
 80013a4:	f000 fa6a 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80013a8:	2200      	movs	r2, #0
 80013aa:	2100      	movs	r1, #0
 80013ac:	2078      	movs	r0, #120	; 0x78
 80013ae:	f000 fa65 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80013b2:	2210      	movs	r2, #16
 80013b4:	2100      	movs	r1, #0
 80013b6:	2078      	movs	r0, #120	; 0x78
 80013b8:	f000 fa60 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	2100      	movs	r1, #0
 80013c0:	2078      	movs	r0, #120	; 0x78
 80013c2:	f000 fa5b 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80013c6:	2281      	movs	r2, #129	; 0x81
 80013c8:	2100      	movs	r1, #0
 80013ca:	2078      	movs	r0, #120	; 0x78
 80013cc:	f000 fa56 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80013d0:	22ff      	movs	r2, #255	; 0xff
 80013d2:	2100      	movs	r1, #0
 80013d4:	2078      	movs	r0, #120	; 0x78
 80013d6:	f000 fa51 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80013da:	22a1      	movs	r2, #161	; 0xa1
 80013dc:	2100      	movs	r1, #0
 80013de:	2078      	movs	r0, #120	; 0x78
 80013e0:	f000 fa4c 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80013e4:	22a6      	movs	r2, #166	; 0xa6
 80013e6:	2100      	movs	r1, #0
 80013e8:	2078      	movs	r0, #120	; 0x78
 80013ea:	f000 fa47 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80013ee:	22a8      	movs	r2, #168	; 0xa8
 80013f0:	2100      	movs	r1, #0
 80013f2:	2078      	movs	r0, #120	; 0x78
 80013f4:	f000 fa42 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80013f8:	223f      	movs	r2, #63	; 0x3f
 80013fa:	2100      	movs	r1, #0
 80013fc:	2078      	movs	r0, #120	; 0x78
 80013fe:	f000 fa3d 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001402:	22a4      	movs	r2, #164	; 0xa4
 8001404:	2100      	movs	r1, #0
 8001406:	2078      	movs	r0, #120	; 0x78
 8001408:	f000 fa38 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 800140c:	22d3      	movs	r2, #211	; 0xd3
 800140e:	2100      	movs	r1, #0
 8001410:	2078      	movs	r0, #120	; 0x78
 8001412:	f000 fa33 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	2078      	movs	r0, #120	; 0x78
 800141c:	f000 fa2e 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001420:	22d5      	movs	r2, #213	; 0xd5
 8001422:	2100      	movs	r1, #0
 8001424:	2078      	movs	r0, #120	; 0x78
 8001426:	f000 fa29 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800142a:	22f0      	movs	r2, #240	; 0xf0
 800142c:	2100      	movs	r1, #0
 800142e:	2078      	movs	r0, #120	; 0x78
 8001430:	f000 fa24 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001434:	22d9      	movs	r2, #217	; 0xd9
 8001436:	2100      	movs	r1, #0
 8001438:	2078      	movs	r0, #120	; 0x78
 800143a:	f000 fa1f 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800143e:	2222      	movs	r2, #34	; 0x22
 8001440:	2100      	movs	r1, #0
 8001442:	2078      	movs	r0, #120	; 0x78
 8001444:	f000 fa1a 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001448:	22da      	movs	r2, #218	; 0xda
 800144a:	2100      	movs	r1, #0
 800144c:	2078      	movs	r0, #120	; 0x78
 800144e:	f000 fa15 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001452:	2212      	movs	r2, #18
 8001454:	2100      	movs	r1, #0
 8001456:	2078      	movs	r0, #120	; 0x78
 8001458:	f000 fa10 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800145c:	22db      	movs	r2, #219	; 0xdb
 800145e:	2100      	movs	r1, #0
 8001460:	2078      	movs	r0, #120	; 0x78
 8001462:	f000 fa0b 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001466:	2220      	movs	r2, #32
 8001468:	2100      	movs	r1, #0
 800146a:	2078      	movs	r0, #120	; 0x78
 800146c:	f000 fa06 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001470:	228d      	movs	r2, #141	; 0x8d
 8001472:	2100      	movs	r1, #0
 8001474:	2078      	movs	r0, #120	; 0x78
 8001476:	f000 fa01 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800147a:	2214      	movs	r2, #20
 800147c:	2100      	movs	r1, #0
 800147e:	2078      	movs	r0, #120	; 0x78
 8001480:	f000 f9fc 	bl	800187c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001484:	22af      	movs	r2, #175	; 0xaf
 8001486:	2100      	movs	r1, #0
 8001488:	2078      	movs	r0, #120	; 0x78
 800148a:	f000 f9f7 	bl	800187c <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800148e:	222e      	movs	r2, #46	; 0x2e
 8001490:	2100      	movs	r1, #0
 8001492:	2078      	movs	r0, #120	; 0x78
 8001494:	f000 f9f2 	bl	800187c <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001498:	2000      	movs	r0, #0
 800149a:	f000 f843 	bl	8001524 <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 800149e:	f000 f813 	bl	80014c8 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <SSD1306_Init+0x184>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <SSD1306_Init+0x184>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 80014ae:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <SSD1306_Init+0x184>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 80014b4:	2301      	movs	r3, #1
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	2000008c 	.word	0x2000008c
 80014c4:	20000880 	.word	0x20000880

080014c8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 80014ce:	2300      	movs	r3, #0
 80014d0:	71fb      	strb	r3, [r7, #7]
 80014d2:	e01d      	b.n	8001510 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	3b50      	subs	r3, #80	; 0x50
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	461a      	mov	r2, r3
 80014dc:	2100      	movs	r1, #0
 80014de:	2078      	movs	r0, #120	; 0x78
 80014e0:	f000 f9cc 	bl	800187c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2100      	movs	r1, #0
 80014e8:	2078      	movs	r0, #120	; 0x78
 80014ea:	f000 f9c7 	bl	800187c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80014ee:	2210      	movs	r2, #16
 80014f0:	2100      	movs	r1, #0
 80014f2:	2078      	movs	r0, #120	; 0x78
 80014f4:	f000 f9c2 	bl	800187c <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80014f8:	79fb      	ldrb	r3, [r7, #7]
 80014fa:	01db      	lsls	r3, r3, #7
 80014fc:	4a08      	ldr	r2, [pc, #32]	; (8001520 <SSD1306_UpdateScreen+0x58>)
 80014fe:	441a      	add	r2, r3
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	2140      	movs	r1, #64	; 0x40
 8001504:	2078      	movs	r0, #120	; 0x78
 8001506:	f000 f953 	bl	80017b0 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	3301      	adds	r3, #1
 800150e:	71fb      	strb	r3, [r7, #7]
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	2b07      	cmp	r3, #7
 8001514:	d9de      	bls.n	80014d4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001516:	bf00      	nop
 8001518:	bf00      	nop
 800151a:	3708      	adds	r7, #8
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000480 	.word	0x20000480

08001524 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d101      	bne.n	8001538 <SSD1306_Fill+0x14>
 8001534:	2300      	movs	r3, #0
 8001536:	e000      	b.n	800153a <SSD1306_Fill+0x16>
 8001538:	23ff      	movs	r3, #255	; 0xff
 800153a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800153e:	4619      	mov	r1, r3
 8001540:	4803      	ldr	r0, [pc, #12]	; (8001550 <SSD1306_Fill+0x2c>)
 8001542:	f004 f8ad 	bl	80056a0 <memset>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}
 800154e:	bf00      	nop
 8001550:	20000480 	.word	0x20000480

08001554 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	4603      	mov	r3, r0
 800155c:	80fb      	strh	r3, [r7, #6]
 800155e:	460b      	mov	r3, r1
 8001560:	80bb      	strh	r3, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	70fb      	strb	r3, [r7, #3]
	if (
 8001566:	88fb      	ldrh	r3, [r7, #6]
 8001568:	2b7f      	cmp	r3, #127	; 0x7f
 800156a:	d848      	bhi.n	80015fe <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800156c:	88bb      	ldrh	r3, [r7, #4]
 800156e:	2b3f      	cmp	r3, #63	; 0x3f
 8001570:	d845      	bhi.n	80015fe <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001572:	4b25      	ldr	r3, [pc, #148]	; (8001608 <SSD1306_DrawPixel+0xb4>)
 8001574:	791b      	ldrb	r3, [r3, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d006      	beq.n	8001588 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800157a:	78fb      	ldrb	r3, [r7, #3]
 800157c:	2b00      	cmp	r3, #0
 800157e:	bf0c      	ite	eq
 8001580:	2301      	moveq	r3, #1
 8001582:	2300      	movne	r3, #0
 8001584:	b2db      	uxtb	r3, r3
 8001586:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001588:	78fb      	ldrb	r3, [r7, #3]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d11a      	bne.n	80015c4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	88bb      	ldrh	r3, [r7, #4]
 8001592:	08db      	lsrs	r3, r3, #3
 8001594:	b298      	uxth	r0, r3
 8001596:	4603      	mov	r3, r0
 8001598:	01db      	lsls	r3, r3, #7
 800159a:	4413      	add	r3, r2
 800159c:	4a1b      	ldr	r2, [pc, #108]	; (800160c <SSD1306_DrawPixel+0xb8>)
 800159e:	5cd3      	ldrb	r3, [r2, r3]
 80015a0:	b25a      	sxtb	r2, r3
 80015a2:	88bb      	ldrh	r3, [r7, #4]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	2101      	movs	r1, #1
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	b25b      	sxtb	r3, r3
 80015b0:	4313      	orrs	r3, r2
 80015b2:	b259      	sxtb	r1, r3
 80015b4:	88fa      	ldrh	r2, [r7, #6]
 80015b6:	4603      	mov	r3, r0
 80015b8:	01db      	lsls	r3, r3, #7
 80015ba:	4413      	add	r3, r2
 80015bc:	b2c9      	uxtb	r1, r1
 80015be:	4a13      	ldr	r2, [pc, #76]	; (800160c <SSD1306_DrawPixel+0xb8>)
 80015c0:	54d1      	strb	r1, [r2, r3]
 80015c2:	e01d      	b.n	8001600 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80015c4:	88fa      	ldrh	r2, [r7, #6]
 80015c6:	88bb      	ldrh	r3, [r7, #4]
 80015c8:	08db      	lsrs	r3, r3, #3
 80015ca:	b298      	uxth	r0, r3
 80015cc:	4603      	mov	r3, r0
 80015ce:	01db      	lsls	r3, r3, #7
 80015d0:	4413      	add	r3, r2
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <SSD1306_DrawPixel+0xb8>)
 80015d4:	5cd3      	ldrb	r3, [r2, r3]
 80015d6:	b25a      	sxtb	r2, r3
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	f003 0307 	and.w	r3, r3, #7
 80015de:	2101      	movs	r1, #1
 80015e0:	fa01 f303 	lsl.w	r3, r1, r3
 80015e4:	b25b      	sxtb	r3, r3
 80015e6:	43db      	mvns	r3, r3
 80015e8:	b25b      	sxtb	r3, r3
 80015ea:	4013      	ands	r3, r2
 80015ec:	b259      	sxtb	r1, r3
 80015ee:	88fa      	ldrh	r2, [r7, #6]
 80015f0:	4603      	mov	r3, r0
 80015f2:	01db      	lsls	r3, r3, #7
 80015f4:	4413      	add	r3, r2
 80015f6:	b2c9      	uxtb	r1, r1
 80015f8:	4a04      	ldr	r2, [pc, #16]	; (800160c <SSD1306_DrawPixel+0xb8>)
 80015fa:	54d1      	strb	r1, [r2, r3]
 80015fc:	e000      	b.n	8001600 <SSD1306_DrawPixel+0xac>
		return;
 80015fe:	bf00      	nop
	}
}
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	20000880 	.word	0x20000880
 800160c:	20000480 	.word	0x20000480

08001610 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001610:	b480      	push	{r7}
 8001612:	b083      	sub	sp, #12
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	460a      	mov	r2, r1
 800161a:	80fb      	strh	r3, [r7, #6]
 800161c:	4613      	mov	r3, r2
 800161e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001620:	4a05      	ldr	r2, [pc, #20]	; (8001638 <SSD1306_GotoXY+0x28>)
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001626:	4a04      	ldr	r2, [pc, #16]	; (8001638 <SSD1306_GotoXY+0x28>)
 8001628:	88bb      	ldrh	r3, [r7, #4]
 800162a:	8053      	strh	r3, [r2, #2]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	20000880 	.word	0x20000880

0800163c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
 8001648:	4613      	mov	r3, r2
 800164a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800164c:	4b3a      	ldr	r3, [pc, #232]	; (8001738 <SSD1306_Putc+0xfc>)
 800164e:	881b      	ldrh	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
	if (
 8001658:	2b7f      	cmp	r3, #127	; 0x7f
 800165a:	dc07      	bgt.n	800166c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <SSD1306_Putc+0xfc>)
 800165e:	885b      	ldrh	r3, [r3, #2]
 8001660:	461a      	mov	r2, r3
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	785b      	ldrb	r3, [r3, #1]
 8001666:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001668:	2b3f      	cmp	r3, #63	; 0x3f
 800166a:	dd01      	ble.n	8001670 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800166c:	2300      	movs	r3, #0
 800166e:	e05e      	b.n	800172e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
 8001674:	e04b      	b.n	800170e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	3b20      	subs	r3, #32
 800167e:	6839      	ldr	r1, [r7, #0]
 8001680:	7849      	ldrb	r1, [r1, #1]
 8001682:	fb01 f303 	mul.w	r3, r1, r3
 8001686:	4619      	mov	r1, r3
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	440b      	add	r3, r1
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	4413      	add	r3, r2
 8001690:	881b      	ldrh	r3, [r3, #0]
 8001692:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001694:	2300      	movs	r3, #0
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	e030      	b.n	80016fc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800169a:	68fa      	ldr	r2, [r7, #12]
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d010      	beq.n	80016cc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80016aa:	4b23      	ldr	r3, [pc, #140]	; (8001738 <SSD1306_Putc+0xfc>)
 80016ac:	881a      	ldrh	r2, [r3, #0]
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	4413      	add	r3, r2
 80016b4:	b298      	uxth	r0, r3
 80016b6:	4b20      	ldr	r3, [pc, #128]	; (8001738 <SSD1306_Putc+0xfc>)
 80016b8:	885a      	ldrh	r2, [r3, #2]
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	79ba      	ldrb	r2, [r7, #6]
 80016c4:	4619      	mov	r1, r3
 80016c6:	f7ff ff45 	bl	8001554 <SSD1306_DrawPixel>
 80016ca:	e014      	b.n	80016f6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80016cc:	4b1a      	ldr	r3, [pc, #104]	; (8001738 <SSD1306_Putc+0xfc>)
 80016ce:	881a      	ldrh	r2, [r3, #0]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	b29b      	uxth	r3, r3
 80016d4:	4413      	add	r3, r2
 80016d6:	b298      	uxth	r0, r3
 80016d8:	4b17      	ldr	r3, [pc, #92]	; (8001738 <SSD1306_Putc+0xfc>)
 80016da:	885a      	ldrh	r2, [r3, #2]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	b29b      	uxth	r3, r3
 80016e0:	4413      	add	r3, r2
 80016e2:	b299      	uxth	r1, r3
 80016e4:	79bb      	ldrb	r3, [r7, #6]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	bf0c      	ite	eq
 80016ea:	2301      	moveq	r3, #1
 80016ec:	2300      	movne	r3, #0
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	f7ff ff2f 	bl	8001554 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	3301      	adds	r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	461a      	mov	r2, r3
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4293      	cmp	r3, r2
 8001706:	d3c8      	bcc.n	800169a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	785b      	ldrb	r3, [r3, #1]
 8001712:	461a      	mov	r2, r3
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	4293      	cmp	r3, r2
 8001718:	d3ad      	bcc.n	8001676 <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800171a:	4b07      	ldr	r3, [pc, #28]	; (8001738 <SSD1306_Putc+0xfc>)
 800171c:	881a      	ldrh	r2, [r3, #0]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	b29b      	uxth	r3, r3
 8001724:	4413      	add	r3, r2
 8001726:	b29a      	uxth	r2, r3
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <SSD1306_Putc+0xfc>)
 800172a:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 800172c:	79fb      	ldrb	r3, [r7, #7]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	20000880 	.word	0x20000880

0800173c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	60f8      	str	r0, [r7, #12]
 8001744:	60b9      	str	r1, [r7, #8]
 8001746:	4613      	mov	r3, r2
 8001748:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800174a:	e012      	b.n	8001772 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	68b9      	ldr	r1, [r7, #8]
 8001754:	4618      	mov	r0, r3
 8001756:	f7ff ff71 	bl	800163c <SSD1306_Putc>
 800175a:	4603      	mov	r3, r0
 800175c:	461a      	mov	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	429a      	cmp	r2, r3
 8001764:	d002      	beq.n	800176c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	e008      	b.n	800177e <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	3301      	adds	r3, #1
 8001770:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d1e8      	bne.n	800174c <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	781b      	ldrb	r3, [r3, #0]
}
 800177e:	4618      	mov	r0, r3
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001788:	b480      	push	{r7}
 800178a:	b083      	sub	sp, #12
 800178c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 800178e:	4b07      	ldr	r3, [pc, #28]	; (80017ac <ssd1306_I2C_Init+0x24>)
 8001790:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001792:	e002      	b.n	800179a <ssd1306_I2C_Init+0x12>
		p--;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	607b      	str	r3, [r7, #4]
	while(p>0)
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d1f9      	bne.n	8001794 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr
 80017ac:	0003d090 	.word	0x0003d090

080017b0 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b0c7      	sub	sp, #284	; 0x11c
 80017b4:	af02      	add	r7, sp, #8
 80017b6:	4604      	mov	r4, r0
 80017b8:	4608      	mov	r0, r1
 80017ba:	f507 7188 	add.w	r1, r7, #272	; 0x110
 80017be:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 80017c2:	600a      	str	r2, [r1, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017ca:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80017ce:	4622      	mov	r2, r4
 80017d0:	701a      	strb	r2, [r3, #0]
 80017d2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017d6:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 80017da:	4602      	mov	r2, r0
 80017dc:	701a      	strb	r2, [r3, #0]
 80017de:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80017e6:	460a      	mov	r2, r1
 80017e8:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80017ea:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80017ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80017f2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80017f6:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80017fe:	2300      	movs	r3, #0
 8001800:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001804:	e015      	b.n	8001832 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001806:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800180a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800180e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	441a      	add	r2, r3
 8001816:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800181a:	3301      	adds	r3, #1
 800181c:	7811      	ldrb	r1, [r2, #0]
 800181e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001822:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001826:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001828:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800182c:	3301      	adds	r3, #1
 800182e:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001832:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001836:	b29b      	uxth	r3, r3
 8001838:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800183c:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001840:	8812      	ldrh	r2, [r2, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d8df      	bhi.n	8001806 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001846:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800184a:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	b299      	uxth	r1, r3
 8001852:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001856:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800185a:	881b      	ldrh	r3, [r3, #0]
 800185c:	3301      	adds	r3, #1
 800185e:	b29b      	uxth	r3, r3
 8001860:	f107 020c 	add.w	r2, r7, #12
 8001864:	200a      	movs	r0, #10
 8001866:	9000      	str	r0, [sp, #0]
 8001868:	4803      	ldr	r0, [pc, #12]	; (8001878 <ssd1306_I2C_WriteMulti+0xc8>)
 800186a:	f000 ff55 	bl	8002718 <HAL_I2C_Master_Transmit>
}
 800186e:	bf00      	nop
 8001870:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001874:	46bd      	mov	sp, r7
 8001876:	bd90      	pop	{r4, r7, pc}
 8001878:	2000008c 	.word	0x2000008c

0800187c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 800187c:	b580      	push	{r7, lr}
 800187e:	b086      	sub	sp, #24
 8001880:	af02      	add	r7, sp, #8
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
 8001886:	460b      	mov	r3, r1
 8001888:	71bb      	strb	r3, [r7, #6]
 800188a:	4613      	mov	r3, r2
 800188c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 800188e:	79bb      	ldrb	r3, [r7, #6]
 8001890:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001892:	797b      	ldrb	r3, [r7, #5]
 8001894:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	b299      	uxth	r1, r3
 800189a:	f107 020c 	add.w	r2, r7, #12
 800189e:	230a      	movs	r3, #10
 80018a0:	9300      	str	r3, [sp, #0]
 80018a2:	2302      	movs	r3, #2
 80018a4:	4803      	ldr	r0, [pc, #12]	; (80018b4 <ssd1306_I2C_Write+0x38>)
 80018a6:	f000 ff37 	bl	8002718 <HAL_I2C_Master_Transmit>
}
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	2000008c 	.word	0x2000008c

080018b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <HAL_MspInit+0x5c>)
 80018c0:	699b      	ldr	r3, [r3, #24]
 80018c2:	4a14      	ldr	r2, [pc, #80]	; (8001914 <HAL_MspInit+0x5c>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	6193      	str	r3, [r2, #24]
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_MspInit+0x5c>)
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_MspInit+0x5c>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	4a0e      	ldr	r2, [pc, #56]	; (8001914 <HAL_MspInit+0x5c>)
 80018dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e0:	61d3      	str	r3, [r2, #28]
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <HAL_MspInit+0x5c>)
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018ee:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <HAL_MspInit+0x60>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <HAL_MspInit+0x60>)
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000
 8001918:	40010000 	.word	0x40010000

0800191c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001920:	e7fe      	b.n	8001920 <NMI_Handler+0x4>

08001922 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001922:	b480      	push	{r7}
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001926:	e7fe      	b.n	8001926 <HardFault_Handler+0x4>

08001928 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800192c:	e7fe      	b.n	800192c <MemManage_Handler+0x4>

0800192e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800192e:	b480      	push	{r7}
 8001930:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001932:	e7fe      	b.n	8001932 <BusFault_Handler+0x4>

08001934 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <UsageFault_Handler+0x4>

0800193a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800193a:	b480      	push	{r7}
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800193e:	bf00      	nop
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr

08001946 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001946:	b480      	push	{r7}
 8001948:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr

08001952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001952:	b480      	push	{r7}
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001956:	bf00      	nop
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001962:	f000 f9e1 	bl	8001d28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001970:	4802      	ldr	r0, [pc, #8]	; (800197c <USART2_IRQHandler+0x10>)
 8001972:	f002 ff1d 	bl	80047b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	200008d4 	.word	0x200008d4

08001980 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	e00a      	b.n	80019a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001992:	f3af 8000 	nop.w
 8001996:	4601      	mov	r1, r0
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	1c5a      	adds	r2, r3, #1
 800199c:	60ba      	str	r2, [r7, #8]
 800199e:	b2ca      	uxtb	r2, r1
 80019a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	3301      	adds	r3, #1
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697a      	ldr	r2, [r7, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	dbf0      	blt.n	8001992 <_read+0x12>
  }

  return len;
 80019b0:	687b      	ldr	r3, [r7, #4]
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <_close>:
  }
  return len;
}

int _close(int file)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019e0:	605a      	str	r2, [r3, #4]
  return 0;
 80019e2:	2300      	movs	r3, #0
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	370c      	adds	r7, #12
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bc80      	pop	{r7}
 80019ec:	4770      	bx	lr

080019ee <_isatty>:

int _isatty(int file)
{
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019f6:	2301      	movs	r3, #1
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bc80      	pop	{r7}
 8001a00:	4770      	bx	lr

08001a02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a02:	b480      	push	{r7}
 8001a04:	b085      	sub	sp, #20
 8001a06:	af00      	add	r7, sp, #0
 8001a08:	60f8      	str	r0, [r7, #12]
 8001a0a:	60b9      	str	r1, [r7, #8]
 8001a0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a0e:	2300      	movs	r3, #0
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	3714      	adds	r7, #20
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bc80      	pop	{r7}
 8001a18:	4770      	bx	lr
	...

08001a1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b086      	sub	sp, #24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a24:	4a14      	ldr	r2, [pc, #80]	; (8001a78 <_sbrk+0x5c>)
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <_sbrk+0x60>)
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a30:	4b13      	ldr	r3, [pc, #76]	; (8001a80 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d102      	bne.n	8001a3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <_sbrk+0x64>)
 8001a3a:	4a12      	ldr	r2, [pc, #72]	; (8001a84 <_sbrk+0x68>)
 8001a3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <_sbrk+0x64>)
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4413      	add	r3, r2
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d207      	bcs.n	8001a5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a4c:	f003 fe76 	bl	800573c <__errno>
 8001a50:	4603      	mov	r3, r0
 8001a52:	220c      	movs	r2, #12
 8001a54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a56:	f04f 33ff 	mov.w	r3, #4294967295
 8001a5a:	e009      	b.n	8001a70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a5c:	4b08      	ldr	r3, [pc, #32]	; (8001a80 <_sbrk+0x64>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a62:	4b07      	ldr	r3, [pc, #28]	; (8001a80 <_sbrk+0x64>)
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4413      	add	r3, r2
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <_sbrk+0x64>)
 8001a6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20005000 	.word	0x20005000
 8001a7c:	00000400 	.word	0x00000400
 8001a80:	20000888 	.word	0x20000888
 8001a84:	20000a70 	.word	0x20000a70

08001a88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr

08001a94 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa8:	463b      	mov	r3, r7
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
 8001aae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ab0:	4b1e      	ldr	r3, [pc, #120]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ab2:	4a1f      	ldr	r2, [pc, #124]	; (8001b30 <MX_TIM1_Init+0x9c>)
 8001ab4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001ab6:	4b1d      	ldr	r3, [pc, #116]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ab8:	2247      	movs	r2, #71	; 0x47
 8001aba:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ac2:	4b1a      	ldr	r3, [pc, #104]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b18      	ldr	r3, [pc, #96]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ad0:	4b16      	ldr	r3, [pc, #88]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad6:	4b15      	ldr	r3, [pc, #84]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001adc:	4813      	ldr	r0, [pc, #76]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001ade:	f002 fadb 	bl	8004098 <HAL_TIM_Base_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001ae8:	f7ff fba5 	bl	8001236 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001af0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001af2:	f107 0308 	add.w	r3, r7, #8
 8001af6:	4619      	mov	r1, r3
 8001af8:	480c      	ldr	r0, [pc, #48]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001afa:	f002 fb67 	bl	80041cc <HAL_TIM_ConfigClockSource>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001b04:	f7ff fb97 	bl	8001236 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	4805      	ldr	r0, [pc, #20]	; (8001b2c <MX_TIM1_Init+0x98>)
 8001b16:	f002 fd19 	bl	800454c <HAL_TIMEx_MasterConfigSynchronization>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001b20:	f7ff fb89 	bl	8001236 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b24:	bf00      	nop
 8001b26:	3718      	adds	r7, #24
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	2000088c 	.word	0x2000088c
 8001b30:	40012c00 	.word	0x40012c00

08001b34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_TIM_Base_MspInit+0x34>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d10b      	bne.n	8001b5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b46:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <HAL_TIM_Base_MspInit+0x38>)
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	4a08      	ldr	r2, [pc, #32]	; (8001b6c <HAL_TIM_Base_MspInit+0x38>)
 8001b4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b50:	6193      	str	r3, [r2, #24]
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_TIM_Base_MspInit+0x38>)
 8001b54:	699b      	ldr	r3, [r3, #24]
 8001b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b5a:	60fb      	str	r3, [r7, #12]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001b5e:	bf00      	nop
 8001b60:	3714      	adds	r7, #20
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bc80      	pop	{r7}
 8001b66:	4770      	bx	lr
 8001b68:	40012c00 	.word	0x40012c00
 8001b6c:	40021000 	.word	0x40021000

08001b70 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <MX_USART2_UART_Init+0x50>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_USART2_UART_Init+0x4c>)
 8001ba8:	f002 fd2e 	bl	8004608 <HAL_UART_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bb2:	f7ff fb40 	bl	8001236 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	200008d4 	.word	0x200008d4
 8001bc0:	40004400 	.word	0x40004400

08001bc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a19      	ldr	r2, [pc, #100]	; (8001c44 <HAL_UART_MspInit+0x80>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d12b      	bne.n	8001c3c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_UART_MspInit+0x84>)
 8001be6:	69db      	ldr	r3, [r3, #28]
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_UART_MspInit+0x84>)
 8001bea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bee:	61d3      	str	r3, [r2, #28]
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_UART_MspInit+0x84>)
 8001bf2:	69db      	ldr	r3, [r3, #28]
 8001bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_UART_MspInit+0x84>)
 8001bfe:	699b      	ldr	r3, [r3, #24]
 8001c00:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_UART_MspInit+0x84>)
 8001c02:	f043 0304 	orr.w	r3, r3, #4
 8001c06:	6193      	str	r3, [r2, #24]
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_UART_MspInit+0x84>)
 8001c0a:	699b      	ldr	r3, [r3, #24]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c14:	230c      	movs	r3, #12
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1c:	2302      	movs	r3, #2
 8001c1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <HAL_UART_MspInit+0x88>)
 8001c28:	f000 fa7e 	bl	8002128 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2026      	movs	r0, #38	; 0x26
 8001c32:	f000 f990 	bl	8001f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c36:	2026      	movs	r0, #38	; 0x26
 8001c38:	f000 f9a9 	bl	8001f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40004400 	.word	0x40004400
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010800 	.word	0x40010800

08001c50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c50:	f7ff ff1a 	bl	8001a88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c56:	490c      	ldr	r1, [pc, #48]	; (8001c88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c58:	4a0c      	ldr	r2, [pc, #48]	; (8001c8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c5c:	e002      	b.n	8001c64 <LoopCopyDataInit>

08001c5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c62:	3304      	adds	r3, #4

08001c64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c68:	d3f9      	bcc.n	8001c5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c6c:	4c09      	ldr	r4, [pc, #36]	; (8001c94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c70:	e001      	b.n	8001c76 <LoopFillZerobss>

08001c72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c74:	3204      	adds	r2, #4

08001c76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c78:	d3fb      	bcc.n	8001c72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c7a:	f003 fd65 	bl	8005748 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c7e:	f7ff f987 	bl	8000f90 <main>
  bx lr
 8001c82:	4770      	bx	lr
  ldr r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c88:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001c8c:	08007440 	.word	0x08007440
  ldr r2, =_sbss
 8001c90:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001c94:	20000a6c 	.word	0x20000a6c

08001c98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c98:	e7fe      	b.n	8001c98 <ADC1_2_IRQHandler>
	...

08001c9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca0:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <HAL_Init+0x28>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a07      	ldr	r2, [pc, #28]	; (8001cc4 <HAL_Init+0x28>)
 8001ca6:	f043 0310 	orr.w	r3, r3, #16
 8001caa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cac:	2003      	movs	r0, #3
 8001cae:	f000 f947 	bl	8001f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cb2:	2000      	movs	r0, #0
 8001cb4:	f000 f808 	bl	8001cc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb8:	f7ff fdfe 	bl	80018b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40022000 	.word	0x40022000

08001cc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x54>)
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	4b12      	ldr	r3, [pc, #72]	; (8001d20 <HAL_InitTick+0x58>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cde:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f000 f95f 	bl	8001faa <HAL_SYSTICK_Config>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e00e      	b.n	8001d14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2b0f      	cmp	r3, #15
 8001cfa:	d80a      	bhi.n	8001d12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	f04f 30ff 	mov.w	r0, #4294967295
 8001d04:	f000 f927 	bl	8001f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d08:	4a06      	ldr	r2, [pc, #24]	; (8001d24 <HAL_InitTick+0x5c>)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	e000      	b.n	8001d14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000008 	.word	0x20000008
 8001d20:	20000010 	.word	0x20000010
 8001d24:	2000000c 	.word	0x2000000c

08001d28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_IncTick+0x1c>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_IncTick+0x20>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4413      	add	r3, r2
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <HAL_IncTick+0x20>)
 8001d3a:	6013      	str	r3, [r2, #0]
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr
 8001d44:	20000010 	.word	0x20000010
 8001d48:	2000091c 	.word	0x2000091c

08001d4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b02      	ldr	r3, [pc, #8]	; (8001d5c <HAL_GetTick+0x10>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr
 8001d5c:	2000091c 	.word	0x2000091c

08001d60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d68:	f7ff fff0 	bl	8001d4c <HAL_GetTick>
 8001d6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d78:	d005      	beq.n	8001d86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d7a:	4b0a      	ldr	r3, [pc, #40]	; (8001da4 <HAL_Delay+0x44>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4413      	add	r3, r2
 8001d84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d86:	bf00      	nop
 8001d88:	f7ff ffe0 	bl	8001d4c <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d8f7      	bhi.n	8001d88 <HAL_Delay+0x28>
  {
  }
}
 8001d98:	bf00      	nop
 8001d9a:	bf00      	nop
 8001d9c:	3710      	adds	r7, #16
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	20000010 	.word	0x20000010

08001da8 <__NVIC_SetPriorityGrouping>:
{
 8001da8:	b480      	push	{r7}
 8001daa:	b085      	sub	sp, #20
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	f003 0307 	and.w	r3, r3, #7
 8001db6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db8:	4b0c      	ldr	r3, [pc, #48]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dda:	4a04      	ldr	r2, [pc, #16]	; (8001dec <__NVIC_SetPriorityGrouping+0x44>)
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	60d3      	str	r3, [r2, #12]
}
 8001de0:	bf00      	nop
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_GetPriorityGrouping>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <__NVIC_GetPriorityGrouping+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	0a1b      	lsrs	r3, r3, #8
 8001dfa:	f003 0307 	and.w	r3, r3, #7
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bc80      	pop	{r7}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_EnableIRQ>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	db0b      	blt.n	8001e36 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	f003 021f 	and.w	r2, r3, #31
 8001e24:	4906      	ldr	r1, [pc, #24]	; (8001e40 <__NVIC_EnableIRQ+0x34>)
 8001e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e2a:	095b      	lsrs	r3, r3, #5
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr
 8001e40:	e000e100 	.word	0xe000e100

08001e44 <__NVIC_SetPriority>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bc80      	pop	{r7}
 8001e8c:	4770      	bx	lr
 8001e8e:	bf00      	nop
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <NVIC_EncodePriority>:
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b089      	sub	sp, #36	; 0x24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f003 0307 	and.w	r3, r3, #7
 8001eaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	f1c3 0307 	rsb	r3, r3, #7
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	bf28      	it	cs
 8001eb6:	2304      	movcs	r3, #4
 8001eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	2b06      	cmp	r3, #6
 8001ec0:	d902      	bls.n	8001ec8 <NVIC_EncodePriority+0x30>
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3b03      	subs	r3, #3
 8001ec6:	e000      	b.n	8001eca <NVIC_EncodePriority+0x32>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	43da      	mvns	r2, r3
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	401a      	ands	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eea:	43d9      	mvns	r1, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef0:	4313      	orrs	r3, r2
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bc80      	pop	{r7}
 8001efa:	4770      	bx	lr

08001efc <SysTick_Config>:
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	3b01      	subs	r3, #1
 8001f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f0c:	d301      	bcc.n	8001f12 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00f      	b.n	8001f32 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f12:	4a0a      	ldr	r2, [pc, #40]	; (8001f3c <SysTick_Config+0x40>)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f1a:	210f      	movs	r1, #15
 8001f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f20:	f7ff ff90 	bl	8001e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f24:	4b05      	ldr	r3, [pc, #20]	; (8001f3c <SysTick_Config+0x40>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f2a:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <SysTick_Config+0x40>)
 8001f2c:	2207      	movs	r2, #7
 8001f2e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3708      	adds	r7, #8
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	e000e010 	.word	0xe000e010

08001f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f7ff ff2d 	bl	8001da8 <__NVIC_SetPriorityGrouping>
}
 8001f4e:	bf00      	nop
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b086      	sub	sp, #24
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	607a      	str	r2, [r7, #4]
 8001f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f64:	2300      	movs	r3, #0
 8001f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f68:	f7ff ff42 	bl	8001df0 <__NVIC_GetPriorityGrouping>
 8001f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	68b9      	ldr	r1, [r7, #8]
 8001f72:	6978      	ldr	r0, [r7, #20]
 8001f74:	f7ff ff90 	bl	8001e98 <NVIC_EncodePriority>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff ff5f 	bl	8001e44 <__NVIC_SetPriority>
}
 8001f86:	bf00      	nop
 8001f88:	3718      	adds	r7, #24
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}

08001f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	4603      	mov	r3, r0
 8001f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff ff35 	bl	8001e0c <__NVIC_EnableIRQ>
}
 8001fa2:	bf00      	nop
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001faa:	b580      	push	{r7, lr}
 8001fac:	b082      	sub	sp, #8
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f7ff ffa2 	bl	8001efc <SysTick_Config>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fc2:	b480      	push	{r7}
 8001fc4:	b085      	sub	sp, #20
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d008      	beq.n	8001fec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2204      	movs	r2, #4
 8001fde:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e020      	b.n	800202e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681a      	ldr	r2, [r3, #0]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f022 020e 	bic.w	r2, r2, #14
 8001ffa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f022 0201 	bic.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002014:	2101      	movs	r1, #1
 8002016:	fa01 f202 	lsl.w	r2, r1, r2
 800201a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	bc80      	pop	{r7}
 8002036:	4770      	bx	lr

08002038 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800204a:	b2db      	uxtb	r3, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d005      	beq.n	800205c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2204      	movs	r2, #4
 8002054:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	73fb      	strb	r3, [r7, #15]
 800205a:	e051      	b.n	8002100 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f022 020e 	bic.w	r2, r2, #14
 800206a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f022 0201 	bic.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a22      	ldr	r2, [pc, #136]	; (800210c <HAL_DMA_Abort_IT+0xd4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d029      	beq.n	80020da <HAL_DMA_Abort_IT+0xa2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a21      	ldr	r2, [pc, #132]	; (8002110 <HAL_DMA_Abort_IT+0xd8>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d022      	beq.n	80020d6 <HAL_DMA_Abort_IT+0x9e>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_DMA_Abort_IT+0xdc>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d01a      	beq.n	80020d0 <HAL_DMA_Abort_IT+0x98>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a1e      	ldr	r2, [pc, #120]	; (8002118 <HAL_DMA_Abort_IT+0xe0>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d012      	beq.n	80020ca <HAL_DMA_Abort_IT+0x92>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a1c      	ldr	r2, [pc, #112]	; (800211c <HAL_DMA_Abort_IT+0xe4>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d00a      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x8c>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a1b      	ldr	r2, [pc, #108]	; (8002120 <HAL_DMA_Abort_IT+0xe8>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d102      	bne.n	80020be <HAL_DMA_Abort_IT+0x86>
 80020b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020bc:	e00e      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020c2:	e00b      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020c8:	e008      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020ce:	e005      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020d4:	e002      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020d6:	2310      	movs	r3, #16
 80020d8:	e000      	b.n	80020dc <HAL_DMA_Abort_IT+0xa4>
 80020da:	2301      	movs	r3, #1
 80020dc:	4a11      	ldr	r2, [pc, #68]	; (8002124 <HAL_DMA_Abort_IT+0xec>)
 80020de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
    } 
  }
  return status;
 8002100:	7bfb      	ldrb	r3, [r7, #15]
}
 8002102:	4618      	mov	r0, r3
 8002104:	3710      	adds	r7, #16
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	40020008 	.word	0x40020008
 8002110:	4002001c 	.word	0x4002001c
 8002114:	40020030 	.word	0x40020030
 8002118:	40020044 	.word	0x40020044
 800211c:	40020058 	.word	0x40020058
 8002120:	4002006c 	.word	0x4002006c
 8002124:	40020000 	.word	0x40020000

08002128 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002128:	b480      	push	{r7}
 800212a:	b08b      	sub	sp, #44	; 0x2c
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
 8002130:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002136:	2300      	movs	r3, #0
 8002138:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213a:	e169      	b.n	8002410 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800213c:	2201      	movs	r2, #1
 800213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002140:	fa02 f303 	lsl.w	r3, r2, r3
 8002144:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	429a      	cmp	r2, r3
 8002156:	f040 8158 	bne.w	800240a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4a9a      	ldr	r2, [pc, #616]	; (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d05e      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002164:	4a98      	ldr	r2, [pc, #608]	; (80023c8 <HAL_GPIO_Init+0x2a0>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d875      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800216a:	4a98      	ldr	r2, [pc, #608]	; (80023cc <HAL_GPIO_Init+0x2a4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d058      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002170:	4a96      	ldr	r2, [pc, #600]	; (80023cc <HAL_GPIO_Init+0x2a4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d86f      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002176:	4a96      	ldr	r2, [pc, #600]	; (80023d0 <HAL_GPIO_Init+0x2a8>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d052      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 800217c:	4a94      	ldr	r2, [pc, #592]	; (80023d0 <HAL_GPIO_Init+0x2a8>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d869      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 8002182:	4a94      	ldr	r2, [pc, #592]	; (80023d4 <HAL_GPIO_Init+0x2ac>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d04c      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002188:	4a92      	ldr	r2, [pc, #584]	; (80023d4 <HAL_GPIO_Init+0x2ac>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d863      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800218e:	4a92      	ldr	r2, [pc, #584]	; (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d046      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
 8002194:	4a90      	ldr	r2, [pc, #576]	; (80023d8 <HAL_GPIO_Init+0x2b0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d85d      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 800219a:	2b12      	cmp	r3, #18
 800219c:	d82a      	bhi.n	80021f4 <HAL_GPIO_Init+0xcc>
 800219e:	2b12      	cmp	r3, #18
 80021a0:	d859      	bhi.n	8002256 <HAL_GPIO_Init+0x12e>
 80021a2:	a201      	add	r2, pc, #4	; (adr r2, 80021a8 <HAL_GPIO_Init+0x80>)
 80021a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021a8:	08002223 	.word	0x08002223
 80021ac:	080021fd 	.word	0x080021fd
 80021b0:	0800220f 	.word	0x0800220f
 80021b4:	08002251 	.word	0x08002251
 80021b8:	08002257 	.word	0x08002257
 80021bc:	08002257 	.word	0x08002257
 80021c0:	08002257 	.word	0x08002257
 80021c4:	08002257 	.word	0x08002257
 80021c8:	08002257 	.word	0x08002257
 80021cc:	08002257 	.word	0x08002257
 80021d0:	08002257 	.word	0x08002257
 80021d4:	08002257 	.word	0x08002257
 80021d8:	08002257 	.word	0x08002257
 80021dc:	08002257 	.word	0x08002257
 80021e0:	08002257 	.word	0x08002257
 80021e4:	08002257 	.word	0x08002257
 80021e8:	08002257 	.word	0x08002257
 80021ec:	08002205 	.word	0x08002205
 80021f0:	08002219 	.word	0x08002219
 80021f4:	4a79      	ldr	r2, [pc, #484]	; (80023dc <HAL_GPIO_Init+0x2b4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021fa:	e02c      	b.n	8002256 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	623b      	str	r3, [r7, #32]
          break;
 8002202:	e029      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	3304      	adds	r3, #4
 800220a:	623b      	str	r3, [r7, #32]
          break;
 800220c:	e024      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	3308      	adds	r3, #8
 8002214:	623b      	str	r3, [r7, #32]
          break;
 8002216:	e01f      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	330c      	adds	r3, #12
 800221e:	623b      	str	r3, [r7, #32]
          break;
 8002220:	e01a      	b.n	8002258 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800222a:	2304      	movs	r3, #4
 800222c:	623b      	str	r3, [r7, #32]
          break;
 800222e:	e013      	b.n	8002258 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002238:	2308      	movs	r3, #8
 800223a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	611a      	str	r2, [r3, #16]
          break;
 8002242:	e009      	b.n	8002258 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002244:	2308      	movs	r3, #8
 8002246:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69fa      	ldr	r2, [r7, #28]
 800224c:	615a      	str	r2, [r3, #20]
          break;
 800224e:	e003      	b.n	8002258 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002250:	2300      	movs	r3, #0
 8002252:	623b      	str	r3, [r7, #32]
          break;
 8002254:	e000      	b.n	8002258 <HAL_GPIO_Init+0x130>
          break;
 8002256:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2bff      	cmp	r3, #255	; 0xff
 800225c:	d801      	bhi.n	8002262 <HAL_GPIO_Init+0x13a>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	e001      	b.n	8002266 <HAL_GPIO_Init+0x13e>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3304      	adds	r3, #4
 8002266:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	2bff      	cmp	r3, #255	; 0xff
 800226c:	d802      	bhi.n	8002274 <HAL_GPIO_Init+0x14c>
 800226e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	e002      	b.n	800227a <HAL_GPIO_Init+0x152>
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	3b08      	subs	r3, #8
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	210f      	movs	r1, #15
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	fa01 f303 	lsl.w	r3, r1, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	401a      	ands	r2, r3
 800228c:	6a39      	ldr	r1, [r7, #32]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	fa01 f303 	lsl.w	r3, r1, r3
 8002294:	431a      	orrs	r2, r3
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	f000 80b1 	beq.w	800240a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022a8:	4b4d      	ldr	r3, [pc, #308]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	4a4c      	ldr	r2, [pc, #304]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022ae:	f043 0301 	orr.w	r3, r3, #1
 80022b2:	6193      	str	r3, [r2, #24]
 80022b4:	4b4a      	ldr	r3, [pc, #296]	; (80023e0 <HAL_GPIO_Init+0x2b8>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c0:	4a48      	ldr	r2, [pc, #288]	; (80023e4 <HAL_GPIO_Init+0x2bc>)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	089b      	lsrs	r3, r3, #2
 80022c6:	3302      	adds	r3, #2
 80022c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	220f      	movs	r2, #15
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	43db      	mvns	r3, r3
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4013      	ands	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a40      	ldr	r2, [pc, #256]	; (80023e8 <HAL_GPIO_Init+0x2c0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d013      	beq.n	8002314 <HAL_GPIO_Init+0x1ec>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a3f      	ldr	r2, [pc, #252]	; (80023ec <HAL_GPIO_Init+0x2c4>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d00d      	beq.n	8002310 <HAL_GPIO_Init+0x1e8>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3e      	ldr	r2, [pc, #248]	; (80023f0 <HAL_GPIO_Init+0x2c8>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d007      	beq.n	800230c <HAL_GPIO_Init+0x1e4>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3d      	ldr	r2, [pc, #244]	; (80023f4 <HAL_GPIO_Init+0x2cc>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_GPIO_Init+0x1e0>
 8002304:	2303      	movs	r3, #3
 8002306:	e006      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002308:	2304      	movs	r3, #4
 800230a:	e004      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 800230c:	2302      	movs	r3, #2
 800230e:	e002      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002310:	2301      	movs	r3, #1
 8002312:	e000      	b.n	8002316 <HAL_GPIO_Init+0x1ee>
 8002314:	2300      	movs	r3, #0
 8002316:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002318:	f002 0203 	and.w	r2, r2, #3
 800231c:	0092      	lsls	r2, r2, #2
 800231e:	4093      	lsls	r3, r2
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	4313      	orrs	r3, r2
 8002324:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002326:	492f      	ldr	r1, [pc, #188]	; (80023e4 <HAL_GPIO_Init+0x2bc>)
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232a:	089b      	lsrs	r3, r3, #2
 800232c:	3302      	adds	r3, #2
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002340:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	492c      	ldr	r1, [pc, #176]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800234e:	4b2a      	ldr	r3, [pc, #168]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	4928      	ldr	r1, [pc, #160]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d006      	beq.n	8002376 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002368:	4b23      	ldr	r3, [pc, #140]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	4922      	ldr	r1, [pc, #136]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	60cb      	str	r3, [r1, #12]
 8002374:	e006      	b.n	8002384 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002376:	4b20      	ldr	r3, [pc, #128]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	43db      	mvns	r3, r3
 800237e:	491e      	ldr	r1, [pc, #120]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002380:	4013      	ands	r3, r2
 8002382:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d006      	beq.n	800239e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002390:	4b19      	ldr	r3, [pc, #100]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	4918      	ldr	r1, [pc, #96]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
 800239c:	e006      	b.n	80023ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800239e:	4b16      	ldr	r3, [pc, #88]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	43db      	mvns	r3, r3
 80023a6:	4914      	ldr	r1, [pc, #80]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d021      	beq.n	80023fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023b8:	4b0f      	ldr	r3, [pc, #60]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	490e      	ldr	r1, [pc, #56]	; (80023f8 <HAL_GPIO_Init+0x2d0>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
 80023c4:	e021      	b.n	800240a <HAL_GPIO_Init+0x2e2>
 80023c6:	bf00      	nop
 80023c8:	10320000 	.word	0x10320000
 80023cc:	10310000 	.word	0x10310000
 80023d0:	10220000 	.word	0x10220000
 80023d4:	10210000 	.word	0x10210000
 80023d8:	10120000 	.word	0x10120000
 80023dc:	10110000 	.word	0x10110000
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40010000 	.word	0x40010000
 80023e8:	40010800 	.word	0x40010800
 80023ec:	40010c00 	.word	0x40010c00
 80023f0:	40011000 	.word	0x40011000
 80023f4:	40011400 	.word	0x40011400
 80023f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023fc:	4b0b      	ldr	r3, [pc, #44]	; (800242c <HAL_GPIO_Init+0x304>)
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	69bb      	ldr	r3, [r7, #24]
 8002402:	43db      	mvns	r3, r3
 8002404:	4909      	ldr	r1, [pc, #36]	; (800242c <HAL_GPIO_Init+0x304>)
 8002406:	4013      	ands	r3, r2
 8002408:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	3301      	adds	r3, #1
 800240e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002416:	fa22 f303 	lsr.w	r3, r2, r3
 800241a:	2b00      	cmp	r3, #0
 800241c:	f47f ae8e 	bne.w	800213c <HAL_GPIO_Init+0x14>
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	372c      	adds	r7, #44	; 0x2c
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	887b      	ldrh	r3, [r7, #2]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d002      	beq.n	800244e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
 800244c:	e001      	b.n	8002452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002452:	7bfb      	ldrb	r3, [r7, #15]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	bc80      	pop	{r7}
 800245c:	4770      	bx	lr

0800245e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	460b      	mov	r3, r1
 8002468:	807b      	strh	r3, [r7, #2]
 800246a:	4613      	mov	r3, r2
 800246c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800246e:	787b      	ldrb	r3, [r7, #1]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002474:	887a      	ldrh	r2, [r7, #2]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800247a:	e003      	b.n	8002484 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	041a      	lsls	r2, r3, #16
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	611a      	str	r2, [r3, #16]
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	bc80      	pop	{r7}
 800248c:	4770      	bx	lr
	...

08002490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b084      	sub	sp, #16
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d101      	bne.n	80024a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	e12b      	b.n	80026fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d106      	bne.n	80024bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f7fe fbbe 	bl	8000c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2224      	movs	r2, #36	; 0x24
 80024c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f022 0201 	bic.w	r2, r2, #1
 80024d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024f4:	f001 f960 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80024f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4a81      	ldr	r2, [pc, #516]	; (8002704 <HAL_I2C_Init+0x274>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d807      	bhi.n	8002514 <HAL_I2C_Init+0x84>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	4a80      	ldr	r2, [pc, #512]	; (8002708 <HAL_I2C_Init+0x278>)
 8002508:	4293      	cmp	r3, r2
 800250a:	bf94      	ite	ls
 800250c:	2301      	movls	r3, #1
 800250e:	2300      	movhi	r3, #0
 8002510:	b2db      	uxtb	r3, r3
 8002512:	e006      	b.n	8002522 <HAL_I2C_Init+0x92>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	4a7d      	ldr	r2, [pc, #500]	; (800270c <HAL_I2C_Init+0x27c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	bf94      	ite	ls
 800251c:	2301      	movls	r3, #1
 800251e:	2300      	movhi	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e0e7      	b.n	80026fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	4a78      	ldr	r2, [pc, #480]	; (8002710 <HAL_I2C_Init+0x280>)
 800252e:	fba2 2303 	umull	r2, r3, r2, r3
 8002532:	0c9b      	lsrs	r3, r3, #18
 8002534:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	430a      	orrs	r2, r1
 8002548:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6a1b      	ldr	r3, [r3, #32]
 8002550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	4a6a      	ldr	r2, [pc, #424]	; (8002704 <HAL_I2C_Init+0x274>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d802      	bhi.n	8002564 <HAL_I2C_Init+0xd4>
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	3301      	adds	r3, #1
 8002562:	e009      	b.n	8002578 <HAL_I2C_Init+0xe8>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800256a:	fb02 f303 	mul.w	r3, r2, r3
 800256e:	4a69      	ldr	r2, [pc, #420]	; (8002714 <HAL_I2C_Init+0x284>)
 8002570:	fba2 2303 	umull	r2, r3, r2, r3
 8002574:	099b      	lsrs	r3, r3, #6
 8002576:	3301      	adds	r3, #1
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6812      	ldr	r2, [r2, #0]
 800257c:	430b      	orrs	r3, r1
 800257e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800258a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	495c      	ldr	r1, [pc, #368]	; (8002704 <HAL_I2C_Init+0x274>)
 8002594:	428b      	cmp	r3, r1
 8002596:	d819      	bhi.n	80025cc <HAL_I2C_Init+0x13c>
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	1e59      	subs	r1, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80025a6:	1c59      	adds	r1, r3, #1
 80025a8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025ac:	400b      	ands	r3, r1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_I2C_Init+0x138>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	1e59      	subs	r1, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80025c0:	3301      	adds	r3, #1
 80025c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c6:	e051      	b.n	800266c <HAL_I2C_Init+0x1dc>
 80025c8:	2304      	movs	r3, #4
 80025ca:	e04f      	b.n	800266c <HAL_I2C_Init+0x1dc>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d111      	bne.n	80025f8 <HAL_I2C_Init+0x168>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1e58      	subs	r0, r3, #1
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6859      	ldr	r1, [r3, #4]
 80025dc:	460b      	mov	r3, r1
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	440b      	add	r3, r1
 80025e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	e012      	b.n	800261e <HAL_I2C_Init+0x18e>
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	1e58      	subs	r0, r3, #1
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	460b      	mov	r3, r1
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	0099      	lsls	r1, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	fbb0 f3f3 	udiv	r3, r0, r3
 800260e:	3301      	adds	r3, #1
 8002610:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Init+0x196>
 8002622:	2301      	movs	r3, #1
 8002624:	e022      	b.n	800266c <HAL_I2C_Init+0x1dc>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d10e      	bne.n	800264c <HAL_I2C_Init+0x1bc>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1e58      	subs	r0, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	460b      	mov	r3, r1
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	440b      	add	r3, r1
 800263c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002640:	3301      	adds	r3, #1
 8002642:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800264a:	e00f      	b.n	800266c <HAL_I2C_Init+0x1dc>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	1e58      	subs	r0, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6859      	ldr	r1, [r3, #4]
 8002654:	460b      	mov	r3, r1
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	0099      	lsls	r1, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002662:	3301      	adds	r3, #1
 8002664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002668:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	6809      	ldr	r1, [r1, #0]
 8002670:	4313      	orrs	r3, r2
 8002672:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	69da      	ldr	r2, [r3, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a1b      	ldr	r3, [r3, #32]
 8002686:	431a      	orrs	r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	430a      	orrs	r2, r1
 800268e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800269a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800269e:	687a      	ldr	r2, [r7, #4]
 80026a0:	6911      	ldr	r1, [r2, #16]
 80026a2:	687a      	ldr	r2, [r7, #4]
 80026a4:	68d2      	ldr	r2, [r2, #12]
 80026a6:	4311      	orrs	r1, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6812      	ldr	r2, [r2, #0]
 80026ac:	430b      	orrs	r3, r1
 80026ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	68db      	ldr	r3, [r3, #12]
 80026b6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695a      	ldr	r2, [r3, #20]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	699b      	ldr	r3, [r3, #24]
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
 80026da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2220      	movs	r2, #32
 80026e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	000186a0 	.word	0x000186a0
 8002708:	001e847f 	.word	0x001e847f
 800270c:	003d08ff 	.word	0x003d08ff
 8002710:	431bde83 	.word	0x431bde83
 8002714:	10624dd3 	.word	0x10624dd3

08002718 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b088      	sub	sp, #32
 800271c:	af02      	add	r7, sp, #8
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607a      	str	r2, [r7, #4]
 8002722:	461a      	mov	r2, r3
 8002724:	460b      	mov	r3, r1
 8002726:	817b      	strh	r3, [r7, #10]
 8002728:	4613      	mov	r3, r2
 800272a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff fb0e 	bl	8001d4c <HAL_GetTick>
 8002730:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b20      	cmp	r3, #32
 800273c:	f040 80e0 	bne.w	8002900 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	9300      	str	r3, [sp, #0]
 8002744:	2319      	movs	r3, #25
 8002746:	2201      	movs	r2, #1
 8002748:	4970      	ldr	r1, [pc, #448]	; (800290c <HAL_I2C_Master_Transmit+0x1f4>)
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fa92 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002756:	2302      	movs	r3, #2
 8002758:	e0d3      	b.n	8002902 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_I2C_Master_Transmit+0x50>
 8002764:	2302      	movs	r3, #2
 8002766:	e0cc      	b.n	8002902 <HAL_I2C_Master_Transmit+0x1ea>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2201      	movs	r2, #1
 800276c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0301 	and.w	r3, r3, #1
 800277a:	2b01      	cmp	r3, #1
 800277c:	d007      	beq.n	800278e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f042 0201 	orr.w	r2, r2, #1
 800278c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800279c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2221      	movs	r2, #33	; 0x21
 80027a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2210      	movs	r2, #16
 80027aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	893a      	ldrh	r2, [r7, #8]
 80027be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4a50      	ldr	r2, [pc, #320]	; (8002910 <HAL_I2C_Master_Transmit+0x1f8>)
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027d0:	8979      	ldrh	r1, [r7, #10]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	6a3a      	ldr	r2, [r7, #32]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 f9ca 	bl	8002b70 <I2C_MasterRequestWrite>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e08d      	b.n	8002902 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027e6:	2300      	movs	r3, #0
 80027e8:	613b      	str	r3, [r7, #16]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	695b      	ldr	r3, [r3, #20]
 80027f0:	613b      	str	r3, [r7, #16]
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027fc:	e066      	b.n	80028cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	6a39      	ldr	r1, [r7, #32]
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f000 fb50 	bl	8002ea8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00d      	beq.n	800282a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b04      	cmp	r3, #4
 8002814:	d107      	bne.n	8002826 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002824:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e06b      	b.n	8002902 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	781a      	ldrb	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	1c5a      	adds	r2, r3, #1
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	3b01      	subs	r3, #1
 8002848:	b29a      	uxth	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002852:	3b01      	subs	r3, #1
 8002854:	b29a      	uxth	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	695b      	ldr	r3, [r3, #20]
 8002860:	f003 0304 	and.w	r3, r3, #4
 8002864:	2b04      	cmp	r3, #4
 8002866:	d11b      	bne.n	80028a0 <HAL_I2C_Master_Transmit+0x188>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800286c:	2b00      	cmp	r3, #0
 800286e:	d017      	beq.n	80028a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028a0:	697a      	ldr	r2, [r7, #20]
 80028a2:	6a39      	ldr	r1, [r7, #32]
 80028a4:	68f8      	ldr	r0, [r7, #12]
 80028a6:	f000 fb47 	bl	8002f38 <I2C_WaitOnBTFFlagUntilTimeout>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d00d      	beq.n	80028cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	2b04      	cmp	r3, #4
 80028b6:	d107      	bne.n	80028c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e01a      	b.n	8002902 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d194      	bne.n	80027fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2220      	movs	r2, #32
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	e000      	b.n	8002902 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002900:	2302      	movs	r3, #2
  }
}
 8002902:	4618      	mov	r0, r3
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	00100002 	.word	0x00100002
 8002910:	ffff0000 	.word	0xffff0000

08002914 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b08a      	sub	sp, #40	; 0x28
 8002918:	af02      	add	r7, sp, #8
 800291a:	60f8      	str	r0, [r7, #12]
 800291c:	607a      	str	r2, [r7, #4]
 800291e:	603b      	str	r3, [r7, #0]
 8002920:	460b      	mov	r3, r1
 8002922:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002924:	f7ff fa12 	bl	8001d4c <HAL_GetTick>
 8002928:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002934:	b2db      	uxtb	r3, r3
 8002936:	2b20      	cmp	r3, #32
 8002938:	f040 8111 	bne.w	8002b5e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	2319      	movs	r3, #25
 8002942:	2201      	movs	r2, #1
 8002944:	4988      	ldr	r1, [pc, #544]	; (8002b68 <HAL_I2C_IsDeviceReady+0x254>)
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f994 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002952:	2302      	movs	r3, #2
 8002954:	e104      	b.n	8002b60 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800295c:	2b01      	cmp	r3, #1
 800295e:	d101      	bne.n	8002964 <HAL_I2C_IsDeviceReady+0x50>
 8002960:	2302      	movs	r3, #2
 8002962:	e0fd      	b.n	8002b60 <HAL_I2C_IsDeviceReady+0x24c>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 0301 	and.w	r3, r3, #1
 8002976:	2b01      	cmp	r3, #1
 8002978:	d007      	beq.n	800298a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f042 0201 	orr.w	r2, r2, #1
 8002988:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002998:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2224      	movs	r2, #36	; 0x24
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	4a70      	ldr	r2, [pc, #448]	; (8002b6c <HAL_I2C_IsDeviceReady+0x258>)
 80029ac:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80029bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 f952 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00d      	beq.n	80029f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029e4:	d103      	bne.n	80029ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e0b6      	b.n	8002b60 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029f2:	897b      	ldrh	r3, [r7, #10]
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	461a      	mov	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002a00:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002a02:	f7ff f9a3 	bl	8001d4c <HAL_GetTick>
 8002a06:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	f003 0302 	and.w	r3, r3, #2
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	bf0c      	ite	eq
 8002a16:	2301      	moveq	r3, #1
 8002a18:	2300      	movne	r3, #0
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a2c:	bf0c      	ite	eq
 8002a2e:	2301      	moveq	r3, #1
 8002a30:	2300      	movne	r3, #0
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a36:	e025      	b.n	8002a84 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a38:	f7ff f988 	bl	8001d4c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	683a      	ldr	r2, [r7, #0]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d302      	bcc.n	8002a4e <HAL_I2C_IsDeviceReady+0x13a>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d103      	bne.n	8002a56 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	22a0      	movs	r2, #160	; 0xa0
 8002a52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	bf0c      	ite	eq
 8002a64:	2301      	moveq	r3, #1
 8002a66:	2300      	movne	r3, #0
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	695b      	ldr	r3, [r3, #20]
 8002a72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a7a:	bf0c      	ite	eq
 8002a7c:	2301      	moveq	r3, #1
 8002a7e:	2300      	movne	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2ba0      	cmp	r3, #160	; 0xa0
 8002a8e:	d005      	beq.n	8002a9c <HAL_I2C_IsDeviceReady+0x188>
 8002a90:	7dfb      	ldrb	r3, [r7, #23]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <HAL_I2C_IsDeviceReady+0x188>
 8002a96:	7dbb      	ldrb	r3, [r7, #22]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0cd      	beq.n	8002a38 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2220      	movs	r2, #32
 8002aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d129      	bne.n	8002b06 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ac0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	695b      	ldr	r3, [r3, #20]
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	613b      	str	r3, [r7, #16]
 8002ad6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2319      	movs	r3, #25
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4921      	ldr	r1, [pc, #132]	; (8002b68 <HAL_I2C_IsDeviceReady+0x254>)
 8002ae2:	68f8      	ldr	r0, [r7, #12]
 8002ae4:	f000 f8c6 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d001      	beq.n	8002af2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e036      	b.n	8002b60 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2220      	movs	r2, #32
 8002af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2200      	movs	r2, #0
 8002afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002b02:	2300      	movs	r3, #0
 8002b04:	e02c      	b.n	8002b60 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b14:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b1e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	9300      	str	r3, [sp, #0]
 8002b24:	2319      	movs	r3, #25
 8002b26:	2201      	movs	r2, #1
 8002b28:	490f      	ldr	r1, [pc, #60]	; (8002b68 <HAL_I2C_IsDeviceReady+0x254>)
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f000 f8a2 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002b30:	4603      	mov	r3, r0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d001      	beq.n	8002b3a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e012      	b.n	8002b60 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	f4ff af32 	bcc.w	80029ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2220      	movs	r2, #32
 8002b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
  }
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3720      	adds	r7, #32
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	00100002 	.word	0x00100002
 8002b6c:	ffff0000 	.word	0xffff0000

08002b70 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b088      	sub	sp, #32
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	607a      	str	r2, [r7, #4]
 8002b7a:	603b      	str	r3, [r7, #0]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b08      	cmp	r3, #8
 8002b8a:	d006      	beq.n	8002b9a <I2C_MasterRequestWrite+0x2a>
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d003      	beq.n	8002b9a <I2C_MasterRequestWrite+0x2a>
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b98:	d108      	bne.n	8002bac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ba8:	601a      	str	r2, [r3, #0]
 8002baa:	e00b      	b.n	8002bc4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	2b12      	cmp	r3, #18
 8002bb2:	d107      	bne.n	8002bc4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bc2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f000 f84f 	bl	8002c74 <I2C_WaitOnFlagUntilTimeout>
 8002bd6:	4603      	mov	r3, r0
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d00d      	beq.n	8002bf8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bea:	d103      	bne.n	8002bf4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bf2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	e035      	b.n	8002c64 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	691b      	ldr	r3, [r3, #16]
 8002bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c00:	d108      	bne.n	8002c14 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c02:	897b      	ldrh	r3, [r7, #10]
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	461a      	mov	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c10:	611a      	str	r2, [r3, #16]
 8002c12:	e01b      	b.n	8002c4c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c14:	897b      	ldrh	r3, [r7, #10]
 8002c16:	11db      	asrs	r3, r3, #7
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	f003 0306 	and.w	r3, r3, #6
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	f063 030f 	orn	r3, r3, #15
 8002c24:	b2da      	uxtb	r2, r3
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	490e      	ldr	r1, [pc, #56]	; (8002c6c <I2C_MasterRequestWrite+0xfc>)
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 f898 	bl	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e010      	b.n	8002c64 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c42:	897b      	ldrh	r3, [r7, #10]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	4907      	ldr	r1, [pc, #28]	; (8002c70 <I2C_MasterRequestWrite+0x100>)
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f000 f888 	bl	8002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e000      	b.n	8002c64 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	00010008 	.word	0x00010008
 8002c70:	00010002 	.word	0x00010002

08002c74 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b084      	sub	sp, #16
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	603b      	str	r3, [r7, #0]
 8002c80:	4613      	mov	r3, r2
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c84:	e048      	b.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c8c:	d044      	beq.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c8e:	f7ff f85d 	bl	8001d4c <HAL_GetTick>
 8002c92:	4602      	mov	r2, r0
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d302      	bcc.n	8002ca4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d139      	bne.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	0c1b      	lsrs	r3, r3, #16
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d10d      	bne.n	8002cca <I2C_WaitOnFlagUntilTimeout+0x56>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	43da      	mvns	r2, r3
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	bf0c      	ite	eq
 8002cc0:	2301      	moveq	r3, #1
 8002cc2:	2300      	movne	r3, #0
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	e00c      	b.n	8002ce4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	43da      	mvns	r2, r3
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	b29b      	uxth	r3, r3
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf0c      	ite	eq
 8002cdc:	2301      	moveq	r3, #1
 8002cde:	2300      	movne	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	79fb      	ldrb	r3, [r7, #7]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d116      	bne.n	8002d18 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f043 0220 	orr.w	r2, r3, #32
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e023      	b.n	8002d60 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d10d      	bne.n	8002d3e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695b      	ldr	r3, [r3, #20]
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	bf0c      	ite	eq
 8002d34:	2301      	moveq	r3, #1
 8002d36:	2300      	movne	r3, #0
 8002d38:	b2db      	uxtb	r3, r3
 8002d3a:	461a      	mov	r2, r3
 8002d3c:	e00c      	b.n	8002d58 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	43da      	mvns	r2, r3
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	4013      	ands	r3, r2
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	bf0c      	ite	eq
 8002d50:	2301      	moveq	r3, #1
 8002d52:	2300      	movne	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	461a      	mov	r2, r3
 8002d58:	79fb      	ldrb	r3, [r7, #7]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d093      	beq.n	8002c86 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	607a      	str	r2, [r7, #4]
 8002d74:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d76:	e071      	b.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d86:	d123      	bne.n	8002dd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002da0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2220      	movs	r2, #32
 8002dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dbc:	f043 0204 	orr.w	r2, r3, #4
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	e067      	b.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd6:	d041      	beq.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dd8:	f7fe ffb8 	bl	8001d4c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d302      	bcc.n	8002dee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d136      	bne.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d10c      	bne.n	8002e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	4013      	ands	r3, r2
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	bf14      	ite	ne
 8002e0a:	2301      	movne	r3, #1
 8002e0c:	2300      	moveq	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	e00b      	b.n	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	43da      	mvns	r2, r3
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d016      	beq.n	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2220      	movs	r2, #32
 8002e38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e48:	f043 0220 	orr.w	r2, r3, #32
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e021      	b.n	8002ea0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	0c1b      	lsrs	r3, r3, #16
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d10c      	bne.n	8002e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	43da      	mvns	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	4013      	ands	r3, r2
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	bf14      	ite	ne
 8002e78:	2301      	movne	r3, #1
 8002e7a:	2300      	moveq	r3, #0
 8002e7c:	b2db      	uxtb	r3, r3
 8002e7e:	e00b      	b.n	8002e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	43da      	mvns	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	4013      	ands	r3, r2
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	bf14      	ite	ne
 8002e92:	2301      	movne	r3, #1
 8002e94:	2300      	moveq	r3, #0
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f47f af6d 	bne.w	8002d78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002e9e:	2300      	movs	r3, #0
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	60f8      	str	r0, [r7, #12]
 8002eb0:	60b9      	str	r1, [r7, #8]
 8002eb2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002eb4:	e034      	b.n	8002f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002eb6:	68f8      	ldr	r0, [r7, #12]
 8002eb8:	f000 f886 	bl	8002fc8 <I2C_IsAcknowledgeFailed>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e034      	b.n	8002f30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ecc:	d028      	beq.n	8002f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ece:	f7fe ff3d 	bl	8001d4c <HAL_GetTick>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	68ba      	ldr	r2, [r7, #8]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d302      	bcc.n	8002ee4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d11d      	bne.n	8002f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eee:	2b80      	cmp	r3, #128	; 0x80
 8002ef0:	d016      	beq.n	8002f20 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	f043 0220 	orr.w	r2, r3, #32
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e007      	b.n	8002f30 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f2a:	2b80      	cmp	r3, #128	; 0x80
 8002f2c:	d1c3      	bne.n	8002eb6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	3710      	adds	r7, #16
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}

08002f38 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002f44:	e034      	b.n	8002fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f46:	68f8      	ldr	r0, [r7, #12]
 8002f48:	f000 f83e 	bl	8002fc8 <I2C_IsAcknowledgeFailed>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d001      	beq.n	8002f56 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e034      	b.n	8002fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f5c:	d028      	beq.n	8002fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f5e:	f7fe fef5 	bl	8001d4c <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d302      	bcc.n	8002f74 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d11d      	bne.n	8002fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
 8002f7e:	2b04      	cmp	r3, #4
 8002f80:	d016      	beq.n	8002fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	2220      	movs	r2, #32
 8002f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	f043 0220 	orr.w	r2, r3, #32
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	e007      	b.n	8002fc0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f003 0304 	and.w	r3, r3, #4
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d1c3      	bne.n	8002f46 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002fbe:	2300      	movs	r3, #0
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	695b      	ldr	r3, [r3, #20]
 8002fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fde:	d11b      	bne.n	8003018 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fe8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2220      	movs	r2, #32
 8002ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003004:	f043 0204 	orr.w	r2, r3, #4
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e000      	b.n	800301a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e272      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8087 	beq.w	8003152 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003044:	4b92      	ldr	r3, [pc, #584]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f003 030c 	and.w	r3, r3, #12
 800304c:	2b04      	cmp	r3, #4
 800304e:	d00c      	beq.n	800306a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003050:	4b8f      	ldr	r3, [pc, #572]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	f003 030c 	and.w	r3, r3, #12
 8003058:	2b08      	cmp	r3, #8
 800305a:	d112      	bne.n	8003082 <HAL_RCC_OscConfig+0x5e>
 800305c:	4b8c      	ldr	r3, [pc, #560]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003068:	d10b      	bne.n	8003082 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800306a:	4b89      	ldr	r3, [pc, #548]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d06c      	beq.n	8003150 <HAL_RCC_OscConfig+0x12c>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d168      	bne.n	8003150 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e24c      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308a:	d106      	bne.n	800309a <HAL_RCC_OscConfig+0x76>
 800308c:	4b80      	ldr	r3, [pc, #512]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a7f      	ldr	r2, [pc, #508]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003092:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003096:	6013      	str	r3, [r2, #0]
 8003098:	e02e      	b.n	80030f8 <HAL_RCC_OscConfig+0xd4>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0x98>
 80030a2:	4b7b      	ldr	r3, [pc, #492]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a7a      	ldr	r2, [pc, #488]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b78      	ldr	r3, [pc, #480]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a77      	ldr	r2, [pc, #476]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e01d      	b.n	80030f8 <HAL_RCC_OscConfig+0xd4>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030c4:	d10c      	bne.n	80030e0 <HAL_RCC_OscConfig+0xbc>
 80030c6:	4b72      	ldr	r3, [pc, #456]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a71      	ldr	r2, [pc, #452]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d0:	6013      	str	r3, [r2, #0]
 80030d2:	4b6f      	ldr	r3, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a6e      	ldr	r2, [pc, #440]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e00b      	b.n	80030f8 <HAL_RCC_OscConfig+0xd4>
 80030e0:	4b6b      	ldr	r3, [pc, #428]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a6a      	ldr	r2, [pc, #424]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030ea:	6013      	str	r3, [r2, #0]
 80030ec:	4b68      	ldr	r3, [pc, #416]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a67      	ldr	r2, [pc, #412]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80030f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d013      	beq.n	8003128 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003100:	f7fe fe24 	bl	8001d4c <HAL_GetTick>
 8003104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003106:	e008      	b.n	800311a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003108:	f7fe fe20 	bl	8001d4c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	1ad3      	subs	r3, r2, r3
 8003112:	2b64      	cmp	r3, #100	; 0x64
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e200      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800311a:	4b5d      	ldr	r3, [pc, #372]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0f0      	beq.n	8003108 <HAL_RCC_OscConfig+0xe4>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003128:	f7fe fe10 	bl	8001d4c <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003130:	f7fe fe0c 	bl	8001d4c <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b64      	cmp	r3, #100	; 0x64
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1ec      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003142:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d1f0      	bne.n	8003130 <HAL_RCC_OscConfig+0x10c>
 800314e:	e000      	b.n	8003152 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d063      	beq.n	8003226 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800315e:	4b4c      	ldr	r3, [pc, #304]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f003 030c 	and.w	r3, r3, #12
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00b      	beq.n	8003182 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800316a:	4b49      	ldr	r3, [pc, #292]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f003 030c 	and.w	r3, r3, #12
 8003172:	2b08      	cmp	r3, #8
 8003174:	d11c      	bne.n	80031b0 <HAL_RCC_OscConfig+0x18c>
 8003176:	4b46      	ldr	r3, [pc, #280]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d116      	bne.n	80031b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003182:	4b43      	ldr	r3, [pc, #268]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 0302 	and.w	r3, r3, #2
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_RCC_OscConfig+0x176>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	2b01      	cmp	r3, #1
 8003194:	d001      	beq.n	800319a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e1c0      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800319a:	4b3d      	ldr	r3, [pc, #244]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	00db      	lsls	r3, r3, #3
 80031a8:	4939      	ldr	r1, [pc, #228]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ae:	e03a      	b.n	8003226 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d020      	beq.n	80031fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031b8:	4b36      	ldr	r3, [pc, #216]	; (8003294 <HAL_RCC_OscConfig+0x270>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031be:	f7fe fdc5 	bl	8001d4c <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031c4:	e008      	b.n	80031d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031c6:	f7fe fdc1 	bl	8001d4c <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	2b02      	cmp	r3, #2
 80031d2:	d901      	bls.n	80031d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031d4:	2303      	movs	r3, #3
 80031d6:	e1a1      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d8:	4b2d      	ldr	r3, [pc, #180]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0302 	and.w	r3, r3, #2
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d0f0      	beq.n	80031c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e4:	4b2a      	ldr	r3, [pc, #168]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	695b      	ldr	r3, [r3, #20]
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	4927      	ldr	r1, [pc, #156]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	600b      	str	r3, [r1, #0]
 80031f8:	e015      	b.n	8003226 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031fa:	4b26      	ldr	r3, [pc, #152]	; (8003294 <HAL_RCC_OscConfig+0x270>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003200:	f7fe fda4 	bl	8001d4c <HAL_GetTick>
 8003204:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003206:	e008      	b.n	800321a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003208:	f7fe fda0 	bl	8001d4c <HAL_GetTick>
 800320c:	4602      	mov	r2, r0
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	1ad3      	subs	r3, r2, r3
 8003212:	2b02      	cmp	r3, #2
 8003214:	d901      	bls.n	800321a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003216:	2303      	movs	r3, #3
 8003218:	e180      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800321a:	4b1d      	ldr	r3, [pc, #116]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	2b00      	cmp	r3, #0
 8003224:	d1f0      	bne.n	8003208 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d03a      	beq.n	80032a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d019      	beq.n	800326e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800323a:	4b17      	ldr	r3, [pc, #92]	; (8003298 <HAL_RCC_OscConfig+0x274>)
 800323c:	2201      	movs	r2, #1
 800323e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003240:	f7fe fd84 	bl	8001d4c <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003248:	f7fe fd80 	bl	8001d4c <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e160      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800325a:	4b0d      	ldr	r3, [pc, #52]	; (8003290 <HAL_RCC_OscConfig+0x26c>)
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003266:	2001      	movs	r0, #1
 8003268:	f000 face 	bl	8003808 <RCC_Delay>
 800326c:	e01c      	b.n	80032a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800326e:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <HAL_RCC_OscConfig+0x274>)
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003274:	f7fe fd6a 	bl	8001d4c <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327a:	e00f      	b.n	800329c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800327c:	f7fe fd66 	bl	8001d4c <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b02      	cmp	r3, #2
 8003288:	d908      	bls.n	800329c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e146      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
 800328e:	bf00      	nop
 8003290:	40021000 	.word	0x40021000
 8003294:	42420000 	.word	0x42420000
 8003298:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	4b92      	ldr	r3, [pc, #584]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1e9      	bne.n	800327c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80a6 	beq.w	8003402 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b8b      	ldr	r3, [pc, #556]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 80032bc:	69db      	ldr	r3, [r3, #28]
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10d      	bne.n	80032e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	4b88      	ldr	r3, [pc, #544]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	4a87      	ldr	r2, [pc, #540]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	61d3      	str	r3, [r2, #28]
 80032d2:	4b85      	ldr	r3, [pc, #532]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 80032d4:	69db      	ldr	r3, [r3, #28]
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	4b82      	ldr	r3, [pc, #520]	; (80034ec <HAL_RCC_OscConfig+0x4c8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d118      	bne.n	8003320 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ee:	4b7f      	ldr	r3, [pc, #508]	; (80034ec <HAL_RCC_OscConfig+0x4c8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a7e      	ldr	r2, [pc, #504]	; (80034ec <HAL_RCC_OscConfig+0x4c8>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7fe fd27 	bl	8001d4c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003302:	f7fe fd23 	bl	8001d4c <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b64      	cmp	r3, #100	; 0x64
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e103      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003314:	4b75      	ldr	r3, [pc, #468]	; (80034ec <HAL_RCC_OscConfig+0x4c8>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2b01      	cmp	r3, #1
 8003326:	d106      	bne.n	8003336 <HAL_RCC_OscConfig+0x312>
 8003328:	4b6f      	ldr	r3, [pc, #444]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4a6e      	ldr	r2, [pc, #440]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6213      	str	r3, [r2, #32]
 8003334:	e02d      	b.n	8003392 <HAL_RCC_OscConfig+0x36e>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d10c      	bne.n	8003358 <HAL_RCC_OscConfig+0x334>
 800333e:	4b6a      	ldr	r3, [pc, #424]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4a69      	ldr	r2, [pc, #420]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	f023 0301 	bic.w	r3, r3, #1
 8003348:	6213      	str	r3, [r2, #32]
 800334a:	4b67      	ldr	r3, [pc, #412]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	4a66      	ldr	r2, [pc, #408]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	f023 0304 	bic.w	r3, r3, #4
 8003354:	6213      	str	r3, [r2, #32]
 8003356:	e01c      	b.n	8003392 <HAL_RCC_OscConfig+0x36e>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b05      	cmp	r3, #5
 800335e:	d10c      	bne.n	800337a <HAL_RCC_OscConfig+0x356>
 8003360:	4b61      	ldr	r3, [pc, #388]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003362:	6a1b      	ldr	r3, [r3, #32]
 8003364:	4a60      	ldr	r2, [pc, #384]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003366:	f043 0304 	orr.w	r3, r3, #4
 800336a:	6213      	str	r3, [r2, #32]
 800336c:	4b5e      	ldr	r3, [pc, #376]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 800336e:	6a1b      	ldr	r3, [r3, #32]
 8003370:	4a5d      	ldr	r2, [pc, #372]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003372:	f043 0301 	orr.w	r3, r3, #1
 8003376:	6213      	str	r3, [r2, #32]
 8003378:	e00b      	b.n	8003392 <HAL_RCC_OscConfig+0x36e>
 800337a:	4b5b      	ldr	r3, [pc, #364]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	4a5a      	ldr	r2, [pc, #360]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003380:	f023 0301 	bic.w	r3, r3, #1
 8003384:	6213      	str	r3, [r2, #32]
 8003386:	4b58      	ldr	r3, [pc, #352]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	4a57      	ldr	r2, [pc, #348]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	f023 0304 	bic.w	r3, r3, #4
 8003390:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d015      	beq.n	80033c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800339a:	f7fe fcd7 	bl	8001d4c <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a0:	e00a      	b.n	80033b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033a2:	f7fe fcd3 	bl	8001d4c <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e0b1      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033b8:	4b4b      	ldr	r3, [pc, #300]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 80033ba:	6a1b      	ldr	r3, [r3, #32]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ee      	beq.n	80033a2 <HAL_RCC_OscConfig+0x37e>
 80033c4:	e014      	b.n	80033f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c6:	f7fe fcc1 	bl	8001d4c <HAL_GetTick>
 80033ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033cc:	e00a      	b.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ce:	f7fe fcbd 	bl	8001d4c <HAL_GetTick>
 80033d2:	4602      	mov	r2, r0
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033dc:	4293      	cmp	r3, r2
 80033de:	d901      	bls.n	80033e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033e0:	2303      	movs	r3, #3
 80033e2:	e09b      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033e4:	4b40      	ldr	r3, [pc, #256]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 80033e6:	6a1b      	ldr	r3, [r3, #32]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1ee      	bne.n	80033ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033f0:	7dfb      	ldrb	r3, [r7, #23]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d105      	bne.n	8003402 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033f6:	4b3c      	ldr	r3, [pc, #240]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	4a3b      	ldr	r2, [pc, #236]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 80033fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003400:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	69db      	ldr	r3, [r3, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 8087 	beq.w	800351a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800340c:	4b36      	ldr	r3, [pc, #216]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	f003 030c 	and.w	r3, r3, #12
 8003414:	2b08      	cmp	r3, #8
 8003416:	d061      	beq.n	80034dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	69db      	ldr	r3, [r3, #28]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d146      	bne.n	80034ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003420:	4b33      	ldr	r3, [pc, #204]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003426:	f7fe fc91 	bl	8001d4c <HAL_GetTick>
 800342a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800342e:	f7fe fc8d 	bl	8001d4c <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e06d      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003440:	4b29      	ldr	r3, [pc, #164]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1f0      	bne.n	800342e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a1b      	ldr	r3, [r3, #32]
 8003450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003454:	d108      	bne.n	8003468 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003456:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	4921      	ldr	r1, [pc, #132]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003468:	4b1f      	ldr	r3, [pc, #124]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6a19      	ldr	r1, [r3, #32]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	430b      	orrs	r3, r1
 800347a:	491b      	ldr	r1, [pc, #108]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 800347c:	4313      	orrs	r3, r2
 800347e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003480:	4b1b      	ldr	r3, [pc, #108]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 8003482:	2201      	movs	r2, #1
 8003484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003486:	f7fe fc61 	bl	8001d4c <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800348c:	e008      	b.n	80034a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800348e:	f7fe fc5d 	bl	8001d4c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	2b02      	cmp	r3, #2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e03d      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80034a0:	4b11      	ldr	r3, [pc, #68]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0f0      	beq.n	800348e <HAL_RCC_OscConfig+0x46a>
 80034ac:	e035      	b.n	800351a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034ae:	4b10      	ldr	r3, [pc, #64]	; (80034f0 <HAL_RCC_OscConfig+0x4cc>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b4:	f7fe fc4a 	bl	8001d4c <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fe fc46 	bl	8001d4c <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e026      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034ce:	4b06      	ldr	r3, [pc, #24]	; (80034e8 <HAL_RCC_OscConfig+0x4c4>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x498>
 80034da:	e01e      	b.n	800351a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d107      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e019      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
 80034e8:	40021000 	.word	0x40021000
 80034ec:	40007000 	.word	0x40007000
 80034f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034f4:	4b0b      	ldr	r3, [pc, #44]	; (8003524 <HAL_RCC_OscConfig+0x500>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a1b      	ldr	r3, [r3, #32]
 8003504:	429a      	cmp	r2, r3
 8003506:	d106      	bne.n	8003516 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003512:	429a      	cmp	r2, r3
 8003514:	d001      	beq.n	800351a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e000      	b.n	800351c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800351a:	2300      	movs	r3, #0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3718      	adds	r7, #24
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	40021000 	.word	0x40021000

08003528 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003538:	2301      	movs	r3, #1
 800353a:	e0d0      	b.n	80036de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800353c:	4b6a      	ldr	r3, [pc, #424]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f003 0307 	and.w	r3, r3, #7
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	429a      	cmp	r2, r3
 8003548:	d910      	bls.n	800356c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800354a:	4b67      	ldr	r3, [pc, #412]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f023 0207 	bic.w	r2, r3, #7
 8003552:	4965      	ldr	r1, [pc, #404]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800355a:	4b63      	ldr	r3, [pc, #396]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	429a      	cmp	r2, r3
 8003566:	d001      	beq.n	800356c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e0b8      	b.n	80036de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d020      	beq.n	80035ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d005      	beq.n	8003590 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003584:	4b59      	ldr	r3, [pc, #356]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	4a58      	ldr	r2, [pc, #352]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 800358a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800358e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0308 	and.w	r3, r3, #8
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800359c:	4b53      	ldr	r3, [pc, #332]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 800359e:	685b      	ldr	r3, [r3, #4]
 80035a0:	4a52      	ldr	r2, [pc, #328]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80035a2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80035a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035a8:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	494d      	ldr	r1, [pc, #308]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80035b6:	4313      	orrs	r3, r2
 80035b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d040      	beq.n	8003648 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d107      	bne.n	80035de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d115      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e07f      	b.n	80036de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d107      	bne.n	80035f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e6:	4b41      	ldr	r3, [pc, #260]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e073      	b.n	80036de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035f6:	4b3d      	ldr	r3, [pc, #244]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0302 	and.w	r3, r3, #2
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d101      	bne.n	8003606 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e06b      	b.n	80036de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003606:	4b39      	ldr	r3, [pc, #228]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f023 0203 	bic.w	r2, r3, #3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	4936      	ldr	r1, [pc, #216]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	4313      	orrs	r3, r2
 8003616:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003618:	f7fe fb98 	bl	8001d4c <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800361e:	e00a      	b.n	8003636 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003620:	f7fe fb94 	bl	8001d4c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e053      	b.n	80036de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f003 020c 	and.w	r2, r3, #12
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	429a      	cmp	r2, r3
 8003646:	d1eb      	bne.n	8003620 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	429a      	cmp	r2, r3
 8003654:	d210      	bcs.n	8003678 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003656:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f023 0207 	bic.w	r2, r3, #7
 800365e:	4922      	ldr	r1, [pc, #136]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	4313      	orrs	r3, r2
 8003664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0307 	and.w	r3, r3, #7
 800366e:	683a      	ldr	r2, [r7, #0]
 8003670:	429a      	cmp	r2, r3
 8003672:	d001      	beq.n	8003678 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e032      	b.n	80036de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003684:	4b19      	ldr	r3, [pc, #100]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	68db      	ldr	r3, [r3, #12]
 8003690:	4916      	ldr	r1, [pc, #88]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	4313      	orrs	r3, r2
 8003694:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d009      	beq.n	80036b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80036a2:	4b12      	ldr	r3, [pc, #72]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	490e      	ldr	r1, [pc, #56]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80036b2:	4313      	orrs	r3, r2
 80036b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80036b6:	f000 f821 	bl	80036fc <HAL_RCC_GetSysClockFreq>
 80036ba:	4602      	mov	r2, r0
 80036bc:	4b0b      	ldr	r3, [pc, #44]	; (80036ec <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	490a      	ldr	r1, [pc, #40]	; (80036f0 <HAL_RCC_ClockConfig+0x1c8>)
 80036c8:	5ccb      	ldrb	r3, [r1, r3]
 80036ca:	fa22 f303 	lsr.w	r3, r2, r3
 80036ce:	4a09      	ldr	r2, [pc, #36]	; (80036f4 <HAL_RCC_ClockConfig+0x1cc>)
 80036d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036d2:	4b09      	ldr	r3, [pc, #36]	; (80036f8 <HAL_RCC_ClockConfig+0x1d0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7fe faf6 	bl	8001cc8 <HAL_InitTick>

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3710      	adds	r7, #16
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40022000 	.word	0x40022000
 80036ec:	40021000 	.word	0x40021000
 80036f0:	080073d0 	.word	0x080073d0
 80036f4:	20000008 	.word	0x20000008
 80036f8:	2000000c 	.word	0x2000000c

080036fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b087      	sub	sp, #28
 8003700:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
 800370e:	2300      	movs	r3, #0
 8003710:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003716:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <HAL_RCC_GetSysClockFreq+0x94>)
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f003 030c 	and.w	r3, r3, #12
 8003722:	2b04      	cmp	r3, #4
 8003724:	d002      	beq.n	800372c <HAL_RCC_GetSysClockFreq+0x30>
 8003726:	2b08      	cmp	r3, #8
 8003728:	d003      	beq.n	8003732 <HAL_RCC_GetSysClockFreq+0x36>
 800372a:	e027      	b.n	800377c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <HAL_RCC_GetSysClockFreq+0x98>)
 800372e:	613b      	str	r3, [r7, #16]
      break;
 8003730:	e027      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	0c9b      	lsrs	r3, r3, #18
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	4a17      	ldr	r2, [pc, #92]	; (8003798 <HAL_RCC_GetSysClockFreq+0x9c>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d010      	beq.n	800376c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800374a:	4b11      	ldr	r3, [pc, #68]	; (8003790 <HAL_RCC_GetSysClockFreq+0x94>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	0c5b      	lsrs	r3, r3, #17
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	4a11      	ldr	r2, [pc, #68]	; (800379c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003756:	5cd3      	ldrb	r3, [r2, r3]
 8003758:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	4a0d      	ldr	r2, [pc, #52]	; (8003794 <HAL_RCC_GetSysClockFreq+0x98>)
 800375e:	fb03 f202 	mul.w	r2, r3, r2
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	fbb2 f3f3 	udiv	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	e004      	b.n	8003776 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003770:	fb02 f303 	mul.w	r3, r2, r3
 8003774:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	613b      	str	r3, [r7, #16]
      break;
 800377a:	e002      	b.n	8003782 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800377c:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetSysClockFreq+0x98>)
 800377e:	613b      	str	r3, [r7, #16]
      break;
 8003780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003782:	693b      	ldr	r3, [r7, #16]
}
 8003784:	4618      	mov	r0, r3
 8003786:	371c      	adds	r7, #28
 8003788:	46bd      	mov	sp, r7
 800378a:	bc80      	pop	{r7}
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40021000 	.word	0x40021000
 8003794:	007a1200 	.word	0x007a1200
 8003798:	080073e8 	.word	0x080073e8
 800379c:	080073f8 	.word	0x080073f8
 80037a0:	003d0900 	.word	0x003d0900

080037a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037a4:	b480      	push	{r7}
 80037a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037a8:	4b02      	ldr	r3, [pc, #8]	; (80037b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80037aa:	681b      	ldr	r3, [r3, #0]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	20000008 	.word	0x20000008

080037b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037bc:	f7ff fff2 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037c0:	4602      	mov	r2, r0
 80037c2:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	0a1b      	lsrs	r3, r3, #8
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	4903      	ldr	r1, [pc, #12]	; (80037dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80037ce:	5ccb      	ldrb	r3, [r1, r3]
 80037d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	40021000 	.word	0x40021000
 80037dc:	080073e0 	.word	0x080073e0

080037e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80037e4:	f7ff ffde 	bl	80037a4 <HAL_RCC_GetHCLKFreq>
 80037e8:	4602      	mov	r2, r0
 80037ea:	4b05      	ldr	r3, [pc, #20]	; (8003800 <HAL_RCC_GetPCLK2Freq+0x20>)
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	0adb      	lsrs	r3, r3, #11
 80037f0:	f003 0307 	and.w	r3, r3, #7
 80037f4:	4903      	ldr	r1, [pc, #12]	; (8003804 <HAL_RCC_GetPCLK2Freq+0x24>)
 80037f6:	5ccb      	ldrb	r3, [r1, r3]
 80037f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	40021000 	.word	0x40021000
 8003804:	080073e0 	.word	0x080073e0

08003808 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <RCC_Delay+0x34>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a0a      	ldr	r2, [pc, #40]	; (8003840 <RCC_Delay+0x38>)
 8003816:	fba2 2303 	umull	r2, r3, r2, r3
 800381a:	0a5b      	lsrs	r3, r3, #9
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003824:	bf00      	nop
  }
  while (Delay --);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	1e5a      	subs	r2, r3, #1
 800382a:	60fa      	str	r2, [r7, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f9      	bne.n	8003824 <RCC_Delay+0x1c>
}
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	3714      	adds	r7, #20
 8003836:	46bd      	mov	sp, r7
 8003838:	bc80      	pop	{r7}
 800383a:	4770      	bx	lr
 800383c:	20000008 	.word	0x20000008
 8003840:	10624dd3 	.word	0x10624dd3

08003844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d101      	bne.n	8003856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e076      	b.n	8003944 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385a:	2b00      	cmp	r3, #0
 800385c:	d108      	bne.n	8003870 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003866:	d009      	beq.n	800387c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	61da      	str	r2, [r3, #28]
 800386e:	e005      	b.n	800387c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003888:	b2db      	uxtb	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d106      	bne.n	800389c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7fd fd08 	bl	80012ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2202      	movs	r2, #2
 80038a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80038c4:	431a      	orrs	r2, r3
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	68db      	ldr	r3, [r3, #12]
 80038ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038ce:	431a      	orrs	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f003 0302 	and.w	r3, r3, #2
 80038d8:	431a      	orrs	r2, r3
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	695b      	ldr	r3, [r3, #20]
 80038de:	f003 0301 	and.w	r3, r3, #1
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	699b      	ldr	r3, [r3, #24]
 80038e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003900:	ea42 0103 	orr.w	r1, r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	430a      	orrs	r2, r1
 8003912:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	0c1a      	lsrs	r2, r3, #16
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f002 0204 	and.w	r2, r2, #4
 8003922:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	69da      	ldr	r2, [r3, #28]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003932:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3708      	adds	r7, #8
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	4613      	mov	r3, r2
 800395a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800395c:	2300      	movs	r3, #0
 800395e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003966:	2b01      	cmp	r3, #1
 8003968:	d101      	bne.n	800396e <HAL_SPI_Transmit+0x22>
 800396a:	2302      	movs	r3, #2
 800396c:	e12d      	b.n	8003bca <HAL_SPI_Transmit+0x27e>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003976:	f7fe f9e9 	bl	8001d4c <HAL_GetTick>
 800397a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003986:	b2db      	uxtb	r3, r3
 8003988:	2b01      	cmp	r3, #1
 800398a:	d002      	beq.n	8003992 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800398c:	2302      	movs	r3, #2
 800398e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003990:	e116      	b.n	8003bc0 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d002      	beq.n	800399e <HAL_SPI_Transmit+0x52>
 8003998:	88fb      	ldrh	r3, [r7, #6]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d102      	bne.n	80039a4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039a2:	e10d      	b.n	8003bc0 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2203      	movs	r2, #3
 80039a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2200      	movs	r2, #0
 80039b0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	88fa      	ldrh	r2, [r7, #6]
 80039bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	88fa      	ldrh	r2, [r7, #6]
 80039c2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	2200      	movs	r2, #0
 80039c8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2200      	movs	r2, #0
 80039ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2200      	movs	r2, #0
 80039e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ea:	d10f      	bne.n	8003a0c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a0a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a16:	2b40      	cmp	r3, #64	; 0x40
 8003a18:	d007      	beq.n	8003a2a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a28:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	68db      	ldr	r3, [r3, #12]
 8003a2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a32:	d14f      	bne.n	8003ad4 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <HAL_SPI_Transmit+0xf6>
 8003a3c:	8afb      	ldrh	r3, [r7, #22]
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d142      	bne.n	8003ac8 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	881a      	ldrh	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a52:	1c9a      	adds	r2, r3, #2
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003a66:	e02f      	b.n	8003ac8 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	f003 0302 	and.w	r3, r3, #2
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d112      	bne.n	8003a9c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	881a      	ldrh	r2, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	1c9a      	adds	r2, r3, #2
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	3b01      	subs	r3, #1
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	86da      	strh	r2, [r3, #54]	; 0x36
 8003a9a:	e015      	b.n	8003ac8 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a9c:	f7fe f956 	bl	8001d4c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d803      	bhi.n	8003ab4 <HAL_SPI_Transmit+0x168>
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab2:	d102      	bne.n	8003aba <HAL_SPI_Transmit+0x16e>
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003ac6:	e07b      	b.n	8003bc0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d1ca      	bne.n	8003a68 <HAL_SPI_Transmit+0x11c>
 8003ad2:	e050      	b.n	8003b76 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <HAL_SPI_Transmit+0x196>
 8003adc:	8afb      	ldrh	r3, [r7, #22]
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d144      	bne.n	8003b6c <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	330c      	adds	r3, #12
 8003aec:	7812      	ldrb	r2, [r2, #0]
 8003aee:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af4:	1c5a      	adds	r2, r3, #1
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	3b01      	subs	r3, #1
 8003b02:	b29a      	uxth	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b08:	e030      	b.n	8003b6c <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	d113      	bne.n	8003b40 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	330c      	adds	r3, #12
 8003b22:	7812      	ldrb	r2, [r2, #0]
 8003b24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	3b01      	subs	r3, #1
 8003b38:	b29a      	uxth	r2, r3
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b3e:	e015      	b.n	8003b6c <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b40:	f7fe f904 	bl	8001d4c <HAL_GetTick>
 8003b44:	4602      	mov	r2, r0
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	1ad3      	subs	r3, r2, r3
 8003b4a:	683a      	ldr	r2, [r7, #0]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d803      	bhi.n	8003b58 <HAL_SPI_Transmit+0x20c>
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b56:	d102      	bne.n	8003b5e <HAL_SPI_Transmit+0x212>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003b6a:	e029      	b.n	8003bc0 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b70:	b29b      	uxth	r3, r3
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d1c9      	bne.n	8003b0a <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b76:	69ba      	ldr	r2, [r7, #24]
 8003b78:	6839      	ldr	r1, [r7, #0]
 8003b7a:	68f8      	ldr	r0, [r7, #12]
 8003b7c:	f000 fa6e 	bl	800405c <SPI_EndRxTxTransaction>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d002      	beq.n	8003b8c <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10a      	bne.n	8003baa <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b94:	2300      	movs	r3, #0
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	613b      	str	r3, [r7, #16]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	613b      	str	r3, [r7, #16]
 8003ba8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	77fb      	strb	r3, [r7, #31]
 8003bb6:	e003      	b.n	8003bc0 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bc8:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3720      	adds	r7, #32
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b08c      	sub	sp, #48	; 0x30
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	60f8      	str	r0, [r7, #12]
 8003bda:	60b9      	str	r1, [r7, #8]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003be0:	2301      	movs	r3, #1
 8003be2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003be4:	2300      	movs	r3, #0
 8003be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d101      	bne.n	8003bf8 <HAL_SPI_TransmitReceive+0x26>
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	e198      	b.n	8003f2a <HAL_SPI_TransmitReceive+0x358>
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003c00:	f7fe f8a4 	bl	8001d4c <HAL_GetTick>
 8003c04:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003c16:	887b      	ldrh	r3, [r7, #2]
 8003c18:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003c1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d00f      	beq.n	8003c42 <HAL_SPI_TransmitReceive+0x70>
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c28:	d107      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <HAL_SPI_TransmitReceive+0x68>
 8003c32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d003      	beq.n	8003c42 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c40:	e16d      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d005      	beq.n	8003c54 <HAL_SPI_TransmitReceive+0x82>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d002      	beq.n	8003c54 <HAL_SPI_TransmitReceive+0x82>
 8003c4e:	887b      	ldrh	r3, [r7, #2]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d103      	bne.n	8003c5c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003c5a:	e160      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d003      	beq.n	8003c70 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2205      	movs	r2, #5
 8003c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	687a      	ldr	r2, [r7, #4]
 8003c7a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	887a      	ldrh	r2, [r7, #2]
 8003c86:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	887a      	ldrh	r2, [r7, #2]
 8003c92:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	887a      	ldrh	r2, [r7, #2]
 8003c98:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d007      	beq.n	8003cc4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cc2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ccc:	d17c      	bne.n	8003dc8 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d002      	beq.n	8003cdc <HAL_SPI_TransmitReceive+0x10a>
 8003cd6:	8b7b      	ldrh	r3, [r7, #26]
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d16a      	bne.n	8003db2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce0:	881a      	ldrh	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cec:	1c9a      	adds	r2, r3, #2
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf6:	b29b      	uxth	r3, r3
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d00:	e057      	b.n	8003db2 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	f003 0302 	and.w	r3, r3, #2
 8003d0c:	2b02      	cmp	r3, #2
 8003d0e:	d11b      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x176>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_SPI_TransmitReceive+0x176>
 8003d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d113      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d24:	881a      	ldrh	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	1c9a      	adds	r2, r3, #2
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d3a:	b29b      	uxth	r3, r3
 8003d3c:	3b01      	subs	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003d44:	2300      	movs	r3, #0
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d119      	bne.n	8003d8a <HAL_SPI_TransmitReceive+0x1b8>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d014      	beq.n	8003d8a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68da      	ldr	r2, [r3, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6a:	b292      	uxth	r2, r2
 8003d6c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d72:	1c9a      	adds	r2, r3, #2
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d86:	2301      	movs	r3, #1
 8003d88:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d8a:	f7fd ffdf 	bl	8001d4c <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d80b      	bhi.n	8003db2 <HAL_SPI_TransmitReceive+0x1e0>
 8003d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d007      	beq.n	8003db2 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003db0:	e0b5      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1a2      	bne.n	8003d02 <HAL_SPI_TransmitReceive+0x130>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d19d      	bne.n	8003d02 <HAL_SPI_TransmitReceive+0x130>
 8003dc6:	e080      	b.n	8003eca <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_SPI_TransmitReceive+0x204>
 8003dd0:	8b7b      	ldrh	r3, [r7, #26]
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d16f      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	7812      	ldrb	r2, [r2, #0]
 8003de2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	1c5a      	adds	r2, r3, #1
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	3b01      	subs	r3, #1
 8003df6:	b29a      	uxth	r2, r3
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dfc:	e05b      	b.n	8003eb6 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f003 0302 	and.w	r3, r3, #2
 8003e08:	2b02      	cmp	r3, #2
 8003e0a:	d11c      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x274>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d017      	beq.n	8003e46 <HAL_SPI_TransmitReceive+0x274>
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d114      	bne.n	8003e46 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	330c      	adds	r3, #12
 8003e26:	7812      	ldrb	r2, [r2, #0]
 8003e28:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2e:	1c5a      	adds	r2, r3, #1
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e42:	2300      	movs	r3, #0
 8003e44:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	f003 0301 	and.w	r3, r3, #1
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d119      	bne.n	8003e88 <HAL_SPI_TransmitReceive+0x2b6>
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d014      	beq.n	8003e88 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e68:	b2d2      	uxtb	r2, r2
 8003e6a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003e84:	2301      	movs	r3, #1
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003e88:	f7fd ff60 	bl	8001d4c <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d803      	bhi.n	8003ea0 <HAL_SPI_TransmitReceive+0x2ce>
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e9e:	d102      	bne.n	8003ea6 <HAL_SPI_TransmitReceive+0x2d4>
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d107      	bne.n	8003eb6 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003eb4:	e033      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d19e      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x22c>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d199      	bne.n	8003dfe <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ecc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f8c4 	bl	800405c <SPI_EndRxTxTransaction>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d006      	beq.n	8003ee8 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003ee6:	e01a      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	689b      	ldr	r3, [r3, #8]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d10a      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	617b      	str	r3, [r7, #20]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68db      	ldr	r3, [r3, #12]
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689b      	ldr	r3, [r3, #8]
 8003f02:	617b      	str	r3, [r7, #20]
 8003f04:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f14:	e003      	b.n	8003f1e <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2201      	movs	r2, #1
 8003f1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f26:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3730      	adds	r7, #48	; 0x30
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f40:	b2db      	uxtb	r3, r3
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bc80      	pop	{r7}
 8003f4a:	4770      	bx	lr

08003f4c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b088      	sub	sp, #32
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	603b      	str	r3, [r7, #0]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f5c:	f7fd fef6 	bl	8001d4c <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f64:	1a9b      	subs	r3, r3, r2
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	4413      	add	r3, r2
 8003f6a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f6c:	f7fd feee 	bl	8001d4c <HAL_GetTick>
 8003f70:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f72:	4b39      	ldr	r3, [pc, #228]	; (8004058 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	015b      	lsls	r3, r3, #5
 8003f78:	0d1b      	lsrs	r3, r3, #20
 8003f7a:	69fa      	ldr	r2, [r7, #28]
 8003f7c:	fb02 f303 	mul.w	r3, r2, r3
 8003f80:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f82:	e054      	b.n	800402e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f8a:	d050      	beq.n	800402e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f8c:	f7fd fede 	bl	8001d4c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	69bb      	ldr	r3, [r7, #24]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	69fa      	ldr	r2, [r7, #28]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d902      	bls.n	8003fa2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d13d      	bne.n	800401e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685a      	ldr	r2, [r3, #4]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003fb0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003fba:	d111      	bne.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fc4:	d004      	beq.n	8003fd0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d107      	bne.n	8003fe0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fde:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe8:	d10f      	bne.n	800400a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004008:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e017      	b.n	800404e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d101      	bne.n	8004028 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004024:	2300      	movs	r3, #0
 8004026:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004028:	697b      	ldr	r3, [r7, #20]
 800402a:	3b01      	subs	r3, #1
 800402c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	4013      	ands	r3, r2
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	429a      	cmp	r2, r3
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	461a      	mov	r2, r3
 8004046:	79fb      	ldrb	r3, [r7, #7]
 8004048:	429a      	cmp	r2, r3
 800404a:	d19b      	bne.n	8003f84 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3720      	adds	r7, #32
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	20000008 	.word	0x20000008

0800405c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af02      	add	r7, sp, #8
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	2200      	movs	r2, #0
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff ff6a 	bl	8003f4c <SPI_WaitFlagStateUntilTimeout>
 8004078:	4603      	mov	r3, r0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d007      	beq.n	800408e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004082:	f043 0220 	orr.w	r2, r3, #32
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e000      	b.n	8004090 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}

08004098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e041      	b.n	800412e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd fd38 	bl	8001b34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2202      	movs	r2, #2
 80040c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	3304      	adds	r3, #4
 80040d4:	4619      	mov	r1, r3
 80040d6:	4610      	mov	r0, r2
 80040d8:	f000 f940 	bl	800435c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3708      	adds	r7, #8
 8004132:	46bd      	mov	sp, r7
 8004134:	bd80      	pop	{r7, pc}
	...

08004138 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004146:	b2db      	uxtb	r3, r3
 8004148:	2b01      	cmp	r3, #1
 800414a:	d001      	beq.n	8004150 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e032      	b.n	80041b6 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2202      	movs	r2, #2
 8004154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <HAL_TIM_Base_Start+0x88>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d00e      	beq.n	8004180 <HAL_TIM_Base_Start+0x48>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800416a:	d009      	beq.n	8004180 <HAL_TIM_Base_Start+0x48>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a14      	ldr	r2, [pc, #80]	; (80041c4 <HAL_TIM_Base_Start+0x8c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d004      	beq.n	8004180 <HAL_TIM_Base_Start+0x48>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a13      	ldr	r2, [pc, #76]	; (80041c8 <HAL_TIM_Base_Start+0x90>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d111      	bne.n	80041a4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f003 0307 	and.w	r3, r3, #7
 800418a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	2b06      	cmp	r3, #6
 8004190:	d010      	beq.n	80041b4 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f042 0201 	orr.w	r2, r2, #1
 80041a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041a2:	e007      	b.n	80041b4 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041b4:	2300      	movs	r3, #0
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3714      	adds	r7, #20
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bc80      	pop	{r7}
 80041be:	4770      	bx	lr
 80041c0:	40012c00 	.word	0x40012c00
 80041c4:	40000400 	.word	0x40000400
 80041c8:	40000800 	.word	0x40000800

080041cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80041d6:	2300      	movs	r3, #0
 80041d8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_TIM_ConfigClockSource+0x1c>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e0b4      	b.n	8004352 <HAL_TIM_ConfigClockSource+0x186>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2202      	movs	r2, #2
 80041f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004206:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800420e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004220:	d03e      	beq.n	80042a0 <HAL_TIM_ConfigClockSource+0xd4>
 8004222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004226:	f200 8087 	bhi.w	8004338 <HAL_TIM_ConfigClockSource+0x16c>
 800422a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800422e:	f000 8086 	beq.w	800433e <HAL_TIM_ConfigClockSource+0x172>
 8004232:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004236:	d87f      	bhi.n	8004338 <HAL_TIM_ConfigClockSource+0x16c>
 8004238:	2b70      	cmp	r3, #112	; 0x70
 800423a:	d01a      	beq.n	8004272 <HAL_TIM_ConfigClockSource+0xa6>
 800423c:	2b70      	cmp	r3, #112	; 0x70
 800423e:	d87b      	bhi.n	8004338 <HAL_TIM_ConfigClockSource+0x16c>
 8004240:	2b60      	cmp	r3, #96	; 0x60
 8004242:	d050      	beq.n	80042e6 <HAL_TIM_ConfigClockSource+0x11a>
 8004244:	2b60      	cmp	r3, #96	; 0x60
 8004246:	d877      	bhi.n	8004338 <HAL_TIM_ConfigClockSource+0x16c>
 8004248:	2b50      	cmp	r3, #80	; 0x50
 800424a:	d03c      	beq.n	80042c6 <HAL_TIM_ConfigClockSource+0xfa>
 800424c:	2b50      	cmp	r3, #80	; 0x50
 800424e:	d873      	bhi.n	8004338 <HAL_TIM_ConfigClockSource+0x16c>
 8004250:	2b40      	cmp	r3, #64	; 0x40
 8004252:	d058      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0x13a>
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d86f      	bhi.n	8004338 <HAL_TIM_ConfigClockSource+0x16c>
 8004258:	2b30      	cmp	r3, #48	; 0x30
 800425a:	d064      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x15a>
 800425c:	2b30      	cmp	r3, #48	; 0x30
 800425e:	d86b      	bhi.n	8004338 <HAL_TIM_ConfigClockSource+0x16c>
 8004260:	2b20      	cmp	r3, #32
 8004262:	d060      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x15a>
 8004264:	2b20      	cmp	r3, #32
 8004266:	d867      	bhi.n	8004338 <HAL_TIM_ConfigClockSource+0x16c>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d05c      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x15a>
 800426c:	2b10      	cmp	r3, #16
 800426e:	d05a      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0x15a>
 8004270:	e062      	b.n	8004338 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004282:	f000 f944 	bl	800450e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004294:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	68ba      	ldr	r2, [r7, #8]
 800429c:	609a      	str	r2, [r3, #8]
      break;
 800429e:	e04f      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042b0:	f000 f92d 	bl	800450e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	689a      	ldr	r2, [r3, #8]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c2:	609a      	str	r2, [r3, #8]
      break;
 80042c4:	e03c      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80042d2:	461a      	mov	r2, r3
 80042d4:	f000 f8a4 	bl	8004420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2150      	movs	r1, #80	; 0x50
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f8fb 	bl	80044da <TIM_ITRx_SetConfig>
      break;
 80042e4:	e02c      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042f2:	461a      	mov	r2, r3
 80042f4:	f000 f8c2 	bl	800447c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	2160      	movs	r1, #96	; 0x60
 80042fe:	4618      	mov	r0, r3
 8004300:	f000 f8eb 	bl	80044da <TIM_ITRx_SetConfig>
      break;
 8004304:	e01c      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004312:	461a      	mov	r2, r3
 8004314:	f000 f884 	bl	8004420 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	2140      	movs	r1, #64	; 0x40
 800431e:	4618      	mov	r0, r3
 8004320:	f000 f8db 	bl	80044da <TIM_ITRx_SetConfig>
      break;
 8004324:	e00c      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4619      	mov	r1, r3
 8004330:	4610      	mov	r0, r2
 8004332:	f000 f8d2 	bl	80044da <TIM_ITRx_SetConfig>
      break;
 8004336:	e003      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	73fb      	strb	r3, [r7, #15]
      break;
 800433c:	e000      	b.n	8004340 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800433e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2201      	movs	r2, #1
 8004344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004350:	7bfb      	ldrb	r3, [r7, #15]
}
 8004352:	4618      	mov	r0, r3
 8004354:	3710      	adds	r7, #16
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a29      	ldr	r2, [pc, #164]	; (8004414 <TIM_Base_SetConfig+0xb8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d00b      	beq.n	800438c <TIM_Base_SetConfig+0x30>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800437a:	d007      	beq.n	800438c <TIM_Base_SetConfig+0x30>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a26      	ldr	r2, [pc, #152]	; (8004418 <TIM_Base_SetConfig+0xbc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d003      	beq.n	800438c <TIM_Base_SetConfig+0x30>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a25      	ldr	r2, [pc, #148]	; (800441c <TIM_Base_SetConfig+0xc0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d108      	bne.n	800439e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004392:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004394:	683b      	ldr	r3, [r7, #0]
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	4313      	orrs	r3, r2
 800439c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <TIM_Base_SetConfig+0xb8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d00b      	beq.n	80043be <TIM_Base_SetConfig+0x62>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ac:	d007      	beq.n	80043be <TIM_Base_SetConfig+0x62>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a19      	ldr	r2, [pc, #100]	; (8004418 <TIM_Base_SetConfig+0xbc>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d003      	beq.n	80043be <TIM_Base_SetConfig+0x62>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a18      	ldr	r2, [pc, #96]	; (800441c <TIM_Base_SetConfig+0xc0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d108      	bne.n	80043d0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68fa      	ldr	r2, [r7, #12]
 80043e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689a      	ldr	r2, [r3, #8]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4a07      	ldr	r2, [pc, #28]	; (8004414 <TIM_Base_SetConfig+0xb8>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d103      	bne.n	8004404 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	615a      	str	r2, [r3, #20]
}
 800440a:	bf00      	nop
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	bc80      	pop	{r7}
 8004412:	4770      	bx	lr
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40000400 	.word	0x40000400
 800441c:	40000800 	.word	0x40000800

08004420 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	6a1b      	ldr	r3, [r3, #32]
 8004430:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1b      	ldr	r3, [r3, #32]
 8004436:	f023 0201 	bic.w	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	699b      	ldr	r3, [r3, #24]
 8004442:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800444a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	011b      	lsls	r3, r3, #4
 8004450:	693a      	ldr	r2, [r7, #16]
 8004452:	4313      	orrs	r3, r2
 8004454:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f023 030a 	bic.w	r3, r3, #10
 800445c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4313      	orrs	r3, r2
 8004464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	697a      	ldr	r2, [r7, #20]
 8004470:	621a      	str	r2, [r3, #32]
}
 8004472:	bf00      	nop
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr

0800447c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800447c:	b480      	push	{r7}
 800447e:	b087      	sub	sp, #28
 8004480:	af00      	add	r7, sp, #0
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	60b9      	str	r1, [r7, #8]
 8004486:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0210 	bic.w	r2, r3, #16
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	031b      	lsls	r3, r3, #12
 80044ac:	693a      	ldr	r2, [r7, #16]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044b8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	011b      	lsls	r3, r3, #4
 80044be:	697a      	ldr	r2, [r7, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	621a      	str	r2, [r3, #32]
}
 80044d0:	bf00      	nop
 80044d2:	371c      	adds	r7, #28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr

080044da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f043 0307 	orr.w	r3, r3, #7
 80044fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	609a      	str	r2, [r3, #8]
}
 8004504:	bf00      	nop
 8004506:	3714      	adds	r7, #20
 8004508:	46bd      	mov	sp, r7
 800450a:	bc80      	pop	{r7}
 800450c:	4770      	bx	lr

0800450e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800450e:	b480      	push	{r7}
 8004510:	b087      	sub	sp, #28
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004528:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	021a      	lsls	r2, r3, #8
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	431a      	orrs	r2, r3
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	4313      	orrs	r3, r2
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	4313      	orrs	r3, r2
 800453a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	697a      	ldr	r2, [r7, #20]
 8004540:	609a      	str	r2, [r3, #8]
}
 8004542:	bf00      	nop
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr

0800454c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800454c:	b480      	push	{r7}
 800454e:	b085      	sub	sp, #20
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800455c:	2b01      	cmp	r3, #1
 800455e:	d101      	bne.n	8004564 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004560:	2302      	movs	r3, #2
 8004562:	e046      	b.n	80045f2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2202      	movs	r2, #2
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800458a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4a16      	ldr	r2, [pc, #88]	; (80045fc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d00e      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045b0:	d009      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a12      	ldr	r2, [pc, #72]	; (8004600 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d004      	beq.n	80045c6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a10      	ldr	r2, [pc, #64]	; (8004604 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d10c      	bne.n	80045e0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	68ba      	ldr	r2, [r7, #8]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68ba      	ldr	r2, [r7, #8]
 80045de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2201      	movs	r2, #1
 80045e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bc80      	pop	{r7}
 80045fa:	4770      	bx	lr
 80045fc:	40012c00 	.word	0x40012c00
 8004600:	40000400 	.word	0x40000400
 8004604:	40000800 	.word	0x40000800

08004608 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e042      	b.n	80046a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d106      	bne.n	8004634 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f7fd fac8 	bl	8001bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2224      	movs	r2, #36	; 0x24
 8004638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800464a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 fd71 	bl	8005134 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	691a      	ldr	r2, [r3, #16]
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004660:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	695a      	ldr	r2, [r3, #20]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004670:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68da      	ldr	r2, [r3, #12]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004680:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2220      	movs	r2, #32
 800468c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2220      	movs	r2, #32
 8004694:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3708      	adds	r7, #8
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b08a      	sub	sp, #40	; 0x28
 80046ac:	af02      	add	r7, sp, #8
 80046ae:	60f8      	str	r0, [r7, #12]
 80046b0:	60b9      	str	r1, [r7, #8]
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	4613      	mov	r3, r2
 80046b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b20      	cmp	r3, #32
 80046c6:	d16d      	bne.n	80047a4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_UART_Transmit+0x2c>
 80046ce:	88fb      	ldrh	r3, [r7, #6]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e066      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2221      	movs	r2, #33	; 0x21
 80046e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046e6:	f7fd fb31 	bl	8001d4c <HAL_GetTick>
 80046ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	88fa      	ldrh	r2, [r7, #6]
 80046f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	88fa      	ldrh	r2, [r7, #6]
 80046f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004700:	d108      	bne.n	8004714 <HAL_UART_Transmit+0x6c>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d104      	bne.n	8004714 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800470e:	68bb      	ldr	r3, [r7, #8]
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	e003      	b.n	800471c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004718:	2300      	movs	r3, #0
 800471a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800471c:	e02a      	b.n	8004774 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2200      	movs	r2, #0
 8004726:	2180      	movs	r1, #128	; 0x80
 8004728:	68f8      	ldr	r0, [r7, #12]
 800472a:	f000 faf9 	bl	8004d20 <UART_WaitOnFlagUntilTimeout>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e036      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	461a      	mov	r2, r3
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800474c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	3302      	adds	r3, #2
 8004752:	61bb      	str	r3, [r7, #24]
 8004754:	e007      	b.n	8004766 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004756:	69fb      	ldr	r3, [r7, #28]
 8004758:	781a      	ldrb	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800476a:	b29b      	uxth	r3, r3
 800476c:	3b01      	subs	r3, #1
 800476e:	b29a      	uxth	r2, r3
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004778:	b29b      	uxth	r3, r3
 800477a:	2b00      	cmp	r3, #0
 800477c:	d1cf      	bne.n	800471e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	9300      	str	r3, [sp, #0]
 8004782:	697b      	ldr	r3, [r7, #20]
 8004784:	2200      	movs	r2, #0
 8004786:	2140      	movs	r1, #64	; 0x40
 8004788:	68f8      	ldr	r0, [r7, #12]
 800478a:	f000 fac9 	bl	8004d20 <UART_WaitOnFlagUntilTimeout>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004794:	2303      	movs	r3, #3
 8004796:	e006      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80047a0:	2300      	movs	r3, #0
 80047a2:	e000      	b.n	80047a6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80047a4:	2302      	movs	r3, #2
  }
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b0ba      	sub	sp, #232	; 0xe8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695b      	ldr	r3, [r3, #20]
 80047d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047d6:	2300      	movs	r3, #0
 80047d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047dc:	2300      	movs	r3, #0
 80047de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10f      	bne.n	8004816 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d009      	beq.n	8004816 <HAL_UART_IRQHandler+0x66>
 8004802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004806:	f003 0320 	and.w	r3, r3, #32
 800480a:	2b00      	cmp	r3, #0
 800480c:	d003      	beq.n	8004816 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fbd1 	bl	8004fb6 <UART_Receive_IT>
      return;
 8004814:	e25b      	b.n	8004cce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004816:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80de 	beq.w	80049dc <HAL_UART_IRQHandler+0x22c>
 8004820:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800482c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004830:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004834:	2b00      	cmp	r3, #0
 8004836:	f000 80d1 	beq.w	80049dc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800483a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d00b      	beq.n	800485e <HAL_UART_IRQHandler+0xae>
 8004846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d005      	beq.n	800485e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004856:	f043 0201 	orr.w	r2, r3, #1
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800485e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004862:	f003 0304 	and.w	r3, r3, #4
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00b      	beq.n	8004882 <HAL_UART_IRQHandler+0xd2>
 800486a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d005      	beq.n	8004882 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800487a:	f043 0202 	orr.w	r2, r3, #2
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00b      	beq.n	80048a6 <HAL_UART_IRQHandler+0xf6>
 800488e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d005      	beq.n	80048a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	f043 0204 	orr.w	r2, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048aa:	f003 0308 	and.w	r3, r3, #8
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d011      	beq.n	80048d6 <HAL_UART_IRQHandler+0x126>
 80048b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b6:	f003 0320 	and.w	r3, r3, #32
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d105      	bne.n	80048ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ce:	f043 0208 	orr.w	r2, r3, #8
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 81f2 	beq.w	8004cc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e4:	f003 0320 	and.w	r3, r3, #32
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d008      	beq.n	80048fe <HAL_UART_IRQHandler+0x14e>
 80048ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048f0:	f003 0320 	and.w	r3, r3, #32
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fb5c 	bl	8004fb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695b      	ldr	r3, [r3, #20]
 8004904:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	bf14      	ite	ne
 800490c:	2301      	movne	r3, #1
 800490e:	2300      	moveq	r3, #0
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491a:	f003 0308 	and.w	r3, r3, #8
 800491e:	2b00      	cmp	r3, #0
 8004920:	d103      	bne.n	800492a <HAL_UART_IRQHandler+0x17a>
 8004922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004926:	2b00      	cmp	r3, #0
 8004928:	d04f      	beq.n	80049ca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fa66 	bl	8004dfc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493a:	2b00      	cmp	r3, #0
 800493c:	d041      	beq.n	80049c2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3314      	adds	r3, #20
 8004944:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004948:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800494c:	e853 3f00 	ldrex	r3, [r3]
 8004950:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004954:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004958:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800495c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	3314      	adds	r3, #20
 8004966:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800496a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800496e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004972:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004976:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004982:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1d9      	bne.n	800493e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d013      	beq.n	80049ba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004996:	4a7e      	ldr	r2, [pc, #504]	; (8004b90 <HAL_UART_IRQHandler+0x3e0>)
 8004998:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fd fb4a 	bl	8002038 <HAL_DMA_Abort_IT>
 80049a4:	4603      	mov	r3, r0
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d016      	beq.n	80049d8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049b0:	687a      	ldr	r2, [r7, #4]
 80049b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80049b4:	4610      	mov	r0, r2
 80049b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b8:	e00e      	b.n	80049d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	f000 f99c 	bl	8004cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c0:	e00a      	b.n	80049d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 f998 	bl	8004cf8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	e006      	b.n	80049d8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f000 f994 	bl	8004cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80049d6:	e175      	b.n	8004cc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d8:	bf00      	nop
    return;
 80049da:	e173      	b.n	8004cc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	f040 814f 	bne.w	8004c84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 8148 	beq.w	8004c84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 8141 	beq.w	8004c84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a02:	2300      	movs	r3, #0
 8004a04:	60bb      	str	r3, [r7, #8]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60bb      	str	r3, [r7, #8]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	60bb      	str	r3, [r7, #8]
 8004a16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	695b      	ldr	r3, [r3, #20]
 8004a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 80b6 	beq.w	8004b94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	f000 8145 	beq.w	8004cc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a46:	429a      	cmp	r2, r3
 8004a48:	f080 813e 	bcs.w	8004cc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	2b20      	cmp	r3, #32
 8004a5c:	f000 8088 	beq.w	8004b70 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a6e:	e853 3f00 	ldrex	r3, [r3]
 8004a72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a76:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a7e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	330c      	adds	r3, #12
 8004a88:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a8c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a90:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a94:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a9c:	e841 2300 	strex	r3, r2, [r1]
 8004aa0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004aa4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d1d9      	bne.n	8004a60 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab6:	e853 3f00 	ldrex	r3, [r3]
 8004aba:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004abc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004abe:	f023 0301 	bic.w	r3, r3, #1
 8004ac2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3314      	adds	r3, #20
 8004acc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ad0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ad4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ad8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ae2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e1      	bne.n	8004aac <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	3314      	adds	r3, #20
 8004aee:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004af0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004af2:	e853 3f00 	ldrex	r3, [r3]
 8004af6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004af8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b0c:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b0e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b12:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b14:	e841 2300 	strex	r3, r2, [r1]
 8004b18:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1e3      	bne.n	8004ae8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	330c      	adds	r3, #12
 8004b34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b40:	f023 0310 	bic.w	r3, r3, #16
 8004b44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	330c      	adds	r3, #12
 8004b4e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b52:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b54:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e3      	bne.n	8004b2e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f7fd fa29 	bl	8001fc2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2202      	movs	r2, #2
 8004b74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b7e:	b29b      	uxth	r3, r3
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	4619      	mov	r1, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f8bf 	bl	8004d0a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b8c:	e09c      	b.n	8004cc8 <HAL_UART_IRQHandler+0x518>
 8004b8e:	bf00      	nop
 8004b90:	08004ec1 	.word	0x08004ec1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 808e 	beq.w	8004ccc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004bb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f000 8089 	beq.w	8004ccc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bc4:	e853 3f00 	ldrex	r3, [r3]
 8004bc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bde:	647a      	str	r2, [r7, #68]	; 0x44
 8004be0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004be4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1e3      	bne.n	8004bba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3314      	adds	r3, #20
 8004bf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bfc:	e853 3f00 	ldrex	r3, [r3]
 8004c00:	623b      	str	r3, [r7, #32]
   return(result);
 8004c02:	6a3b      	ldr	r3, [r7, #32]
 8004c04:	f023 0301 	bic.w	r3, r3, #1
 8004c08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	3314      	adds	r3, #20
 8004c12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c16:	633a      	str	r2, [r7, #48]	; 0x30
 8004c18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e3      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	330c      	adds	r3, #12
 8004c3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	e853 3f00 	ldrex	r3, [r3]
 8004c46:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f023 0310 	bic.w	r3, r3, #16
 8004c4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	330c      	adds	r3, #12
 8004c58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c5c:	61fa      	str	r2, [r7, #28]
 8004c5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c60:	69b9      	ldr	r1, [r7, #24]
 8004c62:	69fa      	ldr	r2, [r7, #28]
 8004c64:	e841 2300 	strex	r3, r2, [r1]
 8004c68:	617b      	str	r3, [r7, #20]
   return(result);
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1e3      	bne.n	8004c38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2202      	movs	r2, #2
 8004c74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f844 	bl	8004d0a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c82:	e023      	b.n	8004ccc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d009      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x4f4>
 8004c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d003      	beq.n	8004ca4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f000 f923 	bl	8004ee8 <UART_Transmit_IT>
    return;
 8004ca2:	e014      	b.n	8004cce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00e      	beq.n	8004cce <HAL_UART_IRQHandler+0x51e>
 8004cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d008      	beq.n	8004cce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004cbc:	6878      	ldr	r0, [r7, #4]
 8004cbe:	f000 f962 	bl	8004f86 <UART_EndTransmit_IT>
    return;
 8004cc2:	e004      	b.n	8004cce <HAL_UART_IRQHandler+0x51e>
    return;
 8004cc4:	bf00      	nop
 8004cc6:	e002      	b.n	8004cce <HAL_UART_IRQHandler+0x51e>
      return;
 8004cc8:	bf00      	nop
 8004cca:	e000      	b.n	8004cce <HAL_UART_IRQHandler+0x51e>
      return;
 8004ccc:	bf00      	nop
  }
}
 8004cce:	37e8      	adds	r7, #232	; 0xe8
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bc80      	pop	{r7}
 8004ce4:	4770      	bx	lr

08004ce6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004cee:	bf00      	nop
 8004cf0:	370c      	adds	r7, #12
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bc80      	pop	{r7}
 8004cf6:	4770      	bx	lr

08004cf8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b083      	sub	sp, #12
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bc80      	pop	{r7}
 8004d08:	4770      	bx	lr

08004d0a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d0a:	b480      	push	{r7}
 8004d0c:	b083      	sub	sp, #12
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	6078      	str	r0, [r7, #4]
 8004d12:	460b      	mov	r3, r1
 8004d14:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d16:	bf00      	nop
 8004d18:	370c      	adds	r7, #12
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bc80      	pop	{r7}
 8004d1e:	4770      	bx	lr

08004d20 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b090      	sub	sp, #64	; 0x40
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	60f8      	str	r0, [r7, #12]
 8004d28:	60b9      	str	r1, [r7, #8]
 8004d2a:	603b      	str	r3, [r7, #0]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d30:	e050      	b.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d04c      	beq.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d007      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d40:	f7fd f804 	bl	8001d4c <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d241      	bcs.n	8004dd4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	330c      	adds	r3, #12
 8004d56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d5a:	e853 3f00 	ldrex	r3, [r3]
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	330c      	adds	r3, #12
 8004d6e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d70:	637a      	str	r2, [r7, #52]	; 0x34
 8004d72:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d78:	e841 2300 	strex	r3, r2, [r1]
 8004d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d1e5      	bne.n	8004d50 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3314      	adds	r3, #20
 8004d8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	e853 3f00 	ldrex	r3, [r3]
 8004d92:	613b      	str	r3, [r7, #16]
   return(result);
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	f023 0301 	bic.w	r3, r3, #1
 8004d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3314      	adds	r3, #20
 8004da2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004da4:	623a      	str	r2, [r7, #32]
 8004da6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	69f9      	ldr	r1, [r7, #28]
 8004daa:	6a3a      	ldr	r2, [r7, #32]
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e5      	bne.n	8004d84 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e00f      	b.n	8004df4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	bf0c      	ite	eq
 8004de4:	2301      	moveq	r3, #1
 8004de6:	2300      	movne	r3, #0
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	461a      	mov	r2, r3
 8004dec:	79fb      	ldrb	r3, [r7, #7]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d09f      	beq.n	8004d32 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004df2:	2300      	movs	r3, #0
}
 8004df4:	4618      	mov	r0, r3
 8004df6:	3740      	adds	r7, #64	; 0x40
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bd80      	pop	{r7, pc}

08004dfc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b095      	sub	sp, #84	; 0x54
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	330c      	adds	r3, #12
 8004e0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e0e:	e853 3f00 	ldrex	r3, [r3]
 8004e12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	330c      	adds	r3, #12
 8004e22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e24:	643a      	str	r2, [r7, #64]	; 0x40
 8004e26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e2c:	e841 2300 	strex	r3, r2, [r1]
 8004e30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d1e5      	bne.n	8004e04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	3314      	adds	r3, #20
 8004e3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e40:	6a3b      	ldr	r3, [r7, #32]
 8004e42:	e853 3f00 	ldrex	r3, [r3]
 8004e46:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e48:	69fb      	ldr	r3, [r7, #28]
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	3314      	adds	r3, #20
 8004e56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e60:	e841 2300 	strex	r3, r2, [r1]
 8004e64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1e5      	bne.n	8004e38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d119      	bne.n	8004ea8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	330c      	adds	r3, #12
 8004e7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	e853 3f00 	ldrex	r3, [r3]
 8004e82:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f023 0310 	bic.w	r3, r3, #16
 8004e8a:	647b      	str	r3, [r7, #68]	; 0x44
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	330c      	adds	r3, #12
 8004e92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e94:	61ba      	str	r2, [r7, #24]
 8004e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6979      	ldr	r1, [r7, #20]
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e5      	bne.n	8004e74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004eb6:	bf00      	nop
 8004eb8:	3754      	adds	r7, #84	; 0x54
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bc80      	pop	{r7}
 8004ebe:	4770      	bx	lr

08004ec0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ecc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f7ff ff0c 	bl	8004cf8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ee0:	bf00      	nop
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	2b21      	cmp	r3, #33	; 0x21
 8004efa:	d13e      	bne.n	8004f7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f04:	d114      	bne.n	8004f30 <UART_Transmit_IT+0x48>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d110      	bne.n	8004f30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	881b      	ldrh	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a1b      	ldr	r3, [r3, #32]
 8004f28:	1c9a      	adds	r2, r3, #2
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	621a      	str	r2, [r3, #32]
 8004f2e:	e008      	b.n	8004f42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a1b      	ldr	r3, [r3, #32]
 8004f34:	1c59      	adds	r1, r3, #1
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	6211      	str	r1, [r2, #32]
 8004f3a:	781a      	ldrb	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	687a      	ldr	r2, [r7, #4]
 8004f4e:	4619      	mov	r1, r3
 8004f50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10f      	bne.n	8004f76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68da      	ldr	r2, [r3, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68da      	ldr	r2, [r3, #12]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e000      	b.n	8004f7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f7a:	2302      	movs	r3, #2
  }
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bc80      	pop	{r7}
 8004f84:	4770      	bx	lr

08004f86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68da      	ldr	r2, [r3, #12]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7ff fe94 	bl	8004cd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fac:	2300      	movs	r3, #0
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3708      	adds	r7, #8
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b08c      	sub	sp, #48	; 0x30
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b22      	cmp	r3, #34	; 0x22
 8004fc8:	f040 80ae 	bne.w	8005128 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd4:	d117      	bne.n	8005006 <UART_Receive_IT+0x50>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d113      	bne.n	8005006 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff4:	b29a      	uxth	r2, r3
 8004ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	1c9a      	adds	r2, r3, #2
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	629a      	str	r2, [r3, #40]	; 0x28
 8005004:	e026      	b.n	8005054 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800500c:	2300      	movs	r3, #0
 800500e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005018:	d007      	beq.n	800502a <UART_Receive_IT+0x74>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d10a      	bne.n	8005038 <UART_Receive_IT+0x82>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	691b      	ldr	r3, [r3, #16]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d106      	bne.n	8005038 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	b2da      	uxtb	r2, r3
 8005032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005034:	701a      	strb	r2, [r3, #0]
 8005036:	e008      	b.n	800504a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	b2db      	uxtb	r3, r3
 8005040:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005044:	b2da      	uxtb	r2, r3
 8005046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005048:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800504e:	1c5a      	adds	r2, r3, #1
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005058:	b29b      	uxth	r3, r3
 800505a:	3b01      	subs	r3, #1
 800505c:	b29b      	uxth	r3, r3
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	4619      	mov	r1, r3
 8005062:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005064:	2b00      	cmp	r3, #0
 8005066:	d15d      	bne.n	8005124 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68da      	ldr	r2, [r3, #12]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f022 0220 	bic.w	r2, r2, #32
 8005076:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005086:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050aa:	2b01      	cmp	r3, #1
 80050ac:	d135      	bne.n	800511a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	330c      	adds	r3, #12
 80050ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	e853 3f00 	ldrex	r3, [r3]
 80050c2:	613b      	str	r3, [r7, #16]
   return(result);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f023 0310 	bic.w	r3, r3, #16
 80050ca:	627b      	str	r3, [r7, #36]	; 0x24
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	330c      	adds	r3, #12
 80050d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050d4:	623a      	str	r2, [r7, #32]
 80050d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050d8:	69f9      	ldr	r1, [r7, #28]
 80050da:	6a3a      	ldr	r2, [r7, #32]
 80050dc:	e841 2300 	strex	r3, r2, [r1]
 80050e0:	61bb      	str	r3, [r7, #24]
   return(result);
 80050e2:	69bb      	ldr	r3, [r7, #24]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1e5      	bne.n	80050b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f003 0310 	and.w	r3, r3, #16
 80050f2:	2b10      	cmp	r3, #16
 80050f4:	d10a      	bne.n	800510c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050f6:	2300      	movs	r3, #0
 80050f8:	60fb      	str	r3, [r7, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	60fb      	str	r3, [r7, #12]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005110:	4619      	mov	r1, r3
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f7ff fdf9 	bl	8004d0a <HAL_UARTEx_RxEventCallback>
 8005118:	e002      	b.n	8005120 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff fde3 	bl	8004ce6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	e002      	b.n	800512a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3730      	adds	r7, #48	; 0x30
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	68da      	ldr	r2, [r3, #12]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	430a      	orrs	r2, r1
 8005150:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	689a      	ldr	r2, [r3, #8]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	431a      	orrs	r2, r3
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	4313      	orrs	r3, r2
 8005162:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	68db      	ldr	r3, [r3, #12]
 800516a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800516e:	f023 030c 	bic.w	r3, r3, #12
 8005172:	687a      	ldr	r2, [r7, #4]
 8005174:	6812      	ldr	r2, [r2, #0]
 8005176:	68b9      	ldr	r1, [r7, #8]
 8005178:	430b      	orrs	r3, r1
 800517a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	695b      	ldr	r3, [r3, #20]
 8005182:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	699a      	ldr	r2, [r3, #24]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a2c      	ldr	r2, [pc, #176]	; (8005248 <UART_SetConfig+0x114>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d103      	bne.n	80051a4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800519c:	f7fe fb20 	bl	80037e0 <HAL_RCC_GetPCLK2Freq>
 80051a0:	60f8      	str	r0, [r7, #12]
 80051a2:	e002      	b.n	80051aa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80051a4:	f7fe fb08 	bl	80037b8 <HAL_RCC_GetPCLK1Freq>
 80051a8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	4613      	mov	r3, r2
 80051ae:	009b      	lsls	r3, r3, #2
 80051b0:	4413      	add	r3, r2
 80051b2:	009a      	lsls	r2, r3, #2
 80051b4:	441a      	add	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	009b      	lsls	r3, r3, #2
 80051bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80051c0:	4a22      	ldr	r2, [pc, #136]	; (800524c <UART_SetConfig+0x118>)
 80051c2:	fba2 2303 	umull	r2, r3, r2, r3
 80051c6:	095b      	lsrs	r3, r3, #5
 80051c8:	0119      	lsls	r1, r3, #4
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	009a      	lsls	r2, r3, #2
 80051d4:	441a      	add	r2, r3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	009b      	lsls	r3, r3, #2
 80051dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80051e0:	4b1a      	ldr	r3, [pc, #104]	; (800524c <UART_SetConfig+0x118>)
 80051e2:	fba3 0302 	umull	r0, r3, r3, r2
 80051e6:	095b      	lsrs	r3, r3, #5
 80051e8:	2064      	movs	r0, #100	; 0x64
 80051ea:	fb00 f303 	mul.w	r3, r0, r3
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	011b      	lsls	r3, r3, #4
 80051f2:	3332      	adds	r3, #50	; 0x32
 80051f4:	4a15      	ldr	r2, [pc, #84]	; (800524c <UART_SetConfig+0x118>)
 80051f6:	fba2 2303 	umull	r2, r3, r2, r3
 80051fa:	095b      	lsrs	r3, r3, #5
 80051fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005200:	4419      	add	r1, r3
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4613      	mov	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	4413      	add	r3, r2
 800520a:	009a      	lsls	r2, r3, #2
 800520c:	441a      	add	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	009b      	lsls	r3, r3, #2
 8005214:	fbb2 f2f3 	udiv	r2, r2, r3
 8005218:	4b0c      	ldr	r3, [pc, #48]	; (800524c <UART_SetConfig+0x118>)
 800521a:	fba3 0302 	umull	r0, r3, r3, r2
 800521e:	095b      	lsrs	r3, r3, #5
 8005220:	2064      	movs	r0, #100	; 0x64
 8005222:	fb00 f303 	mul.w	r3, r0, r3
 8005226:	1ad3      	subs	r3, r2, r3
 8005228:	011b      	lsls	r3, r3, #4
 800522a:	3332      	adds	r3, #50	; 0x32
 800522c:	4a07      	ldr	r2, [pc, #28]	; (800524c <UART_SetConfig+0x118>)
 800522e:	fba2 2303 	umull	r2, r3, r2, r3
 8005232:	095b      	lsrs	r3, r3, #5
 8005234:	f003 020f 	and.w	r2, r3, #15
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	440a      	add	r2, r1
 800523e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005240:	bf00      	nop
 8005242:	3710      	adds	r7, #16
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}
 8005248:	40013800 	.word	0x40013800
 800524c:	51eb851f 	.word	0x51eb851f

08005250 <std>:
 8005250:	2300      	movs	r3, #0
 8005252:	b510      	push	{r4, lr}
 8005254:	4604      	mov	r4, r0
 8005256:	e9c0 3300 	strd	r3, r3, [r0]
 800525a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800525e:	6083      	str	r3, [r0, #8]
 8005260:	8181      	strh	r1, [r0, #12]
 8005262:	6643      	str	r3, [r0, #100]	; 0x64
 8005264:	81c2      	strh	r2, [r0, #14]
 8005266:	6183      	str	r3, [r0, #24]
 8005268:	4619      	mov	r1, r3
 800526a:	2208      	movs	r2, #8
 800526c:	305c      	adds	r0, #92	; 0x5c
 800526e:	f000 fa17 	bl	80056a0 <memset>
 8005272:	4b0d      	ldr	r3, [pc, #52]	; (80052a8 <std+0x58>)
 8005274:	6224      	str	r4, [r4, #32]
 8005276:	6263      	str	r3, [r4, #36]	; 0x24
 8005278:	4b0c      	ldr	r3, [pc, #48]	; (80052ac <std+0x5c>)
 800527a:	62a3      	str	r3, [r4, #40]	; 0x28
 800527c:	4b0c      	ldr	r3, [pc, #48]	; (80052b0 <std+0x60>)
 800527e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005280:	4b0c      	ldr	r3, [pc, #48]	; (80052b4 <std+0x64>)
 8005282:	6323      	str	r3, [r4, #48]	; 0x30
 8005284:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <std+0x68>)
 8005286:	429c      	cmp	r4, r3
 8005288:	d006      	beq.n	8005298 <std+0x48>
 800528a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800528e:	4294      	cmp	r4, r2
 8005290:	d002      	beq.n	8005298 <std+0x48>
 8005292:	33d0      	adds	r3, #208	; 0xd0
 8005294:	429c      	cmp	r4, r3
 8005296:	d105      	bne.n	80052a4 <std+0x54>
 8005298:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a0:	f000 ba76 	b.w	8005790 <__retarget_lock_init_recursive>
 80052a4:	bd10      	pop	{r4, pc}
 80052a6:	bf00      	nop
 80052a8:	080054f1 	.word	0x080054f1
 80052ac:	08005513 	.word	0x08005513
 80052b0:	0800554b 	.word	0x0800554b
 80052b4:	0800556f 	.word	0x0800556f
 80052b8:	20000920 	.word	0x20000920

080052bc <stdio_exit_handler>:
 80052bc:	4a02      	ldr	r2, [pc, #8]	; (80052c8 <stdio_exit_handler+0xc>)
 80052be:	4903      	ldr	r1, [pc, #12]	; (80052cc <stdio_exit_handler+0x10>)
 80052c0:	4803      	ldr	r0, [pc, #12]	; (80052d0 <stdio_exit_handler+0x14>)
 80052c2:	f000 b869 	b.w	8005398 <_fwalk_sglue>
 80052c6:	bf00      	nop
 80052c8:	20000014 	.word	0x20000014
 80052cc:	080062fd 	.word	0x080062fd
 80052d0:	20000020 	.word	0x20000020

080052d4 <cleanup_stdio>:
 80052d4:	6841      	ldr	r1, [r0, #4]
 80052d6:	4b0c      	ldr	r3, [pc, #48]	; (8005308 <cleanup_stdio+0x34>)
 80052d8:	b510      	push	{r4, lr}
 80052da:	4299      	cmp	r1, r3
 80052dc:	4604      	mov	r4, r0
 80052de:	d001      	beq.n	80052e4 <cleanup_stdio+0x10>
 80052e0:	f001 f80c 	bl	80062fc <_fflush_r>
 80052e4:	68a1      	ldr	r1, [r4, #8]
 80052e6:	4b09      	ldr	r3, [pc, #36]	; (800530c <cleanup_stdio+0x38>)
 80052e8:	4299      	cmp	r1, r3
 80052ea:	d002      	beq.n	80052f2 <cleanup_stdio+0x1e>
 80052ec:	4620      	mov	r0, r4
 80052ee:	f001 f805 	bl	80062fc <_fflush_r>
 80052f2:	68e1      	ldr	r1, [r4, #12]
 80052f4:	4b06      	ldr	r3, [pc, #24]	; (8005310 <cleanup_stdio+0x3c>)
 80052f6:	4299      	cmp	r1, r3
 80052f8:	d004      	beq.n	8005304 <cleanup_stdio+0x30>
 80052fa:	4620      	mov	r0, r4
 80052fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005300:	f000 bffc 	b.w	80062fc <_fflush_r>
 8005304:	bd10      	pop	{r4, pc}
 8005306:	bf00      	nop
 8005308:	20000920 	.word	0x20000920
 800530c:	20000988 	.word	0x20000988
 8005310:	200009f0 	.word	0x200009f0

08005314 <global_stdio_init.part.0>:
 8005314:	b510      	push	{r4, lr}
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <global_stdio_init.part.0+0x30>)
 8005318:	4c0b      	ldr	r4, [pc, #44]	; (8005348 <global_stdio_init.part.0+0x34>)
 800531a:	4a0c      	ldr	r2, [pc, #48]	; (800534c <global_stdio_init.part.0+0x38>)
 800531c:	4620      	mov	r0, r4
 800531e:	601a      	str	r2, [r3, #0]
 8005320:	2104      	movs	r1, #4
 8005322:	2200      	movs	r2, #0
 8005324:	f7ff ff94 	bl	8005250 <std>
 8005328:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800532c:	2201      	movs	r2, #1
 800532e:	2109      	movs	r1, #9
 8005330:	f7ff ff8e 	bl	8005250 <std>
 8005334:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005338:	2202      	movs	r2, #2
 800533a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800533e:	2112      	movs	r1, #18
 8005340:	f7ff bf86 	b.w	8005250 <std>
 8005344:	20000a58 	.word	0x20000a58
 8005348:	20000920 	.word	0x20000920
 800534c:	080052bd 	.word	0x080052bd

08005350 <__sfp_lock_acquire>:
 8005350:	4801      	ldr	r0, [pc, #4]	; (8005358 <__sfp_lock_acquire+0x8>)
 8005352:	f000 ba1e 	b.w	8005792 <__retarget_lock_acquire_recursive>
 8005356:	bf00      	nop
 8005358:	20000a61 	.word	0x20000a61

0800535c <__sfp_lock_release>:
 800535c:	4801      	ldr	r0, [pc, #4]	; (8005364 <__sfp_lock_release+0x8>)
 800535e:	f000 ba19 	b.w	8005794 <__retarget_lock_release_recursive>
 8005362:	bf00      	nop
 8005364:	20000a61 	.word	0x20000a61

08005368 <__sinit>:
 8005368:	b510      	push	{r4, lr}
 800536a:	4604      	mov	r4, r0
 800536c:	f7ff fff0 	bl	8005350 <__sfp_lock_acquire>
 8005370:	6a23      	ldr	r3, [r4, #32]
 8005372:	b11b      	cbz	r3, 800537c <__sinit+0x14>
 8005374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005378:	f7ff bff0 	b.w	800535c <__sfp_lock_release>
 800537c:	4b04      	ldr	r3, [pc, #16]	; (8005390 <__sinit+0x28>)
 800537e:	6223      	str	r3, [r4, #32]
 8005380:	4b04      	ldr	r3, [pc, #16]	; (8005394 <__sinit+0x2c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d1f5      	bne.n	8005374 <__sinit+0xc>
 8005388:	f7ff ffc4 	bl	8005314 <global_stdio_init.part.0>
 800538c:	e7f2      	b.n	8005374 <__sinit+0xc>
 800538e:	bf00      	nop
 8005390:	080052d5 	.word	0x080052d5
 8005394:	20000a58 	.word	0x20000a58

08005398 <_fwalk_sglue>:
 8005398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800539c:	4607      	mov	r7, r0
 800539e:	4688      	mov	r8, r1
 80053a0:	4614      	mov	r4, r2
 80053a2:	2600      	movs	r6, #0
 80053a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053a8:	f1b9 0901 	subs.w	r9, r9, #1
 80053ac:	d505      	bpl.n	80053ba <_fwalk_sglue+0x22>
 80053ae:	6824      	ldr	r4, [r4, #0]
 80053b0:	2c00      	cmp	r4, #0
 80053b2:	d1f7      	bne.n	80053a4 <_fwalk_sglue+0xc>
 80053b4:	4630      	mov	r0, r6
 80053b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053ba:	89ab      	ldrh	r3, [r5, #12]
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d907      	bls.n	80053d0 <_fwalk_sglue+0x38>
 80053c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053c4:	3301      	adds	r3, #1
 80053c6:	d003      	beq.n	80053d0 <_fwalk_sglue+0x38>
 80053c8:	4629      	mov	r1, r5
 80053ca:	4638      	mov	r0, r7
 80053cc:	47c0      	blx	r8
 80053ce:	4306      	orrs	r6, r0
 80053d0:	3568      	adds	r5, #104	; 0x68
 80053d2:	e7e9      	b.n	80053a8 <_fwalk_sglue+0x10>

080053d4 <iprintf>:
 80053d4:	b40f      	push	{r0, r1, r2, r3}
 80053d6:	b507      	push	{r0, r1, r2, lr}
 80053d8:	4906      	ldr	r1, [pc, #24]	; (80053f4 <iprintf+0x20>)
 80053da:	ab04      	add	r3, sp, #16
 80053dc:	6808      	ldr	r0, [r1, #0]
 80053de:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e2:	6881      	ldr	r1, [r0, #8]
 80053e4:	9301      	str	r3, [sp, #4]
 80053e6:	f000 fc59 	bl	8005c9c <_vfiprintf_r>
 80053ea:	b003      	add	sp, #12
 80053ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80053f0:	b004      	add	sp, #16
 80053f2:	4770      	bx	lr
 80053f4:	2000006c 	.word	0x2000006c

080053f8 <_puts_r>:
 80053f8:	6a03      	ldr	r3, [r0, #32]
 80053fa:	b570      	push	{r4, r5, r6, lr}
 80053fc:	4605      	mov	r5, r0
 80053fe:	460e      	mov	r6, r1
 8005400:	6884      	ldr	r4, [r0, #8]
 8005402:	b90b      	cbnz	r3, 8005408 <_puts_r+0x10>
 8005404:	f7ff ffb0 	bl	8005368 <__sinit>
 8005408:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800540a:	07db      	lsls	r3, r3, #31
 800540c:	d405      	bmi.n	800541a <_puts_r+0x22>
 800540e:	89a3      	ldrh	r3, [r4, #12]
 8005410:	0598      	lsls	r0, r3, #22
 8005412:	d402      	bmi.n	800541a <_puts_r+0x22>
 8005414:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005416:	f000 f9bc 	bl	8005792 <__retarget_lock_acquire_recursive>
 800541a:	89a3      	ldrh	r3, [r4, #12]
 800541c:	0719      	lsls	r1, r3, #28
 800541e:	d513      	bpl.n	8005448 <_puts_r+0x50>
 8005420:	6923      	ldr	r3, [r4, #16]
 8005422:	b18b      	cbz	r3, 8005448 <_puts_r+0x50>
 8005424:	3e01      	subs	r6, #1
 8005426:	68a3      	ldr	r3, [r4, #8]
 8005428:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800542c:	3b01      	subs	r3, #1
 800542e:	60a3      	str	r3, [r4, #8]
 8005430:	b9e9      	cbnz	r1, 800546e <_puts_r+0x76>
 8005432:	2b00      	cmp	r3, #0
 8005434:	da2e      	bge.n	8005494 <_puts_r+0x9c>
 8005436:	4622      	mov	r2, r4
 8005438:	210a      	movs	r1, #10
 800543a:	4628      	mov	r0, r5
 800543c:	f000 f89b 	bl	8005576 <__swbuf_r>
 8005440:	3001      	adds	r0, #1
 8005442:	d007      	beq.n	8005454 <_puts_r+0x5c>
 8005444:	250a      	movs	r5, #10
 8005446:	e007      	b.n	8005458 <_puts_r+0x60>
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f000 f8d0 	bl	80055f0 <__swsetup_r>
 8005450:	2800      	cmp	r0, #0
 8005452:	d0e7      	beq.n	8005424 <_puts_r+0x2c>
 8005454:	f04f 35ff 	mov.w	r5, #4294967295
 8005458:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800545a:	07da      	lsls	r2, r3, #31
 800545c:	d405      	bmi.n	800546a <_puts_r+0x72>
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	059b      	lsls	r3, r3, #22
 8005462:	d402      	bmi.n	800546a <_puts_r+0x72>
 8005464:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005466:	f000 f995 	bl	8005794 <__retarget_lock_release_recursive>
 800546a:	4628      	mov	r0, r5
 800546c:	bd70      	pop	{r4, r5, r6, pc}
 800546e:	2b00      	cmp	r3, #0
 8005470:	da04      	bge.n	800547c <_puts_r+0x84>
 8005472:	69a2      	ldr	r2, [r4, #24]
 8005474:	429a      	cmp	r2, r3
 8005476:	dc06      	bgt.n	8005486 <_puts_r+0x8e>
 8005478:	290a      	cmp	r1, #10
 800547a:	d004      	beq.n	8005486 <_puts_r+0x8e>
 800547c:	6823      	ldr	r3, [r4, #0]
 800547e:	1c5a      	adds	r2, r3, #1
 8005480:	6022      	str	r2, [r4, #0]
 8005482:	7019      	strb	r1, [r3, #0]
 8005484:	e7cf      	b.n	8005426 <_puts_r+0x2e>
 8005486:	4622      	mov	r2, r4
 8005488:	4628      	mov	r0, r5
 800548a:	f000 f874 	bl	8005576 <__swbuf_r>
 800548e:	3001      	adds	r0, #1
 8005490:	d1c9      	bne.n	8005426 <_puts_r+0x2e>
 8005492:	e7df      	b.n	8005454 <_puts_r+0x5c>
 8005494:	250a      	movs	r5, #10
 8005496:	6823      	ldr	r3, [r4, #0]
 8005498:	1c5a      	adds	r2, r3, #1
 800549a:	6022      	str	r2, [r4, #0]
 800549c:	701d      	strb	r5, [r3, #0]
 800549e:	e7db      	b.n	8005458 <_puts_r+0x60>

080054a0 <puts>:
 80054a0:	4b02      	ldr	r3, [pc, #8]	; (80054ac <puts+0xc>)
 80054a2:	4601      	mov	r1, r0
 80054a4:	6818      	ldr	r0, [r3, #0]
 80054a6:	f7ff bfa7 	b.w	80053f8 <_puts_r>
 80054aa:	bf00      	nop
 80054ac:	2000006c 	.word	0x2000006c

080054b0 <siprintf>:
 80054b0:	b40e      	push	{r1, r2, r3}
 80054b2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054b6:	b500      	push	{lr}
 80054b8:	b09c      	sub	sp, #112	; 0x70
 80054ba:	ab1d      	add	r3, sp, #116	; 0x74
 80054bc:	9002      	str	r0, [sp, #8]
 80054be:	9006      	str	r0, [sp, #24]
 80054c0:	9107      	str	r1, [sp, #28]
 80054c2:	9104      	str	r1, [sp, #16]
 80054c4:	4808      	ldr	r0, [pc, #32]	; (80054e8 <siprintf+0x38>)
 80054c6:	4909      	ldr	r1, [pc, #36]	; (80054ec <siprintf+0x3c>)
 80054c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80054cc:	9105      	str	r1, [sp, #20]
 80054ce:	6800      	ldr	r0, [r0, #0]
 80054d0:	a902      	add	r1, sp, #8
 80054d2:	9301      	str	r3, [sp, #4]
 80054d4:	f000 fabc 	bl	8005a50 <_svfiprintf_r>
 80054d8:	2200      	movs	r2, #0
 80054da:	9b02      	ldr	r3, [sp, #8]
 80054dc:	701a      	strb	r2, [r3, #0]
 80054de:	b01c      	add	sp, #112	; 0x70
 80054e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054e4:	b003      	add	sp, #12
 80054e6:	4770      	bx	lr
 80054e8:	2000006c 	.word	0x2000006c
 80054ec:	ffff0208 	.word	0xffff0208

080054f0 <__sread>:
 80054f0:	b510      	push	{r4, lr}
 80054f2:	460c      	mov	r4, r1
 80054f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f8:	f000 f8fc 	bl	80056f4 <_read_r>
 80054fc:	2800      	cmp	r0, #0
 80054fe:	bfab      	itete	ge
 8005500:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005502:	89a3      	ldrhlt	r3, [r4, #12]
 8005504:	181b      	addge	r3, r3, r0
 8005506:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800550a:	bfac      	ite	ge
 800550c:	6563      	strge	r3, [r4, #84]	; 0x54
 800550e:	81a3      	strhlt	r3, [r4, #12]
 8005510:	bd10      	pop	{r4, pc}

08005512 <__swrite>:
 8005512:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005516:	461f      	mov	r7, r3
 8005518:	898b      	ldrh	r3, [r1, #12]
 800551a:	4605      	mov	r5, r0
 800551c:	05db      	lsls	r3, r3, #23
 800551e:	460c      	mov	r4, r1
 8005520:	4616      	mov	r6, r2
 8005522:	d505      	bpl.n	8005530 <__swrite+0x1e>
 8005524:	2302      	movs	r3, #2
 8005526:	2200      	movs	r2, #0
 8005528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800552c:	f000 f8d0 	bl	80056d0 <_lseek_r>
 8005530:	89a3      	ldrh	r3, [r4, #12]
 8005532:	4632      	mov	r2, r6
 8005534:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005538:	81a3      	strh	r3, [r4, #12]
 800553a:	4628      	mov	r0, r5
 800553c:	463b      	mov	r3, r7
 800553e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005542:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005546:	f000 b8e7 	b.w	8005718 <_write_r>

0800554a <__sseek>:
 800554a:	b510      	push	{r4, lr}
 800554c:	460c      	mov	r4, r1
 800554e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005552:	f000 f8bd 	bl	80056d0 <_lseek_r>
 8005556:	1c43      	adds	r3, r0, #1
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	bf15      	itete	ne
 800555c:	6560      	strne	r0, [r4, #84]	; 0x54
 800555e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005562:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005566:	81a3      	strheq	r3, [r4, #12]
 8005568:	bf18      	it	ne
 800556a:	81a3      	strhne	r3, [r4, #12]
 800556c:	bd10      	pop	{r4, pc}

0800556e <__sclose>:
 800556e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005572:	f000 b89d 	b.w	80056b0 <_close_r>

08005576 <__swbuf_r>:
 8005576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005578:	460e      	mov	r6, r1
 800557a:	4614      	mov	r4, r2
 800557c:	4605      	mov	r5, r0
 800557e:	b118      	cbz	r0, 8005588 <__swbuf_r+0x12>
 8005580:	6a03      	ldr	r3, [r0, #32]
 8005582:	b90b      	cbnz	r3, 8005588 <__swbuf_r+0x12>
 8005584:	f7ff fef0 	bl	8005368 <__sinit>
 8005588:	69a3      	ldr	r3, [r4, #24]
 800558a:	60a3      	str	r3, [r4, #8]
 800558c:	89a3      	ldrh	r3, [r4, #12]
 800558e:	071a      	lsls	r2, r3, #28
 8005590:	d525      	bpl.n	80055de <__swbuf_r+0x68>
 8005592:	6923      	ldr	r3, [r4, #16]
 8005594:	b31b      	cbz	r3, 80055de <__swbuf_r+0x68>
 8005596:	6823      	ldr	r3, [r4, #0]
 8005598:	6922      	ldr	r2, [r4, #16]
 800559a:	b2f6      	uxtb	r6, r6
 800559c:	1a98      	subs	r0, r3, r2
 800559e:	6963      	ldr	r3, [r4, #20]
 80055a0:	4637      	mov	r7, r6
 80055a2:	4283      	cmp	r3, r0
 80055a4:	dc04      	bgt.n	80055b0 <__swbuf_r+0x3a>
 80055a6:	4621      	mov	r1, r4
 80055a8:	4628      	mov	r0, r5
 80055aa:	f000 fea7 	bl	80062fc <_fflush_r>
 80055ae:	b9e0      	cbnz	r0, 80055ea <__swbuf_r+0x74>
 80055b0:	68a3      	ldr	r3, [r4, #8]
 80055b2:	3b01      	subs	r3, #1
 80055b4:	60a3      	str	r3, [r4, #8]
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	6022      	str	r2, [r4, #0]
 80055bc:	701e      	strb	r6, [r3, #0]
 80055be:	6962      	ldr	r2, [r4, #20]
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d004      	beq.n	80055d0 <__swbuf_r+0x5a>
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	07db      	lsls	r3, r3, #31
 80055ca:	d506      	bpl.n	80055da <__swbuf_r+0x64>
 80055cc:	2e0a      	cmp	r6, #10
 80055ce:	d104      	bne.n	80055da <__swbuf_r+0x64>
 80055d0:	4621      	mov	r1, r4
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 fe92 	bl	80062fc <_fflush_r>
 80055d8:	b938      	cbnz	r0, 80055ea <__swbuf_r+0x74>
 80055da:	4638      	mov	r0, r7
 80055dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055de:	4621      	mov	r1, r4
 80055e0:	4628      	mov	r0, r5
 80055e2:	f000 f805 	bl	80055f0 <__swsetup_r>
 80055e6:	2800      	cmp	r0, #0
 80055e8:	d0d5      	beq.n	8005596 <__swbuf_r+0x20>
 80055ea:	f04f 37ff 	mov.w	r7, #4294967295
 80055ee:	e7f4      	b.n	80055da <__swbuf_r+0x64>

080055f0 <__swsetup_r>:
 80055f0:	b538      	push	{r3, r4, r5, lr}
 80055f2:	4b2a      	ldr	r3, [pc, #168]	; (800569c <__swsetup_r+0xac>)
 80055f4:	4605      	mov	r5, r0
 80055f6:	6818      	ldr	r0, [r3, #0]
 80055f8:	460c      	mov	r4, r1
 80055fa:	b118      	cbz	r0, 8005604 <__swsetup_r+0x14>
 80055fc:	6a03      	ldr	r3, [r0, #32]
 80055fe:	b90b      	cbnz	r3, 8005604 <__swsetup_r+0x14>
 8005600:	f7ff feb2 	bl	8005368 <__sinit>
 8005604:	89a3      	ldrh	r3, [r4, #12]
 8005606:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800560a:	0718      	lsls	r0, r3, #28
 800560c:	d422      	bmi.n	8005654 <__swsetup_r+0x64>
 800560e:	06d9      	lsls	r1, r3, #27
 8005610:	d407      	bmi.n	8005622 <__swsetup_r+0x32>
 8005612:	2309      	movs	r3, #9
 8005614:	602b      	str	r3, [r5, #0]
 8005616:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800561a:	f04f 30ff 	mov.w	r0, #4294967295
 800561e:	81a3      	strh	r3, [r4, #12]
 8005620:	e034      	b.n	800568c <__swsetup_r+0x9c>
 8005622:	0758      	lsls	r0, r3, #29
 8005624:	d512      	bpl.n	800564c <__swsetup_r+0x5c>
 8005626:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005628:	b141      	cbz	r1, 800563c <__swsetup_r+0x4c>
 800562a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800562e:	4299      	cmp	r1, r3
 8005630:	d002      	beq.n	8005638 <__swsetup_r+0x48>
 8005632:	4628      	mov	r0, r5
 8005634:	f000 f8be 	bl	80057b4 <_free_r>
 8005638:	2300      	movs	r3, #0
 800563a:	6363      	str	r3, [r4, #52]	; 0x34
 800563c:	89a3      	ldrh	r3, [r4, #12]
 800563e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005642:	81a3      	strh	r3, [r4, #12]
 8005644:	2300      	movs	r3, #0
 8005646:	6063      	str	r3, [r4, #4]
 8005648:	6923      	ldr	r3, [r4, #16]
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	89a3      	ldrh	r3, [r4, #12]
 800564e:	f043 0308 	orr.w	r3, r3, #8
 8005652:	81a3      	strh	r3, [r4, #12]
 8005654:	6923      	ldr	r3, [r4, #16]
 8005656:	b94b      	cbnz	r3, 800566c <__swsetup_r+0x7c>
 8005658:	89a3      	ldrh	r3, [r4, #12]
 800565a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800565e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005662:	d003      	beq.n	800566c <__swsetup_r+0x7c>
 8005664:	4621      	mov	r1, r4
 8005666:	4628      	mov	r0, r5
 8005668:	f000 fe95 	bl	8006396 <__smakebuf_r>
 800566c:	89a0      	ldrh	r0, [r4, #12]
 800566e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005672:	f010 0301 	ands.w	r3, r0, #1
 8005676:	d00a      	beq.n	800568e <__swsetup_r+0x9e>
 8005678:	2300      	movs	r3, #0
 800567a:	60a3      	str	r3, [r4, #8]
 800567c:	6963      	ldr	r3, [r4, #20]
 800567e:	425b      	negs	r3, r3
 8005680:	61a3      	str	r3, [r4, #24]
 8005682:	6923      	ldr	r3, [r4, #16]
 8005684:	b943      	cbnz	r3, 8005698 <__swsetup_r+0xa8>
 8005686:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800568a:	d1c4      	bne.n	8005616 <__swsetup_r+0x26>
 800568c:	bd38      	pop	{r3, r4, r5, pc}
 800568e:	0781      	lsls	r1, r0, #30
 8005690:	bf58      	it	pl
 8005692:	6963      	ldrpl	r3, [r4, #20]
 8005694:	60a3      	str	r3, [r4, #8]
 8005696:	e7f4      	b.n	8005682 <__swsetup_r+0x92>
 8005698:	2000      	movs	r0, #0
 800569a:	e7f7      	b.n	800568c <__swsetup_r+0x9c>
 800569c:	2000006c 	.word	0x2000006c

080056a0 <memset>:
 80056a0:	4603      	mov	r3, r0
 80056a2:	4402      	add	r2, r0
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d100      	bne.n	80056aa <memset+0xa>
 80056a8:	4770      	bx	lr
 80056aa:	f803 1b01 	strb.w	r1, [r3], #1
 80056ae:	e7f9      	b.n	80056a4 <memset+0x4>

080056b0 <_close_r>:
 80056b0:	b538      	push	{r3, r4, r5, lr}
 80056b2:	2300      	movs	r3, #0
 80056b4:	4d05      	ldr	r5, [pc, #20]	; (80056cc <_close_r+0x1c>)
 80056b6:	4604      	mov	r4, r0
 80056b8:	4608      	mov	r0, r1
 80056ba:	602b      	str	r3, [r5, #0]
 80056bc:	f7fc f97d 	bl	80019ba <_close>
 80056c0:	1c43      	adds	r3, r0, #1
 80056c2:	d102      	bne.n	80056ca <_close_r+0x1a>
 80056c4:	682b      	ldr	r3, [r5, #0]
 80056c6:	b103      	cbz	r3, 80056ca <_close_r+0x1a>
 80056c8:	6023      	str	r3, [r4, #0]
 80056ca:	bd38      	pop	{r3, r4, r5, pc}
 80056cc:	20000a5c 	.word	0x20000a5c

080056d0 <_lseek_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	2200      	movs	r2, #0
 80056da:	4d05      	ldr	r5, [pc, #20]	; (80056f0 <_lseek_r+0x20>)
 80056dc:	602a      	str	r2, [r5, #0]
 80056de:	461a      	mov	r2, r3
 80056e0:	f7fc f98f 	bl	8001a02 <_lseek>
 80056e4:	1c43      	adds	r3, r0, #1
 80056e6:	d102      	bne.n	80056ee <_lseek_r+0x1e>
 80056e8:	682b      	ldr	r3, [r5, #0]
 80056ea:	b103      	cbz	r3, 80056ee <_lseek_r+0x1e>
 80056ec:	6023      	str	r3, [r4, #0]
 80056ee:	bd38      	pop	{r3, r4, r5, pc}
 80056f0:	20000a5c 	.word	0x20000a5c

080056f4 <_read_r>:
 80056f4:	b538      	push	{r3, r4, r5, lr}
 80056f6:	4604      	mov	r4, r0
 80056f8:	4608      	mov	r0, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	2200      	movs	r2, #0
 80056fe:	4d05      	ldr	r5, [pc, #20]	; (8005714 <_read_r+0x20>)
 8005700:	602a      	str	r2, [r5, #0]
 8005702:	461a      	mov	r2, r3
 8005704:	f7fc f93c 	bl	8001980 <_read>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d102      	bne.n	8005712 <_read_r+0x1e>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	b103      	cbz	r3, 8005712 <_read_r+0x1e>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	20000a5c 	.word	0x20000a5c

08005718 <_write_r>:
 8005718:	b538      	push	{r3, r4, r5, lr}
 800571a:	4604      	mov	r4, r0
 800571c:	4608      	mov	r0, r1
 800571e:	4611      	mov	r1, r2
 8005720:	2200      	movs	r2, #0
 8005722:	4d05      	ldr	r5, [pc, #20]	; (8005738 <_write_r+0x20>)
 8005724:	602a      	str	r2, [r5, #0]
 8005726:	461a      	mov	r2, r3
 8005728:	f7fb fafc 	bl	8000d24 <_write>
 800572c:	1c43      	adds	r3, r0, #1
 800572e:	d102      	bne.n	8005736 <_write_r+0x1e>
 8005730:	682b      	ldr	r3, [r5, #0]
 8005732:	b103      	cbz	r3, 8005736 <_write_r+0x1e>
 8005734:	6023      	str	r3, [r4, #0]
 8005736:	bd38      	pop	{r3, r4, r5, pc}
 8005738:	20000a5c 	.word	0x20000a5c

0800573c <__errno>:
 800573c:	4b01      	ldr	r3, [pc, #4]	; (8005744 <__errno+0x8>)
 800573e:	6818      	ldr	r0, [r3, #0]
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	2000006c 	.word	0x2000006c

08005748 <__libc_init_array>:
 8005748:	b570      	push	{r4, r5, r6, lr}
 800574a:	2600      	movs	r6, #0
 800574c:	4d0c      	ldr	r5, [pc, #48]	; (8005780 <__libc_init_array+0x38>)
 800574e:	4c0d      	ldr	r4, [pc, #52]	; (8005784 <__libc_init_array+0x3c>)
 8005750:	1b64      	subs	r4, r4, r5
 8005752:	10a4      	asrs	r4, r4, #2
 8005754:	42a6      	cmp	r6, r4
 8005756:	d109      	bne.n	800576c <__libc_init_array+0x24>
 8005758:	f000 feec 	bl	8006534 <_init>
 800575c:	2600      	movs	r6, #0
 800575e:	4d0a      	ldr	r5, [pc, #40]	; (8005788 <__libc_init_array+0x40>)
 8005760:	4c0a      	ldr	r4, [pc, #40]	; (800578c <__libc_init_array+0x44>)
 8005762:	1b64      	subs	r4, r4, r5
 8005764:	10a4      	asrs	r4, r4, #2
 8005766:	42a6      	cmp	r6, r4
 8005768:	d105      	bne.n	8005776 <__libc_init_array+0x2e>
 800576a:	bd70      	pop	{r4, r5, r6, pc}
 800576c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005770:	4798      	blx	r3
 8005772:	3601      	adds	r6, #1
 8005774:	e7ee      	b.n	8005754 <__libc_init_array+0xc>
 8005776:	f855 3b04 	ldr.w	r3, [r5], #4
 800577a:	4798      	blx	r3
 800577c:	3601      	adds	r6, #1
 800577e:	e7f2      	b.n	8005766 <__libc_init_array+0x1e>
 8005780:	08007438 	.word	0x08007438
 8005784:	08007438 	.word	0x08007438
 8005788:	08007438 	.word	0x08007438
 800578c:	0800743c 	.word	0x0800743c

08005790 <__retarget_lock_init_recursive>:
 8005790:	4770      	bx	lr

08005792 <__retarget_lock_acquire_recursive>:
 8005792:	4770      	bx	lr

08005794 <__retarget_lock_release_recursive>:
 8005794:	4770      	bx	lr

08005796 <memcpy>:
 8005796:	440a      	add	r2, r1
 8005798:	4291      	cmp	r1, r2
 800579a:	f100 33ff 	add.w	r3, r0, #4294967295
 800579e:	d100      	bne.n	80057a2 <memcpy+0xc>
 80057a0:	4770      	bx	lr
 80057a2:	b510      	push	{r4, lr}
 80057a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057a8:	4291      	cmp	r1, r2
 80057aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057ae:	d1f9      	bne.n	80057a4 <memcpy+0xe>
 80057b0:	bd10      	pop	{r4, pc}
	...

080057b4 <_free_r>:
 80057b4:	b538      	push	{r3, r4, r5, lr}
 80057b6:	4605      	mov	r5, r0
 80057b8:	2900      	cmp	r1, #0
 80057ba:	d040      	beq.n	800583e <_free_r+0x8a>
 80057bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057c0:	1f0c      	subs	r4, r1, #4
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	bfb8      	it	lt
 80057c6:	18e4      	addlt	r4, r4, r3
 80057c8:	f000 f8dc 	bl	8005984 <__malloc_lock>
 80057cc:	4a1c      	ldr	r2, [pc, #112]	; (8005840 <_free_r+0x8c>)
 80057ce:	6813      	ldr	r3, [r2, #0]
 80057d0:	b933      	cbnz	r3, 80057e0 <_free_r+0x2c>
 80057d2:	6063      	str	r3, [r4, #4]
 80057d4:	6014      	str	r4, [r2, #0]
 80057d6:	4628      	mov	r0, r5
 80057d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057dc:	f000 b8d8 	b.w	8005990 <__malloc_unlock>
 80057e0:	42a3      	cmp	r3, r4
 80057e2:	d908      	bls.n	80057f6 <_free_r+0x42>
 80057e4:	6820      	ldr	r0, [r4, #0]
 80057e6:	1821      	adds	r1, r4, r0
 80057e8:	428b      	cmp	r3, r1
 80057ea:	bf01      	itttt	eq
 80057ec:	6819      	ldreq	r1, [r3, #0]
 80057ee:	685b      	ldreq	r3, [r3, #4]
 80057f0:	1809      	addeq	r1, r1, r0
 80057f2:	6021      	streq	r1, [r4, #0]
 80057f4:	e7ed      	b.n	80057d2 <_free_r+0x1e>
 80057f6:	461a      	mov	r2, r3
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	b10b      	cbz	r3, 8005800 <_free_r+0x4c>
 80057fc:	42a3      	cmp	r3, r4
 80057fe:	d9fa      	bls.n	80057f6 <_free_r+0x42>
 8005800:	6811      	ldr	r1, [r2, #0]
 8005802:	1850      	adds	r0, r2, r1
 8005804:	42a0      	cmp	r0, r4
 8005806:	d10b      	bne.n	8005820 <_free_r+0x6c>
 8005808:	6820      	ldr	r0, [r4, #0]
 800580a:	4401      	add	r1, r0
 800580c:	1850      	adds	r0, r2, r1
 800580e:	4283      	cmp	r3, r0
 8005810:	6011      	str	r1, [r2, #0]
 8005812:	d1e0      	bne.n	80057d6 <_free_r+0x22>
 8005814:	6818      	ldr	r0, [r3, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	4408      	add	r0, r1
 800581a:	6010      	str	r0, [r2, #0]
 800581c:	6053      	str	r3, [r2, #4]
 800581e:	e7da      	b.n	80057d6 <_free_r+0x22>
 8005820:	d902      	bls.n	8005828 <_free_r+0x74>
 8005822:	230c      	movs	r3, #12
 8005824:	602b      	str	r3, [r5, #0]
 8005826:	e7d6      	b.n	80057d6 <_free_r+0x22>
 8005828:	6820      	ldr	r0, [r4, #0]
 800582a:	1821      	adds	r1, r4, r0
 800582c:	428b      	cmp	r3, r1
 800582e:	bf01      	itttt	eq
 8005830:	6819      	ldreq	r1, [r3, #0]
 8005832:	685b      	ldreq	r3, [r3, #4]
 8005834:	1809      	addeq	r1, r1, r0
 8005836:	6021      	streq	r1, [r4, #0]
 8005838:	6063      	str	r3, [r4, #4]
 800583a:	6054      	str	r4, [r2, #4]
 800583c:	e7cb      	b.n	80057d6 <_free_r+0x22>
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	20000a64 	.word	0x20000a64

08005844 <sbrk_aligned>:
 8005844:	b570      	push	{r4, r5, r6, lr}
 8005846:	4e0e      	ldr	r6, [pc, #56]	; (8005880 <sbrk_aligned+0x3c>)
 8005848:	460c      	mov	r4, r1
 800584a:	6831      	ldr	r1, [r6, #0]
 800584c:	4605      	mov	r5, r0
 800584e:	b911      	cbnz	r1, 8005856 <sbrk_aligned+0x12>
 8005850:	f000 fe1a 	bl	8006488 <_sbrk_r>
 8005854:	6030      	str	r0, [r6, #0]
 8005856:	4621      	mov	r1, r4
 8005858:	4628      	mov	r0, r5
 800585a:	f000 fe15 	bl	8006488 <_sbrk_r>
 800585e:	1c43      	adds	r3, r0, #1
 8005860:	d00a      	beq.n	8005878 <sbrk_aligned+0x34>
 8005862:	1cc4      	adds	r4, r0, #3
 8005864:	f024 0403 	bic.w	r4, r4, #3
 8005868:	42a0      	cmp	r0, r4
 800586a:	d007      	beq.n	800587c <sbrk_aligned+0x38>
 800586c:	1a21      	subs	r1, r4, r0
 800586e:	4628      	mov	r0, r5
 8005870:	f000 fe0a 	bl	8006488 <_sbrk_r>
 8005874:	3001      	adds	r0, #1
 8005876:	d101      	bne.n	800587c <sbrk_aligned+0x38>
 8005878:	f04f 34ff 	mov.w	r4, #4294967295
 800587c:	4620      	mov	r0, r4
 800587e:	bd70      	pop	{r4, r5, r6, pc}
 8005880:	20000a68 	.word	0x20000a68

08005884 <_malloc_r>:
 8005884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005888:	1ccd      	adds	r5, r1, #3
 800588a:	f025 0503 	bic.w	r5, r5, #3
 800588e:	3508      	adds	r5, #8
 8005890:	2d0c      	cmp	r5, #12
 8005892:	bf38      	it	cc
 8005894:	250c      	movcc	r5, #12
 8005896:	2d00      	cmp	r5, #0
 8005898:	4607      	mov	r7, r0
 800589a:	db01      	blt.n	80058a0 <_malloc_r+0x1c>
 800589c:	42a9      	cmp	r1, r5
 800589e:	d905      	bls.n	80058ac <_malloc_r+0x28>
 80058a0:	230c      	movs	r3, #12
 80058a2:	2600      	movs	r6, #0
 80058a4:	603b      	str	r3, [r7, #0]
 80058a6:	4630      	mov	r0, r6
 80058a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005980 <_malloc_r+0xfc>
 80058b0:	f000 f868 	bl	8005984 <__malloc_lock>
 80058b4:	f8d8 3000 	ldr.w	r3, [r8]
 80058b8:	461c      	mov	r4, r3
 80058ba:	bb5c      	cbnz	r4, 8005914 <_malloc_r+0x90>
 80058bc:	4629      	mov	r1, r5
 80058be:	4638      	mov	r0, r7
 80058c0:	f7ff ffc0 	bl	8005844 <sbrk_aligned>
 80058c4:	1c43      	adds	r3, r0, #1
 80058c6:	4604      	mov	r4, r0
 80058c8:	d155      	bne.n	8005976 <_malloc_r+0xf2>
 80058ca:	f8d8 4000 	ldr.w	r4, [r8]
 80058ce:	4626      	mov	r6, r4
 80058d0:	2e00      	cmp	r6, #0
 80058d2:	d145      	bne.n	8005960 <_malloc_r+0xdc>
 80058d4:	2c00      	cmp	r4, #0
 80058d6:	d048      	beq.n	800596a <_malloc_r+0xe6>
 80058d8:	6823      	ldr	r3, [r4, #0]
 80058da:	4631      	mov	r1, r6
 80058dc:	4638      	mov	r0, r7
 80058de:	eb04 0903 	add.w	r9, r4, r3
 80058e2:	f000 fdd1 	bl	8006488 <_sbrk_r>
 80058e6:	4581      	cmp	r9, r0
 80058e8:	d13f      	bne.n	800596a <_malloc_r+0xe6>
 80058ea:	6821      	ldr	r1, [r4, #0]
 80058ec:	4638      	mov	r0, r7
 80058ee:	1a6d      	subs	r5, r5, r1
 80058f0:	4629      	mov	r1, r5
 80058f2:	f7ff ffa7 	bl	8005844 <sbrk_aligned>
 80058f6:	3001      	adds	r0, #1
 80058f8:	d037      	beq.n	800596a <_malloc_r+0xe6>
 80058fa:	6823      	ldr	r3, [r4, #0]
 80058fc:	442b      	add	r3, r5
 80058fe:	6023      	str	r3, [r4, #0]
 8005900:	f8d8 3000 	ldr.w	r3, [r8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d038      	beq.n	800597a <_malloc_r+0xf6>
 8005908:	685a      	ldr	r2, [r3, #4]
 800590a:	42a2      	cmp	r2, r4
 800590c:	d12b      	bne.n	8005966 <_malloc_r+0xe2>
 800590e:	2200      	movs	r2, #0
 8005910:	605a      	str	r2, [r3, #4]
 8005912:	e00f      	b.n	8005934 <_malloc_r+0xb0>
 8005914:	6822      	ldr	r2, [r4, #0]
 8005916:	1b52      	subs	r2, r2, r5
 8005918:	d41f      	bmi.n	800595a <_malloc_r+0xd6>
 800591a:	2a0b      	cmp	r2, #11
 800591c:	d917      	bls.n	800594e <_malloc_r+0xca>
 800591e:	1961      	adds	r1, r4, r5
 8005920:	42a3      	cmp	r3, r4
 8005922:	6025      	str	r5, [r4, #0]
 8005924:	bf18      	it	ne
 8005926:	6059      	strne	r1, [r3, #4]
 8005928:	6863      	ldr	r3, [r4, #4]
 800592a:	bf08      	it	eq
 800592c:	f8c8 1000 	streq.w	r1, [r8]
 8005930:	5162      	str	r2, [r4, r5]
 8005932:	604b      	str	r3, [r1, #4]
 8005934:	4638      	mov	r0, r7
 8005936:	f104 060b 	add.w	r6, r4, #11
 800593a:	f000 f829 	bl	8005990 <__malloc_unlock>
 800593e:	f026 0607 	bic.w	r6, r6, #7
 8005942:	1d23      	adds	r3, r4, #4
 8005944:	1af2      	subs	r2, r6, r3
 8005946:	d0ae      	beq.n	80058a6 <_malloc_r+0x22>
 8005948:	1b9b      	subs	r3, r3, r6
 800594a:	50a3      	str	r3, [r4, r2]
 800594c:	e7ab      	b.n	80058a6 <_malloc_r+0x22>
 800594e:	42a3      	cmp	r3, r4
 8005950:	6862      	ldr	r2, [r4, #4]
 8005952:	d1dd      	bne.n	8005910 <_malloc_r+0x8c>
 8005954:	f8c8 2000 	str.w	r2, [r8]
 8005958:	e7ec      	b.n	8005934 <_malloc_r+0xb0>
 800595a:	4623      	mov	r3, r4
 800595c:	6864      	ldr	r4, [r4, #4]
 800595e:	e7ac      	b.n	80058ba <_malloc_r+0x36>
 8005960:	4634      	mov	r4, r6
 8005962:	6876      	ldr	r6, [r6, #4]
 8005964:	e7b4      	b.n	80058d0 <_malloc_r+0x4c>
 8005966:	4613      	mov	r3, r2
 8005968:	e7cc      	b.n	8005904 <_malloc_r+0x80>
 800596a:	230c      	movs	r3, #12
 800596c:	4638      	mov	r0, r7
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	f000 f80e 	bl	8005990 <__malloc_unlock>
 8005974:	e797      	b.n	80058a6 <_malloc_r+0x22>
 8005976:	6025      	str	r5, [r4, #0]
 8005978:	e7dc      	b.n	8005934 <_malloc_r+0xb0>
 800597a:	605b      	str	r3, [r3, #4]
 800597c:	deff      	udf	#255	; 0xff
 800597e:	bf00      	nop
 8005980:	20000a64 	.word	0x20000a64

08005984 <__malloc_lock>:
 8005984:	4801      	ldr	r0, [pc, #4]	; (800598c <__malloc_lock+0x8>)
 8005986:	f7ff bf04 	b.w	8005792 <__retarget_lock_acquire_recursive>
 800598a:	bf00      	nop
 800598c:	20000a60 	.word	0x20000a60

08005990 <__malloc_unlock>:
 8005990:	4801      	ldr	r0, [pc, #4]	; (8005998 <__malloc_unlock+0x8>)
 8005992:	f7ff beff 	b.w	8005794 <__retarget_lock_release_recursive>
 8005996:	bf00      	nop
 8005998:	20000a60 	.word	0x20000a60

0800599c <__ssputs_r>:
 800599c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059a0:	461f      	mov	r7, r3
 80059a2:	688e      	ldr	r6, [r1, #8]
 80059a4:	4682      	mov	sl, r0
 80059a6:	42be      	cmp	r6, r7
 80059a8:	460c      	mov	r4, r1
 80059aa:	4690      	mov	r8, r2
 80059ac:	680b      	ldr	r3, [r1, #0]
 80059ae:	d82c      	bhi.n	8005a0a <__ssputs_r+0x6e>
 80059b0:	898a      	ldrh	r2, [r1, #12]
 80059b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80059b6:	d026      	beq.n	8005a06 <__ssputs_r+0x6a>
 80059b8:	6965      	ldr	r5, [r4, #20]
 80059ba:	6909      	ldr	r1, [r1, #16]
 80059bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80059c0:	eba3 0901 	sub.w	r9, r3, r1
 80059c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80059c8:	1c7b      	adds	r3, r7, #1
 80059ca:	444b      	add	r3, r9
 80059cc:	106d      	asrs	r5, r5, #1
 80059ce:	429d      	cmp	r5, r3
 80059d0:	bf38      	it	cc
 80059d2:	461d      	movcc	r5, r3
 80059d4:	0553      	lsls	r3, r2, #21
 80059d6:	d527      	bpl.n	8005a28 <__ssputs_r+0x8c>
 80059d8:	4629      	mov	r1, r5
 80059da:	f7ff ff53 	bl	8005884 <_malloc_r>
 80059de:	4606      	mov	r6, r0
 80059e0:	b360      	cbz	r0, 8005a3c <__ssputs_r+0xa0>
 80059e2:	464a      	mov	r2, r9
 80059e4:	6921      	ldr	r1, [r4, #16]
 80059e6:	f7ff fed6 	bl	8005796 <memcpy>
 80059ea:	89a3      	ldrh	r3, [r4, #12]
 80059ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80059f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059f4:	81a3      	strh	r3, [r4, #12]
 80059f6:	6126      	str	r6, [r4, #16]
 80059f8:	444e      	add	r6, r9
 80059fa:	6026      	str	r6, [r4, #0]
 80059fc:	463e      	mov	r6, r7
 80059fe:	6165      	str	r5, [r4, #20]
 8005a00:	eba5 0509 	sub.w	r5, r5, r9
 8005a04:	60a5      	str	r5, [r4, #8]
 8005a06:	42be      	cmp	r6, r7
 8005a08:	d900      	bls.n	8005a0c <__ssputs_r+0x70>
 8005a0a:	463e      	mov	r6, r7
 8005a0c:	4632      	mov	r2, r6
 8005a0e:	4641      	mov	r1, r8
 8005a10:	6820      	ldr	r0, [r4, #0]
 8005a12:	f000 fcfc 	bl	800640e <memmove>
 8005a16:	2000      	movs	r0, #0
 8005a18:	68a3      	ldr	r3, [r4, #8]
 8005a1a:	1b9b      	subs	r3, r3, r6
 8005a1c:	60a3      	str	r3, [r4, #8]
 8005a1e:	6823      	ldr	r3, [r4, #0]
 8005a20:	4433      	add	r3, r6
 8005a22:	6023      	str	r3, [r4, #0]
 8005a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a28:	462a      	mov	r2, r5
 8005a2a:	f000 fd4b 	bl	80064c4 <_realloc_r>
 8005a2e:	4606      	mov	r6, r0
 8005a30:	2800      	cmp	r0, #0
 8005a32:	d1e0      	bne.n	80059f6 <__ssputs_r+0x5a>
 8005a34:	4650      	mov	r0, sl
 8005a36:	6921      	ldr	r1, [r4, #16]
 8005a38:	f7ff febc 	bl	80057b4 <_free_r>
 8005a3c:	230c      	movs	r3, #12
 8005a3e:	f8ca 3000 	str.w	r3, [sl]
 8005a42:	89a3      	ldrh	r3, [r4, #12]
 8005a44:	f04f 30ff 	mov.w	r0, #4294967295
 8005a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a4c:	81a3      	strh	r3, [r4, #12]
 8005a4e:	e7e9      	b.n	8005a24 <__ssputs_r+0x88>

08005a50 <_svfiprintf_r>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	4698      	mov	r8, r3
 8005a56:	898b      	ldrh	r3, [r1, #12]
 8005a58:	4607      	mov	r7, r0
 8005a5a:	061b      	lsls	r3, r3, #24
 8005a5c:	460d      	mov	r5, r1
 8005a5e:	4614      	mov	r4, r2
 8005a60:	b09d      	sub	sp, #116	; 0x74
 8005a62:	d50e      	bpl.n	8005a82 <_svfiprintf_r+0x32>
 8005a64:	690b      	ldr	r3, [r1, #16]
 8005a66:	b963      	cbnz	r3, 8005a82 <_svfiprintf_r+0x32>
 8005a68:	2140      	movs	r1, #64	; 0x40
 8005a6a:	f7ff ff0b 	bl	8005884 <_malloc_r>
 8005a6e:	6028      	str	r0, [r5, #0]
 8005a70:	6128      	str	r0, [r5, #16]
 8005a72:	b920      	cbnz	r0, 8005a7e <_svfiprintf_r+0x2e>
 8005a74:	230c      	movs	r3, #12
 8005a76:	603b      	str	r3, [r7, #0]
 8005a78:	f04f 30ff 	mov.w	r0, #4294967295
 8005a7c:	e0d0      	b.n	8005c20 <_svfiprintf_r+0x1d0>
 8005a7e:	2340      	movs	r3, #64	; 0x40
 8005a80:	616b      	str	r3, [r5, #20]
 8005a82:	2300      	movs	r3, #0
 8005a84:	9309      	str	r3, [sp, #36]	; 0x24
 8005a86:	2320      	movs	r3, #32
 8005a88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a8c:	2330      	movs	r3, #48	; 0x30
 8005a8e:	f04f 0901 	mov.w	r9, #1
 8005a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a96:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8005c38 <_svfiprintf_r+0x1e8>
 8005a9a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a9e:	4623      	mov	r3, r4
 8005aa0:	469a      	mov	sl, r3
 8005aa2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005aa6:	b10a      	cbz	r2, 8005aac <_svfiprintf_r+0x5c>
 8005aa8:	2a25      	cmp	r2, #37	; 0x25
 8005aaa:	d1f9      	bne.n	8005aa0 <_svfiprintf_r+0x50>
 8005aac:	ebba 0b04 	subs.w	fp, sl, r4
 8005ab0:	d00b      	beq.n	8005aca <_svfiprintf_r+0x7a>
 8005ab2:	465b      	mov	r3, fp
 8005ab4:	4622      	mov	r2, r4
 8005ab6:	4629      	mov	r1, r5
 8005ab8:	4638      	mov	r0, r7
 8005aba:	f7ff ff6f 	bl	800599c <__ssputs_r>
 8005abe:	3001      	adds	r0, #1
 8005ac0:	f000 80a9 	beq.w	8005c16 <_svfiprintf_r+0x1c6>
 8005ac4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ac6:	445a      	add	r2, fp
 8005ac8:	9209      	str	r2, [sp, #36]	; 0x24
 8005aca:	f89a 3000 	ldrb.w	r3, [sl]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	f000 80a1 	beq.w	8005c16 <_svfiprintf_r+0x1c6>
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8005ada:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005ade:	f10a 0a01 	add.w	sl, sl, #1
 8005ae2:	9304      	str	r3, [sp, #16]
 8005ae4:	9307      	str	r3, [sp, #28]
 8005ae6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005aea:	931a      	str	r3, [sp, #104]	; 0x68
 8005aec:	4654      	mov	r4, sl
 8005aee:	2205      	movs	r2, #5
 8005af0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af4:	4850      	ldr	r0, [pc, #320]	; (8005c38 <_svfiprintf_r+0x1e8>)
 8005af6:	f000 fcd7 	bl	80064a8 <memchr>
 8005afa:	9a04      	ldr	r2, [sp, #16]
 8005afc:	b9d8      	cbnz	r0, 8005b36 <_svfiprintf_r+0xe6>
 8005afe:	06d0      	lsls	r0, r2, #27
 8005b00:	bf44      	itt	mi
 8005b02:	2320      	movmi	r3, #32
 8005b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b08:	0711      	lsls	r1, r2, #28
 8005b0a:	bf44      	itt	mi
 8005b0c:	232b      	movmi	r3, #43	; 0x2b
 8005b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005b12:	f89a 3000 	ldrb.w	r3, [sl]
 8005b16:	2b2a      	cmp	r3, #42	; 0x2a
 8005b18:	d015      	beq.n	8005b46 <_svfiprintf_r+0xf6>
 8005b1a:	4654      	mov	r4, sl
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	f04f 0c0a 	mov.w	ip, #10
 8005b22:	9a07      	ldr	r2, [sp, #28]
 8005b24:	4621      	mov	r1, r4
 8005b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005b2a:	3b30      	subs	r3, #48	; 0x30
 8005b2c:	2b09      	cmp	r3, #9
 8005b2e:	d94d      	bls.n	8005bcc <_svfiprintf_r+0x17c>
 8005b30:	b1b0      	cbz	r0, 8005b60 <_svfiprintf_r+0x110>
 8005b32:	9207      	str	r2, [sp, #28]
 8005b34:	e014      	b.n	8005b60 <_svfiprintf_r+0x110>
 8005b36:	eba0 0308 	sub.w	r3, r0, r8
 8005b3a:	fa09 f303 	lsl.w	r3, r9, r3
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	46a2      	mov	sl, r4
 8005b42:	9304      	str	r3, [sp, #16]
 8005b44:	e7d2      	b.n	8005aec <_svfiprintf_r+0x9c>
 8005b46:	9b03      	ldr	r3, [sp, #12]
 8005b48:	1d19      	adds	r1, r3, #4
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	9103      	str	r1, [sp, #12]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	bfbb      	ittet	lt
 8005b52:	425b      	neglt	r3, r3
 8005b54:	f042 0202 	orrlt.w	r2, r2, #2
 8005b58:	9307      	strge	r3, [sp, #28]
 8005b5a:	9307      	strlt	r3, [sp, #28]
 8005b5c:	bfb8      	it	lt
 8005b5e:	9204      	strlt	r2, [sp, #16]
 8005b60:	7823      	ldrb	r3, [r4, #0]
 8005b62:	2b2e      	cmp	r3, #46	; 0x2e
 8005b64:	d10c      	bne.n	8005b80 <_svfiprintf_r+0x130>
 8005b66:	7863      	ldrb	r3, [r4, #1]
 8005b68:	2b2a      	cmp	r3, #42	; 0x2a
 8005b6a:	d134      	bne.n	8005bd6 <_svfiprintf_r+0x186>
 8005b6c:	9b03      	ldr	r3, [sp, #12]
 8005b6e:	3402      	adds	r4, #2
 8005b70:	1d1a      	adds	r2, r3, #4
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	9203      	str	r2, [sp, #12]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	bfb8      	it	lt
 8005b7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005b7e:	9305      	str	r3, [sp, #20]
 8005b80:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005c3c <_svfiprintf_r+0x1ec>
 8005b84:	2203      	movs	r2, #3
 8005b86:	4650      	mov	r0, sl
 8005b88:	7821      	ldrb	r1, [r4, #0]
 8005b8a:	f000 fc8d 	bl	80064a8 <memchr>
 8005b8e:	b138      	cbz	r0, 8005ba0 <_svfiprintf_r+0x150>
 8005b90:	2240      	movs	r2, #64	; 0x40
 8005b92:	9b04      	ldr	r3, [sp, #16]
 8005b94:	eba0 000a 	sub.w	r0, r0, sl
 8005b98:	4082      	lsls	r2, r0
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	3401      	adds	r4, #1
 8005b9e:	9304      	str	r3, [sp, #16]
 8005ba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ba4:	2206      	movs	r2, #6
 8005ba6:	4826      	ldr	r0, [pc, #152]	; (8005c40 <_svfiprintf_r+0x1f0>)
 8005ba8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005bac:	f000 fc7c 	bl	80064a8 <memchr>
 8005bb0:	2800      	cmp	r0, #0
 8005bb2:	d038      	beq.n	8005c26 <_svfiprintf_r+0x1d6>
 8005bb4:	4b23      	ldr	r3, [pc, #140]	; (8005c44 <_svfiprintf_r+0x1f4>)
 8005bb6:	bb1b      	cbnz	r3, 8005c00 <_svfiprintf_r+0x1b0>
 8005bb8:	9b03      	ldr	r3, [sp, #12]
 8005bba:	3307      	adds	r3, #7
 8005bbc:	f023 0307 	bic.w	r3, r3, #7
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	9303      	str	r3, [sp, #12]
 8005bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc6:	4433      	add	r3, r6
 8005bc8:	9309      	str	r3, [sp, #36]	; 0x24
 8005bca:	e768      	b.n	8005a9e <_svfiprintf_r+0x4e>
 8005bcc:	460c      	mov	r4, r1
 8005bce:	2001      	movs	r0, #1
 8005bd0:	fb0c 3202 	mla	r2, ip, r2, r3
 8005bd4:	e7a6      	b.n	8005b24 <_svfiprintf_r+0xd4>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	f04f 0c0a 	mov.w	ip, #10
 8005bdc:	4619      	mov	r1, r3
 8005bde:	3401      	adds	r4, #1
 8005be0:	9305      	str	r3, [sp, #20]
 8005be2:	4620      	mov	r0, r4
 8005be4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005be8:	3a30      	subs	r2, #48	; 0x30
 8005bea:	2a09      	cmp	r2, #9
 8005bec:	d903      	bls.n	8005bf6 <_svfiprintf_r+0x1a6>
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d0c6      	beq.n	8005b80 <_svfiprintf_r+0x130>
 8005bf2:	9105      	str	r1, [sp, #20]
 8005bf4:	e7c4      	b.n	8005b80 <_svfiprintf_r+0x130>
 8005bf6:	4604      	mov	r4, r0
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	fb0c 2101 	mla	r1, ip, r1, r2
 8005bfe:	e7f0      	b.n	8005be2 <_svfiprintf_r+0x192>
 8005c00:	ab03      	add	r3, sp, #12
 8005c02:	9300      	str	r3, [sp, #0]
 8005c04:	462a      	mov	r2, r5
 8005c06:	4638      	mov	r0, r7
 8005c08:	4b0f      	ldr	r3, [pc, #60]	; (8005c48 <_svfiprintf_r+0x1f8>)
 8005c0a:	a904      	add	r1, sp, #16
 8005c0c:	f3af 8000 	nop.w
 8005c10:	1c42      	adds	r2, r0, #1
 8005c12:	4606      	mov	r6, r0
 8005c14:	d1d6      	bne.n	8005bc4 <_svfiprintf_r+0x174>
 8005c16:	89ab      	ldrh	r3, [r5, #12]
 8005c18:	065b      	lsls	r3, r3, #25
 8005c1a:	f53f af2d 	bmi.w	8005a78 <_svfiprintf_r+0x28>
 8005c1e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005c20:	b01d      	add	sp, #116	; 0x74
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	ab03      	add	r3, sp, #12
 8005c28:	9300      	str	r3, [sp, #0]
 8005c2a:	462a      	mov	r2, r5
 8005c2c:	4638      	mov	r0, r7
 8005c2e:	4b06      	ldr	r3, [pc, #24]	; (8005c48 <_svfiprintf_r+0x1f8>)
 8005c30:	a904      	add	r1, sp, #16
 8005c32:	f000 f9bf 	bl	8005fb4 <_printf_i>
 8005c36:	e7eb      	b.n	8005c10 <_svfiprintf_r+0x1c0>
 8005c38:	080073fa 	.word	0x080073fa
 8005c3c:	08007400 	.word	0x08007400
 8005c40:	08007404 	.word	0x08007404
 8005c44:	00000000 	.word	0x00000000
 8005c48:	0800599d 	.word	0x0800599d

08005c4c <__sfputc_r>:
 8005c4c:	6893      	ldr	r3, [r2, #8]
 8005c4e:	b410      	push	{r4}
 8005c50:	3b01      	subs	r3, #1
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	6093      	str	r3, [r2, #8]
 8005c56:	da07      	bge.n	8005c68 <__sfputc_r+0x1c>
 8005c58:	6994      	ldr	r4, [r2, #24]
 8005c5a:	42a3      	cmp	r3, r4
 8005c5c:	db01      	blt.n	8005c62 <__sfputc_r+0x16>
 8005c5e:	290a      	cmp	r1, #10
 8005c60:	d102      	bne.n	8005c68 <__sfputc_r+0x1c>
 8005c62:	bc10      	pop	{r4}
 8005c64:	f7ff bc87 	b.w	8005576 <__swbuf_r>
 8005c68:	6813      	ldr	r3, [r2, #0]
 8005c6a:	1c58      	adds	r0, r3, #1
 8005c6c:	6010      	str	r0, [r2, #0]
 8005c6e:	7019      	strb	r1, [r3, #0]
 8005c70:	4608      	mov	r0, r1
 8005c72:	bc10      	pop	{r4}
 8005c74:	4770      	bx	lr

08005c76 <__sfputs_r>:
 8005c76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c78:	4606      	mov	r6, r0
 8005c7a:	460f      	mov	r7, r1
 8005c7c:	4614      	mov	r4, r2
 8005c7e:	18d5      	adds	r5, r2, r3
 8005c80:	42ac      	cmp	r4, r5
 8005c82:	d101      	bne.n	8005c88 <__sfputs_r+0x12>
 8005c84:	2000      	movs	r0, #0
 8005c86:	e007      	b.n	8005c98 <__sfputs_r+0x22>
 8005c88:	463a      	mov	r2, r7
 8005c8a:	4630      	mov	r0, r6
 8005c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c90:	f7ff ffdc 	bl	8005c4c <__sfputc_r>
 8005c94:	1c43      	adds	r3, r0, #1
 8005c96:	d1f3      	bne.n	8005c80 <__sfputs_r+0xa>
 8005c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c9c <_vfiprintf_r>:
 8005c9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ca0:	460d      	mov	r5, r1
 8005ca2:	4614      	mov	r4, r2
 8005ca4:	4698      	mov	r8, r3
 8005ca6:	4606      	mov	r6, r0
 8005ca8:	b09d      	sub	sp, #116	; 0x74
 8005caa:	b118      	cbz	r0, 8005cb4 <_vfiprintf_r+0x18>
 8005cac:	6a03      	ldr	r3, [r0, #32]
 8005cae:	b90b      	cbnz	r3, 8005cb4 <_vfiprintf_r+0x18>
 8005cb0:	f7ff fb5a 	bl	8005368 <__sinit>
 8005cb4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cb6:	07d9      	lsls	r1, r3, #31
 8005cb8:	d405      	bmi.n	8005cc6 <_vfiprintf_r+0x2a>
 8005cba:	89ab      	ldrh	r3, [r5, #12]
 8005cbc:	059a      	lsls	r2, r3, #22
 8005cbe:	d402      	bmi.n	8005cc6 <_vfiprintf_r+0x2a>
 8005cc0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cc2:	f7ff fd66 	bl	8005792 <__retarget_lock_acquire_recursive>
 8005cc6:	89ab      	ldrh	r3, [r5, #12]
 8005cc8:	071b      	lsls	r3, r3, #28
 8005cca:	d501      	bpl.n	8005cd0 <_vfiprintf_r+0x34>
 8005ccc:	692b      	ldr	r3, [r5, #16]
 8005cce:	b99b      	cbnz	r3, 8005cf8 <_vfiprintf_r+0x5c>
 8005cd0:	4629      	mov	r1, r5
 8005cd2:	4630      	mov	r0, r6
 8005cd4:	f7ff fc8c 	bl	80055f0 <__swsetup_r>
 8005cd8:	b170      	cbz	r0, 8005cf8 <_vfiprintf_r+0x5c>
 8005cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cdc:	07dc      	lsls	r4, r3, #31
 8005cde:	d504      	bpl.n	8005cea <_vfiprintf_r+0x4e>
 8005ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce4:	b01d      	add	sp, #116	; 0x74
 8005ce6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cea:	89ab      	ldrh	r3, [r5, #12]
 8005cec:	0598      	lsls	r0, r3, #22
 8005cee:	d4f7      	bmi.n	8005ce0 <_vfiprintf_r+0x44>
 8005cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cf2:	f7ff fd4f 	bl	8005794 <__retarget_lock_release_recursive>
 8005cf6:	e7f3      	b.n	8005ce0 <_vfiprintf_r+0x44>
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005d02:	2330      	movs	r3, #48	; 0x30
 8005d04:	f04f 0901 	mov.w	r9, #1
 8005d08:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005ebc <_vfiprintf_r+0x220>
 8005d10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005d14:	4623      	mov	r3, r4
 8005d16:	469a      	mov	sl, r3
 8005d18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d1c:	b10a      	cbz	r2, 8005d22 <_vfiprintf_r+0x86>
 8005d1e:	2a25      	cmp	r2, #37	; 0x25
 8005d20:	d1f9      	bne.n	8005d16 <_vfiprintf_r+0x7a>
 8005d22:	ebba 0b04 	subs.w	fp, sl, r4
 8005d26:	d00b      	beq.n	8005d40 <_vfiprintf_r+0xa4>
 8005d28:	465b      	mov	r3, fp
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	4629      	mov	r1, r5
 8005d2e:	4630      	mov	r0, r6
 8005d30:	f7ff ffa1 	bl	8005c76 <__sfputs_r>
 8005d34:	3001      	adds	r0, #1
 8005d36:	f000 80a9 	beq.w	8005e8c <_vfiprintf_r+0x1f0>
 8005d3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d3c:	445a      	add	r2, fp
 8005d3e:	9209      	str	r2, [sp, #36]	; 0x24
 8005d40:	f89a 3000 	ldrb.w	r3, [sl]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	f000 80a1 	beq.w	8005e8c <_vfiprintf_r+0x1f0>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d54:	f10a 0a01 	add.w	sl, sl, #1
 8005d58:	9304      	str	r3, [sp, #16]
 8005d5a:	9307      	str	r3, [sp, #28]
 8005d5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005d60:	931a      	str	r3, [sp, #104]	; 0x68
 8005d62:	4654      	mov	r4, sl
 8005d64:	2205      	movs	r2, #5
 8005d66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d6a:	4854      	ldr	r0, [pc, #336]	; (8005ebc <_vfiprintf_r+0x220>)
 8005d6c:	f000 fb9c 	bl	80064a8 <memchr>
 8005d70:	9a04      	ldr	r2, [sp, #16]
 8005d72:	b9d8      	cbnz	r0, 8005dac <_vfiprintf_r+0x110>
 8005d74:	06d1      	lsls	r1, r2, #27
 8005d76:	bf44      	itt	mi
 8005d78:	2320      	movmi	r3, #32
 8005d7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d7e:	0713      	lsls	r3, r2, #28
 8005d80:	bf44      	itt	mi
 8005d82:	232b      	movmi	r3, #43	; 0x2b
 8005d84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005d88:	f89a 3000 	ldrb.w	r3, [sl]
 8005d8c:	2b2a      	cmp	r3, #42	; 0x2a
 8005d8e:	d015      	beq.n	8005dbc <_vfiprintf_r+0x120>
 8005d90:	4654      	mov	r4, sl
 8005d92:	2000      	movs	r0, #0
 8005d94:	f04f 0c0a 	mov.w	ip, #10
 8005d98:	9a07      	ldr	r2, [sp, #28]
 8005d9a:	4621      	mov	r1, r4
 8005d9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005da0:	3b30      	subs	r3, #48	; 0x30
 8005da2:	2b09      	cmp	r3, #9
 8005da4:	d94d      	bls.n	8005e42 <_vfiprintf_r+0x1a6>
 8005da6:	b1b0      	cbz	r0, 8005dd6 <_vfiprintf_r+0x13a>
 8005da8:	9207      	str	r2, [sp, #28]
 8005daa:	e014      	b.n	8005dd6 <_vfiprintf_r+0x13a>
 8005dac:	eba0 0308 	sub.w	r3, r0, r8
 8005db0:	fa09 f303 	lsl.w	r3, r9, r3
 8005db4:	4313      	orrs	r3, r2
 8005db6:	46a2      	mov	sl, r4
 8005db8:	9304      	str	r3, [sp, #16]
 8005dba:	e7d2      	b.n	8005d62 <_vfiprintf_r+0xc6>
 8005dbc:	9b03      	ldr	r3, [sp, #12]
 8005dbe:	1d19      	adds	r1, r3, #4
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	9103      	str	r1, [sp, #12]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	bfbb      	ittet	lt
 8005dc8:	425b      	neglt	r3, r3
 8005dca:	f042 0202 	orrlt.w	r2, r2, #2
 8005dce:	9307      	strge	r3, [sp, #28]
 8005dd0:	9307      	strlt	r3, [sp, #28]
 8005dd2:	bfb8      	it	lt
 8005dd4:	9204      	strlt	r2, [sp, #16]
 8005dd6:	7823      	ldrb	r3, [r4, #0]
 8005dd8:	2b2e      	cmp	r3, #46	; 0x2e
 8005dda:	d10c      	bne.n	8005df6 <_vfiprintf_r+0x15a>
 8005ddc:	7863      	ldrb	r3, [r4, #1]
 8005dde:	2b2a      	cmp	r3, #42	; 0x2a
 8005de0:	d134      	bne.n	8005e4c <_vfiprintf_r+0x1b0>
 8005de2:	9b03      	ldr	r3, [sp, #12]
 8005de4:	3402      	adds	r4, #2
 8005de6:	1d1a      	adds	r2, r3, #4
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	9203      	str	r2, [sp, #12]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	bfb8      	it	lt
 8005df0:	f04f 33ff 	movlt.w	r3, #4294967295
 8005df4:	9305      	str	r3, [sp, #20]
 8005df6:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005ec0 <_vfiprintf_r+0x224>
 8005dfa:	2203      	movs	r2, #3
 8005dfc:	4650      	mov	r0, sl
 8005dfe:	7821      	ldrb	r1, [r4, #0]
 8005e00:	f000 fb52 	bl	80064a8 <memchr>
 8005e04:	b138      	cbz	r0, 8005e16 <_vfiprintf_r+0x17a>
 8005e06:	2240      	movs	r2, #64	; 0x40
 8005e08:	9b04      	ldr	r3, [sp, #16]
 8005e0a:	eba0 000a 	sub.w	r0, r0, sl
 8005e0e:	4082      	lsls	r2, r0
 8005e10:	4313      	orrs	r3, r2
 8005e12:	3401      	adds	r4, #1
 8005e14:	9304      	str	r3, [sp, #16]
 8005e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e1a:	2206      	movs	r2, #6
 8005e1c:	4829      	ldr	r0, [pc, #164]	; (8005ec4 <_vfiprintf_r+0x228>)
 8005e1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005e22:	f000 fb41 	bl	80064a8 <memchr>
 8005e26:	2800      	cmp	r0, #0
 8005e28:	d03f      	beq.n	8005eaa <_vfiprintf_r+0x20e>
 8005e2a:	4b27      	ldr	r3, [pc, #156]	; (8005ec8 <_vfiprintf_r+0x22c>)
 8005e2c:	bb1b      	cbnz	r3, 8005e76 <_vfiprintf_r+0x1da>
 8005e2e:	9b03      	ldr	r3, [sp, #12]
 8005e30:	3307      	adds	r3, #7
 8005e32:	f023 0307 	bic.w	r3, r3, #7
 8005e36:	3308      	adds	r3, #8
 8005e38:	9303      	str	r3, [sp, #12]
 8005e3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e3c:	443b      	add	r3, r7
 8005e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8005e40:	e768      	b.n	8005d14 <_vfiprintf_r+0x78>
 8005e42:	460c      	mov	r4, r1
 8005e44:	2001      	movs	r0, #1
 8005e46:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e4a:	e7a6      	b.n	8005d9a <_vfiprintf_r+0xfe>
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f04f 0c0a 	mov.w	ip, #10
 8005e52:	4619      	mov	r1, r3
 8005e54:	3401      	adds	r4, #1
 8005e56:	9305      	str	r3, [sp, #20]
 8005e58:	4620      	mov	r0, r4
 8005e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e5e:	3a30      	subs	r2, #48	; 0x30
 8005e60:	2a09      	cmp	r2, #9
 8005e62:	d903      	bls.n	8005e6c <_vfiprintf_r+0x1d0>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d0c6      	beq.n	8005df6 <_vfiprintf_r+0x15a>
 8005e68:	9105      	str	r1, [sp, #20]
 8005e6a:	e7c4      	b.n	8005df6 <_vfiprintf_r+0x15a>
 8005e6c:	4604      	mov	r4, r0
 8005e6e:	2301      	movs	r3, #1
 8005e70:	fb0c 2101 	mla	r1, ip, r1, r2
 8005e74:	e7f0      	b.n	8005e58 <_vfiprintf_r+0x1bc>
 8005e76:	ab03      	add	r3, sp, #12
 8005e78:	9300      	str	r3, [sp, #0]
 8005e7a:	462a      	mov	r2, r5
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	4b13      	ldr	r3, [pc, #76]	; (8005ecc <_vfiprintf_r+0x230>)
 8005e80:	a904      	add	r1, sp, #16
 8005e82:	f3af 8000 	nop.w
 8005e86:	4607      	mov	r7, r0
 8005e88:	1c78      	adds	r0, r7, #1
 8005e8a:	d1d6      	bne.n	8005e3a <_vfiprintf_r+0x19e>
 8005e8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005e8e:	07d9      	lsls	r1, r3, #31
 8005e90:	d405      	bmi.n	8005e9e <_vfiprintf_r+0x202>
 8005e92:	89ab      	ldrh	r3, [r5, #12]
 8005e94:	059a      	lsls	r2, r3, #22
 8005e96:	d402      	bmi.n	8005e9e <_vfiprintf_r+0x202>
 8005e98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005e9a:	f7ff fc7b 	bl	8005794 <__retarget_lock_release_recursive>
 8005e9e:	89ab      	ldrh	r3, [r5, #12]
 8005ea0:	065b      	lsls	r3, r3, #25
 8005ea2:	f53f af1d 	bmi.w	8005ce0 <_vfiprintf_r+0x44>
 8005ea6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ea8:	e71c      	b.n	8005ce4 <_vfiprintf_r+0x48>
 8005eaa:	ab03      	add	r3, sp, #12
 8005eac:	9300      	str	r3, [sp, #0]
 8005eae:	462a      	mov	r2, r5
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	4b06      	ldr	r3, [pc, #24]	; (8005ecc <_vfiprintf_r+0x230>)
 8005eb4:	a904      	add	r1, sp, #16
 8005eb6:	f000 f87d 	bl	8005fb4 <_printf_i>
 8005eba:	e7e4      	b.n	8005e86 <_vfiprintf_r+0x1ea>
 8005ebc:	080073fa 	.word	0x080073fa
 8005ec0:	08007400 	.word	0x08007400
 8005ec4:	08007404 	.word	0x08007404
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	08005c77 	.word	0x08005c77

08005ed0 <_printf_common>:
 8005ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ed4:	4616      	mov	r6, r2
 8005ed6:	4699      	mov	r9, r3
 8005ed8:	688a      	ldr	r2, [r1, #8]
 8005eda:	690b      	ldr	r3, [r1, #16]
 8005edc:	4607      	mov	r7, r0
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	bfb8      	it	lt
 8005ee2:	4613      	movlt	r3, r2
 8005ee4:	6033      	str	r3, [r6, #0]
 8005ee6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005eea:	460c      	mov	r4, r1
 8005eec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ef0:	b10a      	cbz	r2, 8005ef6 <_printf_common+0x26>
 8005ef2:	3301      	adds	r3, #1
 8005ef4:	6033      	str	r3, [r6, #0]
 8005ef6:	6823      	ldr	r3, [r4, #0]
 8005ef8:	0699      	lsls	r1, r3, #26
 8005efa:	bf42      	ittt	mi
 8005efc:	6833      	ldrmi	r3, [r6, #0]
 8005efe:	3302      	addmi	r3, #2
 8005f00:	6033      	strmi	r3, [r6, #0]
 8005f02:	6825      	ldr	r5, [r4, #0]
 8005f04:	f015 0506 	ands.w	r5, r5, #6
 8005f08:	d106      	bne.n	8005f18 <_printf_common+0x48>
 8005f0a:	f104 0a19 	add.w	sl, r4, #25
 8005f0e:	68e3      	ldr	r3, [r4, #12]
 8005f10:	6832      	ldr	r2, [r6, #0]
 8005f12:	1a9b      	subs	r3, r3, r2
 8005f14:	42ab      	cmp	r3, r5
 8005f16:	dc2b      	bgt.n	8005f70 <_printf_common+0xa0>
 8005f18:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005f1c:	1e13      	subs	r3, r2, #0
 8005f1e:	6822      	ldr	r2, [r4, #0]
 8005f20:	bf18      	it	ne
 8005f22:	2301      	movne	r3, #1
 8005f24:	0692      	lsls	r2, r2, #26
 8005f26:	d430      	bmi.n	8005f8a <_printf_common+0xba>
 8005f28:	4649      	mov	r1, r9
 8005f2a:	4638      	mov	r0, r7
 8005f2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005f30:	47c0      	blx	r8
 8005f32:	3001      	adds	r0, #1
 8005f34:	d023      	beq.n	8005f7e <_printf_common+0xae>
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	6922      	ldr	r2, [r4, #16]
 8005f3a:	f003 0306 	and.w	r3, r3, #6
 8005f3e:	2b04      	cmp	r3, #4
 8005f40:	bf14      	ite	ne
 8005f42:	2500      	movne	r5, #0
 8005f44:	6833      	ldreq	r3, [r6, #0]
 8005f46:	f04f 0600 	mov.w	r6, #0
 8005f4a:	bf08      	it	eq
 8005f4c:	68e5      	ldreq	r5, [r4, #12]
 8005f4e:	f104 041a 	add.w	r4, r4, #26
 8005f52:	bf08      	it	eq
 8005f54:	1aed      	subeq	r5, r5, r3
 8005f56:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005f5a:	bf08      	it	eq
 8005f5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f60:	4293      	cmp	r3, r2
 8005f62:	bfc4      	itt	gt
 8005f64:	1a9b      	subgt	r3, r3, r2
 8005f66:	18ed      	addgt	r5, r5, r3
 8005f68:	42b5      	cmp	r5, r6
 8005f6a:	d11a      	bne.n	8005fa2 <_printf_common+0xd2>
 8005f6c:	2000      	movs	r0, #0
 8005f6e:	e008      	b.n	8005f82 <_printf_common+0xb2>
 8005f70:	2301      	movs	r3, #1
 8005f72:	4652      	mov	r2, sl
 8005f74:	4649      	mov	r1, r9
 8005f76:	4638      	mov	r0, r7
 8005f78:	47c0      	blx	r8
 8005f7a:	3001      	adds	r0, #1
 8005f7c:	d103      	bne.n	8005f86 <_printf_common+0xb6>
 8005f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f86:	3501      	adds	r5, #1
 8005f88:	e7c1      	b.n	8005f0e <_printf_common+0x3e>
 8005f8a:	2030      	movs	r0, #48	; 0x30
 8005f8c:	18e1      	adds	r1, r4, r3
 8005f8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f92:	1c5a      	adds	r2, r3, #1
 8005f94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f98:	4422      	add	r2, r4
 8005f9a:	3302      	adds	r3, #2
 8005f9c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005fa0:	e7c2      	b.n	8005f28 <_printf_common+0x58>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	4638      	mov	r0, r7
 8005faa:	47c0      	blx	r8
 8005fac:	3001      	adds	r0, #1
 8005fae:	d0e6      	beq.n	8005f7e <_printf_common+0xae>
 8005fb0:	3601      	adds	r6, #1
 8005fb2:	e7d9      	b.n	8005f68 <_printf_common+0x98>

08005fb4 <_printf_i>:
 8005fb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb8:	7e0f      	ldrb	r7, [r1, #24]
 8005fba:	4691      	mov	r9, r2
 8005fbc:	2f78      	cmp	r7, #120	; 0x78
 8005fbe:	4680      	mov	r8, r0
 8005fc0:	460c      	mov	r4, r1
 8005fc2:	469a      	mov	sl, r3
 8005fc4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005fc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005fca:	d807      	bhi.n	8005fdc <_printf_i+0x28>
 8005fcc:	2f62      	cmp	r7, #98	; 0x62
 8005fce:	d80a      	bhi.n	8005fe6 <_printf_i+0x32>
 8005fd0:	2f00      	cmp	r7, #0
 8005fd2:	f000 80d5 	beq.w	8006180 <_printf_i+0x1cc>
 8005fd6:	2f58      	cmp	r7, #88	; 0x58
 8005fd8:	f000 80c1 	beq.w	800615e <_printf_i+0x1aa>
 8005fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fe0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005fe4:	e03a      	b.n	800605c <_printf_i+0xa8>
 8005fe6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005fea:	2b15      	cmp	r3, #21
 8005fec:	d8f6      	bhi.n	8005fdc <_printf_i+0x28>
 8005fee:	a101      	add	r1, pc, #4	; (adr r1, 8005ff4 <_printf_i+0x40>)
 8005ff0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ff4:	0800604d 	.word	0x0800604d
 8005ff8:	08006061 	.word	0x08006061
 8005ffc:	08005fdd 	.word	0x08005fdd
 8006000:	08005fdd 	.word	0x08005fdd
 8006004:	08005fdd 	.word	0x08005fdd
 8006008:	08005fdd 	.word	0x08005fdd
 800600c:	08006061 	.word	0x08006061
 8006010:	08005fdd 	.word	0x08005fdd
 8006014:	08005fdd 	.word	0x08005fdd
 8006018:	08005fdd 	.word	0x08005fdd
 800601c:	08005fdd 	.word	0x08005fdd
 8006020:	08006167 	.word	0x08006167
 8006024:	0800608d 	.word	0x0800608d
 8006028:	08006121 	.word	0x08006121
 800602c:	08005fdd 	.word	0x08005fdd
 8006030:	08005fdd 	.word	0x08005fdd
 8006034:	08006189 	.word	0x08006189
 8006038:	08005fdd 	.word	0x08005fdd
 800603c:	0800608d 	.word	0x0800608d
 8006040:	08005fdd 	.word	0x08005fdd
 8006044:	08005fdd 	.word	0x08005fdd
 8006048:	08006129 	.word	0x08006129
 800604c:	682b      	ldr	r3, [r5, #0]
 800604e:	1d1a      	adds	r2, r3, #4
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	602a      	str	r2, [r5, #0]
 8006054:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006058:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800605c:	2301      	movs	r3, #1
 800605e:	e0a0      	b.n	80061a2 <_printf_i+0x1ee>
 8006060:	6820      	ldr	r0, [r4, #0]
 8006062:	682b      	ldr	r3, [r5, #0]
 8006064:	0607      	lsls	r7, r0, #24
 8006066:	f103 0104 	add.w	r1, r3, #4
 800606a:	6029      	str	r1, [r5, #0]
 800606c:	d501      	bpl.n	8006072 <_printf_i+0xbe>
 800606e:	681e      	ldr	r6, [r3, #0]
 8006070:	e003      	b.n	800607a <_printf_i+0xc6>
 8006072:	0646      	lsls	r6, r0, #25
 8006074:	d5fb      	bpl.n	800606e <_printf_i+0xba>
 8006076:	f9b3 6000 	ldrsh.w	r6, [r3]
 800607a:	2e00      	cmp	r6, #0
 800607c:	da03      	bge.n	8006086 <_printf_i+0xd2>
 800607e:	232d      	movs	r3, #45	; 0x2d
 8006080:	4276      	negs	r6, r6
 8006082:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006086:	230a      	movs	r3, #10
 8006088:	4859      	ldr	r0, [pc, #356]	; (80061f0 <_printf_i+0x23c>)
 800608a:	e012      	b.n	80060b2 <_printf_i+0xfe>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	6820      	ldr	r0, [r4, #0]
 8006090:	1d19      	adds	r1, r3, #4
 8006092:	6029      	str	r1, [r5, #0]
 8006094:	0605      	lsls	r5, r0, #24
 8006096:	d501      	bpl.n	800609c <_printf_i+0xe8>
 8006098:	681e      	ldr	r6, [r3, #0]
 800609a:	e002      	b.n	80060a2 <_printf_i+0xee>
 800609c:	0641      	lsls	r1, r0, #25
 800609e:	d5fb      	bpl.n	8006098 <_printf_i+0xe4>
 80060a0:	881e      	ldrh	r6, [r3, #0]
 80060a2:	2f6f      	cmp	r7, #111	; 0x6f
 80060a4:	bf0c      	ite	eq
 80060a6:	2308      	moveq	r3, #8
 80060a8:	230a      	movne	r3, #10
 80060aa:	4851      	ldr	r0, [pc, #324]	; (80061f0 <_printf_i+0x23c>)
 80060ac:	2100      	movs	r1, #0
 80060ae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80060b2:	6865      	ldr	r5, [r4, #4]
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	bfa8      	it	ge
 80060b8:	6821      	ldrge	r1, [r4, #0]
 80060ba:	60a5      	str	r5, [r4, #8]
 80060bc:	bfa4      	itt	ge
 80060be:	f021 0104 	bicge.w	r1, r1, #4
 80060c2:	6021      	strge	r1, [r4, #0]
 80060c4:	b90e      	cbnz	r6, 80060ca <_printf_i+0x116>
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	d04b      	beq.n	8006162 <_printf_i+0x1ae>
 80060ca:	4615      	mov	r5, r2
 80060cc:	fbb6 f1f3 	udiv	r1, r6, r3
 80060d0:	fb03 6711 	mls	r7, r3, r1, r6
 80060d4:	5dc7      	ldrb	r7, [r0, r7]
 80060d6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80060da:	4637      	mov	r7, r6
 80060dc:	42bb      	cmp	r3, r7
 80060de:	460e      	mov	r6, r1
 80060e0:	d9f4      	bls.n	80060cc <_printf_i+0x118>
 80060e2:	2b08      	cmp	r3, #8
 80060e4:	d10b      	bne.n	80060fe <_printf_i+0x14a>
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	07de      	lsls	r6, r3, #31
 80060ea:	d508      	bpl.n	80060fe <_printf_i+0x14a>
 80060ec:	6923      	ldr	r3, [r4, #16]
 80060ee:	6861      	ldr	r1, [r4, #4]
 80060f0:	4299      	cmp	r1, r3
 80060f2:	bfde      	ittt	le
 80060f4:	2330      	movle	r3, #48	; 0x30
 80060f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80060fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80060fe:	1b52      	subs	r2, r2, r5
 8006100:	6122      	str	r2, [r4, #16]
 8006102:	464b      	mov	r3, r9
 8006104:	4621      	mov	r1, r4
 8006106:	4640      	mov	r0, r8
 8006108:	f8cd a000 	str.w	sl, [sp]
 800610c:	aa03      	add	r2, sp, #12
 800610e:	f7ff fedf 	bl	8005ed0 <_printf_common>
 8006112:	3001      	adds	r0, #1
 8006114:	d14a      	bne.n	80061ac <_printf_i+0x1f8>
 8006116:	f04f 30ff 	mov.w	r0, #4294967295
 800611a:	b004      	add	sp, #16
 800611c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006120:	6823      	ldr	r3, [r4, #0]
 8006122:	f043 0320 	orr.w	r3, r3, #32
 8006126:	6023      	str	r3, [r4, #0]
 8006128:	2778      	movs	r7, #120	; 0x78
 800612a:	4832      	ldr	r0, [pc, #200]	; (80061f4 <_printf_i+0x240>)
 800612c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006130:	6823      	ldr	r3, [r4, #0]
 8006132:	6829      	ldr	r1, [r5, #0]
 8006134:	061f      	lsls	r7, r3, #24
 8006136:	f851 6b04 	ldr.w	r6, [r1], #4
 800613a:	d402      	bmi.n	8006142 <_printf_i+0x18e>
 800613c:	065f      	lsls	r7, r3, #25
 800613e:	bf48      	it	mi
 8006140:	b2b6      	uxthmi	r6, r6
 8006142:	07df      	lsls	r7, r3, #31
 8006144:	bf48      	it	mi
 8006146:	f043 0320 	orrmi.w	r3, r3, #32
 800614a:	6029      	str	r1, [r5, #0]
 800614c:	bf48      	it	mi
 800614e:	6023      	strmi	r3, [r4, #0]
 8006150:	b91e      	cbnz	r6, 800615a <_printf_i+0x1a6>
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	f023 0320 	bic.w	r3, r3, #32
 8006158:	6023      	str	r3, [r4, #0]
 800615a:	2310      	movs	r3, #16
 800615c:	e7a6      	b.n	80060ac <_printf_i+0xf8>
 800615e:	4824      	ldr	r0, [pc, #144]	; (80061f0 <_printf_i+0x23c>)
 8006160:	e7e4      	b.n	800612c <_printf_i+0x178>
 8006162:	4615      	mov	r5, r2
 8006164:	e7bd      	b.n	80060e2 <_printf_i+0x12e>
 8006166:	682b      	ldr	r3, [r5, #0]
 8006168:	6826      	ldr	r6, [r4, #0]
 800616a:	1d18      	adds	r0, r3, #4
 800616c:	6961      	ldr	r1, [r4, #20]
 800616e:	6028      	str	r0, [r5, #0]
 8006170:	0635      	lsls	r5, r6, #24
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	d501      	bpl.n	800617a <_printf_i+0x1c6>
 8006176:	6019      	str	r1, [r3, #0]
 8006178:	e002      	b.n	8006180 <_printf_i+0x1cc>
 800617a:	0670      	lsls	r0, r6, #25
 800617c:	d5fb      	bpl.n	8006176 <_printf_i+0x1c2>
 800617e:	8019      	strh	r1, [r3, #0]
 8006180:	2300      	movs	r3, #0
 8006182:	4615      	mov	r5, r2
 8006184:	6123      	str	r3, [r4, #16]
 8006186:	e7bc      	b.n	8006102 <_printf_i+0x14e>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	2100      	movs	r1, #0
 800618c:	1d1a      	adds	r2, r3, #4
 800618e:	602a      	str	r2, [r5, #0]
 8006190:	681d      	ldr	r5, [r3, #0]
 8006192:	6862      	ldr	r2, [r4, #4]
 8006194:	4628      	mov	r0, r5
 8006196:	f000 f987 	bl	80064a8 <memchr>
 800619a:	b108      	cbz	r0, 80061a0 <_printf_i+0x1ec>
 800619c:	1b40      	subs	r0, r0, r5
 800619e:	6060      	str	r0, [r4, #4]
 80061a0:	6863      	ldr	r3, [r4, #4]
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	2300      	movs	r3, #0
 80061a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80061aa:	e7aa      	b.n	8006102 <_printf_i+0x14e>
 80061ac:	462a      	mov	r2, r5
 80061ae:	4649      	mov	r1, r9
 80061b0:	4640      	mov	r0, r8
 80061b2:	6923      	ldr	r3, [r4, #16]
 80061b4:	47d0      	blx	sl
 80061b6:	3001      	adds	r0, #1
 80061b8:	d0ad      	beq.n	8006116 <_printf_i+0x162>
 80061ba:	6823      	ldr	r3, [r4, #0]
 80061bc:	079b      	lsls	r3, r3, #30
 80061be:	d413      	bmi.n	80061e8 <_printf_i+0x234>
 80061c0:	68e0      	ldr	r0, [r4, #12]
 80061c2:	9b03      	ldr	r3, [sp, #12]
 80061c4:	4298      	cmp	r0, r3
 80061c6:	bfb8      	it	lt
 80061c8:	4618      	movlt	r0, r3
 80061ca:	e7a6      	b.n	800611a <_printf_i+0x166>
 80061cc:	2301      	movs	r3, #1
 80061ce:	4632      	mov	r2, r6
 80061d0:	4649      	mov	r1, r9
 80061d2:	4640      	mov	r0, r8
 80061d4:	47d0      	blx	sl
 80061d6:	3001      	adds	r0, #1
 80061d8:	d09d      	beq.n	8006116 <_printf_i+0x162>
 80061da:	3501      	adds	r5, #1
 80061dc:	68e3      	ldr	r3, [r4, #12]
 80061de:	9903      	ldr	r1, [sp, #12]
 80061e0:	1a5b      	subs	r3, r3, r1
 80061e2:	42ab      	cmp	r3, r5
 80061e4:	dcf2      	bgt.n	80061cc <_printf_i+0x218>
 80061e6:	e7eb      	b.n	80061c0 <_printf_i+0x20c>
 80061e8:	2500      	movs	r5, #0
 80061ea:	f104 0619 	add.w	r6, r4, #25
 80061ee:	e7f5      	b.n	80061dc <_printf_i+0x228>
 80061f0:	0800740b 	.word	0x0800740b
 80061f4:	0800741c 	.word	0x0800741c

080061f8 <__sflush_r>:
 80061f8:	898a      	ldrh	r2, [r1, #12]
 80061fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fc:	4605      	mov	r5, r0
 80061fe:	0710      	lsls	r0, r2, #28
 8006200:	460c      	mov	r4, r1
 8006202:	d457      	bmi.n	80062b4 <__sflush_r+0xbc>
 8006204:	684b      	ldr	r3, [r1, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	dc04      	bgt.n	8006214 <__sflush_r+0x1c>
 800620a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800620c:	2b00      	cmp	r3, #0
 800620e:	dc01      	bgt.n	8006214 <__sflush_r+0x1c>
 8006210:	2000      	movs	r0, #0
 8006212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006214:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006216:	2e00      	cmp	r6, #0
 8006218:	d0fa      	beq.n	8006210 <__sflush_r+0x18>
 800621a:	2300      	movs	r3, #0
 800621c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006220:	682f      	ldr	r7, [r5, #0]
 8006222:	6a21      	ldr	r1, [r4, #32]
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	d032      	beq.n	800628e <__sflush_r+0x96>
 8006228:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800622a:	89a3      	ldrh	r3, [r4, #12]
 800622c:	075a      	lsls	r2, r3, #29
 800622e:	d505      	bpl.n	800623c <__sflush_r+0x44>
 8006230:	6863      	ldr	r3, [r4, #4]
 8006232:	1ac0      	subs	r0, r0, r3
 8006234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006236:	b10b      	cbz	r3, 800623c <__sflush_r+0x44>
 8006238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800623a:	1ac0      	subs	r0, r0, r3
 800623c:	2300      	movs	r3, #0
 800623e:	4602      	mov	r2, r0
 8006240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006242:	4628      	mov	r0, r5
 8006244:	6a21      	ldr	r1, [r4, #32]
 8006246:	47b0      	blx	r6
 8006248:	1c43      	adds	r3, r0, #1
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	d106      	bne.n	800625c <__sflush_r+0x64>
 800624e:	6829      	ldr	r1, [r5, #0]
 8006250:	291d      	cmp	r1, #29
 8006252:	d82b      	bhi.n	80062ac <__sflush_r+0xb4>
 8006254:	4a28      	ldr	r2, [pc, #160]	; (80062f8 <__sflush_r+0x100>)
 8006256:	410a      	asrs	r2, r1
 8006258:	07d6      	lsls	r6, r2, #31
 800625a:	d427      	bmi.n	80062ac <__sflush_r+0xb4>
 800625c:	2200      	movs	r2, #0
 800625e:	6062      	str	r2, [r4, #4]
 8006260:	6922      	ldr	r2, [r4, #16]
 8006262:	04d9      	lsls	r1, r3, #19
 8006264:	6022      	str	r2, [r4, #0]
 8006266:	d504      	bpl.n	8006272 <__sflush_r+0x7a>
 8006268:	1c42      	adds	r2, r0, #1
 800626a:	d101      	bne.n	8006270 <__sflush_r+0x78>
 800626c:	682b      	ldr	r3, [r5, #0]
 800626e:	b903      	cbnz	r3, 8006272 <__sflush_r+0x7a>
 8006270:	6560      	str	r0, [r4, #84]	; 0x54
 8006272:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006274:	602f      	str	r7, [r5, #0]
 8006276:	2900      	cmp	r1, #0
 8006278:	d0ca      	beq.n	8006210 <__sflush_r+0x18>
 800627a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800627e:	4299      	cmp	r1, r3
 8006280:	d002      	beq.n	8006288 <__sflush_r+0x90>
 8006282:	4628      	mov	r0, r5
 8006284:	f7ff fa96 	bl	80057b4 <_free_r>
 8006288:	2000      	movs	r0, #0
 800628a:	6360      	str	r0, [r4, #52]	; 0x34
 800628c:	e7c1      	b.n	8006212 <__sflush_r+0x1a>
 800628e:	2301      	movs	r3, #1
 8006290:	4628      	mov	r0, r5
 8006292:	47b0      	blx	r6
 8006294:	1c41      	adds	r1, r0, #1
 8006296:	d1c8      	bne.n	800622a <__sflush_r+0x32>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d0c5      	beq.n	800622a <__sflush_r+0x32>
 800629e:	2b1d      	cmp	r3, #29
 80062a0:	d001      	beq.n	80062a6 <__sflush_r+0xae>
 80062a2:	2b16      	cmp	r3, #22
 80062a4:	d101      	bne.n	80062aa <__sflush_r+0xb2>
 80062a6:	602f      	str	r7, [r5, #0]
 80062a8:	e7b2      	b.n	8006210 <__sflush_r+0x18>
 80062aa:	89a3      	ldrh	r3, [r4, #12]
 80062ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062b0:	81a3      	strh	r3, [r4, #12]
 80062b2:	e7ae      	b.n	8006212 <__sflush_r+0x1a>
 80062b4:	690f      	ldr	r7, [r1, #16]
 80062b6:	2f00      	cmp	r7, #0
 80062b8:	d0aa      	beq.n	8006210 <__sflush_r+0x18>
 80062ba:	0793      	lsls	r3, r2, #30
 80062bc:	bf18      	it	ne
 80062be:	2300      	movne	r3, #0
 80062c0:	680e      	ldr	r6, [r1, #0]
 80062c2:	bf08      	it	eq
 80062c4:	694b      	ldreq	r3, [r1, #20]
 80062c6:	1bf6      	subs	r6, r6, r7
 80062c8:	600f      	str	r7, [r1, #0]
 80062ca:	608b      	str	r3, [r1, #8]
 80062cc:	2e00      	cmp	r6, #0
 80062ce:	dd9f      	ble.n	8006210 <__sflush_r+0x18>
 80062d0:	4633      	mov	r3, r6
 80062d2:	463a      	mov	r2, r7
 80062d4:	4628      	mov	r0, r5
 80062d6:	6a21      	ldr	r1, [r4, #32]
 80062d8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80062dc:	47e0      	blx	ip
 80062de:	2800      	cmp	r0, #0
 80062e0:	dc06      	bgt.n	80062f0 <__sflush_r+0xf8>
 80062e2:	89a3      	ldrh	r3, [r4, #12]
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295
 80062e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80062ec:	81a3      	strh	r3, [r4, #12]
 80062ee:	e790      	b.n	8006212 <__sflush_r+0x1a>
 80062f0:	4407      	add	r7, r0
 80062f2:	1a36      	subs	r6, r6, r0
 80062f4:	e7ea      	b.n	80062cc <__sflush_r+0xd4>
 80062f6:	bf00      	nop
 80062f8:	dfbffffe 	.word	0xdfbffffe

080062fc <_fflush_r>:
 80062fc:	b538      	push	{r3, r4, r5, lr}
 80062fe:	690b      	ldr	r3, [r1, #16]
 8006300:	4605      	mov	r5, r0
 8006302:	460c      	mov	r4, r1
 8006304:	b913      	cbnz	r3, 800630c <_fflush_r+0x10>
 8006306:	2500      	movs	r5, #0
 8006308:	4628      	mov	r0, r5
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	b118      	cbz	r0, 8006316 <_fflush_r+0x1a>
 800630e:	6a03      	ldr	r3, [r0, #32]
 8006310:	b90b      	cbnz	r3, 8006316 <_fflush_r+0x1a>
 8006312:	f7ff f829 	bl	8005368 <__sinit>
 8006316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d0f3      	beq.n	8006306 <_fflush_r+0xa>
 800631e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006320:	07d0      	lsls	r0, r2, #31
 8006322:	d404      	bmi.n	800632e <_fflush_r+0x32>
 8006324:	0599      	lsls	r1, r3, #22
 8006326:	d402      	bmi.n	800632e <_fflush_r+0x32>
 8006328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800632a:	f7ff fa32 	bl	8005792 <__retarget_lock_acquire_recursive>
 800632e:	4628      	mov	r0, r5
 8006330:	4621      	mov	r1, r4
 8006332:	f7ff ff61 	bl	80061f8 <__sflush_r>
 8006336:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006338:	4605      	mov	r5, r0
 800633a:	07da      	lsls	r2, r3, #31
 800633c:	d4e4      	bmi.n	8006308 <_fflush_r+0xc>
 800633e:	89a3      	ldrh	r3, [r4, #12]
 8006340:	059b      	lsls	r3, r3, #22
 8006342:	d4e1      	bmi.n	8006308 <_fflush_r+0xc>
 8006344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006346:	f7ff fa25 	bl	8005794 <__retarget_lock_release_recursive>
 800634a:	e7dd      	b.n	8006308 <_fflush_r+0xc>

0800634c <__swhatbuf_r>:
 800634c:	b570      	push	{r4, r5, r6, lr}
 800634e:	460c      	mov	r4, r1
 8006350:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006354:	4615      	mov	r5, r2
 8006356:	2900      	cmp	r1, #0
 8006358:	461e      	mov	r6, r3
 800635a:	b096      	sub	sp, #88	; 0x58
 800635c:	da0c      	bge.n	8006378 <__swhatbuf_r+0x2c>
 800635e:	89a3      	ldrh	r3, [r4, #12]
 8006360:	2100      	movs	r1, #0
 8006362:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006366:	bf0c      	ite	eq
 8006368:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800636c:	2340      	movne	r3, #64	; 0x40
 800636e:	2000      	movs	r0, #0
 8006370:	6031      	str	r1, [r6, #0]
 8006372:	602b      	str	r3, [r5, #0]
 8006374:	b016      	add	sp, #88	; 0x58
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	466a      	mov	r2, sp
 800637a:	f000 f863 	bl	8006444 <_fstat_r>
 800637e:	2800      	cmp	r0, #0
 8006380:	dbed      	blt.n	800635e <__swhatbuf_r+0x12>
 8006382:	9901      	ldr	r1, [sp, #4]
 8006384:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006388:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800638c:	4259      	negs	r1, r3
 800638e:	4159      	adcs	r1, r3
 8006390:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006394:	e7eb      	b.n	800636e <__swhatbuf_r+0x22>

08006396 <__smakebuf_r>:
 8006396:	898b      	ldrh	r3, [r1, #12]
 8006398:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800639a:	079d      	lsls	r5, r3, #30
 800639c:	4606      	mov	r6, r0
 800639e:	460c      	mov	r4, r1
 80063a0:	d507      	bpl.n	80063b2 <__smakebuf_r+0x1c>
 80063a2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80063a6:	6023      	str	r3, [r4, #0]
 80063a8:	6123      	str	r3, [r4, #16]
 80063aa:	2301      	movs	r3, #1
 80063ac:	6163      	str	r3, [r4, #20]
 80063ae:	b002      	add	sp, #8
 80063b0:	bd70      	pop	{r4, r5, r6, pc}
 80063b2:	466a      	mov	r2, sp
 80063b4:	ab01      	add	r3, sp, #4
 80063b6:	f7ff ffc9 	bl	800634c <__swhatbuf_r>
 80063ba:	9900      	ldr	r1, [sp, #0]
 80063bc:	4605      	mov	r5, r0
 80063be:	4630      	mov	r0, r6
 80063c0:	f7ff fa60 	bl	8005884 <_malloc_r>
 80063c4:	b948      	cbnz	r0, 80063da <__smakebuf_r+0x44>
 80063c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063ca:	059a      	lsls	r2, r3, #22
 80063cc:	d4ef      	bmi.n	80063ae <__smakebuf_r+0x18>
 80063ce:	f023 0303 	bic.w	r3, r3, #3
 80063d2:	f043 0302 	orr.w	r3, r3, #2
 80063d6:	81a3      	strh	r3, [r4, #12]
 80063d8:	e7e3      	b.n	80063a2 <__smakebuf_r+0xc>
 80063da:	89a3      	ldrh	r3, [r4, #12]
 80063dc:	6020      	str	r0, [r4, #0]
 80063de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063e2:	81a3      	strh	r3, [r4, #12]
 80063e4:	9b00      	ldr	r3, [sp, #0]
 80063e6:	6120      	str	r0, [r4, #16]
 80063e8:	6163      	str	r3, [r4, #20]
 80063ea:	9b01      	ldr	r3, [sp, #4]
 80063ec:	b15b      	cbz	r3, 8006406 <__smakebuf_r+0x70>
 80063ee:	4630      	mov	r0, r6
 80063f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063f4:	f000 f838 	bl	8006468 <_isatty_r>
 80063f8:	b128      	cbz	r0, 8006406 <__smakebuf_r+0x70>
 80063fa:	89a3      	ldrh	r3, [r4, #12]
 80063fc:	f023 0303 	bic.w	r3, r3, #3
 8006400:	f043 0301 	orr.w	r3, r3, #1
 8006404:	81a3      	strh	r3, [r4, #12]
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	431d      	orrs	r5, r3
 800640a:	81a5      	strh	r5, [r4, #12]
 800640c:	e7cf      	b.n	80063ae <__smakebuf_r+0x18>

0800640e <memmove>:
 800640e:	4288      	cmp	r0, r1
 8006410:	b510      	push	{r4, lr}
 8006412:	eb01 0402 	add.w	r4, r1, r2
 8006416:	d902      	bls.n	800641e <memmove+0x10>
 8006418:	4284      	cmp	r4, r0
 800641a:	4623      	mov	r3, r4
 800641c:	d807      	bhi.n	800642e <memmove+0x20>
 800641e:	1e43      	subs	r3, r0, #1
 8006420:	42a1      	cmp	r1, r4
 8006422:	d008      	beq.n	8006436 <memmove+0x28>
 8006424:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006428:	f803 2f01 	strb.w	r2, [r3, #1]!
 800642c:	e7f8      	b.n	8006420 <memmove+0x12>
 800642e:	4601      	mov	r1, r0
 8006430:	4402      	add	r2, r0
 8006432:	428a      	cmp	r2, r1
 8006434:	d100      	bne.n	8006438 <memmove+0x2a>
 8006436:	bd10      	pop	{r4, pc}
 8006438:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800643c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006440:	e7f7      	b.n	8006432 <memmove+0x24>
	...

08006444 <_fstat_r>:
 8006444:	b538      	push	{r3, r4, r5, lr}
 8006446:	2300      	movs	r3, #0
 8006448:	4d06      	ldr	r5, [pc, #24]	; (8006464 <_fstat_r+0x20>)
 800644a:	4604      	mov	r4, r0
 800644c:	4608      	mov	r0, r1
 800644e:	4611      	mov	r1, r2
 8006450:	602b      	str	r3, [r5, #0]
 8006452:	f7fb fabd 	bl	80019d0 <_fstat>
 8006456:	1c43      	adds	r3, r0, #1
 8006458:	d102      	bne.n	8006460 <_fstat_r+0x1c>
 800645a:	682b      	ldr	r3, [r5, #0]
 800645c:	b103      	cbz	r3, 8006460 <_fstat_r+0x1c>
 800645e:	6023      	str	r3, [r4, #0]
 8006460:	bd38      	pop	{r3, r4, r5, pc}
 8006462:	bf00      	nop
 8006464:	20000a5c 	.word	0x20000a5c

08006468 <_isatty_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	2300      	movs	r3, #0
 800646c:	4d05      	ldr	r5, [pc, #20]	; (8006484 <_isatty_r+0x1c>)
 800646e:	4604      	mov	r4, r0
 8006470:	4608      	mov	r0, r1
 8006472:	602b      	str	r3, [r5, #0]
 8006474:	f7fb fabb 	bl	80019ee <_isatty>
 8006478:	1c43      	adds	r3, r0, #1
 800647a:	d102      	bne.n	8006482 <_isatty_r+0x1a>
 800647c:	682b      	ldr	r3, [r5, #0]
 800647e:	b103      	cbz	r3, 8006482 <_isatty_r+0x1a>
 8006480:	6023      	str	r3, [r4, #0]
 8006482:	bd38      	pop	{r3, r4, r5, pc}
 8006484:	20000a5c 	.word	0x20000a5c

08006488 <_sbrk_r>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	2300      	movs	r3, #0
 800648c:	4d05      	ldr	r5, [pc, #20]	; (80064a4 <_sbrk_r+0x1c>)
 800648e:	4604      	mov	r4, r0
 8006490:	4608      	mov	r0, r1
 8006492:	602b      	str	r3, [r5, #0]
 8006494:	f7fb fac2 	bl	8001a1c <_sbrk>
 8006498:	1c43      	adds	r3, r0, #1
 800649a:	d102      	bne.n	80064a2 <_sbrk_r+0x1a>
 800649c:	682b      	ldr	r3, [r5, #0]
 800649e:	b103      	cbz	r3, 80064a2 <_sbrk_r+0x1a>
 80064a0:	6023      	str	r3, [r4, #0]
 80064a2:	bd38      	pop	{r3, r4, r5, pc}
 80064a4:	20000a5c 	.word	0x20000a5c

080064a8 <memchr>:
 80064a8:	4603      	mov	r3, r0
 80064aa:	b510      	push	{r4, lr}
 80064ac:	b2c9      	uxtb	r1, r1
 80064ae:	4402      	add	r2, r0
 80064b0:	4293      	cmp	r3, r2
 80064b2:	4618      	mov	r0, r3
 80064b4:	d101      	bne.n	80064ba <memchr+0x12>
 80064b6:	2000      	movs	r0, #0
 80064b8:	e003      	b.n	80064c2 <memchr+0x1a>
 80064ba:	7804      	ldrb	r4, [r0, #0]
 80064bc:	3301      	adds	r3, #1
 80064be:	428c      	cmp	r4, r1
 80064c0:	d1f6      	bne.n	80064b0 <memchr+0x8>
 80064c2:	bd10      	pop	{r4, pc}

080064c4 <_realloc_r>:
 80064c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c8:	4680      	mov	r8, r0
 80064ca:	4614      	mov	r4, r2
 80064cc:	460e      	mov	r6, r1
 80064ce:	b921      	cbnz	r1, 80064da <_realloc_r+0x16>
 80064d0:	4611      	mov	r1, r2
 80064d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d6:	f7ff b9d5 	b.w	8005884 <_malloc_r>
 80064da:	b92a      	cbnz	r2, 80064e8 <_realloc_r+0x24>
 80064dc:	f7ff f96a 	bl	80057b4 <_free_r>
 80064e0:	4625      	mov	r5, r4
 80064e2:	4628      	mov	r0, r5
 80064e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e8:	f000 f81b 	bl	8006522 <_malloc_usable_size_r>
 80064ec:	4284      	cmp	r4, r0
 80064ee:	4607      	mov	r7, r0
 80064f0:	d802      	bhi.n	80064f8 <_realloc_r+0x34>
 80064f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80064f6:	d812      	bhi.n	800651e <_realloc_r+0x5a>
 80064f8:	4621      	mov	r1, r4
 80064fa:	4640      	mov	r0, r8
 80064fc:	f7ff f9c2 	bl	8005884 <_malloc_r>
 8006500:	4605      	mov	r5, r0
 8006502:	2800      	cmp	r0, #0
 8006504:	d0ed      	beq.n	80064e2 <_realloc_r+0x1e>
 8006506:	42bc      	cmp	r4, r7
 8006508:	4622      	mov	r2, r4
 800650a:	4631      	mov	r1, r6
 800650c:	bf28      	it	cs
 800650e:	463a      	movcs	r2, r7
 8006510:	f7ff f941 	bl	8005796 <memcpy>
 8006514:	4631      	mov	r1, r6
 8006516:	4640      	mov	r0, r8
 8006518:	f7ff f94c 	bl	80057b4 <_free_r>
 800651c:	e7e1      	b.n	80064e2 <_realloc_r+0x1e>
 800651e:	4635      	mov	r5, r6
 8006520:	e7df      	b.n	80064e2 <_realloc_r+0x1e>

08006522 <_malloc_usable_size_r>:
 8006522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006526:	1f18      	subs	r0, r3, #4
 8006528:	2b00      	cmp	r3, #0
 800652a:	bfbc      	itt	lt
 800652c:	580b      	ldrlt	r3, [r1, r0]
 800652e:	18c0      	addlt	r0, r0, r3
 8006530:	4770      	bx	lr
	...

08006534 <_init>:
 8006534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006536:	bf00      	nop
 8006538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653a:	bc08      	pop	{r3}
 800653c:	469e      	mov	lr, r3
 800653e:	4770      	bx	lr

08006540 <_fini>:
 8006540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006542:	bf00      	nop
 8006544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006546:	bc08      	pop	{r3}
 8006548:	469e      	mov	lr, r3
 800654a:	4770      	bx	lr
