
SX1276_ssd_receiver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ae4  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f58  08005bf4  08005bf4  00015bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b4c  08006b4c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006b4c  08006b4c  00016b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b54  08006b54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b58  08006b58  00016b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009a8  20000070  08006bcc  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a18  08006bcc  00020a18  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f410  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c71  00000000  00000000  0002f4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e78  00000000  00000000  00032160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b24  00000000  00000000  00032fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001981c  00000000  00000000  00033afc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013414  00000000  00000000  0004d318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000895f0  00000000  00000000  0006072c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004524  00000000  00000000  000e9d1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000ee240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000070 	.word	0x20000070
 800012c:	00000000 	.word	0x00000000
 8000130:	08005bdc 	.word	0x08005bdc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000074 	.word	0x20000074
 800014c:	08005bdc 	.word	0x08005bdc

08000150 <__aeabi_uldivmod>:
 8000150:	b953      	cbnz	r3, 8000168 <__aeabi_uldivmod+0x18>
 8000152:	b94a      	cbnz	r2, 8000168 <__aeabi_uldivmod+0x18>
 8000154:	2900      	cmp	r1, #0
 8000156:	bf08      	it	eq
 8000158:	2800      	cmpeq	r0, #0
 800015a:	bf1c      	itt	ne
 800015c:	f04f 31ff 	movne.w	r1, #4294967295
 8000160:	f04f 30ff 	movne.w	r0, #4294967295
 8000164:	f000 b972 	b.w	800044c <__aeabi_idiv0>
 8000168:	f1ad 0c08 	sub.w	ip, sp, #8
 800016c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000170:	f000 f806 	bl	8000180 <__udivmoddi4>
 8000174:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800017c:	b004      	add	sp, #16
 800017e:	4770      	bx	lr

08000180 <__udivmoddi4>:
 8000180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000184:	9e08      	ldr	r6, [sp, #32]
 8000186:	460d      	mov	r5, r1
 8000188:	4604      	mov	r4, r0
 800018a:	468e      	mov	lr, r1
 800018c:	2b00      	cmp	r3, #0
 800018e:	d14c      	bne.n	800022a <__udivmoddi4+0xaa>
 8000190:	428a      	cmp	r2, r1
 8000192:	4694      	mov	ip, r2
 8000194:	d967      	bls.n	8000266 <__udivmoddi4+0xe6>
 8000196:	fab2 f382 	clz	r3, r2
 800019a:	b153      	cbz	r3, 80001b2 <__udivmoddi4+0x32>
 800019c:	fa02 fc03 	lsl.w	ip, r2, r3
 80001a0:	f1c3 0220 	rsb	r2, r3, #32
 80001a4:	fa01 fe03 	lsl.w	lr, r1, r3
 80001a8:	fa20 f202 	lsr.w	r2, r0, r2
 80001ac:	ea42 0e0e 	orr.w	lr, r2, lr
 80001b0:	409c      	lsls	r4, r3
 80001b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001b6:	fbbe f1f7 	udiv	r1, lr, r7
 80001ba:	fa1f f58c 	uxth.w	r5, ip
 80001be:	fb07 ee11 	mls	lr, r7, r1, lr
 80001c2:	fb01 f005 	mul.w	r0, r1, r5
 80001c6:	0c22      	lsrs	r2, r4, #16
 80001c8:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001cc:	4290      	cmp	r0, r2
 80001ce:	d90a      	bls.n	80001e6 <__udivmoddi4+0x66>
 80001d0:	eb1c 0202 	adds.w	r2, ip, r2
 80001d4:	f101 3eff 	add.w	lr, r1, #4294967295
 80001d8:	f080 8119 	bcs.w	800040e <__udivmoddi4+0x28e>
 80001dc:	4290      	cmp	r0, r2
 80001de:	f240 8116 	bls.w	800040e <__udivmoddi4+0x28e>
 80001e2:	3902      	subs	r1, #2
 80001e4:	4462      	add	r2, ip
 80001e6:	1a12      	subs	r2, r2, r0
 80001e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80001ec:	fb07 2210 	mls	r2, r7, r0, r2
 80001f0:	fb00 f505 	mul.w	r5, r0, r5
 80001f4:	b2a4      	uxth	r4, r4
 80001f6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80001fa:	42a5      	cmp	r5, r4
 80001fc:	d90a      	bls.n	8000214 <__udivmoddi4+0x94>
 80001fe:	eb1c 0404 	adds.w	r4, ip, r4
 8000202:	f100 32ff 	add.w	r2, r0, #4294967295
 8000206:	f080 8104 	bcs.w	8000412 <__udivmoddi4+0x292>
 800020a:	42a5      	cmp	r5, r4
 800020c:	f240 8101 	bls.w	8000412 <__udivmoddi4+0x292>
 8000210:	4464      	add	r4, ip
 8000212:	3802      	subs	r0, #2
 8000214:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000218:	2100      	movs	r1, #0
 800021a:	1b64      	subs	r4, r4, r5
 800021c:	b11e      	cbz	r6, 8000226 <__udivmoddi4+0xa6>
 800021e:	40dc      	lsrs	r4, r3
 8000220:	2300      	movs	r3, #0
 8000222:	e9c6 4300 	strd	r4, r3, [r6]
 8000226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800022a:	428b      	cmp	r3, r1
 800022c:	d908      	bls.n	8000240 <__udivmoddi4+0xc0>
 800022e:	2e00      	cmp	r6, #0
 8000230:	f000 80ea 	beq.w	8000408 <__udivmoddi4+0x288>
 8000234:	2100      	movs	r1, #0
 8000236:	e9c6 0500 	strd	r0, r5, [r6]
 800023a:	4608      	mov	r0, r1
 800023c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000240:	fab3 f183 	clz	r1, r3
 8000244:	2900      	cmp	r1, #0
 8000246:	d148      	bne.n	80002da <__udivmoddi4+0x15a>
 8000248:	42ab      	cmp	r3, r5
 800024a:	d302      	bcc.n	8000252 <__udivmoddi4+0xd2>
 800024c:	4282      	cmp	r2, r0
 800024e:	f200 80f8 	bhi.w	8000442 <__udivmoddi4+0x2c2>
 8000252:	1a84      	subs	r4, r0, r2
 8000254:	eb65 0203 	sbc.w	r2, r5, r3
 8000258:	2001      	movs	r0, #1
 800025a:	4696      	mov	lr, r2
 800025c:	2e00      	cmp	r6, #0
 800025e:	d0e2      	beq.n	8000226 <__udivmoddi4+0xa6>
 8000260:	e9c6 4e00 	strd	r4, lr, [r6]
 8000264:	e7df      	b.n	8000226 <__udivmoddi4+0xa6>
 8000266:	b902      	cbnz	r2, 800026a <__udivmoddi4+0xea>
 8000268:	deff      	udf	#255	; 0xff
 800026a:	fab2 f382 	clz	r3, r2
 800026e:	2b00      	cmp	r3, #0
 8000270:	f040 808e 	bne.w	8000390 <__udivmoddi4+0x210>
 8000274:	1a88      	subs	r0, r1, r2
 8000276:	2101      	movs	r1, #1
 8000278:	0c17      	lsrs	r7, r2, #16
 800027a:	fa1f fe82 	uxth.w	lr, r2
 800027e:	fbb0 f5f7 	udiv	r5, r0, r7
 8000282:	fb07 0015 	mls	r0, r7, r5, r0
 8000286:	0c22      	lsrs	r2, r4, #16
 8000288:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800028c:	fb0e f005 	mul.w	r0, lr, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d908      	bls.n	80002a6 <__udivmoddi4+0x126>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f105 38ff 	add.w	r8, r5, #4294967295
 800029c:	d202      	bcs.n	80002a4 <__udivmoddi4+0x124>
 800029e:	4290      	cmp	r0, r2
 80002a0:	f200 80cc 	bhi.w	800043c <__udivmoddi4+0x2bc>
 80002a4:	4645      	mov	r5, r8
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80002ac:	fb07 2210 	mls	r2, r7, r0, r2
 80002b0:	fb0e fe00 	mul.w	lr, lr, r0
 80002b4:	b2a4      	uxth	r4, r4
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	d908      	bls.n	80002d0 <__udivmoddi4+0x150>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c6:	d202      	bcs.n	80002ce <__udivmoddi4+0x14e>
 80002c8:	45a6      	cmp	lr, r4
 80002ca:	f200 80b4 	bhi.w	8000436 <__udivmoddi4+0x2b6>
 80002ce:	4610      	mov	r0, r2
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80002d8:	e7a0      	b.n	800021c <__udivmoddi4+0x9c>
 80002da:	f1c1 0720 	rsb	r7, r1, #32
 80002de:	408b      	lsls	r3, r1
 80002e0:	fa22 fc07 	lsr.w	ip, r2, r7
 80002e4:	ea4c 0c03 	orr.w	ip, ip, r3
 80002e8:	fa25 fa07 	lsr.w	sl, r5, r7
 80002ec:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80002f0:	fbba f8f9 	udiv	r8, sl, r9
 80002f4:	408d      	lsls	r5, r1
 80002f6:	fa20 f307 	lsr.w	r3, r0, r7
 80002fa:	fb09 aa18 	mls	sl, r9, r8, sl
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	432b      	orrs	r3, r5
 8000304:	fa00 f501 	lsl.w	r5, r0, r1
 8000308:	fb08 f00e 	mul.w	r0, r8, lr
 800030c:	0c1c      	lsrs	r4, r3, #16
 800030e:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000312:	42a0      	cmp	r0, r4
 8000314:	fa02 f201 	lsl.w	r2, r2, r1
 8000318:	d90b      	bls.n	8000332 <__udivmoddi4+0x1b2>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f108 3aff 	add.w	sl, r8, #4294967295
 8000322:	f080 8086 	bcs.w	8000432 <__udivmoddi4+0x2b2>
 8000326:	42a0      	cmp	r0, r4
 8000328:	f240 8083 	bls.w	8000432 <__udivmoddi4+0x2b2>
 800032c:	f1a8 0802 	sub.w	r8, r8, #2
 8000330:	4464      	add	r4, ip
 8000332:	1a24      	subs	r4, r4, r0
 8000334:	b298      	uxth	r0, r3
 8000336:	fbb4 f3f9 	udiv	r3, r4, r9
 800033a:	fb09 4413 	mls	r4, r9, r3, r4
 800033e:	fb03 fe0e 	mul.w	lr, r3, lr
 8000342:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000346:	45a6      	cmp	lr, r4
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x1dc>
 800034a:	eb1c 0404 	adds.w	r4, ip, r4
 800034e:	f103 30ff 	add.w	r0, r3, #4294967295
 8000352:	d26a      	bcs.n	800042a <__udivmoddi4+0x2aa>
 8000354:	45a6      	cmp	lr, r4
 8000356:	d968      	bls.n	800042a <__udivmoddi4+0x2aa>
 8000358:	3b02      	subs	r3, #2
 800035a:	4464      	add	r4, ip
 800035c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000360:	fba0 9302 	umull	r9, r3, r0, r2
 8000364:	eba4 040e 	sub.w	r4, r4, lr
 8000368:	429c      	cmp	r4, r3
 800036a:	46c8      	mov	r8, r9
 800036c:	469e      	mov	lr, r3
 800036e:	d354      	bcc.n	800041a <__udivmoddi4+0x29a>
 8000370:	d051      	beq.n	8000416 <__udivmoddi4+0x296>
 8000372:	2e00      	cmp	r6, #0
 8000374:	d067      	beq.n	8000446 <__udivmoddi4+0x2c6>
 8000376:	ebb5 0308 	subs.w	r3, r5, r8
 800037a:	eb64 040e 	sbc.w	r4, r4, lr
 800037e:	40cb      	lsrs	r3, r1
 8000380:	fa04 f707 	lsl.w	r7, r4, r7
 8000384:	431f      	orrs	r7, r3
 8000386:	40cc      	lsrs	r4, r1
 8000388:	e9c6 7400 	strd	r7, r4, [r6]
 800038c:	2100      	movs	r1, #0
 800038e:	e74a      	b.n	8000226 <__udivmoddi4+0xa6>
 8000390:	fa02 fc03 	lsl.w	ip, r2, r3
 8000394:	f1c3 0020 	rsb	r0, r3, #32
 8000398:	40c1      	lsrs	r1, r0
 800039a:	409d      	lsls	r5, r3
 800039c:	fa24 f000 	lsr.w	r0, r4, r0
 80003a0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a4:	4328      	orrs	r0, r5
 80003a6:	fbb1 f5f7 	udiv	r5, r1, r7
 80003aa:	fb07 1115 	mls	r1, r7, r5, r1
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	0c02      	lsrs	r2, r0, #16
 80003b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003b8:	fb05 f10e 	mul.w	r1, r5, lr
 80003bc:	4291      	cmp	r1, r2
 80003be:	fa04 f403 	lsl.w	r4, r4, r3
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x256>
 80003c4:	eb1c 0202 	adds.w	r2, ip, r2
 80003c8:	f105 38ff 	add.w	r8, r5, #4294967295
 80003cc:	d22f      	bcs.n	800042e <__udivmoddi4+0x2ae>
 80003ce:	4291      	cmp	r1, r2
 80003d0:	d92d      	bls.n	800042e <__udivmoddi4+0x2ae>
 80003d2:	3d02      	subs	r5, #2
 80003d4:	4462      	add	r2, ip
 80003d6:	1a52      	subs	r2, r2, r1
 80003d8:	fbb2 f1f7 	udiv	r1, r2, r7
 80003dc:	fb07 2211 	mls	r2, r7, r1, r2
 80003e0:	b280      	uxth	r0, r0
 80003e2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003e6:	fb01 f20e 	mul.w	r2, r1, lr
 80003ea:	4282      	cmp	r2, r0
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x280>
 80003ee:	eb1c 0000 	adds.w	r0, ip, r0
 80003f2:	f101 38ff 	add.w	r8, r1, #4294967295
 80003f6:	d216      	bcs.n	8000426 <__udivmoddi4+0x2a6>
 80003f8:	4282      	cmp	r2, r0
 80003fa:	d914      	bls.n	8000426 <__udivmoddi4+0x2a6>
 80003fc:	3902      	subs	r1, #2
 80003fe:	4460      	add	r0, ip
 8000400:	1a80      	subs	r0, r0, r2
 8000402:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000406:	e73a      	b.n	800027e <__udivmoddi4+0xfe>
 8000408:	4631      	mov	r1, r6
 800040a:	4630      	mov	r0, r6
 800040c:	e70b      	b.n	8000226 <__udivmoddi4+0xa6>
 800040e:	4671      	mov	r1, lr
 8000410:	e6e9      	b.n	80001e6 <__udivmoddi4+0x66>
 8000412:	4610      	mov	r0, r2
 8000414:	e6fe      	b.n	8000214 <__udivmoddi4+0x94>
 8000416:	454d      	cmp	r5, r9
 8000418:	d2ab      	bcs.n	8000372 <__udivmoddi4+0x1f2>
 800041a:	ebb9 0802 	subs.w	r8, r9, r2
 800041e:	eb63 0e0c 	sbc.w	lr, r3, ip
 8000422:	3801      	subs	r0, #1
 8000424:	e7a5      	b.n	8000372 <__udivmoddi4+0x1f2>
 8000426:	4641      	mov	r1, r8
 8000428:	e7ea      	b.n	8000400 <__udivmoddi4+0x280>
 800042a:	4603      	mov	r3, r0
 800042c:	e796      	b.n	800035c <__udivmoddi4+0x1dc>
 800042e:	4645      	mov	r5, r8
 8000430:	e7d1      	b.n	80003d6 <__udivmoddi4+0x256>
 8000432:	46d0      	mov	r8, sl
 8000434:	e77d      	b.n	8000332 <__udivmoddi4+0x1b2>
 8000436:	4464      	add	r4, ip
 8000438:	3802      	subs	r0, #2
 800043a:	e749      	b.n	80002d0 <__udivmoddi4+0x150>
 800043c:	3d02      	subs	r5, #2
 800043e:	4462      	add	r2, ip
 8000440:	e731      	b.n	80002a6 <__udivmoddi4+0x126>
 8000442:	4608      	mov	r0, r1
 8000444:	e70a      	b.n	800025c <__udivmoddi4+0xdc>
 8000446:	4631      	mov	r1, r6
 8000448:	e6ed      	b.n	8000226 <__udivmoddi4+0xa6>
 800044a:	bf00      	nop

0800044c <__aeabi_idiv0>:
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop

08000450 <SX1276_SPIRead>:
 */

#include <string.h>
#include <SX1276.h>

uint8_t SX1276_SPIRead(SX1276_t *module, uint8_t addr) {
 8000450:	b580      	push	{r7, lr}
 8000452:	b084      	sub	sp, #16
 8000454:	af00      	add	r7, sp, #0
 8000456:	6078      	str	r0, [r7, #4]
 8000458:	460b      	mov	r3, r1
 800045a:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1276_hw_SPICommand(module->hw, addr);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	78fa      	ldrb	r2, [r7, #3]
 8000462:	4611      	mov	r1, r2
 8000464:	4618      	mov	r0, r3
 8000466:	f000 fb39 	bl	8000adc <SX1276_hw_SPICommand>
	tmp = SX1276_hw_SPIReadByte(module->hw);
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	4618      	mov	r0, r3
 8000470:	f000 fb54 	bl	8000b1c <SX1276_hw_SPIReadByte>
 8000474:	4603      	mov	r3, r0
 8000476:	73fb      	strb	r3, [r7, #15]
	SX1276_hw_SetNSS(module->hw, 1);
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	4618      	mov	r0, r3
 8000480:	f000 faf1 	bl	8000a66 <SX1276_hw_SetNSS>
	return tmp;
 8000484:	7bfb      	ldrb	r3, [r7, #15]
}
 8000486:	4618      	mov	r0, r3
 8000488:	3710      	adds	r7, #16
 800048a:	46bd      	mov	sp, r7
 800048c:	bd80      	pop	{r7, pc}

0800048e <SX1276_SPIWrite>:

void SX1276_SPIWrite(SX1276_t *module, uint8_t addr, uint8_t cmd) {
 800048e:	b580      	push	{r7, lr}
 8000490:	b082      	sub	sp, #8
 8000492:	af00      	add	r7, sp, #0
 8000494:	6078      	str	r0, [r7, #4]
 8000496:	460b      	mov	r3, r1
 8000498:	70fb      	strb	r3, [r7, #3]
 800049a:	4613      	mov	r3, r2
 800049c:	70bb      	strb	r3, [r7, #2]
	SX1276_hw_SetNSS(module->hw, 0);
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	2100      	movs	r1, #0
 80004a4:	4618      	mov	r0, r3
 80004a6:	f000 fade 	bl	8000a66 <SX1276_hw_SetNSS>
	SX1276_hw_SPICommand(module->hw, addr | 0x80);
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	681a      	ldr	r2, [r3, #0]
 80004ae:	78fb      	ldrb	r3, [r7, #3]
 80004b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80004b4:	b2db      	uxtb	r3, r3
 80004b6:	4619      	mov	r1, r3
 80004b8:	4610      	mov	r0, r2
 80004ba:	f000 fb0f 	bl	8000adc <SX1276_hw_SPICommand>
	SX1276_hw_SPICommand(module->hw, cmd);
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	78ba      	ldrb	r2, [r7, #2]
 80004c4:	4611      	mov	r1, r2
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 fb08 	bl	8000adc <SX1276_hw_SPICommand>
	SX1276_hw_SetNSS(module->hw, 1);
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f000 fac7 	bl	8000a66 <SX1276_hw_SetNSS>
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}

080004e0 <SX1276_SPIBurstRead>:

void SX1276_SPIBurstRead(SX1276_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80004e0:	b590      	push	{r4, r7, lr}
 80004e2:	b087      	sub	sp, #28
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	60f8      	str	r0, [r7, #12]
 80004e8:	607a      	str	r2, [r7, #4]
 80004ea:	461a      	mov	r2, r3
 80004ec:	460b      	mov	r3, r1
 80004ee:	72fb      	strb	r3, [r7, #11]
 80004f0:	4613      	mov	r3, r2
 80004f2:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 80004f4:	7abb      	ldrb	r3, [r7, #10]
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d927      	bls.n	800054a <SX1276_SPIBurstRead+0x6a>
		return;
	} else {
		SX1276_hw_SetNSS(module->hw, 0);
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	2100      	movs	r1, #0
 8000500:	4618      	mov	r0, r3
 8000502:	f000 fab0 	bl	8000a66 <SX1276_hw_SetNSS>
		SX1276_hw_SPICommand(module->hw, addr);
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	7afa      	ldrb	r2, [r7, #11]
 800050c:	4611      	mov	r1, r2
 800050e:	4618      	mov	r0, r3
 8000510:	f000 fae4 	bl	8000adc <SX1276_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000514:	2300      	movs	r3, #0
 8000516:	75fb      	strb	r3, [r7, #23]
 8000518:	e00c      	b.n	8000534 <SX1276_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1276_hw_SPIReadByte(module->hw);
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	6819      	ldr	r1, [r3, #0]
 800051e:	7dfb      	ldrb	r3, [r7, #23]
 8000520:	687a      	ldr	r2, [r7, #4]
 8000522:	18d4      	adds	r4, r2, r3
 8000524:	4608      	mov	r0, r1
 8000526:	f000 faf9 	bl	8000b1c <SX1276_hw_SPIReadByte>
 800052a:	4603      	mov	r3, r0
 800052c:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 800052e:	7dfb      	ldrb	r3, [r7, #23]
 8000530:	3301      	adds	r3, #1
 8000532:	75fb      	strb	r3, [r7, #23]
 8000534:	7dfa      	ldrb	r2, [r7, #23]
 8000536:	7abb      	ldrb	r3, [r7, #10]
 8000538:	429a      	cmp	r2, r3
 800053a:	d3ee      	bcc.n	800051a <SX1276_SPIBurstRead+0x3a>
		}
		SX1276_hw_SetNSS(module->hw, 1);
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2101      	movs	r1, #1
 8000542:	4618      	mov	r0, r3
 8000544:	f000 fa8f 	bl	8000a66 <SX1276_hw_SetNSS>
 8000548:	e000      	b.n	800054c <SX1276_SPIBurstRead+0x6c>
		return;
 800054a:	bf00      	nop
	}
}
 800054c:	371c      	adds	r7, #28
 800054e:	46bd      	mov	sp, r7
 8000550:	bd90      	pop	{r4, r7, pc}

08000552 <SX1276_SPIBurstWrite>:

void SX1276_SPIBurstWrite(SX1276_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8000552:	b580      	push	{r7, lr}
 8000554:	b086      	sub	sp, #24
 8000556:	af00      	add	r7, sp, #0
 8000558:	60f8      	str	r0, [r7, #12]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	461a      	mov	r2, r3
 800055e:	460b      	mov	r3, r1
 8000560:	72fb      	strb	r3, [r7, #11]
 8000562:	4613      	mov	r3, r2
 8000564:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000566:	7abb      	ldrb	r3, [r7, #10]
 8000568:	2b01      	cmp	r3, #1
 800056a:	d929      	bls.n	80005c0 <SX1276_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1276_hw_SetNSS(module->hw, 0);
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	2100      	movs	r1, #0
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fa77 	bl	8000a66 <SX1276_hw_SetNSS>
		SX1276_hw_SPICommand(module->hw, addr | 0x80);
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	7afb      	ldrb	r3, [r7, #11]
 800057e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000582:	b2db      	uxtb	r3, r3
 8000584:	4619      	mov	r1, r3
 8000586:	4610      	mov	r0, r2
 8000588:	f000 faa8 	bl	8000adc <SX1276_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800058c:	2300      	movs	r3, #0
 800058e:	75fb      	strb	r3, [r7, #23]
 8000590:	e00b      	b.n	80005aa <SX1276_SPIBurstWrite+0x58>
			SX1276_hw_SPICommand(module->hw, *(txBuf + i));
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	6818      	ldr	r0, [r3, #0]
 8000596:	7dfb      	ldrb	r3, [r7, #23]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	4413      	add	r3, r2
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	4619      	mov	r1, r3
 80005a0:	f000 fa9c 	bl	8000adc <SX1276_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	3301      	adds	r3, #1
 80005a8:	75fb      	strb	r3, [r7, #23]
 80005aa:	7dfa      	ldrb	r2, [r7, #23]
 80005ac:	7abb      	ldrb	r3, [r7, #10]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3ef      	bcc.n	8000592 <SX1276_SPIBurstWrite+0x40>
		}
		SX1276_hw_SetNSS(module->hw, 1);
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	2101      	movs	r1, #1
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 fa54 	bl	8000a66 <SX1276_hw_SetNSS>
 80005be:	e000      	b.n	80005c2 <SX1276_SPIBurstWrite+0x70>
		return;
 80005c0:	bf00      	nop
	}
}
 80005c2:	3718      	adds	r7, #24
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <SX1276_config>:

void SX1276_config(SX1276_t *module) {
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b086      	sub	sp, #24
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	SX1276_sleep(module); //Change modem mode Must in Sleep mode
 80005d0:	6878      	ldr	r0, [r7, #4]
 80005d2:	f000 f90d 	bl	80007f0 <SX1276_sleep>
	SX1276_hw_DelayMs(15);
 80005d6:	200f      	movs	r0, #15
 80005d8:	f000 fac6 	bl	8000b68 <SX1276_hw_DelayMs>

	SX1276_entryLoRa(module);
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f000 f917 	bl	8000810 <SX1276_entryLoRa>
	//SX1276_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80005e8:	f04f 0000 	mov.w	r0, #0
 80005ec:	f04f 0100 	mov.w	r1, #0
 80005f0:	04d9      	lsls	r1, r3, #19
 80005f2:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 80005f6:	04d0      	lsls	r0, r2, #19
 80005f8:	4a6f      	ldr	r2, [pc, #444]	; (80007b8 <SX1276_config+0x1f0>)
 80005fa:	f04f 0300 	mov.w	r3, #0
 80005fe:	f7ff fda7 	bl	8000150 <__aeabi_uldivmod>
 8000602:	4602      	mov	r2, r0
 8000604:	460b      	mov	r3, r1
 8000606:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 800060a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800060e:	f04f 0200 	mov.w	r2, #0
 8000612:	f04f 0300 	mov.w	r3, #0
 8000616:	0c02      	lsrs	r2, r0, #16
 8000618:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800061c:	0c0b      	lsrs	r3, r1, #16
 800061e:	b2d3      	uxtb	r3, r2
 8000620:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8000622:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000626:	f04f 0200 	mov.w	r2, #0
 800062a:	f04f 0300 	mov.w	r3, #0
 800062e:	0a02      	lsrs	r2, r0, #8
 8000630:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000634:	0a0b      	lsrs	r3, r1, #8
 8000636:	b2d3      	uxtb	r3, r2
 8000638:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800063a:	7c3b      	ldrb	r3, [r7, #16]
 800063c:	73bb      	strb	r3, [r7, #14]
	SX1276_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800063e:	f107 020c 	add.w	r2, r7, #12
 8000642:	2303      	movs	r3, #3
 8000644:	2106      	movs	r1, #6
 8000646:	6878      	ldr	r0, [r7, #4]
 8000648:	f7ff ff83 	bl	8000552 <SX1276_SPIBurstWrite>

	SX1276_SPIWrite(module, RegSyncWord, 0x34);
 800064c:	2234      	movs	r2, #52	; 0x34
 800064e:	2139      	movs	r1, #57	; 0x39
 8000650:	6878      	ldr	r0, [r7, #4]
 8000652:	f7ff ff1c 	bl	800048e <SX1276_SPIWrite>

	//setting base parameter
	SX1276_SPIWrite(module, LR_RegPaConfig, SX1276_Power[module->power]); //Setting output power parameter
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	7c1b      	ldrb	r3, [r3, #16]
 800065a:	461a      	mov	r2, r3
 800065c:	4b57      	ldr	r3, [pc, #348]	; (80007bc <SX1276_config+0x1f4>)
 800065e:	5c9b      	ldrb	r3, [r3, r2]
 8000660:	461a      	mov	r2, r3
 8000662:	2109      	movs	r1, #9
 8000664:	6878      	ldr	r0, [r7, #4]
 8000666:	f7ff ff12 	bl	800048e <SX1276_SPIWrite>

	SX1276_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 800066a:	220b      	movs	r2, #11
 800066c:	210b      	movs	r1, #11
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff0d 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000674:	2223      	movs	r2, #35	; 0x23
 8000676:	210c      	movs	r1, #12
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f7ff ff08 	bl	800048e <SX1276_SPIWrite>
	if (SX1276_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	7c5b      	ldrb	r3, [r3, #17]
 8000682:	461a      	mov	r2, r3
 8000684:	4b4e      	ldr	r3, [pc, #312]	; (80007c0 <SX1276_config+0x1f8>)
 8000686:	5c9b      	ldrb	r3, [r3, r2]
 8000688:	2b06      	cmp	r3, #6
 800068a:	d147      	bne.n	800071c <SX1276_config+0x154>
		uint8_t tmp;
		SX1276_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1276_LoRaBandwidth[module->LoRa_BW] << 4)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	7c9b      	ldrb	r3, [r3, #18]
 8000690:	461a      	mov	r2, r3
 8000692:	4b4c      	ldr	r3, [pc, #304]	; (80007c4 <SX1276_config+0x1fc>)
 8000694:	5c9b      	ldrb	r3, [r3, r2]
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	b2da      	uxtb	r2, r3
						+ (SX1276_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	7cdb      	ldrb	r3, [r3, #19]
 800069e:	4619      	mov	r1, r3
 80006a0:	4b49      	ldr	r3, [pc, #292]	; (80007c8 <SX1276_config+0x200>)
 80006a2:	5c5b      	ldrb	r3, [r3, r1]
 80006a4:	005b      	lsls	r3, r3, #1
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	4413      	add	r3, r2
 80006aa:	b2db      	uxtb	r3, r3
		SX1276_SPIWrite(module,
 80006ac:	3301      	adds	r3, #1
 80006ae:	b2db      	uxtb	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	211d      	movs	r1, #29
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff feea 	bl	800048e <SX1276_SPIWrite>

		SX1276_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1276_SpreadFactor[module->LoRa_SF] << 4)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7c5b      	ldrb	r3, [r3, #17]
 80006be:	461a      	mov	r2, r3
 80006c0:	4b3f      	ldr	r3, [pc, #252]	; (80007c0 <SX1276_config+0x1f8>)
 80006c2:	5c9b      	ldrb	r3, [r3, r2]
 80006c4:	011b      	lsls	r3, r3, #4
 80006c6:	b2da      	uxtb	r2, r3
						+ (SX1276_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7d1b      	ldrb	r3, [r3, #20]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4b3f      	ldr	r3, [pc, #252]	; (80007cc <SX1276_config+0x204>)
 80006d0:	5c5b      	ldrb	r3, [r3, r1]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	4413      	add	r3, r2
 80006d8:	b2db      	uxtb	r3, r3
		SX1276_SPIWrite(module,
 80006da:	3303      	adds	r3, #3
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	461a      	mov	r2, r3
 80006e0:	211e      	movs	r1, #30
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f7ff fed3 	bl	800048e <SX1276_SPIWrite>

		tmp = SX1276_SPIRead(module, 0x31);
 80006e8:	2131      	movs	r1, #49	; 0x31
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f7ff feb0 	bl	8000450 <SX1276_SPIRead>
 80006f0:	4603      	mov	r3, r0
 80006f2:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
 80006f6:	f023 0307 	bic.w	r3, r3, #7
 80006fa:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	f043 0305 	orr.w	r3, r3, #5
 8000702:	73fb      	strb	r3, [r7, #15]
		SX1276_SPIWrite(module, 0x31, tmp);
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	461a      	mov	r2, r3
 8000708:	2131      	movs	r1, #49	; 0x31
 800070a:	6878      	ldr	r0, [r7, #4]
 800070c:	f7ff febf 	bl	800048e <SX1276_SPIWrite>
		SX1276_SPIWrite(module, 0x37, 0x0C);
 8000710:	220c      	movs	r2, #12
 8000712:	2137      	movs	r1, #55	; 0x37
 8000714:	6878      	ldr	r0, [r7, #4]
 8000716:	f7ff feba 	bl	800048e <SX1276_SPIWrite>
 800071a:	e029      	b.n	8000770 <SX1276_config+0x1a8>
	} else {
		SX1276_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1276_LoRaBandwidth[module->LoRa_BW] << 4)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	7c9b      	ldrb	r3, [r3, #18]
 8000720:	461a      	mov	r2, r3
 8000722:	4b28      	ldr	r3, [pc, #160]	; (80007c4 <SX1276_config+0x1fc>)
 8000724:	5c9b      	ldrb	r3, [r3, r2]
 8000726:	011b      	lsls	r3, r3, #4
 8000728:	b2da      	uxtb	r2, r3
						+ (SX1276_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7cdb      	ldrb	r3, [r3, #19]
 800072e:	4619      	mov	r1, r3
 8000730:	4b25      	ldr	r3, [pc, #148]	; (80007c8 <SX1276_config+0x200>)
 8000732:	5c5b      	ldrb	r3, [r3, r1]
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	b2db      	uxtb	r3, r3
		SX1276_SPIWrite(module,
 8000738:	4413      	add	r3, r2
 800073a:	b2db      	uxtb	r3, r3
 800073c:	461a      	mov	r2, r3
 800073e:	211d      	movs	r1, #29
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	f7ff fea4 	bl	800048e <SX1276_SPIWrite>

		SX1276_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1276_SpreadFactor[module->LoRa_SF] << 4)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	7c5b      	ldrb	r3, [r3, #17]
 800074a:	461a      	mov	r2, r3
 800074c:	4b1c      	ldr	r3, [pc, #112]	; (80007c0 <SX1276_config+0x1f8>)
 800074e:	5c9b      	ldrb	r3, [r3, r2]
 8000750:	011b      	lsls	r3, r3, #4
 8000752:	b2da      	uxtb	r2, r3
						+ (SX1276_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	7d1b      	ldrb	r3, [r3, #20]
 8000758:	4619      	mov	r1, r3
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <SX1276_config+0x204>)
 800075c:	5c5b      	ldrb	r3, [r3, r1]
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	b2db      	uxtb	r3, r3
		SX1276_SPIWrite(module,
 8000762:	4413      	add	r3, r2
 8000764:	b2db      	uxtb	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	211e      	movs	r1, #30
 800076a:	6878      	ldr	r0, [r7, #4]
 800076c:	f7ff fe8f 	bl	800048e <SX1276_SPIWrite>
	}

	SX1276_SPIWrite(module, LR_RegModemConfig3, 0x04);
 8000770:	2204      	movs	r2, #4
 8000772:	2126      	movs	r1, #38	; 0x26
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	f7ff fe8a 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 800077a:	2208      	movs	r2, #8
 800077c:	211f      	movs	r1, #31
 800077e:	6878      	ldr	r0, [r7, #4]
 8000780:	f7ff fe85 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000784:	2200      	movs	r2, #0
 8000786:	2120      	movs	r1, #32
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff fe80 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800078e:	2208      	movs	r2, #8
 8000790:	2121      	movs	r1, #33	; 0x21
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f7ff fe7b 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000798:	2201      	movs	r2, #1
 800079a:	2141      	movs	r1, #65	; 0x41
 800079c:	6878      	ldr	r0, [r7, #4]
 800079e:	f7ff fe76 	bl	800048e <SX1276_SPIWrite>
	module->readBytes = 0;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	SX1276_standby(module); //Entry standby mode
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f000 f810 	bl	80007d0 <SX1276_standby>
}
 80007b0:	bf00      	nop
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	01e84800 	.word	0x01e84800
 80007bc:	08005cc4 	.word	0x08005cc4
 80007c0:	08005cc8 	.word	0x08005cc8
 80007c4:	08005cd0 	.word	0x08005cd0
 80007c8:	08005cdc 	.word	0x08005cdc
 80007cc:	08005ce0 	.word	0x08005ce0

080007d0 <SX1276_standby>:

void SX1276_standby(SX1276_t *module) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
	SX1276_SPIWrite(module, LR_RegOpMode, 0x09);
 80007d8:	2209      	movs	r2, #9
 80007da:	2101      	movs	r1, #1
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff fe56 	bl	800048e <SX1276_SPIWrite>
	module->status = STANDBY;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2201      	movs	r2, #1
 80007e6:	759a      	strb	r2, [r3, #22]
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <SX1276_sleep>:

void SX1276_sleep(SX1276_t *module) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	SX1276_SPIWrite(module, LR_RegOpMode, 0x08);
 80007f8:	2208      	movs	r2, #8
 80007fa:	2101      	movs	r1, #1
 80007fc:	6878      	ldr	r0, [r7, #4]
 80007fe:	f7ff fe46 	bl	800048e <SX1276_SPIWrite>
	module->status = SLEEP;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	2200      	movs	r2, #0
 8000806:	759a      	strb	r2, [r3, #22]
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <SX1276_entryLoRa>:

void SX1276_entryLoRa(SX1276_t *module) {
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	SX1276_SPIWrite(module, LR_RegOpMode, 0x88);
 8000818:	2288      	movs	r2, #136	; 0x88
 800081a:	2101      	movs	r1, #1
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff fe36 	bl	800048e <SX1276_SPIWrite>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <SX1276_clearLoRaIrq>:

void SX1276_clearLoRaIrq(SX1276_t *module) {
 800082a:	b580      	push	{r7, lr}
 800082c:	b082      	sub	sp, #8
 800082e:	af00      	add	r7, sp, #0
 8000830:	6078      	str	r0, [r7, #4]
	SX1276_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 8000832:	22ff      	movs	r2, #255	; 0xff
 8000834:	2112      	movs	r1, #18
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f7ff fe29 	bl	800048e <SX1276_SPIWrite>
}
 800083c:	bf00      	nop
 800083e:	3708      	adds	r7, #8
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}

08000844 <SX1276_LoRaEntryRx>:

int SX1276_LoRaEntryRx(SX1276_t *module, uint8_t length, uint32_t timeout) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b086      	sub	sp, #24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	460b      	mov	r3, r1
 800084e:	607a      	str	r2, [r7, #4]
 8000850:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	7afa      	ldrb	r2, [r7, #11]
 8000856:	755a      	strb	r2, [r3, #21]

	SX1276_config(module);		//Setting base parameter
 8000858:	68f8      	ldr	r0, [r7, #12]
 800085a:	f7ff feb5 	bl	80005c8 <SX1276_config>
	SX1276_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 800085e:	2284      	movs	r2, #132	; 0x84
 8000860:	214d      	movs	r1, #77	; 0x4d
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f7ff fe13 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8000868:	22ff      	movs	r2, #255	; 0xff
 800086a:	2124      	movs	r1, #36	; 0x24
 800086c:	68f8      	ldr	r0, [r7, #12]
 800086e:	f7ff fe0e 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 8000872:	2201      	movs	r2, #1
 8000874:	2140      	movs	r1, #64	; 0x40
 8000876:	68f8      	ldr	r0, [r7, #12]
 8000878:	f7ff fe09 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800087c:	223f      	movs	r2, #63	; 0x3f
 800087e:	2111      	movs	r1, #17
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f7ff fe04 	bl	800048e <SX1276_SPIWrite>
	SX1276_clearLoRaIrq(module);
 8000886:	68f8      	ldr	r0, [r7, #12]
 8000888:	f7ff ffcf 	bl	800082a <SX1276_clearLoRaIrq>
	SX1276_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800088c:	7afb      	ldrb	r3, [r7, #11]
 800088e:	461a      	mov	r2, r3
 8000890:	2122      	movs	r1, #34	; 0x22
 8000892:	68f8      	ldr	r0, [r7, #12]
 8000894:	f7ff fdfb 	bl	800048e <SX1276_SPIWrite>
	addr = SX1276_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000898:	210f      	movs	r1, #15
 800089a:	68f8      	ldr	r0, [r7, #12]
 800089c:	f7ff fdd8 	bl	8000450 <SX1276_SPIRead>
 80008a0:	4603      	mov	r3, r0
 80008a2:	75fb      	strb	r3, [r7, #23]
	SX1276_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 80008a4:	7dfb      	ldrb	r3, [r7, #23]
 80008a6:	461a      	mov	r2, r3
 80008a8:	210d      	movs	r1, #13
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f7ff fdef 	bl	800048e <SX1276_SPIWrite>
	SX1276_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 80008b0:	228d      	movs	r2, #141	; 0x8d
 80008b2:	2101      	movs	r1, #1
 80008b4:	68f8      	ldr	r0, [r7, #12]
 80008b6:	f7ff fdea 	bl	800048e <SX1276_SPIWrite>
	//SX1276_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2200      	movs	r2, #0
 80008be:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117

	while (1) {
		if ((SX1276_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80008c2:	2118      	movs	r1, #24
 80008c4:	68f8      	ldr	r0, [r7, #12]
 80008c6:	f7ff fdc3 	bl	8000450 <SX1276_SPIRead>
 80008ca:	4603      	mov	r3, r0
 80008cc:	f003 0304 	and.w	r3, r3, #4
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d104      	bne.n	80008de <SX1276_LoRaEntryRx+0x9a>
			module->status = RX;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	2203      	movs	r2, #3
 80008d8:	759a      	strb	r2, [r3, #22]
			return 1;
 80008da:	2301      	movs	r3, #1
 80008dc:	e013      	b.n	8000906 <SX1276_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d109      	bne.n	80008fe <SX1276_LoRaEntryRx+0xba>
			SX1276_hw_Reset(module->hw);
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 f8d0 	bl	8000a94 <SX1276_hw_Reset>
			SX1276_config(module);
 80008f4:	68f8      	ldr	r0, [r7, #12]
 80008f6:	f7ff fe67 	bl	80005c8 <SX1276_config>
			return 0;
 80008fa:	2300      	movs	r3, #0
 80008fc:	e003      	b.n	8000906 <SX1276_LoRaEntryRx+0xc2>
		}
		SX1276_hw_DelayMs(1);
 80008fe:	2001      	movs	r0, #1
 8000900:	f000 f932 	bl	8000b68 <SX1276_hw_DelayMs>
		if ((SX1276_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000904:	e7dd      	b.n	80008c2 <SX1276_LoRaEntryRx+0x7e>
	}
}
 8000906:	4618      	mov	r0, r3
 8000908:	3718      	adds	r7, #24
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}

0800090e <SX1276_LoRaRxPacket>:

uint8_t SX1276_LoRaRxPacket(SX1276_t *module) {
 800090e:	b580      	push	{r7, lr}
 8000910:	b084      	sub	sp, #16
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1276_hw_GetDIO0(module->hw)) {
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4618      	mov	r0, r3
 800091c:	f000 f92f 	bl	8000b7e <SX1276_hw_GetDIO0>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d030      	beq.n	8000988 <SX1276_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1276_MAX_PACKET);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	3317      	adds	r3, #23
 800092a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800092e:	2100      	movs	r1, #0
 8000930:	4618      	mov	r0, r3
 8000932:	f004 facb 	bl	8004ecc <memset>

		addr = SX1276_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000936:	2110      	movs	r1, #16
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fd89 	bl	8000450 <SX1276_SPIRead>
 800093e:	4603      	mov	r3, r0
 8000940:	73bb      	strb	r3, [r7, #14]
		SX1276_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	461a      	mov	r2, r3
 8000946:	210d      	movs	r1, #13
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f7ff fda0 	bl	800048e <SX1276_SPIWrite>

		if (module->LoRa_SF == SX1276_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7c5b      	ldrb	r3, [r3, #17]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d103      	bne.n	800095e <SX1276_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	7d5b      	ldrb	r3, [r3, #21]
 800095a:	73fb      	strb	r3, [r7, #15]
 800095c:	e005      	b.n	800096a <SX1276_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1276_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 800095e:	2113      	movs	r1, #19
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f7ff fd75 	bl	8000450 <SX1276_SPIRead>
 8000966:	4603      	mov	r3, r0
 8000968:	73fb      	strb	r3, [r7, #15]
		}

		SX1276_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f103 0217 	add.w	r2, r3, #23
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	2100      	movs	r1, #0
 8000974:	6878      	ldr	r0, [r7, #4]
 8000976:	f7ff fdb3 	bl	80004e0 <SX1276_SPIBurstRead>
		module->readBytes = packet_size;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7bfa      	ldrb	r2, [r7, #15]
 800097e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
		SX1276_clearLoRaIrq(module);
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f7ff ff51 	bl	800082a <SX1276_clearLoRaIrq>
	}
	return module->readBytes;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
}
 800098e:	4618      	mov	r0, r3
 8000990:	3710      	adds	r7, #16
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}

08000996 <SX1276_init>:
	}
}

void SX1276_init(SX1276_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000996:	b580      	push	{r7, lr}
 8000998:	b084      	sub	sp, #16
 800099a:	af00      	add	r7, sp, #0
 800099c:	60f8      	str	r0, [r7, #12]
 800099e:	e9c7 2300 	strd	r2, r3, [r7]
	SX1276_hw_init(module->hw);
 80009a2:	68fb      	ldr	r3, [r7, #12]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f000 f848 	bl	8000a3c <SX1276_hw_init>
	module->frequency = frequency;
 80009ac:	68f9      	ldr	r1, [r7, #12]
 80009ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	7e3a      	ldrb	r2, [r7, #24]
 80009ba:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	7f3a      	ldrb	r2, [r7, #28]
 80009c0:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80009c8:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80009d0:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80009d8:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80009e0:	755a      	strb	r2, [r3, #21]
	SX1276_config(module);
 80009e2:	68f8      	ldr	r0, [r7, #12]
 80009e4:	f7ff fdf0 	bl	80005c8 <SX1276_config>
}
 80009e8:	bf00      	nop
 80009ea:	3710      	adds	r7, #16
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}

080009f0 <SX1276_read>:

uint8_t SX1276_available(SX1276_t *module) {
	return SX1276_LoRaRxPacket(module);
}

uint8_t SX1276_read(SX1276_t *module, uint8_t *rxBuf, uint8_t length) {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	60f8      	str	r0, [r7, #12]
 80009f8:	60b9      	str	r1, [r7, #8]
 80009fa:	4613      	mov	r3, r2
 80009fc:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000a04:	79fa      	ldrb	r2, [r7, #7]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d003      	beq.n	8000a12 <SX1276_read+0x22>
		length = module->readBytes;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f893 3117 	ldrb.w	r3, [r3, #279]	; 0x117
 8000a10:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	3317      	adds	r3, #23
 8000a16:	79fa      	ldrb	r2, [r7, #7]
 8000a18:	4619      	mov	r1, r3
 8000a1a:	68b8      	ldr	r0, [r7, #8]
 8000a1c:	f004 fb35 	bl	800508a <memcpy>
	rxBuf[length] = '\0';
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	4413      	add	r3, r2
 8000a26:	2200      	movs	r2, #0
 8000a28:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	f883 2117 	strb.w	r2, [r3, #279]	; 0x117
	return length;
 8000a32:	79fb      	ldrb	r3, [r7, #7]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}

08000a3c <SX1276_hw_init>:
#include <SX1276_HW.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1276_hw_init(SX1276_hw_t *hw) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	SX1276_hw_SetNSS(hw, 1);
 8000a44:	2101      	movs	r1, #1
 8000a46:	6878      	ldr	r0, [r7, #4]
 8000a48:	f000 f80d 	bl	8000a66 <SX1276_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6858      	ldr	r0, [r3, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	2201      	movs	r2, #1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f001 fbee 	bl	800223a <HAL_GPIO_WritePin>
}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}

08000a66 <SX1276_hw_SetNSS>:

__weak void SX1276_hw_SetNSS(SX1276_hw_t *hw, int value) {
 8000a66:	b580      	push	{r7, lr}
 8000a68:	b082      	sub	sp, #8
 8000a6a:	af00      	add	r7, sp, #0
 8000a6c:	6078      	str	r0, [r7, #4]
 8000a6e:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6958      	ldr	r0, [r3, #20]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	691b      	ldr	r3, [r3, #16]
 8000a78:	b299      	uxth	r1, r3
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	2301      	moveq	r3, #1
 8000a82:	2300      	movne	r3, #0
 8000a84:	b2db      	uxtb	r3, r3
 8000a86:	461a      	mov	r2, r3
 8000a88:	f001 fbd7 	bl	800223a <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000a8c:	bf00      	nop
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <SX1276_hw_Reset>:

__weak void SX1276_hw_Reset(SX1276_hw_t *hw) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	SX1276_hw_SetNSS(hw, 1);
 8000a9c:	2101      	movs	r1, #1
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ffe1 	bl	8000a66 <SX1276_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6858      	ldr	r0, [r3, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	b29b      	uxth	r3, r3
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	f001 fbc2 	bl	800223a <HAL_GPIO_WritePin>

	SX1276_hw_DelayMs(1);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f000 f856 	bl	8000b68 <SX1276_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	6858      	ldr	r0, [r3, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	f001 fbb6 	bl	800223a <HAL_GPIO_WritePin>

	SX1276_hw_DelayMs(100);
 8000ace:	2064      	movs	r0, #100	; 0x64
 8000ad0:	f000 f84a 	bl	8000b68 <SX1276_hw_DelayMs>
}
 8000ad4:	bf00      	nop
 8000ad6:	3708      	adds	r7, #8
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}

08000adc <SX1276_hw_SPICommand>:

__weak void SX1276_hw_SPICommand(SX1276_hw_t *hw, uint8_t cmd) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	70fb      	strb	r3, [r7, #3]
	SX1276_hw_SetNSS(hw, 0);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	6878      	ldr	r0, [r7, #4]
 8000aec:	f7ff ffbb 	bl	8000a66 <SX1276_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6998      	ldr	r0, [r3, #24]
 8000af4:	1cf9      	adds	r1, r7, #3
 8000af6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000afa:	2201      	movs	r2, #1
 8000afc:	f002 fe14 	bl	8003728 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000b00:	bf00      	nop
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	699b      	ldr	r3, [r3, #24]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f003 f901 	bl	8003d0e <HAL_SPI_GetState>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d1f7      	bne.n	8000b02 <SX1276_hw_SPICommand+0x26>
		;
}
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	3708      	adds	r7, #8
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}

08000b1c <SX1276_hw_SPIReadByte>:

__weak uint8_t SX1276_hw_SPIReadByte(SX1276_hw_t *hw) {
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af02      	add	r7, sp, #8
 8000b22:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000b24:	2300      	movs	r3, #0
 8000b26:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	73bb      	strb	r3, [r7, #14]

	SX1276_hw_SetNSS(hw, 0);
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	6878      	ldr	r0, [r7, #4]
 8000b30:	f7ff ff99 	bl	8000a66 <SX1276_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	6998      	ldr	r0, [r3, #24]
 8000b38:	f107 020e 	add.w	r2, r7, #14
 8000b3c:	f107 010f 	add.w	r1, r7, #15
 8000b40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b44:	9300      	str	r3, [sp, #0]
 8000b46:	2301      	movs	r3, #1
 8000b48:	f002 ff31 	bl	80039ae <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000b4c:	bf00      	nop
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	699b      	ldr	r3, [r3, #24]
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 f8db 	bl	8003d0e <HAL_SPI_GetState>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d1f7      	bne.n	8000b4e <SX1276_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000b60:	4618      	mov	r0, r3
 8000b62:	3710      	adds	r7, #16
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <SX1276_hw_DelayMs>:

__weak void SX1276_hw_DelayMs(uint32_t msec) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 ffe3 	bl	8001b3c <HAL_Delay>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}

08000b7e <SX1276_hw_GetDIO0>:

__weak int SX1276_hw_GetDIO0(SX1276_hw_t *hw) {
 8000b7e:	b580      	push	{r7, lr}
 8000b80:	b082      	sub	sp, #8
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68da      	ldr	r2, [r3, #12]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	689b      	ldr	r3, [r3, #8]
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	4619      	mov	r1, r3
 8000b92:	4610      	mov	r0, r2
 8000b94:	f001 fb3a 	bl	800220c <HAL_GPIO_ReadPin>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b01      	cmp	r3, #1
 8000b9c:	bf0c      	ite	eq
 8000b9e:	2301      	moveq	r3, #1
 8000ba0:	2300      	movne	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3708      	adds	r7, #8
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}

08000bac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	4b39      	ldr	r3, [pc, #228]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a38      	ldr	r2, [pc, #224]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bc6:	f043 0310 	orr.w	r3, r3, #16
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b36      	ldr	r3, [pc, #216]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f003 0310 	and.w	r3, r3, #16
 8000bd4:	60fb      	str	r3, [r7, #12]
 8000bd6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd8:	4b33      	ldr	r3, [pc, #204]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a32      	ldr	r2, [pc, #200]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bde:	f043 0320 	orr.w	r3, r3, #32
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b30      	ldr	r3, [pc, #192]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0320 	and.w	r3, r3, #32
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf0:	4b2d      	ldr	r3, [pc, #180]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bf2:	699b      	ldr	r3, [r3, #24]
 8000bf4:	4a2c      	ldr	r2, [pc, #176]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bf6:	f043 0304 	orr.w	r3, r3, #4
 8000bfa:	6193      	str	r3, [r2, #24]
 8000bfc:	4b2a      	ldr	r3, [pc, #168]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000bfe:	699b      	ldr	r3, [r3, #24]
 8000c00:	f003 0304 	and.w	r3, r3, #4
 8000c04:	607b      	str	r3, [r7, #4]
 8000c06:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c08:	4b27      	ldr	r3, [pc, #156]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c0a:	699b      	ldr	r3, [r3, #24]
 8000c0c:	4a26      	ldr	r2, [pc, #152]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c0e:	f043 0308 	orr.w	r3, r3, #8
 8000c12:	6193      	str	r3, [r2, #24]
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <MX_GPIO_Init+0xfc>)
 8000c16:	699b      	ldr	r3, [r3, #24]
 8000c18:	f003 0308 	and.w	r3, r3, #8
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	2110      	movs	r1, #16
 8000c24:	4821      	ldr	r0, [pc, #132]	; (8000cac <MX_GPIO_Init+0x100>)
 8000c26:	f001 fb08 	bl	800223a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	4820      	ldr	r0, [pc, #128]	; (8000cb0 <MX_GPIO_Init+0x104>)
 8000c30:	f001 fb03 	bl	800223a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8000c34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4619      	mov	r1, r3
 8000c48:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <MX_GPIO_Init+0x108>)
 8000c4a:	f001 f95b 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c56:	2300      	movs	r3, #0
 8000c58:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000c5a:	f107 0310 	add.w	r3, r7, #16
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4812      	ldr	r0, [pc, #72]	; (8000cac <MX_GPIO_Init+0x100>)
 8000c62:	f001 f94f 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000c66:	2310      	movs	r3, #16
 8000c68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c72:	2302      	movs	r3, #2
 8000c74:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000c76:	f107 0310 	add.w	r3, r7, #16
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	480b      	ldr	r0, [pc, #44]	; (8000cac <MX_GPIO_Init+0x100>)
 8000c7e:	f001 f941 	bl	8001f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RESET_Pin;
 8000c82:	2301      	movs	r3, #1
 8000c84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c86:	2301      	movs	r3, #1
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RESET_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	4619      	mov	r1, r3
 8000c98:	4805      	ldr	r0, [pc, #20]	; (8000cb0 <MX_GPIO_Init+0x104>)
 8000c9a:	f001 f933 	bl	8001f04 <HAL_GPIO_Init>

}
 8000c9e:	bf00      	nop
 8000ca0:	3720      	adds	r7, #32
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40021000 	.word	0x40021000
 8000cac:	40010800 	.word	0x40010800
 8000cb0:	40010c00 	.word	0x40010c00
 8000cb4:	40011000 	.word	0x40011000

08000cb8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cbe:	4a13      	ldr	r2, [pc, #76]	; (8000d0c <MX_I2C1_Init+0x54>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cc4:	4a12      	ldr	r2, [pc, #72]	; (8000d10 <MX_I2C1_Init+0x58>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cd4:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_I2C1_Init+0x50>)
 8000cf6:	f001 fab9 	bl	800226c <HAL_I2C_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d00:	f000 f9d5 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	2000008c 	.word	0x2000008c
 8000d0c:	40005400 	.word	0x40005400
 8000d10:	00061a80 	.word	0x00061a80

08000d14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b08a      	sub	sp, #40	; 0x28
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d1c:	f107 0314 	add.w	r3, r7, #20
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	605a      	str	r2, [r3, #4]
 8000d26:	609a      	str	r2, [r3, #8]
 8000d28:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a1d      	ldr	r2, [pc, #116]	; (8000da4 <HAL_I2C_MspInit+0x90>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d132      	bne.n	8000d9a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b1c      	ldr	r3, [pc, #112]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d36:	699b      	ldr	r3, [r3, #24]
 8000d38:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	6193      	str	r3, [r2, #24]
 8000d40:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d42:	699b      	ldr	r3, [r3, #24]
 8000d44:	f003 0308 	and.w	r3, r3, #8
 8000d48:	613b      	str	r3, [r7, #16]
 8000d4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d52:	2312      	movs	r3, #18
 8000d54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d56:	2303      	movs	r3, #3
 8000d58:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5a:	f107 0314 	add.w	r3, r7, #20
 8000d5e:	4619      	mov	r1, r3
 8000d60:	4812      	ldr	r0, [pc, #72]	; (8000dac <HAL_I2C_MspInit+0x98>)
 8000d62:	f001 f8cf 	bl	8001f04 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d66:	4b12      	ldr	r3, [pc, #72]	; (8000db0 <HAL_I2C_MspInit+0x9c>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7c:	4a0c      	ldr	r2, [pc, #48]	; (8000db0 <HAL_I2C_MspInit+0x9c>)
 8000d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d80:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d82:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d84:	69db      	ldr	r3, [r3, #28]
 8000d86:	4a08      	ldr	r2, [pc, #32]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d88:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d8c:	61d3      	str	r3, [r2, #28]
 8000d8e:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_I2C_MspInit+0x94>)
 8000d90:	69db      	ldr	r3, [r3, #28]
 8000d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3728      	adds	r7, #40	; 0x28
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40005400 	.word	0x40005400
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40010c00 	.word	0x40010c00
 8000db0:	40010000 	.word	0x40010000

08000db4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000dbc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dc0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000dc4:	f003 0301 	and.w	r3, r3, #1
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d013      	beq.n	8000df4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000dcc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dd0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000dd4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d00b      	beq.n	8000df4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000ddc:	e000      	b.n	8000de0 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000dde:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000de0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d0f9      	beq.n	8000dde <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000dea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	b2d2      	uxtb	r2, r2
 8000df2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000df4:	687b      	ldr	r3, [r7, #4]
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b086      	sub	sp, #24
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
    int i;
    HAL_UART_Transmit(&huart2, (uint8_t*) ptr, len, 50);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	2332      	movs	r3, #50	; 0x32
 8000e12:	68b9      	ldr	r1, [r7, #8]
 8000e14:	480c      	ldr	r0, [pc, #48]	; (8000e48 <_write+0x48>)
 8000e16:	f003 f87d 	bl	8003f14 <HAL_UART_Transmit>
    for (i = 0; i < len; i++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e009      	b.n	8000e34 <_write+0x34>
        ITM_SendChar(*ptr++);
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	60ba      	str	r2, [r7, #8]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ffc3 	bl	8000db4 <ITM_SendChar>
    for (i = 0; i < len; i++) {
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf1      	blt.n	8000e20 <_write+0x20>
    }
    return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000880 	.word	0x20000880
 8000e4c:	00000000 	.word	0x00000000

08000e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b090      	sub	sp, #64	; 0x40
 8000e54:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e56:	f000 fe0f 	bl	8001a78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5a:	f000 f8e3 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e5e:	f7ff fea5 	bl	8000bac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e62:	f000 fd73 	bl	800194c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000e66:	f000 f927 	bl	80010b8 <MX_SPI1_Init>
  MX_I2C1_Init();
 8000e6a:	f7ff ff25 	bl	8000cb8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

	  printf("Mode: Slave\r\n");      // Print mode information
 8000e6e:	4858      	ldr	r0, [pc, #352]	; (8000fd0 <main+0x180>)
 8000e70:	f003 ff4c 	bl	8004d0c <puts>
	  HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);    // Set MODE pin high for slave mode
 8000e74:	2201      	movs	r2, #1
 8000e76:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7a:	4856      	ldr	r0, [pc, #344]	; (8000fd4 <main+0x184>)
 8000e7c:	f001 f9dd 	bl	800223a <HAL_GPIO_WritePin>


      // Initialize SX1276 LoRa module
      SX1276_hw.dio0.port = DIO0_GPIO_Port;
 8000e80:	4b55      	ldr	r3, [pc, #340]	; (8000fd8 <main+0x188>)
 8000e82:	4a56      	ldr	r2, [pc, #344]	; (8000fdc <main+0x18c>)
 8000e84:	60da      	str	r2, [r3, #12]
      SX1276_hw.dio0.pin = DIO0_Pin;
 8000e86:	4b54      	ldr	r3, [pc, #336]	; (8000fd8 <main+0x188>)
 8000e88:	2202      	movs	r2, #2
 8000e8a:	609a      	str	r2, [r3, #8]
      SX1276_hw.nss.port = NSS_GPIO_Port;
 8000e8c:	4b52      	ldr	r3, [pc, #328]	; (8000fd8 <main+0x188>)
 8000e8e:	4a53      	ldr	r2, [pc, #332]	; (8000fdc <main+0x18c>)
 8000e90:	615a      	str	r2, [r3, #20]
      SX1276_hw.nss.pin = NSS_Pin;
 8000e92:	4b51      	ldr	r3, [pc, #324]	; (8000fd8 <main+0x188>)
 8000e94:	2210      	movs	r2, #16
 8000e96:	611a      	str	r2, [r3, #16]
      SX1276_hw.reset.port = RESET_GPIO_Port;
 8000e98:	4b4f      	ldr	r3, [pc, #316]	; (8000fd8 <main+0x188>)
 8000e9a:	4a51      	ldr	r2, [pc, #324]	; (8000fe0 <main+0x190>)
 8000e9c:	605a      	str	r2, [r3, #4]
      SX1276_hw.reset.pin = RESET_Pin;
 8000e9e:	4b4e      	ldr	r3, [pc, #312]	; (8000fd8 <main+0x188>)
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	601a      	str	r2, [r3, #0]
      SX1276_hw.spi = &hspi1;
 8000ea4:	4b4c      	ldr	r3, [pc, #304]	; (8000fd8 <main+0x188>)
 8000ea6:	4a4f      	ldr	r2, [pc, #316]	; (8000fe4 <main+0x194>)
 8000ea8:	619a      	str	r2, [r3, #24]

      SX1276.hw = &SX1276_hw;
 8000eaa:	4b4f      	ldr	r3, [pc, #316]	; (8000fe8 <main+0x198>)
 8000eac:	4a4a      	ldr	r2, [pc, #296]	; (8000fd8 <main+0x188>)
 8000eae:	601a      	str	r2, [r3, #0]

      printf("Configuring LoRa module\r\n");
 8000eb0:	484e      	ldr	r0, [pc, #312]	; (8000fec <main+0x19c>)
 8000eb2:	f003 ff2b 	bl	8004d0c <puts>
      SX1276_init(&SX1276, 923100000, SX1276_POWER_20DBM, SX1276_LORA_SF_7,  // Configure LoRa module
 8000eb6:	230a      	movs	r3, #10
 8000eb8:	9305      	str	r3, [sp, #20]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	9304      	str	r3, [sp, #16]
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	9303      	str	r3, [sp, #12]
 8000ec2:	2307      	movs	r3, #7
 8000ec4:	9302      	str	r3, [sp, #8]
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	9301      	str	r3, [sp, #4]
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9300      	str	r3, [sp, #0]
 8000ece:	a33e      	add	r3, pc, #248	; (adr r3, 8000fc8 <main+0x178>)
 8000ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ed4:	4844      	ldr	r0, [pc, #272]	; (8000fe8 <main+0x198>)
 8000ed6:	f7ff fd5e 	bl	8000996 <SX1276_init>
                  SX1276_LORA_BW_125KHZ, SX1276_LORA_CR_4_5, SX1276_LORA_CRC_EN, 10);
      printf("Done configuring LoRaModule\r\n");
 8000eda:	4845      	ldr	r0, [pc, #276]	; (8000ff0 <main+0x1a0>)
 8000edc:	f003 ff16 	bl	8004d0c <puts>



	  ret = SX1276_LoRaEntryRx(&SX1276, 16, 2000);     // Configure LoRa module for reception in slave mode
 8000ee0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000ee4:	2110      	movs	r1, #16
 8000ee6:	4840      	ldr	r0, [pc, #256]	; (8000fe8 <main+0x198>)
 8000ee8:	f7ff fcac 	bl	8000844 <SX1276_LoRaEntryRx>
 8000eec:	4603      	mov	r3, r0
 8000eee:	4a41      	ldr	r2, [pc, #260]	; (8000ff4 <main+0x1a4>)
 8000ef0:	6013      	str	r3, [r2, #0]
	  printf("Receive Mode !\r\n");
 8000ef2:	4841      	ldr	r0, [pc, #260]	; (8000ff8 <main+0x1a8>)
 8000ef4:	f003 ff0a 	bl	8004d0c <puts>


      SSD1306_Init();
 8000ef8:	f000 f95e 	bl	80011b8 <SSD1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

		 printf("Slave ...\r\n");
 8000efc:	483f      	ldr	r0, [pc, #252]	; (8000ffc <main+0x1ac>)
 8000efe:	f003 ff05 	bl	8004d0c <puts>
		 HAL_Delay(800);
 8000f02:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000f06:	f000 fe19 	bl	8001b3c <HAL_Delay>
		 printf("Receiving package...\r\n");
 8000f0a:	483d      	ldr	r0, [pc, #244]	; (8001000 <main+0x1b0>)
 8000f0c:	f003 fefe 	bl	8004d0c <puts>

		 ret = SX1276_LoRaRxPacket(&SX1276);
 8000f10:	4835      	ldr	r0, [pc, #212]	; (8000fe8 <main+0x198>)
 8000f12:	f7ff fcfc 	bl	800090e <SX1276_LoRaRxPacket>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4b36      	ldr	r3, [pc, #216]	; (8000ff4 <main+0x1a4>)
 8000f1c:	601a      	str	r2, [r3, #0]
		 printf("Received: %d\r\n", ret);
 8000f1e:	4b35      	ldr	r3, [pc, #212]	; (8000ff4 <main+0x1a4>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4619      	mov	r1, r3
 8000f24:	4837      	ldr	r0, [pc, #220]	; (8001004 <main+0x1b4>)
 8000f26:	f003 fe8b 	bl	8004c40 <iprintf>
		 if (ret > 0) {
 8000f2a:	4b32      	ldr	r3, [pc, #200]	; (8000ff4 <main+0x1a4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	dde4      	ble.n	8000efc <main+0xac>
			SX1276_read(&SX1276, (uint8_t*) buffer, ret);
 8000f32:	4b30      	ldr	r3, [pc, #192]	; (8000ff4 <main+0x1a4>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4933      	ldr	r1, [pc, #204]	; (8001008 <main+0x1b8>)
 8000f3c:	482a      	ldr	r0, [pc, #168]	; (8000fe8 <main+0x198>)
 8000f3e:	f7ff fd57 	bl	80009f0 <SX1276_read>
			printf("Content (%d): %s\r\n", ret, buffer);
 8000f42:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <main+0x1a4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a30      	ldr	r2, [pc, #192]	; (8001008 <main+0x1b8>)
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4830      	ldr	r0, [pc, #192]	; (800100c <main+0x1bc>)
 8000f4c:	f003 fe78 	bl	8004c40 <iprintf>



			char *token = strtok(buffer, ",");
 8000f50:	492f      	ldr	r1, [pc, #188]	; (8001010 <main+0x1c0>)
 8000f52:	482d      	ldr	r0, [pc, #180]	; (8001008 <main+0x1b8>)
 8000f54:	f003 ffc2 	bl	8004edc <strtok>
 8000f58:	6278      	str	r0, [r7, #36]	; 0x24


			// 온도와 습도 추출
			strcpy(received_temperature, token);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f60:	4618      	mov	r0, r3
 8000f62:	f004 f88a 	bl	800507a <strcpy>

			strcpy(received_humidity, strtok(NULL, "."));
 8000f66:	492b      	ldr	r1, [pc, #172]	; (8001014 <main+0x1c4>)
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f003 ffb7 	bl	8004edc <strtok>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	1d3b      	adds	r3, r7, #4
 8000f72:	4611      	mov	r1, r2
 8000f74:	4618      	mov	r0, r3
 8000f76:	f004 f880 	bl	800507a <strcpy>

			// OLED에 수신된 온도와 습도 표시
			SSD1306_GotoXY(21,0);
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2015      	movs	r0, #21
 8000f7e:	f000 fa83 	bl	8001488 <SSD1306_GotoXY>
			SSD1306_Puts("RECEIVED",&Font_11x18, 1);
 8000f82:	2201      	movs	r2, #1
 8000f84:	4924      	ldr	r1, [pc, #144]	; (8001018 <main+0x1c8>)
 8000f86:	4825      	ldr	r0, [pc, #148]	; (800101c <main+0x1cc>)
 8000f88:	f000 fb14 	bl	80015b4 <SSD1306_Puts>
			SSD1306_GotoXY(10,20);
 8000f8c:	2114      	movs	r1, #20
 8000f8e:	200a      	movs	r0, #10
 8000f90:	f000 fa7a 	bl	8001488 <SSD1306_GotoXY>
			SSD1306_Puts(received_temperature,&Font_11x18, 1);
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2201      	movs	r2, #1
 8000f9a:	491f      	ldr	r1, [pc, #124]	; (8001018 <main+0x1c8>)
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f000 fb09 	bl	80015b4 <SSD1306_Puts>
			SSD1306_GotoXY(0,40);
 8000fa2:	2128      	movs	r1, #40	; 0x28
 8000fa4:	2000      	movs	r0, #0
 8000fa6:	f000 fa6f 	bl	8001488 <SSD1306_GotoXY>

			SSD1306_Puts(received_humidity,&Font_11x18, 1);
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2201      	movs	r2, #1
 8000fae:	491a      	ldr	r1, [pc, #104]	; (8001018 <main+0x1c8>)
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f000 faff 	bl	80015b4 <SSD1306_Puts>
			SSD1306_UpdateScreen();
 8000fb6:	f000 f9c3 	bl	8001340 <SSD1306_UpdateScreen>

			printf("Package received ...\r\n");
 8000fba:	4819      	ldr	r0, [pc, #100]	; (8001020 <main+0x1d0>)
 8000fbc:	f003 fea6 	bl	8004d0c <puts>
		 printf("Slave ...\r\n");
 8000fc0:	e79c      	b.n	8000efc <main+0xac>
 8000fc2:	bf00      	nop
 8000fc4:	f3af 8000 	nop.w
 8000fc8:	37056360 	.word	0x37056360
 8000fcc:	00000000 	.word	0x00000000
 8000fd0:	08005bf4 	.word	0x08005bf4
 8000fd4:	40011000 	.word	0x40011000
 8000fd8:	200000e0 	.word	0x200000e0
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	40010c00 	.word	0x40010c00
 8000fe4:	2000041c 	.word	0x2000041c
 8000fe8:	20000100 	.word	0x20000100
 8000fec:	08005c04 	.word	0x08005c04
 8000ff0:	08005c20 	.word	0x08005c20
 8000ff4:	20000218 	.word	0x20000218
 8000ff8:	08005c40 	.word	0x08005c40
 8000ffc:	08005c50 	.word	0x08005c50
 8001000:	08005c5c 	.word	0x08005c5c
 8001004:	08005c74 	.word	0x08005c74
 8001008:	2000021c 	.word	0x2000021c
 800100c:	08005c84 	.word	0x08005c84
 8001010:	08005c98 	.word	0x08005c98
 8001014:	08005c9c 	.word	0x08005c9c
 8001018:	20000000 	.word	0x20000000
 800101c:	08005ca0 	.word	0x08005ca0
 8001020:	08005cac 	.word	0x08005cac

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b090      	sub	sp, #64	; 0x40
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0318 	add.w	r3, r7, #24
 800102e:	2228      	movs	r2, #40	; 0x28
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f003 ff4a 	bl	8004ecc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	1d3b      	adds	r3, r7, #4
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001046:	2301      	movs	r3, #1
 8001048:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800104a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800104e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001050:	2300      	movs	r3, #0
 8001052:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001058:	2302      	movs	r3, #2
 800105a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800105c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001060:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001062:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001068:	f107 0318 	add.w	r3, r7, #24
 800106c:	4618      	mov	r0, r3
 800106e:	f001 fec7 	bl	8002e00 <HAL_RCC_OscConfig>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001078:	f000 f819 	bl	80010ae <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800107c:	230f      	movs	r3, #15
 800107e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001080:	2302      	movs	r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001084:	2300      	movs	r3, #0
 8001086:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001088:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800108c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108e:	2300      	movs	r3, #0
 8001090:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001092:	1d3b      	adds	r3, r7, #4
 8001094:	2102      	movs	r1, #2
 8001096:	4618      	mov	r0, r3
 8001098:	f002 f934 	bl	8003304 <HAL_RCC_ClockConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010a2:	f000 f804 	bl	80010ae <Error_Handler>
  }
}
 80010a6:	bf00      	nop
 80010a8:	3740      	adds	r7, #64	; 0x40
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}

080010ae <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010ae:	b480      	push	{r7}
 80010b0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010b2:	b672      	cpsid	i
}
 80010b4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010b6:	e7fe      	b.n	80010b6 <Error_Handler+0x8>

080010b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80010bc:	4b17      	ldr	r3, [pc, #92]	; (800111c <MX_SPI1_Init+0x64>)
 80010be:	4a18      	ldr	r2, [pc, #96]	; (8001120 <MX_SPI1_Init+0x68>)
 80010c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80010c2:	4b16      	ldr	r3, [pc, #88]	; (800111c <MX_SPI1_Init+0x64>)
 80010c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80010c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80010ca:	4b14      	ldr	r3, [pc, #80]	; (800111c <MX_SPI1_Init+0x64>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80010d0:	4b12      	ldr	r3, [pc, #72]	; (800111c <MX_SPI1_Init+0x64>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010d6:	4b11      	ldr	r3, [pc, #68]	; (800111c <MX_SPI1_Init+0x64>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010dc:	4b0f      	ldr	r3, [pc, #60]	; (800111c <MX_SPI1_Init+0x64>)
 80010de:	2200      	movs	r2, #0
 80010e0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010e2:	4b0e      	ldr	r3, [pc, #56]	; (800111c <MX_SPI1_Init+0x64>)
 80010e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010e8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80010ea:	4b0c      	ldr	r3, [pc, #48]	; (800111c <MX_SPI1_Init+0x64>)
 80010ec:	2218      	movs	r2, #24
 80010ee:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <MX_SPI1_Init+0x64>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <MX_SPI1_Init+0x64>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010fc:	4b07      	ldr	r3, [pc, #28]	; (800111c <MX_SPI1_Init+0x64>)
 80010fe:	2200      	movs	r2, #0
 8001100:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <MX_SPI1_Init+0x64>)
 8001104:	220a      	movs	r2, #10
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_SPI1_Init+0x64>)
 800110a:	f002 fa89 	bl	8003620 <HAL_SPI_Init>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001114:	f7ff ffcb 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001118:	bf00      	nop
 800111a:	bd80      	pop	{r7, pc}
 800111c:	2000041c 	.word	0x2000041c
 8001120:	40013000 	.word	0x40013000

08001124 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112c:	f107 0310 	add.w	r3, r7, #16
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	605a      	str	r2, [r3, #4]
 8001136:	609a      	str	r2, [r3, #8]
 8001138:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <HAL_SPI_MspInit+0x88>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d12f      	bne.n	80011a4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	4a19      	ldr	r2, [pc, #100]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 800114a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800114e:	6193      	str	r3, [r2, #24]
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 8001152:	699b      	ldr	r3, [r3, #24]
 8001154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a13      	ldr	r2, [pc, #76]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 8001162:	f043 0304 	orr.w	r3, r3, #4
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_SPI_MspInit+0x8c>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0304 	and.w	r3, r3, #4
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001174:	23a0      	movs	r3, #160	; 0xa0
 8001176:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	480b      	ldr	r0, [pc, #44]	; (80011b4 <HAL_SPI_MspInit+0x90>)
 8001188:	f000 febc 	bl	8001f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800118c:	2340      	movs	r3, #64	; 0x40
 800118e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001190:	2300      	movs	r3, #0
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001198:	f107 0310 	add.w	r3, r7, #16
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <HAL_SPI_MspInit+0x90>)
 80011a0:	f000 feb0 	bl	8001f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80011a4:	bf00      	nop
 80011a6:	3720      	adds	r7, #32
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40013000 	.word	0x40013000
 80011b0:	40021000 	.word	0x40021000
 80011b4:	40010800 	.word	0x40010800

080011b8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80011be:	f000 fa1f 	bl	8001600 <ssd1306_I2C_Init>

	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80011c2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80011c6:	2201      	movs	r2, #1
 80011c8:	2178      	movs	r1, #120	; 0x78
 80011ca:	485b      	ldr	r0, [pc, #364]	; (8001338 <SSD1306_Init+0x180>)
 80011cc:	f001 fa90 	bl	80026f0 <HAL_I2C_IsDeviceReady>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80011d6:	2300      	movs	r3, #0
 80011d8:	e0a9      	b.n	800132e <SSD1306_Init+0x176>
	}

	/* A little delay */
	uint32_t p = 2500;
 80011da:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80011de:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011e0:	e002      	b.n	80011e8 <SSD1306_Init+0x30>
		p--;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3b01      	subs	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d1f9      	bne.n	80011e2 <SSD1306_Init+0x2a>

	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80011ee:	22ae      	movs	r2, #174	; 0xae
 80011f0:	2100      	movs	r1, #0
 80011f2:	2078      	movs	r0, #120	; 0x78
 80011f4:	f000 fa7e 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode
 80011f8:	2220      	movs	r2, #32
 80011fa:	2100      	movs	r1, #0
 80011fc:	2078      	movs	r0, #120	; 0x78
 80011fe:	f000 fa79 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001202:	2210      	movs	r2, #16
 8001204:	2100      	movs	r1, #0
 8001206:	2078      	movs	r0, #120	; 0x78
 8001208:	f000 fa74 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800120c:	22b0      	movs	r2, #176	; 0xb0
 800120e:	2100      	movs	r1, #0
 8001210:	2078      	movs	r0, #120	; 0x78
 8001212:	f000 fa6f 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001216:	22c8      	movs	r2, #200	; 0xc8
 8001218:	2100      	movs	r1, #0
 800121a:	2078      	movs	r0, #120	; 0x78
 800121c:	f000 fa6a 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001220:	2200      	movs	r2, #0
 8001222:	2100      	movs	r1, #0
 8001224:	2078      	movs	r0, #120	; 0x78
 8001226:	f000 fa65 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800122a:	2210      	movs	r2, #16
 800122c:	2100      	movs	r1, #0
 800122e:	2078      	movs	r0, #120	; 0x78
 8001230:	f000 fa60 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001234:	2240      	movs	r2, #64	; 0x40
 8001236:	2100      	movs	r1, #0
 8001238:	2078      	movs	r0, #120	; 0x78
 800123a:	f000 fa5b 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800123e:	2281      	movs	r2, #129	; 0x81
 8001240:	2100      	movs	r1, #0
 8001242:	2078      	movs	r0, #120	; 0x78
 8001244:	f000 fa56 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001248:	22ff      	movs	r2, #255	; 0xff
 800124a:	2100      	movs	r1, #0
 800124c:	2078      	movs	r0, #120	; 0x78
 800124e:	f000 fa51 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001252:	22a1      	movs	r2, #161	; 0xa1
 8001254:	2100      	movs	r1, #0
 8001256:	2078      	movs	r0, #120	; 0x78
 8001258:	f000 fa4c 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800125c:	22a6      	movs	r2, #166	; 0xa6
 800125e:	2100      	movs	r1, #0
 8001260:	2078      	movs	r0, #120	; 0x78
 8001262:	f000 fa47 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001266:	22a8      	movs	r2, #168	; 0xa8
 8001268:	2100      	movs	r1, #0
 800126a:	2078      	movs	r0, #120	; 0x78
 800126c:	f000 fa42 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001270:	223f      	movs	r2, #63	; 0x3f
 8001272:	2100      	movs	r1, #0
 8001274:	2078      	movs	r0, #120	; 0x78
 8001276:	f000 fa3d 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800127a:	22a4      	movs	r2, #164	; 0xa4
 800127c:	2100      	movs	r1, #0
 800127e:	2078      	movs	r0, #120	; 0x78
 8001280:	f000 fa38 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001284:	22d3      	movs	r2, #211	; 0xd3
 8001286:	2100      	movs	r1, #0
 8001288:	2078      	movs	r0, #120	; 0x78
 800128a:	f000 fa33 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 800128e:	2200      	movs	r2, #0
 8001290:	2100      	movs	r1, #0
 8001292:	2078      	movs	r0, #120	; 0x78
 8001294:	f000 fa2e 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001298:	22d5      	movs	r2, #213	; 0xd5
 800129a:	2100      	movs	r1, #0
 800129c:	2078      	movs	r0, #120	; 0x78
 800129e:	f000 fa29 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80012a2:	22f0      	movs	r2, #240	; 0xf0
 80012a4:	2100      	movs	r1, #0
 80012a6:	2078      	movs	r0, #120	; 0x78
 80012a8:	f000 fa24 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80012ac:	22d9      	movs	r2, #217	; 0xd9
 80012ae:	2100      	movs	r1, #0
 80012b0:	2078      	movs	r0, #120	; 0x78
 80012b2:	f000 fa1f 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80012b6:	2222      	movs	r2, #34	; 0x22
 80012b8:	2100      	movs	r1, #0
 80012ba:	2078      	movs	r0, #120	; 0x78
 80012bc:	f000 fa1a 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80012c0:	22da      	movs	r2, #218	; 0xda
 80012c2:	2100      	movs	r1, #0
 80012c4:	2078      	movs	r0, #120	; 0x78
 80012c6:	f000 fa15 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80012ca:	2212      	movs	r2, #18
 80012cc:	2100      	movs	r1, #0
 80012ce:	2078      	movs	r0, #120	; 0x78
 80012d0:	f000 fa10 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80012d4:	22db      	movs	r2, #219	; 0xdb
 80012d6:	2100      	movs	r1, #0
 80012d8:	2078      	movs	r0, #120	; 0x78
 80012da:	f000 fa0b 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80012de:	2220      	movs	r2, #32
 80012e0:	2100      	movs	r1, #0
 80012e2:	2078      	movs	r0, #120	; 0x78
 80012e4:	f000 fa06 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80012e8:	228d      	movs	r2, #141	; 0x8d
 80012ea:	2100      	movs	r1, #0
 80012ec:	2078      	movs	r0, #120	; 0x78
 80012ee:	f000 fa01 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80012f2:	2214      	movs	r2, #20
 80012f4:	2100      	movs	r1, #0
 80012f6:	2078      	movs	r0, #120	; 0x78
 80012f8:	f000 f9fc 	bl	80016f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80012fc:	22af      	movs	r2, #175	; 0xaf
 80012fe:	2100      	movs	r1, #0
 8001300:	2078      	movs	r0, #120	; 0x78
 8001302:	f000 f9f7 	bl	80016f4 <ssd1306_I2C_Write>


	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001306:	222e      	movs	r2, #46	; 0x2e
 8001308:	2100      	movs	r1, #0
 800130a:	2078      	movs	r0, #120	; 0x78
 800130c:	f000 f9f2 	bl	80016f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001310:	2000      	movs	r0, #0
 8001312:	f000 f843 	bl	800139c <SSD1306_Fill>

	/* Update screen */
	SSD1306_UpdateScreen();
 8001316:	f000 f813 	bl	8001340 <SSD1306_UpdateScreen>

	/* Set default values */
	SSD1306.CurrentX = 0;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <SSD1306_Init+0x184>)
 800131c:	2200      	movs	r2, #0
 800131e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <SSD1306_Init+0x184>)
 8001322:	2200      	movs	r2, #0
 8001324:	805a      	strh	r2, [r3, #2]

	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <SSD1306_Init+0x184>)
 8001328:	2201      	movs	r2, #1
 800132a:	715a      	strb	r2, [r3, #5]

	/* Return OK */
	return 1;
 800132c:	2301      	movs	r3, #1
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000008c 	.word	0x2000008c
 800133c:	20000874 	.word	0x20000874

08001340 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8001346:	2300      	movs	r3, #0
 8001348:	71fb      	strb	r3, [r7, #7]
 800134a:	e01d      	b.n	8001388 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800134c:	79fb      	ldrb	r3, [r7, #7]
 800134e:	3b50      	subs	r3, #80	; 0x50
 8001350:	b2db      	uxtb	r3, r3
 8001352:	461a      	mov	r2, r3
 8001354:	2100      	movs	r1, #0
 8001356:	2078      	movs	r0, #120	; 0x78
 8001358:	f000 f9cc 	bl	80016f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800135c:	2200      	movs	r2, #0
 800135e:	2100      	movs	r1, #0
 8001360:	2078      	movs	r0, #120	; 0x78
 8001362:	f000 f9c7 	bl	80016f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001366:	2210      	movs	r2, #16
 8001368:	2100      	movs	r1, #0
 800136a:	2078      	movs	r0, #120	; 0x78
 800136c:	f000 f9c2 	bl	80016f4 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001370:	79fb      	ldrb	r3, [r7, #7]
 8001372:	01db      	lsls	r3, r3, #7
 8001374:	4a08      	ldr	r2, [pc, #32]	; (8001398 <SSD1306_UpdateScreen+0x58>)
 8001376:	441a      	add	r2, r3
 8001378:	2380      	movs	r3, #128	; 0x80
 800137a:	2140      	movs	r1, #64	; 0x40
 800137c:	2078      	movs	r0, #120	; 0x78
 800137e:	f000 f953 	bl	8001628 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	3301      	adds	r3, #1
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	2b07      	cmp	r3, #7
 800138c:	d9de      	bls.n	800134c <SSD1306_UpdateScreen+0xc>
	}
}
 800138e:	bf00      	nop
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	20000474 	.word	0x20000474

0800139c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d101      	bne.n	80013b0 <SSD1306_Fill+0x14>
 80013ac:	2300      	movs	r3, #0
 80013ae:	e000      	b.n	80013b2 <SSD1306_Fill+0x16>
 80013b0:	23ff      	movs	r3, #255	; 0xff
 80013b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013b6:	4619      	mov	r1, r3
 80013b8:	4803      	ldr	r0, [pc, #12]	; (80013c8 <SSD1306_Fill+0x2c>)
 80013ba:	f003 fd87 	bl	8004ecc <memset>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	20000474 	.word	0x20000474

080013cc <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
 80013d6:	460b      	mov	r3, r1
 80013d8:	80bb      	strh	r3, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	70fb      	strb	r3, [r7, #3]
	if (
 80013de:	88fb      	ldrh	r3, [r7, #6]
 80013e0:	2b7f      	cmp	r3, #127	; 0x7f
 80013e2:	d848      	bhi.n	8001476 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80013e4:	88bb      	ldrh	r3, [r7, #4]
 80013e6:	2b3f      	cmp	r3, #63	; 0x3f
 80013e8:	d845      	bhi.n	8001476 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}

	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <SSD1306_DrawPixel+0xb4>)
 80013ec:	791b      	ldrb	r3, [r3, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d006      	beq.n	8001400 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80013f2:	78fb      	ldrb	r3, [r7, #3]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	bf0c      	ite	eq
 80013f8:	2301      	moveq	r3, #1
 80013fa:	2300      	movne	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	70fb      	strb	r3, [r7, #3]
	}

	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001400:	78fb      	ldrb	r3, [r7, #3]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d11a      	bne.n	800143c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001406:	88fa      	ldrh	r2, [r7, #6]
 8001408:	88bb      	ldrh	r3, [r7, #4]
 800140a:	08db      	lsrs	r3, r3, #3
 800140c:	b298      	uxth	r0, r3
 800140e:	4603      	mov	r3, r0
 8001410:	01db      	lsls	r3, r3, #7
 8001412:	4413      	add	r3, r2
 8001414:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <SSD1306_DrawPixel+0xb8>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	b25a      	sxtb	r2, r3
 800141a:	88bb      	ldrh	r3, [r7, #4]
 800141c:	f003 0307 	and.w	r3, r3, #7
 8001420:	2101      	movs	r1, #1
 8001422:	fa01 f303 	lsl.w	r3, r1, r3
 8001426:	b25b      	sxtb	r3, r3
 8001428:	4313      	orrs	r3, r2
 800142a:	b259      	sxtb	r1, r3
 800142c:	88fa      	ldrh	r2, [r7, #6]
 800142e:	4603      	mov	r3, r0
 8001430:	01db      	lsls	r3, r3, #7
 8001432:	4413      	add	r3, r2
 8001434:	b2c9      	uxtb	r1, r1
 8001436:	4a13      	ldr	r2, [pc, #76]	; (8001484 <SSD1306_DrawPixel+0xb8>)
 8001438:	54d1      	strb	r1, [r2, r3]
 800143a:	e01d      	b.n	8001478 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800143c:	88fa      	ldrh	r2, [r7, #6]
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	08db      	lsrs	r3, r3, #3
 8001442:	b298      	uxth	r0, r3
 8001444:	4603      	mov	r3, r0
 8001446:	01db      	lsls	r3, r3, #7
 8001448:	4413      	add	r3, r2
 800144a:	4a0e      	ldr	r2, [pc, #56]	; (8001484 <SSD1306_DrawPixel+0xb8>)
 800144c:	5cd3      	ldrb	r3, [r2, r3]
 800144e:	b25a      	sxtb	r2, r3
 8001450:	88bb      	ldrh	r3, [r7, #4]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	2101      	movs	r1, #1
 8001458:	fa01 f303 	lsl.w	r3, r1, r3
 800145c:	b25b      	sxtb	r3, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	b25b      	sxtb	r3, r3
 8001462:	4013      	ands	r3, r2
 8001464:	b259      	sxtb	r1, r3
 8001466:	88fa      	ldrh	r2, [r7, #6]
 8001468:	4603      	mov	r3, r0
 800146a:	01db      	lsls	r3, r3, #7
 800146c:	4413      	add	r3, r2
 800146e:	b2c9      	uxtb	r1, r1
 8001470:	4a04      	ldr	r2, [pc, #16]	; (8001484 <SSD1306_DrawPixel+0xb8>)
 8001472:	54d1      	strb	r1, [r2, r3]
 8001474:	e000      	b.n	8001478 <SSD1306_DrawPixel+0xac>
		return;
 8001476:	bf00      	nop
	}
}
 8001478:	370c      	adds	r7, #12
 800147a:	46bd      	mov	sp, r7
 800147c:	bc80      	pop	{r7}
 800147e:	4770      	bx	lr
 8001480:	20000874 	.word	0x20000874
 8001484:	20000474 	.word	0x20000474

08001488 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	460a      	mov	r2, r1
 8001492:	80fb      	strh	r3, [r7, #6]
 8001494:	4613      	mov	r3, r2
 8001496:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001498:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SSD1306_GotoXY+0x28>)
 800149a:	88fb      	ldrh	r3, [r7, #6]
 800149c:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 800149e:	4a04      	ldr	r2, [pc, #16]	; (80014b0 <SSD1306_GotoXY+0x28>)
 80014a0:	88bb      	ldrh	r3, [r7, #4]
 80014a2:	8053      	strh	r3, [r2, #2]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000874 	.word	0x20000874

080014b4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	4603      	mov	r3, r0
 80014bc:	6039      	str	r1, [r7, #0]
 80014be:	71fb      	strb	r3, [r7, #7]
 80014c0:	4613      	mov	r3, r2
 80014c2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;

	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014c4:	4b3a      	ldr	r3, [pc, #232]	; (80015b0 <SSD1306_Putc+0xfc>)
 80014c6:	881b      	ldrh	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	4413      	add	r3, r2
	if (
 80014d0:	2b7f      	cmp	r3, #127	; 0x7f
 80014d2:	dc07      	bgt.n	80014e4 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80014d4:	4b36      	ldr	r3, [pc, #216]	; (80015b0 <SSD1306_Putc+0xfc>)
 80014d6:	885b      	ldrh	r3, [r3, #2]
 80014d8:	461a      	mov	r2, r3
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	785b      	ldrb	r3, [r3, #1]
 80014de:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80014e0:	2b3f      	cmp	r3, #63	; 0x3f
 80014e2:	dd01      	ble.n	80014e8 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80014e4:	2300      	movs	r3, #0
 80014e6:	e05e      	b.n	80015a6 <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	e04b      	b.n	8001586 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685a      	ldr	r2, [r3, #4]
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	3b20      	subs	r3, #32
 80014f6:	6839      	ldr	r1, [r7, #0]
 80014f8:	7849      	ldrb	r1, [r1, #1]
 80014fa:	fb01 f303 	mul.w	r3, r1, r3
 80014fe:	4619      	mov	r1, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	440b      	add	r3, r1
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	881b      	ldrh	r3, [r3, #0]
 800150a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800150c:	2300      	movs	r3, #0
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	e030      	b.n	8001574 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d010      	beq.n	8001544 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001522:	4b23      	ldr	r3, [pc, #140]	; (80015b0 <SSD1306_Putc+0xfc>)
 8001524:	881a      	ldrh	r2, [r3, #0]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	b29b      	uxth	r3, r3
 800152a:	4413      	add	r3, r2
 800152c:	b298      	uxth	r0, r3
 800152e:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <SSD1306_Putc+0xfc>)
 8001530:	885a      	ldrh	r2, [r3, #2]
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	b29b      	uxth	r3, r3
 8001536:	4413      	add	r3, r2
 8001538:	b29b      	uxth	r3, r3
 800153a:	79ba      	ldrb	r2, [r7, #6]
 800153c:	4619      	mov	r1, r3
 800153e:	f7ff ff45 	bl	80013cc <SSD1306_DrawPixel>
 8001542:	e014      	b.n	800156e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001544:	4b1a      	ldr	r3, [pc, #104]	; (80015b0 <SSD1306_Putc+0xfc>)
 8001546:	881a      	ldrh	r2, [r3, #0]
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b298      	uxth	r0, r3
 8001550:	4b17      	ldr	r3, [pc, #92]	; (80015b0 <SSD1306_Putc+0xfc>)
 8001552:	885a      	ldrh	r2, [r3, #2]
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	b29b      	uxth	r3, r3
 8001558:	4413      	add	r3, r2
 800155a:	b299      	uxth	r1, r3
 800155c:	79bb      	ldrb	r3, [r7, #6]
 800155e:	2b00      	cmp	r3, #0
 8001560:	bf0c      	ite	eq
 8001562:	2301      	moveq	r3, #1
 8001564:	2300      	movne	r3, #0
 8001566:	b2db      	uxtb	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	f7ff ff2f 	bl	80013cc <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	3301      	adds	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4293      	cmp	r3, r2
 800157e:	d3c8      	bcc.n	8001512 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	3301      	adds	r3, #1
 8001584:	617b      	str	r3, [r7, #20]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	785b      	ldrb	r3, [r3, #1]
 800158a:	461a      	mov	r2, r3
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	4293      	cmp	r3, r2
 8001590:	d3ad      	bcc.n	80014ee <SSD1306_Putc+0x3a>
			}
		}
	}

	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <SSD1306_Putc+0xfc>)
 8001594:	881a      	ldrh	r2, [r3, #0]
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4413      	add	r3, r2
 800159e:	b29a      	uxth	r2, r3
 80015a0:	4b03      	ldr	r3, [pc, #12]	; (80015b0 <SSD1306_Putc+0xfc>)
 80015a2:	801a      	strh	r2, [r3, #0]

	/* Return character written */
	return ch;
 80015a4:	79fb      	ldrb	r3, [r7, #7]
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000874 	.word	0x20000874

080015b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	4613      	mov	r3, r2
 80015c0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80015c2:	e012      	b.n	80015ea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	79fa      	ldrb	r2, [r7, #7]
 80015ca:	68b9      	ldr	r1, [r7, #8]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff ff71 	bl	80014b4 <SSD1306_Putc>
 80015d2:	4603      	mov	r3, r0
 80015d4:	461a      	mov	r2, r3
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	429a      	cmp	r2, r3
 80015dc:	d002      	beq.n	80015e4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	e008      	b.n	80015f6 <SSD1306_Puts+0x42>
		}

		/* Increase string pointer */
		str++;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	3301      	adds	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1e8      	bne.n	80015c4 <SSD1306_Puts+0x10>
	}

	/* Everything OK, zero should be returned */
	return *str;
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	781b      	ldrb	r3, [r3, #0]
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	3710      	adds	r7, #16
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
	...

08001600 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001606:	4b07      	ldr	r3, [pc, #28]	; (8001624 <ssd1306_I2C_Init+0x24>)
 8001608:	607b      	str	r3, [r7, #4]
	while(p>0)
 800160a:	e002      	b.n	8001612 <ssd1306_I2C_Init+0x12>
		p--;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	3b01      	subs	r3, #1
 8001610:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d1f9      	bne.n	800160c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	0003d090 	.word	0x0003d090

08001628 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001628:	b590      	push	{r4, r7, lr}
 800162a:	b0c7      	sub	sp, #284	; 0x11c
 800162c:	af02      	add	r7, sp, #8
 800162e:	4604      	mov	r4, r0
 8001630:	4608      	mov	r0, r1
 8001632:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001636:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800163a:	600a      	str	r2, [r1, #0]
 800163c:	4619      	mov	r1, r3
 800163e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001642:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001646:	4622      	mov	r2, r4
 8001648:	701a      	strb	r2, [r3, #0]
 800164a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800164e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001652:	4602      	mov	r2, r0
 8001654:	701a      	strb	r2, [r3, #0]
 8001656:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800165a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800165e:	460a      	mov	r2, r1
 8001660:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001662:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001666:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800166a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800166e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001672:	7812      	ldrb	r2, [r2, #0]
 8001674:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001676:	2300      	movs	r3, #0
 8001678:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800167c:	e015      	b.n	80016aa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800167e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001682:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001686:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	441a      	add	r2, r3
 800168e:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001692:	3301      	adds	r3, #1
 8001694:	7811      	ldrb	r1, [r2, #0]
 8001696:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800169a:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 800169e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80016a0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016a4:	3301      	adds	r3, #1
 80016a6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80016aa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80016b4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80016b8:	8812      	ldrh	r2, [r2, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d8df      	bhi.n	800167e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80016be:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016c2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	b299      	uxth	r1, r3
 80016ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80016ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	3301      	adds	r3, #1
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	f107 020c 	add.w	r2, r7, #12
 80016dc:	200a      	movs	r0, #10
 80016de:	9000      	str	r0, [sp, #0]
 80016e0:	4803      	ldr	r0, [pc, #12]	; (80016f0 <ssd1306_I2C_WriteMulti+0xc8>)
 80016e2:	f000 ff07 	bl	80024f4 <HAL_I2C_Master_Transmit>
}
 80016e6:	bf00      	nop
 80016e8:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd90      	pop	{r4, r7, pc}
 80016f0:	2000008c 	.word	0x2000008c

080016f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af02      	add	r7, sp, #8
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
 80016fe:	460b      	mov	r3, r1
 8001700:	71bb      	strb	r3, [r7, #6]
 8001702:	4613      	mov	r3, r2
 8001704:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001706:	79bb      	ldrb	r3, [r7, #6]
 8001708:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800170a:	797b      	ldrb	r3, [r7, #5]
 800170c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800170e:	79fb      	ldrb	r3, [r7, #7]
 8001710:	b299      	uxth	r1, r3
 8001712:	f107 020c 	add.w	r2, r7, #12
 8001716:	230a      	movs	r3, #10
 8001718:	9300      	str	r3, [sp, #0]
 800171a:	2302      	movs	r3, #2
 800171c:	4803      	ldr	r0, [pc, #12]	; (800172c <ssd1306_I2C_Write+0x38>)
 800171e:	f000 fee9 	bl	80024f4 <HAL_I2C_Master_Transmit>
}
 8001722:	bf00      	nop
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	2000008c 	.word	0x2000008c

08001730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <HAL_MspInit+0x5c>)
 8001738:	699b      	ldr	r3, [r3, #24]
 800173a:	4a14      	ldr	r2, [pc, #80]	; (800178c <HAL_MspInit+0x5c>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6193      	str	r3, [r2, #24]
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_MspInit+0x5c>)
 8001744:	699b      	ldr	r3, [r3, #24]
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	60bb      	str	r3, [r7, #8]
 800174c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800174e:	4b0f      	ldr	r3, [pc, #60]	; (800178c <HAL_MspInit+0x5c>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a0e      	ldr	r2, [pc, #56]	; (800178c <HAL_MspInit+0x5c>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <HAL_MspInit+0x5c>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	607b      	str	r3, [r7, #4]
 8001764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001766:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <HAL_MspInit+0x60>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	4a04      	ldr	r2, [pc, #16]	; (8001790 <HAL_MspInit+0x60>)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001782:	bf00      	nop
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	bc80      	pop	{r7}
 800178a:	4770      	bx	lr
 800178c:	40021000 	.word	0x40021000
 8001790:	40010000 	.word	0x40010000

08001794 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001798:	e7fe      	b.n	8001798 <NMI_Handler+0x4>

0800179a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <MemManage_Handler+0x4>

080017a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017aa:	e7fe      	b.n	80017aa <BusFault_Handler+0x4>

080017ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b0:	e7fe      	b.n	80017b0 <UsageFault_Handler+0x4>

080017b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b2:	b480      	push	{r7}
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017b6:	bf00      	nop
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017be:	b480      	push	{r7}
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017da:	f000 f993 	bl	8001b04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017e8:	4802      	ldr	r0, [pc, #8]	; (80017f4 <USART2_IRQHandler+0x10>)
 80017ea:	f002 fc17 	bl	800401c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017ee:	bf00      	nop
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000880 	.word	0x20000880

080017f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  return 1;
 80017fc:	2301      	movs	r3, #1
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <_kill>:

int _kill(int pid, int sig)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001810:	f003 fc06 	bl	8005020 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	2216      	movs	r2, #22
 8001818:	601a      	str	r2, [r3, #0]
  return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_exit>:

void _exit (int status)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800182e:	f04f 31ff 	mov.w	r1, #4294967295
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffe7 	bl	8001806 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001838:	e7fe      	b.n	8001838 <_exit+0x12>

0800183a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	b086      	sub	sp, #24
 800183e:	af00      	add	r7, sp, #0
 8001840:	60f8      	str	r0, [r7, #12]
 8001842:	60b9      	str	r1, [r7, #8]
 8001844:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001846:	2300      	movs	r3, #0
 8001848:	617b      	str	r3, [r7, #20]
 800184a:	e00a      	b.n	8001862 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184c:	f3af 8000 	nop.w
 8001850:	4601      	mov	r1, r0
 8001852:	68bb      	ldr	r3, [r7, #8]
 8001854:	1c5a      	adds	r2, r3, #1
 8001856:	60ba      	str	r2, [r7, #8]
 8001858:	b2ca      	uxtb	r2, r1
 800185a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	617b      	str	r3, [r7, #20]
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	429a      	cmp	r2, r3
 8001868:	dbf0      	blt.n	800184c <_read+0x12>
  }

  return len;
 800186a:	687b      	ldr	r3, [r7, #4]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}

08001874 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800187c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001880:	4618      	mov	r0, r3
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800188a:	b480      	push	{r7}
 800188c:	b083      	sub	sp, #12
 800188e:	af00      	add	r7, sp, #0
 8001890:	6078      	str	r0, [r7, #4]
 8001892:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800189a:	605a      	str	r2, [r3, #4]
  return 0;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <_isatty>:

int _isatty(int file)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3714      	adds	r7, #20
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018dc:	4a14      	ldr	r2, [pc, #80]	; (8001930 <_sbrk+0x5c>)
 80018de:	4b15      	ldr	r3, [pc, #84]	; (8001934 <_sbrk+0x60>)
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e8:	4b13      	ldr	r3, [pc, #76]	; (8001938 <_sbrk+0x64>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d102      	bne.n	80018f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018f0:	4b11      	ldr	r3, [pc, #68]	; (8001938 <_sbrk+0x64>)
 80018f2:	4a12      	ldr	r2, [pc, #72]	; (800193c <_sbrk+0x68>)
 80018f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018f6:	4b10      	ldr	r3, [pc, #64]	; (8001938 <_sbrk+0x64>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4413      	add	r3, r2
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d207      	bcs.n	8001914 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001904:	f003 fb8c 	bl	8005020 <__errno>
 8001908:	4603      	mov	r3, r0
 800190a:	220c      	movs	r2, #12
 800190c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800190e:	f04f 33ff 	mov.w	r3, #4294967295
 8001912:	e009      	b.n	8001928 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <_sbrk+0x64>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800191a:	4b07      	ldr	r3, [pc, #28]	; (8001938 <_sbrk+0x64>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	4a05      	ldr	r2, [pc, #20]	; (8001938 <_sbrk+0x64>)
 8001924:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}
 8001930:	20005000 	.word	0x20005000
 8001934:	00000400 	.word	0x00000400
 8001938:	2000087c 	.word	0x2000087c
 800193c:	20000a18 	.word	0x20000a18

08001940 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001944:	bf00      	nop
 8001946:	46bd      	mov	sp, r7
 8001948:	bc80      	pop	{r7}
 800194a:	4770      	bx	lr

0800194c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001950:	4b11      	ldr	r3, [pc, #68]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001952:	4a12      	ldr	r2, [pc, #72]	; (800199c <MX_USART2_UART_Init+0x50>)
 8001954:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001956:	4b10      	ldr	r3, [pc, #64]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001958:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800195c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195e:	4b0e      	ldr	r3, [pc, #56]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001960:	2200      	movs	r2, #0
 8001962:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001966:	2200      	movs	r2, #0
 8001968:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 800196c:	2200      	movs	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001972:	220c      	movs	r2, #12
 8001974:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001976:	4b08      	ldr	r3, [pc, #32]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001982:	4805      	ldr	r0, [pc, #20]	; (8001998 <MX_USART2_UART_Init+0x4c>)
 8001984:	f002 fa76 	bl	8003e74 <HAL_UART_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800198e:	f7ff fb8e 	bl	80010ae <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000880 	.word	0x20000880
 800199c:	40004400 	.word	0x40004400

080019a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b088      	sub	sp, #32
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
 80019b0:	605a      	str	r2, [r3, #4]
 80019b2:	609a      	str	r2, [r3, #8]
 80019b4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a19      	ldr	r2, [pc, #100]	; (8001a20 <HAL_UART_MspInit+0x80>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d12b      	bne.n	8001a18 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019c0:	4b18      	ldr	r3, [pc, #96]	; (8001a24 <HAL_UART_MspInit+0x84>)
 80019c2:	69db      	ldr	r3, [r3, #28]
 80019c4:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <HAL_UART_MspInit+0x84>)
 80019c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ca:	61d3      	str	r3, [r2, #28]
 80019cc:	4b15      	ldr	r3, [pc, #84]	; (8001a24 <HAL_UART_MspInit+0x84>)
 80019ce:	69db      	ldr	r3, [r3, #28]
 80019d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_UART_MspInit+0x84>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <HAL_UART_MspInit+0x84>)
 80019de:	f043 0304 	orr.w	r3, r3, #4
 80019e2:	6193      	str	r3, [r2, #24]
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_UART_MspInit+0x84>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	f003 0304 	and.w	r3, r3, #4
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019f0:	230c      	movs	r3, #12
 80019f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f4:	2302      	movs	r3, #2
 80019f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2302      	movs	r3, #2
 80019fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019fc:	f107 0310 	add.w	r3, r7, #16
 8001a00:	4619      	mov	r1, r3
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <HAL_UART_MspInit+0x88>)
 8001a04:	f000 fa7e 	bl	8001f04 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a08:	2200      	movs	r2, #0
 8001a0a:	2100      	movs	r1, #0
 8001a0c:	2026      	movs	r0, #38	; 0x26
 8001a0e:	f000 f990 	bl	8001d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a12:	2026      	movs	r0, #38	; 0x26
 8001a14:	f000 f9a9 	bl	8001d6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a18:	bf00      	nop
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	40004400 	.word	0x40004400
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40010800 	.word	0x40010800

08001a2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a2c:	f7ff ff88 	bl	8001940 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a30:	480b      	ldr	r0, [pc, #44]	; (8001a60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a32:	490c      	ldr	r1, [pc, #48]	; (8001a64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a34:	4a0c      	ldr	r2, [pc, #48]	; (8001a68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a38:	e002      	b.n	8001a40 <LoopCopyDataInit>

08001a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a3e:	3304      	adds	r3, #4

08001a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a44:	d3f9      	bcc.n	8001a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a46:	4a09      	ldr	r2, [pc, #36]	; (8001a6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a48:	4c09      	ldr	r4, [pc, #36]	; (8001a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a4c:	e001      	b.n	8001a52 <LoopFillZerobss>

08001a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a50:	3204      	adds	r2, #4

08001a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a54:	d3fb      	bcc.n	8001a4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a56:	f003 fae9 	bl	800502c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5a:	f7ff f9f9 	bl	8000e50 <main>
  bx lr
 8001a5e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a64:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a68:	08006b5c 	.word	0x08006b5c
  ldr r2, =_sbss
 8001a6c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a70:	20000a18 	.word	0x20000a18

08001a74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a74:	e7fe      	b.n	8001a74 <ADC1_2_IRQHandler>
	...

08001a78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a7c:	4b08      	ldr	r3, [pc, #32]	; (8001aa0 <HAL_Init+0x28>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_Init+0x28>)
 8001a82:	f043 0310 	orr.w	r3, r3, #16
 8001a86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a88:	2003      	movs	r0, #3
 8001a8a:	f000 f947 	bl	8001d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f000 f808 	bl	8001aa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a94:	f7ff fe4c 	bl	8001730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001aac:	4b12      	ldr	r3, [pc, #72]	; (8001af8 <HAL_InitTick+0x54>)
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	4b12      	ldr	r3, [pc, #72]	; (8001afc <HAL_InitTick+0x58>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f000 f95f 	bl	8001d86 <HAL_SYSTICK_Config>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00e      	b.n	8001af0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b0f      	cmp	r3, #15
 8001ad6:	d80a      	bhi.n	8001aee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae0:	f000 f927 	bl	8001d32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ae4:	4a06      	ldr	r2, [pc, #24]	; (8001b00 <HAL_InitTick+0x5c>)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e000      	b.n	8001af0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}
 8001af8:	20000008 	.word	0x20000008
 8001afc:	20000010 	.word	0x20000010
 8001b00:	2000000c 	.word	0x2000000c

08001b04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <HAL_IncTick+0x1c>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_IncTick+0x20>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4413      	add	r3, r2
 8001b14:	4a03      	ldr	r2, [pc, #12]	; (8001b24 <HAL_IncTick+0x20>)
 8001b16:	6013      	str	r3, [r2, #0]
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bc80      	pop	{r7}
 8001b1e:	4770      	bx	lr
 8001b20:	20000010 	.word	0x20000010
 8001b24:	200008c8 	.word	0x200008c8

08001b28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001b2c:	4b02      	ldr	r3, [pc, #8]	; (8001b38 <HAL_GetTick+0x10>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr
 8001b38:	200008c8 	.word	0x200008c8

08001b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b44:	f7ff fff0 	bl	8001b28 <HAL_GetTick>
 8001b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b54:	d005      	beq.n	8001b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b56:	4b0a      	ldr	r3, [pc, #40]	; (8001b80 <HAL_Delay+0x44>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	461a      	mov	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	4413      	add	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b62:	bf00      	nop
 8001b64:	f7ff ffe0 	bl	8001b28 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d8f7      	bhi.n	8001b64 <HAL_Delay+0x28>
  {
  }
}
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000010 	.word	0x20000010

08001b84 <__NVIC_SetPriorityGrouping>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f003 0307 	and.w	r3, r3, #7
 8001b92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b94:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b9a:	68ba      	ldr	r2, [r7, #8]
 8001b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bb6:	4a04      	ldr	r2, [pc, #16]	; (8001bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	60d3      	str	r3, [r2, #12]
}
 8001bbc:	bf00      	nop
 8001bbe:	3714      	adds	r7, #20
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bc80      	pop	{r7}
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <__NVIC_GetPriorityGrouping>:
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bd0:	4b04      	ldr	r3, [pc, #16]	; (8001be4 <__NVIC_GetPriorityGrouping+0x18>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	0a1b      	lsrs	r3, r3, #8
 8001bd6:	f003 0307 	and.w	r3, r3, #7
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <__NVIC_EnableIRQ>:
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	db0b      	blt.n	8001c12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bfa:	79fb      	ldrb	r3, [r7, #7]
 8001bfc:	f003 021f 	and.w	r2, r3, #31
 8001c00:	4906      	ldr	r1, [pc, #24]	; (8001c1c <__NVIC_EnableIRQ+0x34>)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	095b      	lsrs	r3, r3, #5
 8001c08:	2001      	movs	r0, #1
 8001c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	e000e100 	.word	0xe000e100

08001c20 <__NVIC_SetPriority>:
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bc80      	pop	{r7}
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Config>:
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ce8:	d301      	bcc.n	8001cee <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8001cea:	2301      	movs	r3, #1
 8001cec:	e00f      	b.n	8001d0e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cee:	4a0a      	ldr	r2, [pc, #40]	; (8001d18 <SysTick_Config+0x40>)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cf6:	210f      	movs	r1, #15
 8001cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8001cfc:	f7ff ff90 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d00:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <SysTick_Config+0x40>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d06:	4b04      	ldr	r3, [pc, #16]	; (8001d18 <SysTick_Config+0x40>)
 8001d08:	2207      	movs	r2, #7
 8001d0a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3708      	adds	r7, #8
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	e000e010 	.word	0xe000e010

08001d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff2d 	bl	8001b84 <__NVIC_SetPriorityGrouping>
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	4603      	mov	r3, r0
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
 8001d3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d44:	f7ff ff42 	bl	8001bcc <__NVIC_GetPriorityGrouping>
 8001d48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	68b9      	ldr	r1, [r7, #8]
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f7ff ff90 	bl	8001c74 <NVIC_EncodePriority>
 8001d54:	4602      	mov	r2, r0
 8001d56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5a:	4611      	mov	r1, r2
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff ff5f 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d62:	bf00      	nop
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	4603      	mov	r3, r0
 8001d72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff ff35 	bl	8001be8 <__NVIC_EnableIRQ>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}

08001d86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d86:	b580      	push	{r7, lr}
 8001d88:	b082      	sub	sp, #8
 8001d8a:	af00      	add	r7, sp, #0
 8001d8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7ff ffa2 	bl	8001cd8 <SysTick_Config>
 8001d94:	4603      	mov	r3, r0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b085      	sub	sp, #20
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da6:	2300      	movs	r3, #0
 8001da8:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d008      	beq.n	8001dc8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2204      	movs	r2, #4
 8001dba:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e020      	b.n	8001e0a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f022 020e 	bic.w	r2, r2, #14
 8001dd6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f022 0201 	bic.w	r2, r2, #1
 8001de6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001df0:	2101      	movs	r1, #1
 8001df2:	fa01 f202 	lsl.w	r2, r1, r2
 8001df6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bc80      	pop	{r7}
 8001e12:	4770      	bx	lr

08001e14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d005      	beq.n	8001e38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2204      	movs	r2, #4
 8001e30:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e051      	b.n	8001edc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 020e 	bic.w	r2, r2, #14
 8001e46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0201 	bic.w	r2, r2, #1
 8001e56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a22      	ldr	r2, [pc, #136]	; (8001ee8 <HAL_DMA_Abort_IT+0xd4>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d029      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0xa2>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a21      	ldr	r2, [pc, #132]	; (8001eec <HAL_DMA_Abort_IT+0xd8>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d022      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x9e>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1f      	ldr	r2, [pc, #124]	; (8001ef0 <HAL_DMA_Abort_IT+0xdc>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d01a      	beq.n	8001eac <HAL_DMA_Abort_IT+0x98>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1e      	ldr	r2, [pc, #120]	; (8001ef4 <HAL_DMA_Abort_IT+0xe0>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d012      	beq.n	8001ea6 <HAL_DMA_Abort_IT+0x92>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a1c      	ldr	r2, [pc, #112]	; (8001ef8 <HAL_DMA_Abort_IT+0xe4>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d00a      	beq.n	8001ea0 <HAL_DMA_Abort_IT+0x8c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a1b      	ldr	r2, [pc, #108]	; (8001efc <HAL_DMA_Abort_IT+0xe8>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d102      	bne.n	8001e9a <HAL_DMA_Abort_IT+0x86>
 8001e94:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001e98:	e00e      	b.n	8001eb8 <HAL_DMA_Abort_IT+0xa4>
 8001e9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001e9e:	e00b      	b.n	8001eb8 <HAL_DMA_Abort_IT+0xa4>
 8001ea0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ea4:	e008      	b.n	8001eb8 <HAL_DMA_Abort_IT+0xa4>
 8001ea6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eaa:	e005      	b.n	8001eb8 <HAL_DMA_Abort_IT+0xa4>
 8001eac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eb0:	e002      	b.n	8001eb8 <HAL_DMA_Abort_IT+0xa4>
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	e000      	b.n	8001eb8 <HAL_DMA_Abort_IT+0xa4>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <HAL_DMA_Abort_IT+0xec>)
 8001eba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2201      	movs	r2, #1
 8001ec0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	4798      	blx	r3
    } 
  }
  return status;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40020008 	.word	0x40020008
 8001eec:	4002001c 	.word	0x4002001c
 8001ef0:	40020030 	.word	0x40020030
 8001ef4:	40020044 	.word	0x40020044
 8001ef8:	40020058 	.word	0x40020058
 8001efc:	4002006c 	.word	0x4002006c
 8001f00:	40020000 	.word	0x40020000

08001f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b08b      	sub	sp, #44	; 0x2c
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f12:	2300      	movs	r3, #0
 8001f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f16:	e169      	b.n	80021ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	69fa      	ldr	r2, [r7, #28]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f2c:	69ba      	ldr	r2, [r7, #24]
 8001f2e:	69fb      	ldr	r3, [r7, #28]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	f040 8158 	bne.w	80021e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a9a      	ldr	r2, [pc, #616]	; (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d05e      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f40:	4a98      	ldr	r2, [pc, #608]	; (80021a4 <HAL_GPIO_Init+0x2a0>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d875      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f46:	4a98      	ldr	r2, [pc, #608]	; (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d058      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f4c:	4a96      	ldr	r2, [pc, #600]	; (80021a8 <HAL_GPIO_Init+0x2a4>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d86f      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f52:	4a96      	ldr	r2, [pc, #600]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d052      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f58:	4a94      	ldr	r2, [pc, #592]	; (80021ac <HAL_GPIO_Init+0x2a8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d869      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f5e:	4a94      	ldr	r2, [pc, #592]	; (80021b0 <HAL_GPIO_Init+0x2ac>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04c      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f64:	4a92      	ldr	r2, [pc, #584]	; (80021b0 <HAL_GPIO_Init+0x2ac>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d863      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f6a:	4a92      	ldr	r2, [pc, #584]	; (80021b4 <HAL_GPIO_Init+0x2b0>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d046      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
 8001f70:	4a90      	ldr	r2, [pc, #576]	; (80021b4 <HAL_GPIO_Init+0x2b0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d85d      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f76:	2b12      	cmp	r3, #18
 8001f78:	d82a      	bhi.n	8001fd0 <HAL_GPIO_Init+0xcc>
 8001f7a:	2b12      	cmp	r3, #18
 8001f7c:	d859      	bhi.n	8002032 <HAL_GPIO_Init+0x12e>
 8001f7e:	a201      	add	r2, pc, #4	; (adr r2, 8001f84 <HAL_GPIO_Init+0x80>)
 8001f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f84:	08001fff 	.word	0x08001fff
 8001f88:	08001fd9 	.word	0x08001fd9
 8001f8c:	08001feb 	.word	0x08001feb
 8001f90:	0800202d 	.word	0x0800202d
 8001f94:	08002033 	.word	0x08002033
 8001f98:	08002033 	.word	0x08002033
 8001f9c:	08002033 	.word	0x08002033
 8001fa0:	08002033 	.word	0x08002033
 8001fa4:	08002033 	.word	0x08002033
 8001fa8:	08002033 	.word	0x08002033
 8001fac:	08002033 	.word	0x08002033
 8001fb0:	08002033 	.word	0x08002033
 8001fb4:	08002033 	.word	0x08002033
 8001fb8:	08002033 	.word	0x08002033
 8001fbc:	08002033 	.word	0x08002033
 8001fc0:	08002033 	.word	0x08002033
 8001fc4:	08002033 	.word	0x08002033
 8001fc8:	08001fe1 	.word	0x08001fe1
 8001fcc:	08001ff5 	.word	0x08001ff5
 8001fd0:	4a79      	ldr	r2, [pc, #484]	; (80021b8 <HAL_GPIO_Init+0x2b4>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d013      	beq.n	8001ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001fd6:	e02c      	b.n	8002032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	623b      	str	r3, [r7, #32]
          break;
 8001fde:	e029      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	3304      	adds	r3, #4
 8001fe6:	623b      	str	r3, [r7, #32]
          break;
 8001fe8:	e024      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	3308      	adds	r3, #8
 8001ff0:	623b      	str	r3, [r7, #32]
          break;
 8001ff2:	e01f      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	330c      	adds	r3, #12
 8001ffa:	623b      	str	r3, [r7, #32]
          break;
 8001ffc:	e01a      	b.n	8002034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d102      	bne.n	800200c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002006:	2304      	movs	r3, #4
 8002008:	623b      	str	r3, [r7, #32]
          break;
 800200a:	e013      	b.n	8002034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002014:	2308      	movs	r3, #8
 8002016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	69fa      	ldr	r2, [r7, #28]
 800201c:	611a      	str	r2, [r3, #16]
          break;
 800201e:	e009      	b.n	8002034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002020:	2308      	movs	r3, #8
 8002022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69fa      	ldr	r2, [r7, #28]
 8002028:	615a      	str	r2, [r3, #20]
          break;
 800202a:	e003      	b.n	8002034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
          break;
 8002030:	e000      	b.n	8002034 <HAL_GPIO_Init+0x130>
          break;
 8002032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	2bff      	cmp	r3, #255	; 0xff
 8002038:	d801      	bhi.n	800203e <HAL_GPIO_Init+0x13a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	e001      	b.n	8002042 <HAL_GPIO_Init+0x13e>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	3304      	adds	r3, #4
 8002042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2bff      	cmp	r3, #255	; 0xff
 8002048:	d802      	bhi.n	8002050 <HAL_GPIO_Init+0x14c>
 800204a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	e002      	b.n	8002056 <HAL_GPIO_Init+0x152>
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	3b08      	subs	r3, #8
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	210f      	movs	r1, #15
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	fa01 f303 	lsl.w	r3, r1, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	401a      	ands	r2, r3
 8002068:	6a39      	ldr	r1, [r7, #32]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	fa01 f303 	lsl.w	r3, r1, r3
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80b1 	beq.w	80021e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 8002086:	699b      	ldr	r3, [r3, #24]
 8002088:	4a4c      	ldr	r2, [pc, #304]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 800208a:	f043 0301 	orr.w	r3, r3, #1
 800208e:	6193      	str	r3, [r2, #24]
 8002090:	4b4a      	ldr	r3, [pc, #296]	; (80021bc <HAL_GPIO_Init+0x2b8>)
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800209c:	4a48      	ldr	r2, [pc, #288]	; (80021c0 <HAL_GPIO_Init+0x2bc>)
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	089b      	lsrs	r3, r3, #2
 80020a2:	3302      	adds	r3, #2
 80020a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	68fa      	ldr	r2, [r7, #12]
 80020bc:	4013      	ands	r3, r2
 80020be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	4a40      	ldr	r2, [pc, #256]	; (80021c4 <HAL_GPIO_Init+0x2c0>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d013      	beq.n	80020f0 <HAL_GPIO_Init+0x1ec>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	4a3f      	ldr	r2, [pc, #252]	; (80021c8 <HAL_GPIO_Init+0x2c4>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d00d      	beq.n	80020ec <HAL_GPIO_Init+0x1e8>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a3e      	ldr	r2, [pc, #248]	; (80021cc <HAL_GPIO_Init+0x2c8>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d007      	beq.n	80020e8 <HAL_GPIO_Init+0x1e4>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	4a3d      	ldr	r2, [pc, #244]	; (80021d0 <HAL_GPIO_Init+0x2cc>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d101      	bne.n	80020e4 <HAL_GPIO_Init+0x1e0>
 80020e0:	2303      	movs	r3, #3
 80020e2:	e006      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e4:	2304      	movs	r3, #4
 80020e6:	e004      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020e8:	2302      	movs	r3, #2
 80020ea:	e002      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020ec:	2301      	movs	r3, #1
 80020ee:	e000      	b.n	80020f2 <HAL_GPIO_Init+0x1ee>
 80020f0:	2300      	movs	r3, #0
 80020f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020f4:	f002 0203 	and.w	r2, r2, #3
 80020f8:	0092      	lsls	r2, r2, #2
 80020fa:	4093      	lsls	r3, r2
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4313      	orrs	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002102:	492f      	ldr	r1, [pc, #188]	; (80021c0 <HAL_GPIO_Init+0x2bc>)
 8002104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002106:	089b      	lsrs	r3, r3, #2
 8002108:	3302      	adds	r3, #2
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d006      	beq.n	800212a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800211c:	4b2d      	ldr	r3, [pc, #180]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800211e:	689a      	ldr	r2, [r3, #8]
 8002120:	492c      	ldr	r1, [pc, #176]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4313      	orrs	r3, r2
 8002126:	608b      	str	r3, [r1, #8]
 8002128:	e006      	b.n	8002138 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	43db      	mvns	r3, r3
 8002132:	4928      	ldr	r1, [pc, #160]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002134:	4013      	ands	r3, r2
 8002136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d006      	beq.n	8002152 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002144:	4b23      	ldr	r3, [pc, #140]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	4922      	ldr	r1, [pc, #136]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	4313      	orrs	r3, r2
 800214e:	60cb      	str	r3, [r1, #12]
 8002150:	e006      	b.n	8002160 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002152:	4b20      	ldr	r3, [pc, #128]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002154:	68da      	ldr	r2, [r3, #12]
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	43db      	mvns	r3, r3
 800215a:	491e      	ldr	r1, [pc, #120]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800215c:	4013      	ands	r3, r2
 800215e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d006      	beq.n	800217a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800216c:	4b19      	ldr	r3, [pc, #100]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800216e:	685a      	ldr	r2, [r3, #4]
 8002170:	4918      	ldr	r1, [pc, #96]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002172:	69bb      	ldr	r3, [r7, #24]
 8002174:	4313      	orrs	r3, r2
 8002176:	604b      	str	r3, [r1, #4]
 8002178:	e006      	b.n	8002188 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800217a:	4b16      	ldr	r3, [pc, #88]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	69bb      	ldr	r3, [r7, #24]
 8002180:	43db      	mvns	r3, r3
 8002182:	4914      	ldr	r1, [pc, #80]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002184:	4013      	ands	r3, r2
 8002186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	2b00      	cmp	r3, #0
 8002192:	d021      	beq.n	80021d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002194:	4b0f      	ldr	r3, [pc, #60]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	490e      	ldr	r1, [pc, #56]	; (80021d4 <HAL_GPIO_Init+0x2d0>)
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e021      	b.n	80021e6 <HAL_GPIO_Init+0x2e2>
 80021a2:	bf00      	nop
 80021a4:	10320000 	.word	0x10320000
 80021a8:	10310000 	.word	0x10310000
 80021ac:	10220000 	.word	0x10220000
 80021b0:	10210000 	.word	0x10210000
 80021b4:	10120000 	.word	0x10120000
 80021b8:	10110000 	.word	0x10110000
 80021bc:	40021000 	.word	0x40021000
 80021c0:	40010000 	.word	0x40010000
 80021c4:	40010800 	.word	0x40010800
 80021c8:	40010c00 	.word	0x40010c00
 80021cc:	40011000 	.word	0x40011000
 80021d0:	40011400 	.word	0x40011400
 80021d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80021d8:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021da:	681a      	ldr	r2, [r3, #0]
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	43db      	mvns	r3, r3
 80021e0:	4909      	ldr	r1, [pc, #36]	; (8002208 <HAL_GPIO_Init+0x304>)
 80021e2:	4013      	ands	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	3301      	adds	r3, #1
 80021ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	fa22 f303 	lsr.w	r3, r2, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	f47f ae8e 	bne.w	8001f18 <HAL_GPIO_Init+0x14>
  }
}
 80021fc:	bf00      	nop
 80021fe:	bf00      	nop
 8002200:	372c      	adds	r7, #44	; 0x2c
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40010400 	.word	0x40010400

0800220c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	887b      	ldrh	r3, [r7, #2]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d002      	beq.n	800222a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002224:	2301      	movs	r3, #1
 8002226:	73fb      	strb	r3, [r7, #15]
 8002228:	e001      	b.n	800222e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800222a:	2300      	movs	r3, #0
 800222c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800222e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002230:	4618      	mov	r0, r3
 8002232:	3714      	adds	r7, #20
 8002234:	46bd      	mov	sp, r7
 8002236:	bc80      	pop	{r7}
 8002238:	4770      	bx	lr

0800223a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800223a:	b480      	push	{r7}
 800223c:	b083      	sub	sp, #12
 800223e:	af00      	add	r7, sp, #0
 8002240:	6078      	str	r0, [r7, #4]
 8002242:	460b      	mov	r3, r1
 8002244:	807b      	strh	r3, [r7, #2]
 8002246:	4613      	mov	r3, r2
 8002248:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800224a:	787b      	ldrb	r3, [r7, #1]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002250:	887a      	ldrh	r2, [r7, #2]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002256:	e003      	b.n	8002260 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002258:	887b      	ldrh	r3, [r7, #2]
 800225a:	041a      	lsls	r2, r3, #16
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	611a      	str	r2, [r3, #16]
}
 8002260:	bf00      	nop
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	bc80      	pop	{r7}
 8002268:	4770      	bx	lr
	...

0800226c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e12b      	b.n	80024d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fd3e 	bl	8000d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2224      	movs	r2, #36	; 0x24
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0201 	bic.w	r2, r2, #1
 80022ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80022be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80022d0:	f001 f960 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 80022d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4a81      	ldr	r2, [pc, #516]	; (80024e0 <HAL_I2C_Init+0x274>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d807      	bhi.n	80022f0 <HAL_I2C_Init+0x84>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	4a80      	ldr	r2, [pc, #512]	; (80024e4 <HAL_I2C_Init+0x278>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	bf94      	ite	ls
 80022e8:	2301      	movls	r3, #1
 80022ea:	2300      	movhi	r3, #0
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	e006      	b.n	80022fe <HAL_I2C_Init+0x92>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	4a7d      	ldr	r2, [pc, #500]	; (80024e8 <HAL_I2C_Init+0x27c>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	bf94      	ite	ls
 80022f8:	2301      	movls	r3, #1
 80022fa:	2300      	movhi	r3, #0
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e0e7      	b.n	80024d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4a78      	ldr	r2, [pc, #480]	; (80024ec <HAL_I2C_Init+0x280>)
 800230a:	fba2 2303 	umull	r2, r3, r2, r3
 800230e:	0c9b      	lsrs	r3, r3, #18
 8002310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	430a      	orrs	r2, r1
 8002324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	4a6a      	ldr	r2, [pc, #424]	; (80024e0 <HAL_I2C_Init+0x274>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d802      	bhi.n	8002340 <HAL_I2C_Init+0xd4>
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	3301      	adds	r3, #1
 800233e:	e009      	b.n	8002354 <HAL_I2C_Init+0xe8>
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	4a69      	ldr	r2, [pc, #420]	; (80024f0 <HAL_I2C_Init+0x284>)
 800234c:	fba2 2303 	umull	r2, r3, r2, r3
 8002350:	099b      	lsrs	r3, r3, #6
 8002352:	3301      	adds	r3, #1
 8002354:	687a      	ldr	r2, [r7, #4]
 8002356:	6812      	ldr	r2, [r2, #0]
 8002358:	430b      	orrs	r3, r1
 800235a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002366:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	495c      	ldr	r1, [pc, #368]	; (80024e0 <HAL_I2C_Init+0x274>)
 8002370:	428b      	cmp	r3, r1
 8002372:	d819      	bhi.n	80023a8 <HAL_I2C_Init+0x13c>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e59      	subs	r1, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002382:	1c59      	adds	r1, r3, #1
 8002384:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002388:	400b      	ands	r3, r1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00a      	beq.n	80023a4 <HAL_I2C_Init+0x138>
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	1e59      	subs	r1, r3, #1
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	005b      	lsls	r3, r3, #1
 8002398:	fbb1 f3f3 	udiv	r3, r1, r3
 800239c:	3301      	adds	r3, #1
 800239e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a2:	e051      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 80023a4:	2304      	movs	r3, #4
 80023a6:	e04f      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d111      	bne.n	80023d4 <HAL_I2C_Init+0x168>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	1e58      	subs	r0, r3, #1
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6859      	ldr	r1, [r3, #4]
 80023b8:	460b      	mov	r3, r1
 80023ba:	005b      	lsls	r3, r3, #1
 80023bc:	440b      	add	r3, r1
 80023be:	fbb0 f3f3 	udiv	r3, r0, r3
 80023c2:	3301      	adds	r3, #1
 80023c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	bf0c      	ite	eq
 80023cc:	2301      	moveq	r3, #1
 80023ce:	2300      	movne	r3, #0
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	e012      	b.n	80023fa <HAL_I2C_Init+0x18e>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	1e58      	subs	r0, r3, #1
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6859      	ldr	r1, [r3, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	0099      	lsls	r1, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80023ea:	3301      	adds	r3, #1
 80023ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	bf0c      	ite	eq
 80023f4:	2301      	moveq	r3, #1
 80023f6:	2300      	movne	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Init+0x196>
 80023fe:	2301      	movs	r3, #1
 8002400:	e022      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10e      	bne.n	8002428 <HAL_I2C_Init+0x1bc>
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	1e58      	subs	r0, r3, #1
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6859      	ldr	r1, [r3, #4]
 8002412:	460b      	mov	r3, r1
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	440b      	add	r3, r1
 8002418:	fbb0 f3f3 	udiv	r3, r0, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002422:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002426:	e00f      	b.n	8002448 <HAL_I2C_Init+0x1dc>
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	1e58      	subs	r0, r3, #1
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6859      	ldr	r1, [r3, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	0099      	lsls	r1, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	fbb0 f3f3 	udiv	r3, r0, r3
 800243e:	3301      	adds	r3, #1
 8002440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002444:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002448:	6879      	ldr	r1, [r7, #4]
 800244a:	6809      	ldr	r1, [r1, #0]
 800244c:	4313      	orrs	r3, r2
 800244e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6a1b      	ldr	r3, [r3, #32]
 8002462:	431a      	orrs	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	430a      	orrs	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002476:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6911      	ldr	r1, [r2, #16]
 800247e:	687a      	ldr	r2, [r7, #4]
 8002480:	68d2      	ldr	r2, [r2, #12]
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6812      	ldr	r2, [r2, #0]
 8002488:	430b      	orrs	r3, r1
 800248a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	68db      	ldr	r3, [r3, #12]
 8002492:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	695a      	ldr	r2, [r3, #20]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	699b      	ldr	r3, [r3, #24]
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0201 	orr.w	r2, r2, #1
 80024b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2200      	movs	r2, #0
 80024bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2220      	movs	r2, #32
 80024c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80024d4:	2300      	movs	r3, #0
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3710      	adds	r7, #16
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	000186a0 	.word	0x000186a0
 80024e4:	001e847f 	.word	0x001e847f
 80024e8:	003d08ff 	.word	0x003d08ff
 80024ec:	431bde83 	.word	0x431bde83
 80024f0:	10624dd3 	.word	0x10624dd3

080024f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	60f8      	str	r0, [r7, #12]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	461a      	mov	r2, r3
 8002500:	460b      	mov	r3, r1
 8002502:	817b      	strh	r3, [r7, #10]
 8002504:	4613      	mov	r3, r2
 8002506:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002508:	f7ff fb0e 	bl	8001b28 <HAL_GetTick>
 800250c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b20      	cmp	r3, #32
 8002518:	f040 80e0 	bne.w	80026dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2319      	movs	r3, #25
 8002522:	2201      	movs	r2, #1
 8002524:	4970      	ldr	r1, [pc, #448]	; (80026e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 fa92 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002532:	2302      	movs	r3, #2
 8002534:	e0d3      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_I2C_Master_Transmit+0x50>
 8002540:	2302      	movs	r3, #2
 8002542:	e0cc      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	2b01      	cmp	r3, #1
 8002558:	d007      	beq.n	800256a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f042 0201 	orr.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002578:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	2221      	movs	r2, #33	; 0x21
 800257e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2210      	movs	r2, #16
 8002586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	893a      	ldrh	r2, [r7, #8]
 800259a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025a0:	b29a      	uxth	r2, r3
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4a50      	ldr	r2, [pc, #320]	; (80026ec <HAL_I2C_Master_Transmit+0x1f8>)
 80025aa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80025ac:	8979      	ldrh	r1, [r7, #10]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	6a3a      	ldr	r2, [r7, #32]
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f000 f9ca 	bl	800294c <I2C_MasterRequestWrite>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e08d      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	695b      	ldr	r3, [r3, #20]
 80025cc:	613b      	str	r3, [r7, #16]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	613b      	str	r3, [r7, #16]
 80025d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80025d8:	e066      	b.n	80026a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025da:	697a      	ldr	r2, [r7, #20]
 80025dc:	6a39      	ldr	r1, [r7, #32]
 80025de:	68f8      	ldr	r0, [r7, #12]
 80025e0:	f000 fb50 	bl	8002c84 <I2C_WaitOnTXEFlagUntilTimeout>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ee:	2b04      	cmp	r3, #4
 80025f0:	d107      	bne.n	8002602 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	e06b      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800260a:	781a      	ldrb	r2, [r3, #0]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002620:	b29b      	uxth	r3, r3
 8002622:	3b01      	subs	r3, #1
 8002624:	b29a      	uxth	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b04      	cmp	r3, #4
 8002642:	d11b      	bne.n	800267c <HAL_I2C_Master_Transmit+0x188>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d017      	beq.n	800267c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265c:	1c5a      	adds	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b01      	subs	r3, #1
 800266a:	b29a      	uxth	r2, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	6a39      	ldr	r1, [r7, #32]
 8002680:	68f8      	ldr	r0, [r7, #12]
 8002682:	f000 fb47 	bl	8002d14 <I2C_WaitOnBTFFlagUntilTimeout>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00d      	beq.n	80026a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	2b04      	cmp	r3, #4
 8002692:	d107      	bne.n	80026a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e01a      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d194      	bne.n	80025da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2220      	movs	r2, #32
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e000      	b.n	80026de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80026dc:	2302      	movs	r3, #2
  }
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	00100002 	.word	0x00100002
 80026ec:	ffff0000 	.word	0xffff0000

080026f0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b08a      	sub	sp, #40	; 0x28
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	603b      	str	r3, [r7, #0]
 80026fc:	460b      	mov	r3, r1
 80026fe:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002700:	f7ff fa12 	bl	8001b28 <HAL_GetTick>
 8002704:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b20      	cmp	r3, #32
 8002714:	f040 8111 	bne.w	800293a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2319      	movs	r3, #25
 800271e:	2201      	movs	r2, #1
 8002720:	4988      	ldr	r1, [pc, #544]	; (8002944 <HAL_I2C_IsDeviceReady+0x254>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 f994 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
 8002730:	e104      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_I2C_IsDeviceReady+0x50>
 800273c:	2302      	movs	r3, #2
 800273e:	e0fd      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d007      	beq.n	8002766 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002774:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2224      	movs	r2, #36	; 0x24
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2200      	movs	r2, #0
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4a70      	ldr	r2, [pc, #448]	; (8002948 <HAL_I2C_IsDeviceReady+0x258>)
 8002788:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002798:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027a6:	68f8      	ldr	r0, [r7, #12]
 80027a8:	f000 f952 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00d      	beq.n	80027ce <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027c0:	d103      	bne.n	80027ca <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e0b6      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80027ce:	897b      	ldrh	r3, [r7, #10]
 80027d0:	b2db      	uxtb	r3, r3
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80027dc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80027de:	f7ff f9a3 	bl	8001b28 <HAL_GetTick>
 80027e2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	695b      	ldr	r3, [r3, #20]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b02      	cmp	r3, #2
 80027f0:	bf0c      	ite	eq
 80027f2:	2301      	moveq	r3, #1
 80027f4:	2300      	movne	r3, #0
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695b      	ldr	r3, [r3, #20]
 8002800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002808:	bf0c      	ite	eq
 800280a:	2301      	moveq	r3, #1
 800280c:	2300      	movne	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002812:	e025      	b.n	8002860 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002814:	f7ff f988 	bl	8001b28 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	683a      	ldr	r2, [r7, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d302      	bcc.n	800282a <HAL_I2C_IsDeviceReady+0x13a>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d103      	bne.n	8002832 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	22a0      	movs	r2, #160	; 0xa0
 800282e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b02      	cmp	r3, #2
 800283e:	bf0c      	ite	eq
 8002840:	2301      	moveq	r3, #1
 8002842:	2300      	movne	r3, #0
 8002844:	b2db      	uxtb	r3, r3
 8002846:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002852:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002856:	bf0c      	ite	eq
 8002858:	2301      	moveq	r3, #1
 800285a:	2300      	movne	r3, #0
 800285c:	b2db      	uxtb	r3, r3
 800285e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2ba0      	cmp	r3, #160	; 0xa0
 800286a:	d005      	beq.n	8002878 <HAL_I2C_IsDeviceReady+0x188>
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d102      	bne.n	8002878 <HAL_I2C_IsDeviceReady+0x188>
 8002872:	7dbb      	ldrb	r3, [r7, #22]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0cd      	beq.n	8002814 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2220      	movs	r2, #32
 800287c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f003 0302 	and.w	r3, r3, #2
 800288a:	2b02      	cmp	r3, #2
 800288c:	d129      	bne.n	80028e2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800289e:	2300      	movs	r3, #0
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	695b      	ldr	r3, [r3, #20]
 80028a8:	613b      	str	r3, [r7, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	9300      	str	r3, [sp, #0]
 80028b8:	2319      	movs	r3, #25
 80028ba:	2201      	movs	r2, #1
 80028bc:	4921      	ldr	r1, [pc, #132]	; (8002944 <HAL_I2C_IsDeviceReady+0x254>)
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f8c6 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e036      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2220      	movs	r2, #32
 80028d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80028de:	2300      	movs	r3, #0
 80028e0:	e02c      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80028fa:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2319      	movs	r3, #25
 8002902:	2201      	movs	r2, #1
 8002904:	490f      	ldr	r1, [pc, #60]	; (8002944 <HAL_I2C_IsDeviceReady+0x254>)
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f8a2 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e012      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	3301      	adds	r3, #1
 800291a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800291c:	69ba      	ldr	r2, [r7, #24]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	429a      	cmp	r2, r3
 8002922:	f4ff af32 	bcc.w	800278a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2220      	movs	r2, #32
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e000      	b.n	800293c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800293a:	2302      	movs	r3, #2
  }
}
 800293c:	4618      	mov	r0, r3
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	00100002 	.word	0x00100002
 8002948:	ffff0000 	.word	0xffff0000

0800294c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	460b      	mov	r3, r1
 800295a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002960:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b08      	cmp	r3, #8
 8002966:	d006      	beq.n	8002976 <I2C_MasterRequestWrite+0x2a>
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d003      	beq.n	8002976 <I2C_MasterRequestWrite+0x2a>
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002974:	d108      	bne.n	8002988 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e00b      	b.n	80029a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298c:	2b12      	cmp	r3, #18
 800298e:	d107      	bne.n	80029a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800299e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	9300      	str	r3, [sp, #0]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80029ac:	68f8      	ldr	r0, [r7, #12]
 80029ae:	f000 f84f 	bl	8002a50 <I2C_WaitOnFlagUntilTimeout>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029c6:	d103      	bne.n	80029d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e035      	b.n	8002a40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029dc:	d108      	bne.n	80029f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029de:	897b      	ldrh	r3, [r7, #10]
 80029e0:	b2db      	uxtb	r3, r3
 80029e2:	461a      	mov	r2, r3
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029ec:	611a      	str	r2, [r3, #16]
 80029ee:	e01b      	b.n	8002a28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029f0:	897b      	ldrh	r3, [r7, #10]
 80029f2:	11db      	asrs	r3, r3, #7
 80029f4:	b2db      	uxtb	r3, r3
 80029f6:	f003 0306 	and.w	r3, r3, #6
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	f063 030f 	orn	r3, r3, #15
 8002a00:	b2da      	uxtb	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	490e      	ldr	r1, [pc, #56]	; (8002a48 <I2C_MasterRequestWrite+0xfc>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 f898 	bl	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d001      	beq.n	8002a1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e010      	b.n	8002a40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002a1e:	897b      	ldrh	r3, [r7, #10]
 8002a20:	b2da      	uxtb	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	4907      	ldr	r1, [pc, #28]	; (8002a4c <I2C_MasterRequestWrite+0x100>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f888 	bl	8002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e000      	b.n	8002a40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3718      	adds	r7, #24
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	00010008 	.word	0x00010008
 8002a4c:	00010002 	.word	0x00010002

08002a50 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	603b      	str	r3, [r7, #0]
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a60:	e048      	b.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a68:	d044      	beq.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7ff f85d 	bl	8001b28 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d139      	bne.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	0c1b      	lsrs	r3, r3, #16
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b01      	cmp	r3, #1
 8002a88:	d10d      	bne.n	8002aa6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	43da      	mvns	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	4013      	ands	r3, r2
 8002a96:	b29b      	uxth	r3, r3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	bf0c      	ite	eq
 8002a9c:	2301      	moveq	r3, #1
 8002a9e:	2300      	movne	r3, #0
 8002aa0:	b2db      	uxtb	r3, r3
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	e00c      	b.n	8002ac0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	699b      	ldr	r3, [r3, #24]
 8002aac:	43da      	mvns	r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	bf0c      	ite	eq
 8002ab8:	2301      	moveq	r3, #1
 8002aba:	2300      	movne	r3, #0
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	79fb      	ldrb	r3, [r7, #7]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d116      	bne.n	8002af4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e023      	b.n	8002b3c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b01      	cmp	r3, #1
 8002afc:	d10d      	bne.n	8002b1a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	43da      	mvns	r2, r3
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	bf0c      	ite	eq
 8002b10:	2301      	moveq	r3, #1
 8002b12:	2300      	movne	r3, #0
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	461a      	mov	r2, r3
 8002b18:	e00c      	b.n	8002b34 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	43da      	mvns	r2, r3
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	4013      	ands	r3, r2
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	bf0c      	ite	eq
 8002b2c:	2301      	moveq	r3, #1
 8002b2e:	2300      	movne	r3, #0
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	79fb      	ldrb	r3, [r7, #7]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d093      	beq.n	8002a62 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b3a:	2300      	movs	r3, #0
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3710      	adds	r7, #16
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bd80      	pop	{r7, pc}

08002b44 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b084      	sub	sp, #16
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b52:	e071      	b.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002b62:	d123      	bne.n	8002bac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b72:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b7c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b98:	f043 0204 	orr.w	r2, r3, #4
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e067      	b.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb2:	d041      	beq.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb4:	f7fe ffb8 	bl	8001b28 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d302      	bcc.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d136      	bne.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	0c1b      	lsrs	r3, r3, #16
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d10c      	bne.n	8002bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	43da      	mvns	r2, r3
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	4013      	ands	r3, r2
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	bf14      	ite	ne
 8002be6:	2301      	movne	r3, #1
 8002be8:	2300      	moveq	r3, #0
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	e00b      	b.n	8002c06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	43da      	mvns	r2, r3
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	b29b      	uxth	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	bf14      	ite	ne
 8002c00:	2301      	movne	r3, #1
 8002c02:	2300      	moveq	r3, #0
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d016      	beq.n	8002c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c24:	f043 0220 	orr.w	r2, r3, #32
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c34:	2301      	movs	r3, #1
 8002c36:	e021      	b.n	8002c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	0c1b      	lsrs	r3, r3, #16
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d10c      	bne.n	8002c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	43da      	mvns	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	bf14      	ite	ne
 8002c54:	2301      	movne	r3, #1
 8002c56:	2300      	moveq	r3, #0
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	e00b      	b.n	8002c74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	699b      	ldr	r3, [r3, #24]
 8002c62:	43da      	mvns	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4013      	ands	r3, r2
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	bf14      	ite	ne
 8002c6e:	2301      	movne	r3, #1
 8002c70:	2300      	moveq	r3, #0
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	f47f af6d 	bne.w	8002b54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002c7a:	2300      	movs	r3, #0
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3710      	adds	r7, #16
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}

08002c84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c90:	e034      	b.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f886 	bl	8002da4 <I2C_IsAcknowledgeFailed>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e034      	b.n	8002d0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ca8:	d028      	beq.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002caa:	f7fe ff3d 	bl	8001b28 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	68ba      	ldr	r2, [r7, #8]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d302      	bcc.n	8002cc0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d11d      	bne.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cca:	2b80      	cmp	r3, #128	; 0x80
 8002ccc:	d016      	beq.n	8002cfc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f043 0220 	orr.w	r2, r3, #32
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e007      	b.n	8002d0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
 8002d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d06:	2b80      	cmp	r3, #128	; 0x80
 8002d08:	d1c3      	bne.n	8002c92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d20:	e034      	b.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002d22:	68f8      	ldr	r0, [r7, #12]
 8002d24:	f000 f83e 	bl	8002da4 <I2C_IsAcknowledgeFailed>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e034      	b.n	8002d9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d38:	d028      	beq.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d3a:	f7fe fef5 	bl	8001b28 <HAL_GetTick>
 8002d3e:	4602      	mov	r2, r0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	68ba      	ldr	r2, [r7, #8]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d302      	bcc.n	8002d50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d11d      	bne.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d016      	beq.n	8002d8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	2220      	movs	r2, #32
 8002d68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f043 0220 	orr.w	r2, r3, #32
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e007      	b.n	8002d9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d1c3      	bne.n	8002d22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}

08002da4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dba:	d11b      	bne.n	8002df4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002dc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de0:	f043 0204 	orr.w	r2, r3, #4
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e000      	b.n	8002df6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b086      	sub	sp, #24
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d101      	bne.n	8002e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e272      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f003 0301 	and.w	r3, r3, #1
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	f000 8087 	beq.w	8002f2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e20:	4b92      	ldr	r3, [pc, #584]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d00c      	beq.n	8002e46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e2c:	4b8f      	ldr	r3, [pc, #572]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f003 030c 	and.w	r3, r3, #12
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d112      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5e>
 8002e38:	4b8c      	ldr	r3, [pc, #560]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d10b      	bne.n	8002e5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e46:	4b89      	ldr	r3, [pc, #548]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d06c      	beq.n	8002f2c <HAL_RCC_OscConfig+0x12c>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d168      	bne.n	8002f2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e24c      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x76>
 8002e68:	4b80      	ldr	r3, [pc, #512]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a7f      	ldr	r2, [pc, #508]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	e02e      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x98>
 8002e7e:	4b7b      	ldr	r3, [pc, #492]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a7a      	ldr	r2, [pc, #488]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b78      	ldr	r3, [pc, #480]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a77      	ldr	r2, [pc, #476]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0xbc>
 8002ea2:	4b72      	ldr	r3, [pc, #456]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a71      	ldr	r2, [pc, #452]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6f      	ldr	r3, [pc, #444]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6e      	ldr	r2, [pc, #440]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd4>
 8002ebc:	4b6b      	ldr	r3, [pc, #428]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a6a      	ldr	r2, [pc, #424]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b68      	ldr	r3, [pc, #416]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a67      	ldr	r2, [pc, #412]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe fe24 	bl	8001b28 <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fe20 	bl	8001b28 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e200      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5d      	ldr	r3, [pc, #372]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xe4>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fe10 	bl	8001b28 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fe0c 	bl	8001b28 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1ec      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b53      	ldr	r3, [pc, #332]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x10c>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f3a:	4b4c      	ldr	r3, [pc, #304]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002f46:	4b49      	ldr	r3, [pc, #292]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f48:	685b      	ldr	r3, [r3, #4]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x18c>
 8002f52:	4b46      	ldr	r3, [pc, #280]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b43      	ldr	r3, [pc, #268]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x176>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c0      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3d      	ldr	r3, [pc, #244]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4939      	ldr	r1, [pc, #228]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b36      	ldr	r3, [pc, #216]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fdc5 	bl	8001b28 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7fe fdc1 	bl	8001b28 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1a1      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2d      	ldr	r3, [pc, #180]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b2a      	ldr	r3, [pc, #168]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	695b      	ldr	r3, [r3, #20]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4927      	ldr	r1, [pc, #156]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b26      	ldr	r3, [pc, #152]	; (8003070 <HAL_RCC_OscConfig+0x270>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fda4 	bl	8001b28 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fda0 	bl	8001b28 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e180      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1d      	ldr	r3, [pc, #116]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d03a      	beq.n	8003084 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	699b      	ldr	r3, [r3, #24]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d019      	beq.n	800304a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b17      	ldr	r3, [pc, #92]	; (8003074 <HAL_RCC_OscConfig+0x274>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301c:	f7fe fd84 	bl	8001b28 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003024:	f7fe fd80 	bl	8001b28 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e160      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0d      	ldr	r3, [pc, #52]	; (800306c <HAL_RCC_OscConfig+0x26c>)
 8003038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003042:	2001      	movs	r0, #1
 8003044:	f000 face 	bl	80035e4 <RCC_Delay>
 8003048:	e01c      	b.n	8003084 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800304a:	4b0a      	ldr	r3, [pc, #40]	; (8003074 <HAL_RCC_OscConfig+0x274>)
 800304c:	2200      	movs	r2, #0
 800304e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003050:	f7fe fd6a 	bl	8001b28 <HAL_GetTick>
 8003054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003056:	e00f      	b.n	8003078 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003058:	f7fe fd66 	bl	8001b28 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b02      	cmp	r3, #2
 8003064:	d908      	bls.n	8003078 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e146      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
 800306a:	bf00      	nop
 800306c:	40021000 	.word	0x40021000
 8003070:	42420000 	.word	0x42420000
 8003074:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003078:	4b92      	ldr	r3, [pc, #584]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800307a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e9      	bne.n	8003058 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0304 	and.w	r3, r3, #4
 800308c:	2b00      	cmp	r3, #0
 800308e:	f000 80a6 	beq.w	80031de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003092:	2300      	movs	r3, #0
 8003094:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003096:	4b8b      	ldr	r3, [pc, #556]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	69db      	ldr	r3, [r3, #28]
 800309a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d10d      	bne.n	80030be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a2:	4b88      	ldr	r3, [pc, #544]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	4a87      	ldr	r2, [pc, #540]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ac:	61d3      	str	r3, [r2, #28]
 80030ae:	4b85      	ldr	r3, [pc, #532]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80030b0:	69db      	ldr	r3, [r3, #28]
 80030b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ba:	2301      	movs	r3, #1
 80030bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030be:	4b82      	ldr	r3, [pc, #520]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d118      	bne.n	80030fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030ca:	4b7f      	ldr	r3, [pc, #508]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7e      	ldr	r2, [pc, #504]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d6:	f7fe fd27 	bl	8001b28 <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030de:	f7fe fd23 	bl	8001b28 <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b64      	cmp	r3, #100	; 0x64
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e103      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f0:	4b75      	ldr	r3, [pc, #468]	; (80032c8 <HAL_RCC_OscConfig+0x4c8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d106      	bne.n	8003112 <HAL_RCC_OscConfig+0x312>
 8003104:	4b6f      	ldr	r3, [pc, #444]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	4a6e      	ldr	r2, [pc, #440]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800310a:	f043 0301 	orr.w	r3, r3, #1
 800310e:	6213      	str	r3, [r2, #32]
 8003110:	e02d      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x334>
 800311a:	4b6a      	ldr	r3, [pc, #424]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800311c:	6a1b      	ldr	r3, [r3, #32]
 800311e:	4a69      	ldr	r2, [pc, #420]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	f023 0301 	bic.w	r3, r3, #1
 8003124:	6213      	str	r3, [r2, #32]
 8003126:	4b67      	ldr	r3, [pc, #412]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003128:	6a1b      	ldr	r3, [r3, #32]
 800312a:	4a66      	ldr	r2, [pc, #408]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800312c:	f023 0304 	bic.w	r3, r3, #4
 8003130:	6213      	str	r3, [r2, #32]
 8003132:	e01c      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	2b05      	cmp	r3, #5
 800313a:	d10c      	bne.n	8003156 <HAL_RCC_OscConfig+0x356>
 800313c:	4b61      	ldr	r3, [pc, #388]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	4a60      	ldr	r2, [pc, #384]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003142:	f043 0304 	orr.w	r3, r3, #4
 8003146:	6213      	str	r3, [r2, #32]
 8003148:	4b5e      	ldr	r3, [pc, #376]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	4a5d      	ldr	r2, [pc, #372]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6213      	str	r3, [r2, #32]
 8003154:	e00b      	b.n	800316e <HAL_RCC_OscConfig+0x36e>
 8003156:	4b5b      	ldr	r3, [pc, #364]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003158:	6a1b      	ldr	r3, [r3, #32]
 800315a:	4a5a      	ldr	r2, [pc, #360]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	6213      	str	r3, [r2, #32]
 8003162:	4b58      	ldr	r3, [pc, #352]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	4a57      	ldr	r2, [pc, #348]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003168:	f023 0304 	bic.w	r3, r3, #4
 800316c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d015      	beq.n	80031a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003176:	f7fe fcd7 	bl	8001b28 <HAL_GetTick>
 800317a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317c:	e00a      	b.n	8003194 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800317e:	f7fe fcd3 	bl	8001b28 <HAL_GetTick>
 8003182:	4602      	mov	r2, r0
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	1ad3      	subs	r3, r2, r3
 8003188:	f241 3288 	movw	r2, #5000	; 0x1388
 800318c:	4293      	cmp	r3, r2
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e0b1      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003194:	4b4b      	ldr	r3, [pc, #300]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0ee      	beq.n	800317e <HAL_RCC_OscConfig+0x37e>
 80031a0:	e014      	b.n	80031cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031a2:	f7fe fcc1 	bl	8001b28 <HAL_GetTick>
 80031a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a8:	e00a      	b.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031aa:	f7fe fcbd 	bl	8001b28 <HAL_GetTick>
 80031ae:	4602      	mov	r2, r0
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	1ad3      	subs	r3, r2, r3
 80031b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d901      	bls.n	80031c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e09b      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c0:	4b40      	ldr	r3, [pc, #256]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	f003 0302 	and.w	r3, r3, #2
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1ee      	bne.n	80031aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80031cc:	7dfb      	ldrb	r3, [r7, #23]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d105      	bne.n	80031de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031d2:	4b3c      	ldr	r3, [pc, #240]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	69db      	ldr	r3, [r3, #28]
 80031d6:	4a3b      	ldr	r2, [pc, #236]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	69db      	ldr	r3, [r3, #28]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8087 	beq.w	80032f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80031e8:	4b36      	ldr	r3, [pc, #216]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 030c 	and.w	r3, r3, #12
 80031f0:	2b08      	cmp	r3, #8
 80031f2:	d061      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	69db      	ldr	r3, [r3, #28]
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d146      	bne.n	800328a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031fc:	4b33      	ldr	r3, [pc, #204]	; (80032cc <HAL_RCC_OscConfig+0x4cc>)
 80031fe:	2200      	movs	r2, #0
 8003200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003202:	f7fe fc91 	bl	8001b28 <HAL_GetTick>
 8003206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003208:	e008      	b.n	800321c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320a:	f7fe fc8d 	bl	8001b28 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	693b      	ldr	r3, [r7, #16]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d901      	bls.n	800321c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e06d      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800321c:	4b29      	ldr	r3, [pc, #164]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d1f0      	bne.n	800320a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003230:	d108      	bne.n	8003244 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003232:	4b24      	ldr	r3, [pc, #144]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	4921      	ldr	r1, [pc, #132]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003240:	4313      	orrs	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003244:	4b1f      	ldr	r3, [pc, #124]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a19      	ldr	r1, [r3, #32]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003254:	430b      	orrs	r3, r1
 8003256:	491b      	ldr	r1, [pc, #108]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 8003258:	4313      	orrs	r3, r2
 800325a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800325c:	4b1b      	ldr	r3, [pc, #108]	; (80032cc <HAL_RCC_OscConfig+0x4cc>)
 800325e:	2201      	movs	r2, #1
 8003260:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003262:	f7fe fc61 	bl	8001b28 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800326a:	f7fe fc5d 	bl	8001b28 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e03d      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x46a>
 8003288:	e035      	b.n	80032f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800328a:	4b10      	ldr	r3, [pc, #64]	; (80032cc <HAL_RCC_OscConfig+0x4cc>)
 800328c:	2200      	movs	r2, #0
 800328e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003290:	f7fe fc4a 	bl	8001b28 <HAL_GetTick>
 8003294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003296:	e008      	b.n	80032aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003298:	f7fe fc46 	bl	8001b28 <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d901      	bls.n	80032aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e026      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1f0      	bne.n	8003298 <HAL_RCC_OscConfig+0x498>
 80032b6:	e01e      	b.n	80032f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	69db      	ldr	r3, [r3, #28]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d107      	bne.n	80032d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e019      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
 80032c4:	40021000 	.word	0x40021000
 80032c8:	40007000 	.word	0x40007000
 80032cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80032d0:	4b0b      	ldr	r3, [pc, #44]	; (8003300 <HAL_RCC_OscConfig+0x500>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	429a      	cmp	r2, r3
 80032f0:	d001      	beq.n	80032f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3718      	adds	r7, #24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	40021000 	.word	0x40021000

08003304 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d101      	bne.n	8003318 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e0d0      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0307 	and.w	r3, r3, #7
 8003320:	683a      	ldr	r2, [r7, #0]
 8003322:	429a      	cmp	r2, r3
 8003324:	d910      	bls.n	8003348 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003326:	4b67      	ldr	r3, [pc, #412]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 0207 	bic.w	r2, r3, #7
 800332e:	4965      	ldr	r1, [pc, #404]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003336:	4b63      	ldr	r3, [pc, #396]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0307 	and.w	r3, r3, #7
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d001      	beq.n	8003348 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e0b8      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0302 	and.w	r3, r3, #2
 8003350:	2b00      	cmp	r3, #0
 8003352:	d020      	beq.n	8003396 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0304 	and.w	r3, r3, #4
 800335c:	2b00      	cmp	r3, #0
 800335e:	d005      	beq.n	800336c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003360:	4b59      	ldr	r3, [pc, #356]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4a58      	ldr	r2, [pc, #352]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003366:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800336a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0308 	and.w	r3, r3, #8
 8003374:	2b00      	cmp	r3, #0
 8003376:	d005      	beq.n	8003384 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a52      	ldr	r2, [pc, #328]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003382:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	494d      	ldr	r1, [pc, #308]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003392:	4313      	orrs	r3, r2
 8003394:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0301 	and.w	r3, r3, #1
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d040      	beq.n	8003424 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d107      	bne.n	80033ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033aa:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d115      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e07f      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d107      	bne.n	80033d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033c2:	4b41      	ldr	r3, [pc, #260]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ce:	2301      	movs	r3, #1
 80033d0:	e073      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d2:	4b3d      	ldr	r3, [pc, #244]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06b      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033e2:	4b39      	ldr	r3, [pc, #228]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f023 0203 	bic.w	r2, r3, #3
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	4936      	ldr	r1, [pc, #216]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033f4:	f7fe fb98 	bl	8001b28 <HAL_GetTick>
 80033f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033fa:	e00a      	b.n	8003412 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033fc:	f7fe fb94 	bl	8001b28 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	f241 3288 	movw	r2, #5000	; 0x1388
 800340a:	4293      	cmp	r3, r2
 800340c:	d901      	bls.n	8003412 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e053      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	f003 020c 	and.w	r2, r3, #12
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	429a      	cmp	r2, r3
 8003422:	d1eb      	bne.n	80033fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003424:	4b27      	ldr	r3, [pc, #156]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0307 	and.w	r3, r3, #7
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d210      	bcs.n	8003454 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b24      	ldr	r3, [pc, #144]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 0207 	bic.w	r2, r3, #7
 800343a:	4922      	ldr	r1, [pc, #136]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b20      	ldr	r3, [pc, #128]	; (80034c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e032      	b.n	80034ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d008      	beq.n	8003472 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003460:	4b19      	ldr	r3, [pc, #100]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	4916      	ldr	r1, [pc, #88]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800346e:	4313      	orrs	r3, r2
 8003470:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0308 	and.w	r3, r3, #8
 800347a:	2b00      	cmp	r3, #0
 800347c:	d009      	beq.n	8003492 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800347e:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	00db      	lsls	r3, r3, #3
 800348c:	490e      	ldr	r1, [pc, #56]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800348e:	4313      	orrs	r3, r2
 8003490:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003492:	f000 f821 	bl	80034d8 <HAL_RCC_GetSysClockFreq>
 8003496:	4602      	mov	r2, r0
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <HAL_RCC_ClockConfig+0x1c4>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 030f 	and.w	r3, r3, #15
 80034a2:	490a      	ldr	r1, [pc, #40]	; (80034cc <HAL_RCC_ClockConfig+0x1c8>)
 80034a4:	5ccb      	ldrb	r3, [r1, r3]
 80034a6:	fa22 f303 	lsr.w	r3, r2, r3
 80034aa:	4a09      	ldr	r2, [pc, #36]	; (80034d0 <HAL_RCC_ClockConfig+0x1cc>)
 80034ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80034ae:	4b09      	ldr	r3, [pc, #36]	; (80034d4 <HAL_RCC_ClockConfig+0x1d0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f7fe faf6 	bl	8001aa4 <HAL_InitTick>

  return HAL_OK;
 80034b8:	2300      	movs	r3, #0
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	40022000 	.word	0x40022000
 80034c8:	40021000 	.word	0x40021000
 80034cc:	08006a40 	.word	0x08006a40
 80034d0:	20000008 	.word	0x20000008
 80034d4:	2000000c 	.word	0x2000000c

080034d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034d8:	b480      	push	{r7}
 80034da:	b087      	sub	sp, #28
 80034dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80034de:	2300      	movs	r3, #0
 80034e0:	60fb      	str	r3, [r7, #12]
 80034e2:	2300      	movs	r3, #0
 80034e4:	60bb      	str	r3, [r7, #8]
 80034e6:	2300      	movs	r3, #0
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80034f2:	4b1e      	ldr	r3, [pc, #120]	; (800356c <HAL_RCC_GetSysClockFreq+0x94>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b04      	cmp	r3, #4
 8003500:	d002      	beq.n	8003508 <HAL_RCC_GetSysClockFreq+0x30>
 8003502:	2b08      	cmp	r3, #8
 8003504:	d003      	beq.n	800350e <HAL_RCC_GetSysClockFreq+0x36>
 8003506:	e027      	b.n	8003558 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003508:	4b19      	ldr	r3, [pc, #100]	; (8003570 <HAL_RCC_GetSysClockFreq+0x98>)
 800350a:	613b      	str	r3, [r7, #16]
      break;
 800350c:	e027      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	0c9b      	lsrs	r3, r3, #18
 8003512:	f003 030f 	and.w	r3, r3, #15
 8003516:	4a17      	ldr	r2, [pc, #92]	; (8003574 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003518:	5cd3      	ldrb	r3, [r2, r3]
 800351a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d010      	beq.n	8003548 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003526:	4b11      	ldr	r3, [pc, #68]	; (800356c <HAL_RCC_GetSysClockFreq+0x94>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	0c5b      	lsrs	r3, r3, #17
 800352c:	f003 0301 	and.w	r3, r3, #1
 8003530:	4a11      	ldr	r2, [pc, #68]	; (8003578 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003532:	5cd3      	ldrb	r3, [r2, r3]
 8003534:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a0d      	ldr	r2, [pc, #52]	; (8003570 <HAL_RCC_GetSysClockFreq+0x98>)
 800353a:	fb03 f202 	mul.w	r2, r3, r2
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	fbb2 f3f3 	udiv	r3, r2, r3
 8003544:	617b      	str	r3, [r7, #20]
 8003546:	e004      	b.n	8003552 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a0c      	ldr	r2, [pc, #48]	; (800357c <HAL_RCC_GetSysClockFreq+0xa4>)
 800354c:	fb02 f303 	mul.w	r3, r2, r3
 8003550:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	613b      	str	r3, [r7, #16]
      break;
 8003556:	e002      	b.n	800355e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003558:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCC_GetSysClockFreq+0x98>)
 800355a:	613b      	str	r3, [r7, #16]
      break;
 800355c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355e:	693b      	ldr	r3, [r7, #16]
}
 8003560:	4618      	mov	r0, r3
 8003562:	371c      	adds	r7, #28
 8003564:	46bd      	mov	sp, r7
 8003566:	bc80      	pop	{r7}
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	40021000 	.word	0x40021000
 8003570:	007a1200 	.word	0x007a1200
 8003574:	08006a58 	.word	0x08006a58
 8003578:	08006a68 	.word	0x08006a68
 800357c:	003d0900 	.word	0x003d0900

08003580 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003580:	b480      	push	{r7}
 8003582:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003584:	4b02      	ldr	r3, [pc, #8]	; (8003590 <HAL_RCC_GetHCLKFreq+0x10>)
 8003586:	681b      	ldr	r3, [r3, #0]
}
 8003588:	4618      	mov	r0, r3
 800358a:	46bd      	mov	sp, r7
 800358c:	bc80      	pop	{r7}
 800358e:	4770      	bx	lr
 8003590:	20000008 	.word	0x20000008

08003594 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003598:	f7ff fff2 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 800359c:	4602      	mov	r2, r0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	0a1b      	lsrs	r3, r3, #8
 80035a4:	f003 0307 	and.w	r3, r3, #7
 80035a8:	4903      	ldr	r1, [pc, #12]	; (80035b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035aa:	5ccb      	ldrb	r3, [r1, r3]
 80035ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035b0:	4618      	mov	r0, r3
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	08006a50 	.word	0x08006a50

080035bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035c0:	f7ff ffde 	bl	8003580 <HAL_RCC_GetHCLKFreq>
 80035c4:	4602      	mov	r2, r0
 80035c6:	4b05      	ldr	r3, [pc, #20]	; (80035dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	0adb      	lsrs	r3, r3, #11
 80035cc:	f003 0307 	and.w	r3, r3, #7
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035d2:	5ccb      	ldrb	r3, [r1, r3]
 80035d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d8:	4618      	mov	r0, r3
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	08006a50 	.word	0x08006a50

080035e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b085      	sub	sp, #20
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035ec:	4b0a      	ldr	r3, [pc, #40]	; (8003618 <RCC_Delay+0x34>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	; (800361c <RCC_Delay+0x38>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	0a5b      	lsrs	r3, r3, #9
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	fb02 f303 	mul.w	r3, r2, r3
 80035fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003600:	bf00      	nop
  }
  while (Delay --);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1e5a      	subs	r2, r3, #1
 8003606:	60fa      	str	r2, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1f9      	bne.n	8003600 <RCC_Delay+0x1c>
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3714      	adds	r7, #20
 8003612:	46bd      	mov	sp, r7
 8003614:	bc80      	pop	{r7}
 8003616:	4770      	bx	lr
 8003618:	20000008 	.word	0x20000008
 800361c:	10624dd3 	.word	0x10624dd3

08003620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e076      	b.n	8003720 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003642:	d009      	beq.n	8003658 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
 800364a:	e005      	b.n	8003658 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fd fd56 	bl	8001124 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036dc:	ea42 0103 	orr.w	r1, r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	0c1a      	lsrs	r2, r3, #16
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f002 0204 	and.w	r2, r2, #4
 80036fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	69da      	ldr	r2, [r3, #28]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800370e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3708      	adds	r7, #8
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	4613      	mov	r3, r2
 8003736:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003738:	2300      	movs	r3, #0
 800373a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_SPI_Transmit+0x22>
 8003746:	2302      	movs	r3, #2
 8003748:	e12d      	b.n	80039a6 <HAL_SPI_Transmit+0x27e>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003752:	f7fe f9e9 	bl	8001b28 <HAL_GetTick>
 8003756:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003758:	88fb      	ldrh	r3, [r7, #6]
 800375a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	d002      	beq.n	800376e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003768:	2302      	movs	r3, #2
 800376a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800376c:	e116      	b.n	800399c <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d002      	beq.n	800377a <HAL_SPI_Transmit+0x52>
 8003774:	88fb      	ldrh	r3, [r7, #6]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800377e:	e10d      	b.n	800399c <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2203      	movs	r2, #3
 8003784:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	88fa      	ldrh	r2, [r7, #6]
 8003798:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	88fa      	ldrh	r2, [r7, #6]
 800379e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	2200      	movs	r2, #0
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2200      	movs	r2, #0
 80037b0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	689b      	ldr	r3, [r3, #8]
 80037c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037c6:	d10f      	bne.n	80037e8 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037e6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f2:	2b40      	cmp	r3, #64	; 0x40
 80037f4:	d007      	beq.n	8003806 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003804:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800380e:	d14f      	bne.n	80038b0 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_SPI_Transmit+0xf6>
 8003818:	8afb      	ldrh	r3, [r7, #22]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d142      	bne.n	80038a4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003842:	e02f      	b.n	80038a4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d112      	bne.n	8003878 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	881a      	ldrh	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	1c9a      	adds	r2, r3, #2
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386c:	b29b      	uxth	r3, r3
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	86da      	strh	r2, [r3, #54]	; 0x36
 8003876:	e015      	b.n	80038a4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003878:	f7fe f956 	bl	8001b28 <HAL_GetTick>
 800387c:	4602      	mov	r2, r0
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	683a      	ldr	r2, [r7, #0]
 8003884:	429a      	cmp	r2, r3
 8003886:	d803      	bhi.n	8003890 <HAL_SPI_Transmit+0x168>
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800388e:	d102      	bne.n	8003896 <HAL_SPI_Transmit+0x16e>
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d106      	bne.n	80038a4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 80038a2:	e07b      	b.n	800399c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ca      	bne.n	8003844 <HAL_SPI_Transmit+0x11c>
 80038ae:	e050      	b.n	8003952 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <HAL_SPI_Transmit+0x196>
 80038b8:	8afb      	ldrh	r3, [r7, #22]
 80038ba:	2b01      	cmp	r3, #1
 80038bc:	d144      	bne.n	8003948 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	330c      	adds	r3, #12
 80038c8:	7812      	ldrb	r2, [r2, #0]
 80038ca:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d0:	1c5a      	adds	r2, r3, #1
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038da:	b29b      	uxth	r3, r3
 80038dc:	3b01      	subs	r3, #1
 80038de:	b29a      	uxth	r2, r3
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038e4:	e030      	b.n	8003948 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	f003 0302 	and.w	r3, r3, #2
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d113      	bne.n	800391c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	330c      	adds	r3, #12
 80038fe:	7812      	ldrb	r2, [r2, #0]
 8003900:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	1c5a      	adds	r2, r3, #1
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003910:	b29b      	uxth	r3, r3
 8003912:	3b01      	subs	r3, #1
 8003914:	b29a      	uxth	r2, r3
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	86da      	strh	r2, [r3, #54]	; 0x36
 800391a:	e015      	b.n	8003948 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391c:	f7fe f904 	bl	8001b28 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	429a      	cmp	r2, r3
 800392a:	d803      	bhi.n	8003934 <HAL_SPI_Transmit+0x20c>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003932:	d102      	bne.n	800393a <HAL_SPI_Transmit+0x212>
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d106      	bne.n	8003948 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003946:	e029      	b.n	800399c <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800394c:	b29b      	uxth	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1c9      	bne.n	80038e6 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	6839      	ldr	r1, [r7, #0]
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f000 fa6e 	bl	8003e38 <SPI_EndRxTxTransaction>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d002      	beq.n	8003968 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2220      	movs	r2, #32
 8003966:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10a      	bne.n	8003986 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	613b      	str	r3, [r7, #16]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398a:	2b00      	cmp	r3, #0
 800398c:	d002      	beq.n	8003994 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e003      	b.n	800399c <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3720      	adds	r7, #32
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b08c      	sub	sp, #48	; 0x30
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	60f8      	str	r0, [r7, #12]
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039bc:	2301      	movs	r3, #1
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_SPI_TransmitReceive+0x26>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e198      	b.n	8003d06 <HAL_SPI_TransmitReceive+0x358>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039dc:	f7fe f8a4 	bl	8001b28 <HAL_GetTick>
 80039e0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80039f2:	887b      	ldrh	r3, [r7, #2]
 80039f4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80039f6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d00f      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0x70>
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a04:	d107      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d103      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x68>
 8003a0e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a12:	2b04      	cmp	r3, #4
 8003a14:	d003      	beq.n	8003a1e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a16:	2302      	movs	r3, #2
 8003a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a1c:	e16d      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_SPI_TransmitReceive+0x82>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d002      	beq.n	8003a30 <HAL_SPI_TransmitReceive+0x82>
 8003a2a:	887b      	ldrh	r3, [r7, #2]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d103      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a36:	e160      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b04      	cmp	r3, #4
 8003a42:	d003      	beq.n	8003a4c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2205      	movs	r2, #5
 8003a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	887a      	ldrh	r2, [r7, #2]
 8003a5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	887a      	ldrh	r2, [r7, #2]
 8003a62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	887a      	ldrh	r2, [r7, #2]
 8003a6e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	887a      	ldrh	r2, [r7, #2]
 8003a74:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8c:	2b40      	cmp	r3, #64	; 0x40
 8003a8e:	d007      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa8:	d17c      	bne.n	8003ba4 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d002      	beq.n	8003ab8 <HAL_SPI_TransmitReceive+0x10a>
 8003ab2:	8b7b      	ldrh	r3, [r7, #26]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d16a      	bne.n	8003b8e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	881a      	ldrh	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	1c9a      	adds	r2, r3, #2
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	b29a      	uxth	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003adc:	e057      	b.n	8003b8e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d11b      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x176>
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d016      	beq.n	8003b24 <HAL_SPI_TransmitReceive+0x176>
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d113      	bne.n	8003b24 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b00:	881a      	ldrh	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	1c9a      	adds	r2, r3, #2
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b20:	2300      	movs	r3, #0
 8003b22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d119      	bne.n	8003b66 <HAL_SPI_TransmitReceive+0x1b8>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d014      	beq.n	8003b66 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68da      	ldr	r2, [r3, #12]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b46:	b292      	uxth	r2, r2
 8003b48:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b4e:	1c9a      	adds	r2, r3, #2
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	3b01      	subs	r3, #1
 8003b5c:	b29a      	uxth	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b62:	2301      	movs	r3, #1
 8003b64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003b66:	f7fd ffdf 	bl	8001b28 <HAL_GetTick>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6e:	1ad3      	subs	r3, r2, r3
 8003b70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b72:	429a      	cmp	r2, r3
 8003b74:	d80b      	bhi.n	8003b8e <HAL_SPI_TransmitReceive+0x1e0>
 8003b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d007      	beq.n	8003b8e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003b8c:	e0b5      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1a2      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x130>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d19d      	bne.n	8003ade <HAL_SPI_TransmitReceive+0x130>
 8003ba2:	e080      	b.n	8003ca6 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_SPI_TransmitReceive+0x204>
 8003bac:	8b7b      	ldrh	r3, [r7, #26]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	d16f      	bne.n	8003c92 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	330c      	adds	r3, #12
 8003bbc:	7812      	ldrb	r2, [r2, #0]
 8003bbe:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc4:	1c5a      	adds	r2, r3, #1
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	3b01      	subs	r3, #1
 8003bd2:	b29a      	uxth	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bd8:	e05b      	b.n	8003c92 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d11c      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x274>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bec:	b29b      	uxth	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d017      	beq.n	8003c22 <HAL_SPI_TransmitReceive+0x274>
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d114      	bne.n	8003c22 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	330c      	adds	r3, #12
 8003c02:	7812      	ldrb	r2, [r2, #0]
 8003c04:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	1c5a      	adds	r2, r3, #1
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	3b01      	subs	r3, #1
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f003 0301 	and.w	r3, r3, #1
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d119      	bne.n	8003c64 <HAL_SPI_TransmitReceive+0x2b6>
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d014      	beq.n	8003c64 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68da      	ldr	r2, [r3, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	3b01      	subs	r3, #1
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003c60:	2301      	movs	r3, #1
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003c64:	f7fd ff60 	bl	8001b28 <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d803      	bhi.n	8003c7c <HAL_SPI_TransmitReceive+0x2ce>
 8003c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c7a:	d102      	bne.n	8003c82 <HAL_SPI_TransmitReceive+0x2d4>
 8003c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d107      	bne.n	8003c92 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 8003c90:	e033      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c96:	b29b      	uxth	r3, r3
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d19e      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x22c>
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d199      	bne.n	8003bda <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ca6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003caa:	68f8      	ldr	r0, [r7, #12]
 8003cac:	f000 f8c4 	bl	8003e38 <SPI_EndRxTxTransaction>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d006      	beq.n	8003cc4 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003cc2:	e01a      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	689b      	ldr	r3, [r3, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d10a      	bne.n	8003ce2 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ccc:	2300      	movs	r3, #0
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	617b      	str	r3, [r7, #20]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	617b      	str	r3, [r7, #20]
 8003ce0:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d003      	beq.n	8003cf2 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf0:	e003      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d02:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3730      	adds	r7, #48	; 0x30
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b083      	sub	sp, #12
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d1c:	b2db      	uxtb	r3, r3
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	370c      	adds	r7, #12
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	603b      	str	r3, [r7, #0]
 8003d34:	4613      	mov	r3, r2
 8003d36:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d38:	f7fd fef6 	bl	8001b28 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	4413      	add	r3, r2
 8003d46:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d48:	f7fd feee 	bl	8001b28 <HAL_GetTick>
 8003d4c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d4e:	4b39      	ldr	r3, [pc, #228]	; (8003e34 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	015b      	lsls	r3, r3, #5
 8003d54:	0d1b      	lsrs	r3, r3, #20
 8003d56:	69fa      	ldr	r2, [r7, #28]
 8003d58:	fb02 f303 	mul.w	r3, r2, r3
 8003d5c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d5e:	e054      	b.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d66:	d050      	beq.n	8003e0a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d68:	f7fd fede 	bl	8001b28 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d902      	bls.n	8003d7e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d13d      	bne.n	8003dfa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d8c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d96:	d111      	bne.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003da0:	d004      	beq.n	8003dac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	689b      	ldr	r3, [r3, #8]
 8003da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003daa:	d107      	bne.n	8003dbc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc4:	d10f      	bne.n	8003de6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dd4:	601a      	str	r2, [r3, #0]
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003de4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e017      	b.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d101      	bne.n	8003e04 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	689a      	ldr	r2, [r3, #8]
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	4013      	ands	r3, r2
 8003e14:	68ba      	ldr	r2, [r7, #8]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	bf0c      	ite	eq
 8003e1a:	2301      	moveq	r3, #1
 8003e1c:	2300      	movne	r3, #0
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d19b      	bne.n	8003d60 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3720      	adds	r7, #32
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	20000008 	.word	0x20000008

08003e38 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b086      	sub	sp, #24
 8003e3c:	af02      	add	r7, sp, #8
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	9300      	str	r3, [sp, #0]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	2180      	movs	r1, #128	; 0x80
 8003e4e:	68f8      	ldr	r0, [r7, #12]
 8003e50:	f7ff ff6a 	bl	8003d28 <SPI_WaitFlagStateUntilTimeout>
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d007      	beq.n	8003e6a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5e:	f043 0220 	orr.w	r2, r3, #32
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e000      	b.n	8003e6c <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003e6a:	2300      	movs	r3, #0
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}

08003e74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e042      	b.n	8003f0c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d106      	bne.n	8003ea0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f7fd fd80 	bl	80019a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2224      	movs	r2, #36	; 0x24
 8003ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003eb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fd71 	bl	80049a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ecc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	695a      	ldr	r2, [r3, #20]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003edc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003eec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2220      	movs	r2, #32
 8003f00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3708      	adds	r7, #8
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08a      	sub	sp, #40	; 0x28
 8003f18:	af02      	add	r7, sp, #8
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f24:	2300      	movs	r3, #0
 8003f26:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b20      	cmp	r3, #32
 8003f32:	d16d      	bne.n	8004010 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <HAL_UART_Transmit+0x2c>
 8003f3a:	88fb      	ldrh	r3, [r7, #6]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d101      	bne.n	8003f44 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	e066      	b.n	8004012 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	2200      	movs	r2, #0
 8003f48:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2221      	movs	r2, #33	; 0x21
 8003f4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f52:	f7fd fde9 	bl	8001b28 <HAL_GetTick>
 8003f56:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	88fa      	ldrh	r2, [r7, #6]
 8003f5c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	88fa      	ldrh	r2, [r7, #6]
 8003f62:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6c:	d108      	bne.n	8003f80 <HAL_UART_Transmit+0x6c>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d104      	bne.n	8003f80 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e003      	b.n	8003f88 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f88:	e02a      	b.n	8003fe0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2180      	movs	r1, #128	; 0x80
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 faf9 	bl	800458c <UART_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e036      	b.n	8004012 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10b      	bne.n	8003fc2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	881b      	ldrh	r3, [r3, #0]
 8003fae:	461a      	mov	r2, r3
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	3302      	adds	r3, #2
 8003fbe:	61bb      	str	r3, [r7, #24]
 8003fc0:	e007      	b.n	8003fd2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	781a      	ldrb	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1cf      	bne.n	8003f8a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2140      	movs	r1, #64	; 0x40
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fac9 	bl	800458c <UART_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004000:	2303      	movs	r3, #3
 8004002:	e006      	b.n	8004012 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2220      	movs	r2, #32
 8004008:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800400c:	2300      	movs	r3, #0
 800400e:	e000      	b.n	8004012 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004010:	2302      	movs	r3, #2
  }
}
 8004012:	4618      	mov	r0, r3
 8004014:	3720      	adds	r7, #32
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}
	...

0800401c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b0ba      	sub	sp, #232	; 0xe8
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	695b      	ldr	r3, [r3, #20]
 800403e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004042:	2300      	movs	r3, #0
 8004044:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004048:	2300      	movs	r3, #0
 800404a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800404e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004052:	f003 030f 	and.w	r3, r3, #15
 8004056:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800405a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10f      	bne.n	8004082 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004062:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004066:	f003 0320 	and.w	r3, r3, #32
 800406a:	2b00      	cmp	r3, #0
 800406c:	d009      	beq.n	8004082 <HAL_UART_IRQHandler+0x66>
 800406e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004072:	f003 0320 	and.w	r3, r3, #32
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 fbd1 	bl	8004822 <UART_Receive_IT>
      return;
 8004080:	e25b      	b.n	800453a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004082:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 80de 	beq.w	8004248 <HAL_UART_IRQHandler+0x22c>
 800408c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d106      	bne.n	80040a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	f000 80d1 	beq.w	8004248 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80040a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00b      	beq.n	80040ca <HAL_UART_IRQHandler+0xae>
 80040b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c2:	f043 0201 	orr.w	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00b      	beq.n	80040ee <HAL_UART_IRQHandler+0xd2>
 80040d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040da:	f003 0301 	and.w	r3, r3, #1
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d005      	beq.n	80040ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040e6:	f043 0202 	orr.w	r2, r3, #2
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00b      	beq.n	8004112 <HAL_UART_IRQHandler+0xf6>
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f043 0204 	orr.w	r2, r3, #4
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d011      	beq.n	8004142 <HAL_UART_IRQHandler+0x126>
 800411e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004122:	f003 0320 	and.w	r3, r3, #32
 8004126:	2b00      	cmp	r3, #0
 8004128:	d105      	bne.n	8004136 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800412a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b00      	cmp	r3, #0
 8004134:	d005      	beq.n	8004142 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800413a:	f043 0208 	orr.w	r2, r3, #8
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 81f2 	beq.w	8004530 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800414c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d008      	beq.n	800416a <HAL_UART_IRQHandler+0x14e>
 8004158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800415c:	f003 0320 	and.w	r3, r3, #32
 8004160:	2b00      	cmp	r3, #0
 8004162:	d002      	beq.n	800416a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fb5c 	bl	8004822 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	695b      	ldr	r3, [r3, #20]
 8004170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004174:	2b00      	cmp	r3, #0
 8004176:	bf14      	ite	ne
 8004178:	2301      	movne	r3, #1
 800417a:	2300      	moveq	r3, #0
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004186:	f003 0308 	and.w	r3, r3, #8
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <HAL_UART_IRQHandler+0x17a>
 800418e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004192:	2b00      	cmp	r3, #0
 8004194:	d04f      	beq.n	8004236 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f000 fa66 	bl	8004668 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d041      	beq.n	800422e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80041b8:	e853 3f00 	ldrex	r3, [r3]
 80041bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80041c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80041c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	3314      	adds	r3, #20
 80041d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041e6:	e841 2300 	strex	r3, r2, [r1]
 80041ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1d9      	bne.n	80041aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d013      	beq.n	8004226 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004202:	4a7e      	ldr	r2, [pc, #504]	; (80043fc <HAL_UART_IRQHandler+0x3e0>)
 8004204:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800420a:	4618      	mov	r0, r3
 800420c:	f7fd fe02 	bl	8001e14 <HAL_DMA_Abort_IT>
 8004210:	4603      	mov	r3, r0
 8004212:	2b00      	cmp	r3, #0
 8004214:	d016      	beq.n	8004244 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800421a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800421c:	687a      	ldr	r2, [r7, #4]
 800421e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004220:	4610      	mov	r0, r2
 8004222:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004224:	e00e      	b.n	8004244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f99c 	bl	8004564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800422c:	e00a      	b.n	8004244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 f998 	bl	8004564 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004234:	e006      	b.n	8004244 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f994 	bl	8004564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004242:	e175      	b.n	8004530 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004244:	bf00      	nop
    return;
 8004246:	e173      	b.n	8004530 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424c:	2b01      	cmp	r3, #1
 800424e:	f040 814f 	bne.w	80044f0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004256:	f003 0310 	and.w	r3, r3, #16
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 8148 	beq.w	80044f0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 8141 	beq.w	80044f0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800426e:	2300      	movs	r3, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60bb      	str	r3, [r7, #8]
 8004282:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 80b6 	beq.w	8004400 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 8145 	beq.w	8004534 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80042ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042b2:	429a      	cmp	r2, r3
 80042b4:	f080 813e 	bcs.w	8004534 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042be:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c4:	699b      	ldr	r3, [r3, #24]
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	f000 8088 	beq.w	80043dc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	330c      	adds	r3, #12
 80042f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042f8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004300:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004304:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004308:	e841 2300 	strex	r3, r2, [r1]
 800430c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004310:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004314:	2b00      	cmp	r3, #0
 8004316:	d1d9      	bne.n	80042cc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	3314      	adds	r3, #20
 800431e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004328:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800432a:	f023 0301 	bic.w	r3, r3, #1
 800432e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	3314      	adds	r3, #20
 8004338:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800433c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004340:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004344:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800434e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e1      	bne.n	8004318 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	3314      	adds	r3, #20
 800435a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800435e:	e853 3f00 	ldrex	r3, [r3]
 8004362:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004364:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004366:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800436a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3314      	adds	r3, #20
 8004374:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004378:	66fa      	str	r2, [r7, #108]	; 0x6c
 800437a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800437e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e3      	bne.n	8004354 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2220      	movs	r2, #32
 8004390:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043a4:	e853 3f00 	ldrex	r3, [r3]
 80043a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043ac:	f023 0310 	bic.w	r3, r3, #16
 80043b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	330c      	adds	r3, #12
 80043ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80043be:	65ba      	str	r2, [r7, #88]	; 0x58
 80043c0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80043c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80043c6:	e841 2300 	strex	r3, r2, [r1]
 80043ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80043cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d1e3      	bne.n	800439a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7fd fce1 	bl	8001d9e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	4619      	mov	r1, r3
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 f8bf 	bl	8004576 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043f8:	e09c      	b.n	8004534 <HAL_UART_IRQHandler+0x518>
 80043fa:	bf00      	nop
 80043fc:	0800472d 	.word	0x0800472d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004408:	b29b      	uxth	r3, r3
 800440a:	1ad3      	subs	r3, r2, r3
 800440c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004414:	b29b      	uxth	r3, r3
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 808e 	beq.w	8004538 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800441c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8089 	beq.w	8004538 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	330c      	adds	r3, #12
 800442c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800442e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004430:	e853 3f00 	ldrex	r3, [r3]
 8004434:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004438:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800443c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	330c      	adds	r3, #12
 8004446:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800444a:	647a      	str	r2, [r7, #68]	; 0x44
 800444c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004450:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004452:	e841 2300 	strex	r3, r2, [r1]
 8004456:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1e3      	bne.n	8004426 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	3314      	adds	r3, #20
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	e853 3f00 	ldrex	r3, [r3]
 800446c:	623b      	str	r3, [r7, #32]
   return(result);
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	f023 0301 	bic.w	r3, r3, #1
 8004474:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3314      	adds	r3, #20
 800447e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004482:	633a      	str	r2, [r7, #48]	; 0x30
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004488:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800448a:	e841 2300 	strex	r3, r2, [r1]
 800448e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1e3      	bne.n	800445e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	330c      	adds	r3, #12
 80044aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	e853 3f00 	ldrex	r3, [r3]
 80044b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0310 	bic.w	r3, r3, #16
 80044ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	330c      	adds	r3, #12
 80044c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80044c8:	61fa      	str	r2, [r7, #28]
 80044ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	69b9      	ldr	r1, [r7, #24]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	617b      	str	r3, [r7, #20]
   return(result);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e3      	bne.n	80044a4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044e2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044e6:	4619      	mov	r1, r3
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f844 	bl	8004576 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044ee:	e023      	b.n	8004538 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d009      	beq.n	8004510 <HAL_UART_IRQHandler+0x4f4>
 80044fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	f000 f923 	bl	8004754 <UART_Transmit_IT>
    return;
 800450e:	e014      	b.n	800453a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004518:	2b00      	cmp	r3, #0
 800451a:	d00e      	beq.n	800453a <HAL_UART_IRQHandler+0x51e>
 800451c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f962 	bl	80047f2 <UART_EndTransmit_IT>
    return;
 800452e:	e004      	b.n	800453a <HAL_UART_IRQHandler+0x51e>
    return;
 8004530:	bf00      	nop
 8004532:	e002      	b.n	800453a <HAL_UART_IRQHandler+0x51e>
      return;
 8004534:	bf00      	nop
 8004536:	e000      	b.n	800453a <HAL_UART_IRQHandler+0x51e>
      return;
 8004538:	bf00      	nop
  }
}
 800453a:	37e8      	adds	r7, #232	; 0xe8
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004540:	b480      	push	{r7}
 8004542:	b083      	sub	sp, #12
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	bc80      	pop	{r7}
 8004550:	4770      	bx	lr

08004552 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004552:	b480      	push	{r7}
 8004554:	b083      	sub	sp, #12
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800455a:	bf00      	nop
 800455c:	370c      	adds	r7, #12
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004564:	b480      	push	{r7}
 8004566:	b083      	sub	sp, #12
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800456c:	bf00      	nop
 800456e:	370c      	adds	r7, #12
 8004570:	46bd      	mov	sp, r7
 8004572:	bc80      	pop	{r7}
 8004574:	4770      	bx	lr

08004576 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004576:	b480      	push	{r7}
 8004578:	b083      	sub	sp, #12
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b090      	sub	sp, #64	; 0x40
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	603b      	str	r3, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800459c:	e050      	b.n	8004640 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d04c      	beq.n	8004640 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80045a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d007      	beq.n	80045bc <UART_WaitOnFlagUntilTimeout+0x30>
 80045ac:	f7fd fabc 	bl	8001b28 <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d241      	bcs.n	8004640 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	330c      	adds	r3, #12
 80045da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045dc:	637a      	str	r2, [r7, #52]	; 0x34
 80045de:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80045e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80045ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e5      	bne.n	80045bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3314      	adds	r3, #20
 80045f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f023 0301 	bic.w	r3, r3, #1
 8004606:	63bb      	str	r3, [r7, #56]	; 0x38
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	3314      	adds	r3, #20
 800460e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004610:	623a      	str	r2, [r7, #32]
 8004612:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004614:	69f9      	ldr	r1, [r7, #28]
 8004616:	6a3a      	ldr	r2, [r7, #32]
 8004618:	e841 2300 	strex	r3, r2, [r1]
 800461c:	61bb      	str	r3, [r7, #24]
   return(result);
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d1e5      	bne.n	80045f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2220      	movs	r2, #32
 8004628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e00f      	b.n	8004660 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4013      	ands	r3, r2
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	bf0c      	ite	eq
 8004650:	2301      	moveq	r3, #1
 8004652:	2300      	movne	r3, #0
 8004654:	b2db      	uxtb	r3, r3
 8004656:	461a      	mov	r2, r3
 8004658:	79fb      	ldrb	r3, [r7, #7]
 800465a:	429a      	cmp	r2, r3
 800465c:	d09f      	beq.n	800459e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3740      	adds	r7, #64	; 0x40
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004668:	b480      	push	{r7}
 800466a:	b095      	sub	sp, #84	; 0x54
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	330c      	adds	r3, #12
 8004676:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800467a:	e853 3f00 	ldrex	r3, [r3]
 800467e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004682:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004686:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	330c      	adds	r3, #12
 800468e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004690:	643a      	str	r2, [r7, #64]	; 0x40
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004694:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004696:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004698:	e841 2300 	strex	r3, r2, [r1]
 800469c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1e5      	bne.n	8004670 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	3314      	adds	r3, #20
 80046aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ac:	6a3b      	ldr	r3, [r7, #32]
 80046ae:	e853 3f00 	ldrex	r3, [r3]
 80046b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	f023 0301 	bic.w	r3, r3, #1
 80046ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	3314      	adds	r3, #20
 80046c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80046c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80046ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046cc:	e841 2300 	strex	r3, r2, [r1]
 80046d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1e5      	bne.n	80046a4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d119      	bne.n	8004714 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	330c      	adds	r3, #12
 80046e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	e853 3f00 	ldrex	r3, [r3]
 80046ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	f023 0310 	bic.w	r3, r3, #16
 80046f6:	647b      	str	r3, [r7, #68]	; 0x44
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	330c      	adds	r3, #12
 80046fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004700:	61ba      	str	r2, [r7, #24]
 8004702:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	6979      	ldr	r1, [r7, #20]
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	613b      	str	r3, [r7, #16]
   return(result);
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e5      	bne.n	80046e0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2220      	movs	r2, #32
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004722:	bf00      	nop
 8004724:	3754      	adds	r7, #84	; 0x54
 8004726:	46bd      	mov	sp, r7
 8004728:	bc80      	pop	{r7}
 800472a:	4770      	bx	lr

0800472c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2200      	movs	r2, #0
 800473e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2200      	movs	r2, #0
 8004744:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff ff0c 	bl	8004564 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800474c:	bf00      	nop
 800474e:	3710      	adds	r7, #16
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b21      	cmp	r3, #33	; 0x21
 8004766:	d13e      	bne.n	80047e6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004770:	d114      	bne.n	800479c <UART_Transmit_IT+0x48>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d110      	bne.n	800479c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	881b      	ldrh	r3, [r3, #0]
 8004784:	461a      	mov	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800478e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	1c9a      	adds	r2, r3, #2
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	621a      	str	r2, [r3, #32]
 800479a:	e008      	b.n	80047ae <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	1c59      	adds	r1, r3, #1
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6211      	str	r1, [r2, #32]
 80047a6:	781a      	ldrb	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047b2:	b29b      	uxth	r3, r3
 80047b4:	3b01      	subs	r3, #1
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	4619      	mov	r1, r3
 80047bc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10f      	bne.n	80047e2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	68da      	ldr	r2, [r3, #12]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047d0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047e0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e000      	b.n	80047e8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047e6:	2302      	movs	r3, #2
  }
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3714      	adds	r7, #20
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bc80      	pop	{r7}
 80047f0:	4770      	bx	lr

080047f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004808:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2220      	movs	r2, #32
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f7ff fe94 	bl	8004540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004822:	b580      	push	{r7, lr}
 8004824:	b08c      	sub	sp, #48	; 0x30
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b22      	cmp	r3, #34	; 0x22
 8004834:	f040 80ae 	bne.w	8004994 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004840:	d117      	bne.n	8004872 <UART_Receive_IT+0x50>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	691b      	ldr	r3, [r3, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d113      	bne.n	8004872 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800484a:	2300      	movs	r3, #0
 800484c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004860:	b29a      	uxth	r2, r3
 8004862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004864:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	1c9a      	adds	r2, r3, #2
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	629a      	str	r2, [r3, #40]	; 0x28
 8004870:	e026      	b.n	80048c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004876:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004878:	2300      	movs	r3, #0
 800487a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004884:	d007      	beq.n	8004896 <UART_Receive_IT+0x74>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d10a      	bne.n	80048a4 <UART_Receive_IT+0x82>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	b2da      	uxtb	r2, r3
 800489e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048a0:	701a      	strb	r2, [r3, #0]
 80048a2:	e008      	b.n	80048b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048b0:	b2da      	uxtb	r2, r3
 80048b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	4619      	mov	r1, r3
 80048ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d15d      	bne.n	8004990 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f022 0220 	bic.w	r2, r2, #32
 80048e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68da      	ldr	r2, [r3, #12]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	695a      	ldr	r2, [r3, #20]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f022 0201 	bic.w	r2, r2, #1
 8004902:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2220      	movs	r2, #32
 8004908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004916:	2b01      	cmp	r3, #1
 8004918:	d135      	bne.n	8004986 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	330c      	adds	r3, #12
 8004926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	613b      	str	r3, [r7, #16]
   return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f023 0310 	bic.w	r3, r3, #16
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	330c      	adds	r3, #12
 800493e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004940:	623a      	str	r2, [r7, #32]
 8004942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	69f9      	ldr	r1, [r7, #28]
 8004946:	6a3a      	ldr	r2, [r7, #32]
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	61bb      	str	r3, [r7, #24]
   return(result);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e5      	bne.n	8004920 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0310 	and.w	r3, r3, #16
 800495e:	2b10      	cmp	r3, #16
 8004960:	d10a      	bne.n	8004978 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	60fb      	str	r3, [r7, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	60fb      	str	r3, [r7, #12]
 8004976:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f7ff fdf9 	bl	8004576 <HAL_UARTEx_RxEventCallback>
 8004984:	e002      	b.n	800498c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f7ff fde3 	bl	8004552 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800498c:	2300      	movs	r3, #0
 800498e:	e002      	b.n	8004996 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	e000      	b.n	8004996 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004994:	2302      	movs	r3, #2
  }
}
 8004996:	4618      	mov	r0, r3
 8004998:	3730      	adds	r7, #48	; 0x30
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
	...

080049a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691b      	ldr	r3, [r3, #16]
 80049ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	430a      	orrs	r2, r1
 80049bc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	689a      	ldr	r2, [r3, #8]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	691b      	ldr	r3, [r3, #16]
 80049c6:	431a      	orrs	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	695b      	ldr	r3, [r3, #20]
 80049cc:	4313      	orrs	r3, r2
 80049ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80049da:	f023 030c 	bic.w	r3, r3, #12
 80049de:	687a      	ldr	r2, [r7, #4]
 80049e0:	6812      	ldr	r2, [r2, #0]
 80049e2:	68b9      	ldr	r1, [r7, #8]
 80049e4:	430b      	orrs	r3, r1
 80049e6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a2c      	ldr	r2, [pc, #176]	; (8004ab4 <UART_SetConfig+0x114>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d103      	bne.n	8004a10 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a08:	f7fe fdd8 	bl	80035bc <HAL_RCC_GetPCLK2Freq>
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	e002      	b.n	8004a16 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a10:	f7fe fdc0 	bl	8003594 <HAL_RCC_GetPCLK1Freq>
 8004a14:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4613      	mov	r3, r2
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009a      	lsls	r2, r3, #2
 8004a20:	441a      	add	r2, r3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a2c:	4a22      	ldr	r2, [pc, #136]	; (8004ab8 <UART_SetConfig+0x118>)
 8004a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a32:	095b      	lsrs	r3, r3, #5
 8004a34:	0119      	lsls	r1, r3, #4
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	4613      	mov	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	4413      	add	r3, r2
 8004a3e:	009a      	lsls	r2, r3, #2
 8004a40:	441a      	add	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	009b      	lsls	r3, r3, #2
 8004a48:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a4c:	4b1a      	ldr	r3, [pc, #104]	; (8004ab8 <UART_SetConfig+0x118>)
 8004a4e:	fba3 0302 	umull	r0, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	2064      	movs	r0, #100	; 0x64
 8004a56:	fb00 f303 	mul.w	r3, r0, r3
 8004a5a:	1ad3      	subs	r3, r2, r3
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	3332      	adds	r3, #50	; 0x32
 8004a60:	4a15      	ldr	r2, [pc, #84]	; (8004ab8 <UART_SetConfig+0x118>)
 8004a62:	fba2 2303 	umull	r2, r3, r2, r3
 8004a66:	095b      	lsrs	r3, r3, #5
 8004a68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a6c:	4419      	add	r1, r3
 8004a6e:	68fa      	ldr	r2, [r7, #12]
 8004a70:	4613      	mov	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	4413      	add	r3, r2
 8004a76:	009a      	lsls	r2, r3, #2
 8004a78:	441a      	add	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a84:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <UART_SetConfig+0x118>)
 8004a86:	fba3 0302 	umull	r0, r3, r3, r2
 8004a8a:	095b      	lsrs	r3, r3, #5
 8004a8c:	2064      	movs	r0, #100	; 0x64
 8004a8e:	fb00 f303 	mul.w	r3, r0, r3
 8004a92:	1ad3      	subs	r3, r2, r3
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	3332      	adds	r3, #50	; 0x32
 8004a98:	4a07      	ldr	r2, [pc, #28]	; (8004ab8 <UART_SetConfig+0x118>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	095b      	lsrs	r3, r3, #5
 8004aa0:	f003 020f 	and.w	r2, r3, #15
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	40013800 	.word	0x40013800
 8004ab8:	51eb851f 	.word	0x51eb851f

08004abc <std>:
 8004abc:	2300      	movs	r3, #0
 8004abe:	b510      	push	{r4, lr}
 8004ac0:	4604      	mov	r4, r0
 8004ac2:	e9c0 3300 	strd	r3, r3, [r0]
 8004ac6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aca:	6083      	str	r3, [r0, #8]
 8004acc:	8181      	strh	r1, [r0, #12]
 8004ace:	6643      	str	r3, [r0, #100]	; 0x64
 8004ad0:	81c2      	strh	r2, [r0, #14]
 8004ad2:	6183      	str	r3, [r0, #24]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	2208      	movs	r2, #8
 8004ad8:	305c      	adds	r0, #92	; 0x5c
 8004ada:	f000 f9f7 	bl	8004ecc <memset>
 8004ade:	4b0d      	ldr	r3, [pc, #52]	; (8004b14 <std+0x58>)
 8004ae0:	6224      	str	r4, [r4, #32]
 8004ae2:	6263      	str	r3, [r4, #36]	; 0x24
 8004ae4:	4b0c      	ldr	r3, [pc, #48]	; (8004b18 <std+0x5c>)
 8004ae6:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ae8:	4b0c      	ldr	r3, [pc, #48]	; (8004b1c <std+0x60>)
 8004aea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004aec:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <std+0x64>)
 8004aee:	6323      	str	r3, [r4, #48]	; 0x30
 8004af0:	4b0c      	ldr	r3, [pc, #48]	; (8004b24 <std+0x68>)
 8004af2:	429c      	cmp	r4, r3
 8004af4:	d006      	beq.n	8004b04 <std+0x48>
 8004af6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8004afa:	4294      	cmp	r4, r2
 8004afc:	d002      	beq.n	8004b04 <std+0x48>
 8004afe:	33d0      	adds	r3, #208	; 0xd0
 8004b00:	429c      	cmp	r4, r3
 8004b02:	d105      	bne.n	8004b10 <std+0x54>
 8004b04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b0c:	f000 bab2 	b.w	8005074 <__retarget_lock_init_recursive>
 8004b10:	bd10      	pop	{r4, pc}
 8004b12:	bf00      	nop
 8004b14:	08004d1d 	.word	0x08004d1d
 8004b18:	08004d3f 	.word	0x08004d3f
 8004b1c:	08004d77 	.word	0x08004d77
 8004b20:	08004d9b 	.word	0x08004d9b
 8004b24:	200008cc 	.word	0x200008cc

08004b28 <stdio_exit_handler>:
 8004b28:	4a02      	ldr	r2, [pc, #8]	; (8004b34 <stdio_exit_handler+0xc>)
 8004b2a:	4903      	ldr	r1, [pc, #12]	; (8004b38 <stdio_exit_handler+0x10>)
 8004b2c:	4803      	ldr	r0, [pc, #12]	; (8004b3c <stdio_exit_handler+0x14>)
 8004b2e:	f000 b869 	b.w	8004c04 <_fwalk_sglue>
 8004b32:	bf00      	nop
 8004b34:	20000014 	.word	0x20000014
 8004b38:	0800598d 	.word	0x0800598d
 8004b3c:	20000020 	.word	0x20000020

08004b40 <cleanup_stdio>:
 8004b40:	6841      	ldr	r1, [r0, #4]
 8004b42:	4b0c      	ldr	r3, [pc, #48]	; (8004b74 <cleanup_stdio+0x34>)
 8004b44:	b510      	push	{r4, lr}
 8004b46:	4299      	cmp	r1, r3
 8004b48:	4604      	mov	r4, r0
 8004b4a:	d001      	beq.n	8004b50 <cleanup_stdio+0x10>
 8004b4c:	f000 ff1e 	bl	800598c <_fflush_r>
 8004b50:	68a1      	ldr	r1, [r4, #8]
 8004b52:	4b09      	ldr	r3, [pc, #36]	; (8004b78 <cleanup_stdio+0x38>)
 8004b54:	4299      	cmp	r1, r3
 8004b56:	d002      	beq.n	8004b5e <cleanup_stdio+0x1e>
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f000 ff17 	bl	800598c <_fflush_r>
 8004b5e:	68e1      	ldr	r1, [r4, #12]
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <cleanup_stdio+0x3c>)
 8004b62:	4299      	cmp	r1, r3
 8004b64:	d004      	beq.n	8004b70 <cleanup_stdio+0x30>
 8004b66:	4620      	mov	r0, r4
 8004b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b6c:	f000 bf0e 	b.w	800598c <_fflush_r>
 8004b70:	bd10      	pop	{r4, pc}
 8004b72:	bf00      	nop
 8004b74:	200008cc 	.word	0x200008cc
 8004b78:	20000934 	.word	0x20000934
 8004b7c:	2000099c 	.word	0x2000099c

08004b80 <global_stdio_init.part.0>:
 8004b80:	b510      	push	{r4, lr}
 8004b82:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <global_stdio_init.part.0+0x30>)
 8004b84:	4c0b      	ldr	r4, [pc, #44]	; (8004bb4 <global_stdio_init.part.0+0x34>)
 8004b86:	4a0c      	ldr	r2, [pc, #48]	; (8004bb8 <global_stdio_init.part.0+0x38>)
 8004b88:	4620      	mov	r0, r4
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	2104      	movs	r1, #4
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f7ff ff94 	bl	8004abc <std>
 8004b94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004b98:	2201      	movs	r2, #1
 8004b9a:	2109      	movs	r1, #9
 8004b9c:	f7ff ff8e 	bl	8004abc <std>
 8004ba0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004baa:	2112      	movs	r1, #18
 8004bac:	f7ff bf86 	b.w	8004abc <std>
 8004bb0:	20000a04 	.word	0x20000a04
 8004bb4:	200008cc 	.word	0x200008cc
 8004bb8:	08004b29 	.word	0x08004b29

08004bbc <__sfp_lock_acquire>:
 8004bbc:	4801      	ldr	r0, [pc, #4]	; (8004bc4 <__sfp_lock_acquire+0x8>)
 8004bbe:	f000 ba5a 	b.w	8005076 <__retarget_lock_acquire_recursive>
 8004bc2:	bf00      	nop
 8004bc4:	20000a0d 	.word	0x20000a0d

08004bc8 <__sfp_lock_release>:
 8004bc8:	4801      	ldr	r0, [pc, #4]	; (8004bd0 <__sfp_lock_release+0x8>)
 8004bca:	f000 ba55 	b.w	8005078 <__retarget_lock_release_recursive>
 8004bce:	bf00      	nop
 8004bd0:	20000a0d 	.word	0x20000a0d

08004bd4 <__sinit>:
 8004bd4:	b510      	push	{r4, lr}
 8004bd6:	4604      	mov	r4, r0
 8004bd8:	f7ff fff0 	bl	8004bbc <__sfp_lock_acquire>
 8004bdc:	6a23      	ldr	r3, [r4, #32]
 8004bde:	b11b      	cbz	r3, 8004be8 <__sinit+0x14>
 8004be0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004be4:	f7ff bff0 	b.w	8004bc8 <__sfp_lock_release>
 8004be8:	4b04      	ldr	r3, [pc, #16]	; (8004bfc <__sinit+0x28>)
 8004bea:	6223      	str	r3, [r4, #32]
 8004bec:	4b04      	ldr	r3, [pc, #16]	; (8004c00 <__sinit+0x2c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f5      	bne.n	8004be0 <__sinit+0xc>
 8004bf4:	f7ff ffc4 	bl	8004b80 <global_stdio_init.part.0>
 8004bf8:	e7f2      	b.n	8004be0 <__sinit+0xc>
 8004bfa:	bf00      	nop
 8004bfc:	08004b41 	.word	0x08004b41
 8004c00:	20000a04 	.word	0x20000a04

08004c04 <_fwalk_sglue>:
 8004c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c08:	4607      	mov	r7, r0
 8004c0a:	4688      	mov	r8, r1
 8004c0c:	4614      	mov	r4, r2
 8004c0e:	2600      	movs	r6, #0
 8004c10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004c14:	f1b9 0901 	subs.w	r9, r9, #1
 8004c18:	d505      	bpl.n	8004c26 <_fwalk_sglue+0x22>
 8004c1a:	6824      	ldr	r4, [r4, #0]
 8004c1c:	2c00      	cmp	r4, #0
 8004c1e:	d1f7      	bne.n	8004c10 <_fwalk_sglue+0xc>
 8004c20:	4630      	mov	r0, r6
 8004c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c26:	89ab      	ldrh	r3, [r5, #12]
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d907      	bls.n	8004c3c <_fwalk_sglue+0x38>
 8004c2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c30:	3301      	adds	r3, #1
 8004c32:	d003      	beq.n	8004c3c <_fwalk_sglue+0x38>
 8004c34:	4629      	mov	r1, r5
 8004c36:	4638      	mov	r0, r7
 8004c38:	47c0      	blx	r8
 8004c3a:	4306      	orrs	r6, r0
 8004c3c:	3568      	adds	r5, #104	; 0x68
 8004c3e:	e7e9      	b.n	8004c14 <_fwalk_sglue+0x10>

08004c40 <iprintf>:
 8004c40:	b40f      	push	{r0, r1, r2, r3}
 8004c42:	b507      	push	{r0, r1, r2, lr}
 8004c44:	4906      	ldr	r1, [pc, #24]	; (8004c60 <iprintf+0x20>)
 8004c46:	ab04      	add	r3, sp, #16
 8004c48:	6808      	ldr	r0, [r1, #0]
 8004c4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c4e:	6881      	ldr	r1, [r0, #8]
 8004c50:	9301      	str	r3, [sp, #4]
 8004c52:	f000 fb6b 	bl	800532c <_vfiprintf_r>
 8004c56:	b003      	add	sp, #12
 8004c58:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c5c:	b004      	add	sp, #16
 8004c5e:	4770      	bx	lr
 8004c60:	2000006c 	.word	0x2000006c

08004c64 <_puts_r>:
 8004c64:	6a03      	ldr	r3, [r0, #32]
 8004c66:	b570      	push	{r4, r5, r6, lr}
 8004c68:	4605      	mov	r5, r0
 8004c6a:	460e      	mov	r6, r1
 8004c6c:	6884      	ldr	r4, [r0, #8]
 8004c6e:	b90b      	cbnz	r3, 8004c74 <_puts_r+0x10>
 8004c70:	f7ff ffb0 	bl	8004bd4 <__sinit>
 8004c74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c76:	07db      	lsls	r3, r3, #31
 8004c78:	d405      	bmi.n	8004c86 <_puts_r+0x22>
 8004c7a:	89a3      	ldrh	r3, [r4, #12]
 8004c7c:	0598      	lsls	r0, r3, #22
 8004c7e:	d402      	bmi.n	8004c86 <_puts_r+0x22>
 8004c80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c82:	f000 f9f8 	bl	8005076 <__retarget_lock_acquire_recursive>
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	0719      	lsls	r1, r3, #28
 8004c8a:	d513      	bpl.n	8004cb4 <_puts_r+0x50>
 8004c8c:	6923      	ldr	r3, [r4, #16]
 8004c8e:	b18b      	cbz	r3, 8004cb4 <_puts_r+0x50>
 8004c90:	3e01      	subs	r6, #1
 8004c92:	68a3      	ldr	r3, [r4, #8]
 8004c94:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	60a3      	str	r3, [r4, #8]
 8004c9c:	b9e9      	cbnz	r1, 8004cda <_puts_r+0x76>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	da2e      	bge.n	8004d00 <_puts_r+0x9c>
 8004ca2:	4622      	mov	r2, r4
 8004ca4:	210a      	movs	r1, #10
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 f87b 	bl	8004da2 <__swbuf_r>
 8004cac:	3001      	adds	r0, #1
 8004cae:	d007      	beq.n	8004cc0 <_puts_r+0x5c>
 8004cb0:	250a      	movs	r5, #10
 8004cb2:	e007      	b.n	8004cc4 <_puts_r+0x60>
 8004cb4:	4621      	mov	r1, r4
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f000 f8b0 	bl	8004e1c <__swsetup_r>
 8004cbc:	2800      	cmp	r0, #0
 8004cbe:	d0e7      	beq.n	8004c90 <_puts_r+0x2c>
 8004cc0:	f04f 35ff 	mov.w	r5, #4294967295
 8004cc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004cc6:	07da      	lsls	r2, r3, #31
 8004cc8:	d405      	bmi.n	8004cd6 <_puts_r+0x72>
 8004cca:	89a3      	ldrh	r3, [r4, #12]
 8004ccc:	059b      	lsls	r3, r3, #22
 8004cce:	d402      	bmi.n	8004cd6 <_puts_r+0x72>
 8004cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004cd2:	f000 f9d1 	bl	8005078 <__retarget_lock_release_recursive>
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	bd70      	pop	{r4, r5, r6, pc}
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	da04      	bge.n	8004ce8 <_puts_r+0x84>
 8004cde:	69a2      	ldr	r2, [r4, #24]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	dc06      	bgt.n	8004cf2 <_puts_r+0x8e>
 8004ce4:	290a      	cmp	r1, #10
 8004ce6:	d004      	beq.n	8004cf2 <_puts_r+0x8e>
 8004ce8:	6823      	ldr	r3, [r4, #0]
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	6022      	str	r2, [r4, #0]
 8004cee:	7019      	strb	r1, [r3, #0]
 8004cf0:	e7cf      	b.n	8004c92 <_puts_r+0x2e>
 8004cf2:	4622      	mov	r2, r4
 8004cf4:	4628      	mov	r0, r5
 8004cf6:	f000 f854 	bl	8004da2 <__swbuf_r>
 8004cfa:	3001      	adds	r0, #1
 8004cfc:	d1c9      	bne.n	8004c92 <_puts_r+0x2e>
 8004cfe:	e7df      	b.n	8004cc0 <_puts_r+0x5c>
 8004d00:	250a      	movs	r5, #10
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	6022      	str	r2, [r4, #0]
 8004d08:	701d      	strb	r5, [r3, #0]
 8004d0a:	e7db      	b.n	8004cc4 <_puts_r+0x60>

08004d0c <puts>:
 8004d0c:	4b02      	ldr	r3, [pc, #8]	; (8004d18 <puts+0xc>)
 8004d0e:	4601      	mov	r1, r0
 8004d10:	6818      	ldr	r0, [r3, #0]
 8004d12:	f7ff bfa7 	b.w	8004c64 <_puts_r>
 8004d16:	bf00      	nop
 8004d18:	2000006c 	.word	0x2000006c

08004d1c <__sread>:
 8004d1c:	b510      	push	{r4, lr}
 8004d1e:	460c      	mov	r4, r1
 8004d20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d24:	f000 f958 	bl	8004fd8 <_read_r>
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	bfab      	itete	ge
 8004d2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004d2e:	89a3      	ldrhlt	r3, [r4, #12]
 8004d30:	181b      	addge	r3, r3, r0
 8004d32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004d36:	bfac      	ite	ge
 8004d38:	6563      	strge	r3, [r4, #84]	; 0x54
 8004d3a:	81a3      	strhlt	r3, [r4, #12]
 8004d3c:	bd10      	pop	{r4, pc}

08004d3e <__swrite>:
 8004d3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d42:	461f      	mov	r7, r3
 8004d44:	898b      	ldrh	r3, [r1, #12]
 8004d46:	4605      	mov	r5, r0
 8004d48:	05db      	lsls	r3, r3, #23
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	4616      	mov	r6, r2
 8004d4e:	d505      	bpl.n	8004d5c <__swrite+0x1e>
 8004d50:	2302      	movs	r3, #2
 8004d52:	2200      	movs	r2, #0
 8004d54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d58:	f000 f92c 	bl	8004fb4 <_lseek_r>
 8004d5c:	89a3      	ldrh	r3, [r4, #12]
 8004d5e:	4632      	mov	r2, r6
 8004d60:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d64:	81a3      	strh	r3, [r4, #12]
 8004d66:	4628      	mov	r0, r5
 8004d68:	463b      	mov	r3, r7
 8004d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004d6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d72:	f000 b943 	b.w	8004ffc <_write_r>

08004d76 <__sseek>:
 8004d76:	b510      	push	{r4, lr}
 8004d78:	460c      	mov	r4, r1
 8004d7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d7e:	f000 f919 	bl	8004fb4 <_lseek_r>
 8004d82:	1c43      	adds	r3, r0, #1
 8004d84:	89a3      	ldrh	r3, [r4, #12]
 8004d86:	bf15      	itete	ne
 8004d88:	6560      	strne	r0, [r4, #84]	; 0x54
 8004d8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004d8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004d92:	81a3      	strheq	r3, [r4, #12]
 8004d94:	bf18      	it	ne
 8004d96:	81a3      	strhne	r3, [r4, #12]
 8004d98:	bd10      	pop	{r4, pc}

08004d9a <__sclose>:
 8004d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d9e:	f000 b8f9 	b.w	8004f94 <_close_r>

08004da2 <__swbuf_r>:
 8004da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da4:	460e      	mov	r6, r1
 8004da6:	4614      	mov	r4, r2
 8004da8:	4605      	mov	r5, r0
 8004daa:	b118      	cbz	r0, 8004db4 <__swbuf_r+0x12>
 8004dac:	6a03      	ldr	r3, [r0, #32]
 8004dae:	b90b      	cbnz	r3, 8004db4 <__swbuf_r+0x12>
 8004db0:	f7ff ff10 	bl	8004bd4 <__sinit>
 8004db4:	69a3      	ldr	r3, [r4, #24]
 8004db6:	60a3      	str	r3, [r4, #8]
 8004db8:	89a3      	ldrh	r3, [r4, #12]
 8004dba:	071a      	lsls	r2, r3, #28
 8004dbc:	d525      	bpl.n	8004e0a <__swbuf_r+0x68>
 8004dbe:	6923      	ldr	r3, [r4, #16]
 8004dc0:	b31b      	cbz	r3, 8004e0a <__swbuf_r+0x68>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	6922      	ldr	r2, [r4, #16]
 8004dc6:	b2f6      	uxtb	r6, r6
 8004dc8:	1a98      	subs	r0, r3, r2
 8004dca:	6963      	ldr	r3, [r4, #20]
 8004dcc:	4637      	mov	r7, r6
 8004dce:	4283      	cmp	r3, r0
 8004dd0:	dc04      	bgt.n	8004ddc <__swbuf_r+0x3a>
 8004dd2:	4621      	mov	r1, r4
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	f000 fdd9 	bl	800598c <_fflush_r>
 8004dda:	b9e0      	cbnz	r0, 8004e16 <__swbuf_r+0x74>
 8004ddc:	68a3      	ldr	r3, [r4, #8]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	60a3      	str	r3, [r4, #8]
 8004de2:	6823      	ldr	r3, [r4, #0]
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	6022      	str	r2, [r4, #0]
 8004de8:	701e      	strb	r6, [r3, #0]
 8004dea:	6962      	ldr	r2, [r4, #20]
 8004dec:	1c43      	adds	r3, r0, #1
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d004      	beq.n	8004dfc <__swbuf_r+0x5a>
 8004df2:	89a3      	ldrh	r3, [r4, #12]
 8004df4:	07db      	lsls	r3, r3, #31
 8004df6:	d506      	bpl.n	8004e06 <__swbuf_r+0x64>
 8004df8:	2e0a      	cmp	r6, #10
 8004dfa:	d104      	bne.n	8004e06 <__swbuf_r+0x64>
 8004dfc:	4621      	mov	r1, r4
 8004dfe:	4628      	mov	r0, r5
 8004e00:	f000 fdc4 	bl	800598c <_fflush_r>
 8004e04:	b938      	cbnz	r0, 8004e16 <__swbuf_r+0x74>
 8004e06:	4638      	mov	r0, r7
 8004e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e0a:	4621      	mov	r1, r4
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	f000 f805 	bl	8004e1c <__swsetup_r>
 8004e12:	2800      	cmp	r0, #0
 8004e14:	d0d5      	beq.n	8004dc2 <__swbuf_r+0x20>
 8004e16:	f04f 37ff 	mov.w	r7, #4294967295
 8004e1a:	e7f4      	b.n	8004e06 <__swbuf_r+0x64>

08004e1c <__swsetup_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <__swsetup_r+0xac>)
 8004e20:	4605      	mov	r5, r0
 8004e22:	6818      	ldr	r0, [r3, #0]
 8004e24:	460c      	mov	r4, r1
 8004e26:	b118      	cbz	r0, 8004e30 <__swsetup_r+0x14>
 8004e28:	6a03      	ldr	r3, [r0, #32]
 8004e2a:	b90b      	cbnz	r3, 8004e30 <__swsetup_r+0x14>
 8004e2c:	f7ff fed2 	bl	8004bd4 <__sinit>
 8004e30:	89a3      	ldrh	r3, [r4, #12]
 8004e32:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e36:	0718      	lsls	r0, r3, #28
 8004e38:	d422      	bmi.n	8004e80 <__swsetup_r+0x64>
 8004e3a:	06d9      	lsls	r1, r3, #27
 8004e3c:	d407      	bmi.n	8004e4e <__swsetup_r+0x32>
 8004e3e:	2309      	movs	r3, #9
 8004e40:	602b      	str	r3, [r5, #0]
 8004e42:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e46:	f04f 30ff 	mov.w	r0, #4294967295
 8004e4a:	81a3      	strh	r3, [r4, #12]
 8004e4c:	e034      	b.n	8004eb8 <__swsetup_r+0x9c>
 8004e4e:	0758      	lsls	r0, r3, #29
 8004e50:	d512      	bpl.n	8004e78 <__swsetup_r+0x5c>
 8004e52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004e54:	b141      	cbz	r1, 8004e68 <__swsetup_r+0x4c>
 8004e56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004e5a:	4299      	cmp	r1, r3
 8004e5c:	d002      	beq.n	8004e64 <__swsetup_r+0x48>
 8004e5e:	4628      	mov	r0, r5
 8004e60:	f000 f940 	bl	80050e4 <_free_r>
 8004e64:	2300      	movs	r3, #0
 8004e66:	6363      	str	r3, [r4, #52]	; 0x34
 8004e68:	89a3      	ldrh	r3, [r4, #12]
 8004e6a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004e6e:	81a3      	strh	r3, [r4, #12]
 8004e70:	2300      	movs	r3, #0
 8004e72:	6063      	str	r3, [r4, #4]
 8004e74:	6923      	ldr	r3, [r4, #16]
 8004e76:	6023      	str	r3, [r4, #0]
 8004e78:	89a3      	ldrh	r3, [r4, #12]
 8004e7a:	f043 0308 	orr.w	r3, r3, #8
 8004e7e:	81a3      	strh	r3, [r4, #12]
 8004e80:	6923      	ldr	r3, [r4, #16]
 8004e82:	b94b      	cbnz	r3, 8004e98 <__swsetup_r+0x7c>
 8004e84:	89a3      	ldrh	r3, [r4, #12]
 8004e86:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8e:	d003      	beq.n	8004e98 <__swsetup_r+0x7c>
 8004e90:	4621      	mov	r1, r4
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 fdd9 	bl	8005a4a <__smakebuf_r>
 8004e98:	89a0      	ldrh	r0, [r4, #12]
 8004e9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e9e:	f010 0301 	ands.w	r3, r0, #1
 8004ea2:	d00a      	beq.n	8004eba <__swsetup_r+0x9e>
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60a3      	str	r3, [r4, #8]
 8004ea8:	6963      	ldr	r3, [r4, #20]
 8004eaa:	425b      	negs	r3, r3
 8004eac:	61a3      	str	r3, [r4, #24]
 8004eae:	6923      	ldr	r3, [r4, #16]
 8004eb0:	b943      	cbnz	r3, 8004ec4 <__swsetup_r+0xa8>
 8004eb2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004eb6:	d1c4      	bne.n	8004e42 <__swsetup_r+0x26>
 8004eb8:	bd38      	pop	{r3, r4, r5, pc}
 8004eba:	0781      	lsls	r1, r0, #30
 8004ebc:	bf58      	it	pl
 8004ebe:	6963      	ldrpl	r3, [r4, #20]
 8004ec0:	60a3      	str	r3, [r4, #8]
 8004ec2:	e7f4      	b.n	8004eae <__swsetup_r+0x92>
 8004ec4:	2000      	movs	r0, #0
 8004ec6:	e7f7      	b.n	8004eb8 <__swsetup_r+0x9c>
 8004ec8:	2000006c 	.word	0x2000006c

08004ecc <memset>:
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4402      	add	r2, r0
 8004ed0:	4293      	cmp	r3, r2
 8004ed2:	d100      	bne.n	8004ed6 <memset+0xa>
 8004ed4:	4770      	bx	lr
 8004ed6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eda:	e7f9      	b.n	8004ed0 <memset+0x4>

08004edc <strtok>:
 8004edc:	4b16      	ldr	r3, [pc, #88]	; (8004f38 <strtok+0x5c>)
 8004ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ee2:	681f      	ldr	r7, [r3, #0]
 8004ee4:	4605      	mov	r5, r0
 8004ee6:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8004ee8:	460e      	mov	r6, r1
 8004eea:	b9ec      	cbnz	r4, 8004f28 <strtok+0x4c>
 8004eec:	2050      	movs	r0, #80	; 0x50
 8004eee:	f000 f941 	bl	8005174 <malloc>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	6478      	str	r0, [r7, #68]	; 0x44
 8004ef6:	b920      	cbnz	r0, 8004f02 <strtok+0x26>
 8004ef8:	215b      	movs	r1, #91	; 0x5b
 8004efa:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <strtok+0x60>)
 8004efc:	4810      	ldr	r0, [pc, #64]	; (8004f40 <strtok+0x64>)
 8004efe:	f000 f8d3 	bl	80050a8 <__assert_func>
 8004f02:	e9c0 4400 	strd	r4, r4, [r0]
 8004f06:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004f0a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004f0e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004f12:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004f16:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004f1a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004f1e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004f22:	6184      	str	r4, [r0, #24]
 8004f24:	7704      	strb	r4, [r0, #28]
 8004f26:	6244      	str	r4, [r0, #36]	; 0x24
 8004f28:	4631      	mov	r1, r6
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004f34:	f000 b806 	b.w	8004f44 <__strtok_r>
 8004f38:	2000006c 	.word	0x2000006c
 8004f3c:	08006a6a 	.word	0x08006a6a
 8004f40:	08006a81 	.word	0x08006a81

08004f44 <__strtok_r>:
 8004f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f46:	b908      	cbnz	r0, 8004f4c <__strtok_r+0x8>
 8004f48:	6810      	ldr	r0, [r2, #0]
 8004f4a:	b188      	cbz	r0, 8004f70 <__strtok_r+0x2c>
 8004f4c:	4604      	mov	r4, r0
 8004f4e:	460f      	mov	r7, r1
 8004f50:	4620      	mov	r0, r4
 8004f52:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004f56:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004f5a:	b91e      	cbnz	r6, 8004f64 <__strtok_r+0x20>
 8004f5c:	b965      	cbnz	r5, 8004f78 <__strtok_r+0x34>
 8004f5e:	4628      	mov	r0, r5
 8004f60:	6015      	str	r5, [r2, #0]
 8004f62:	e005      	b.n	8004f70 <__strtok_r+0x2c>
 8004f64:	42b5      	cmp	r5, r6
 8004f66:	d1f6      	bne.n	8004f56 <__strtok_r+0x12>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f0      	bne.n	8004f4e <__strtok_r+0xa>
 8004f6c:	6014      	str	r4, [r2, #0]
 8004f6e:	7003      	strb	r3, [r0, #0]
 8004f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f72:	461c      	mov	r4, r3
 8004f74:	e00c      	b.n	8004f90 <__strtok_r+0x4c>
 8004f76:	b915      	cbnz	r5, 8004f7e <__strtok_r+0x3a>
 8004f78:	460e      	mov	r6, r1
 8004f7a:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004f7e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004f82:	42ab      	cmp	r3, r5
 8004f84:	d1f7      	bne.n	8004f76 <__strtok_r+0x32>
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0f3      	beq.n	8004f72 <__strtok_r+0x2e>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004f90:	6014      	str	r4, [r2, #0]
 8004f92:	e7ed      	b.n	8004f70 <__strtok_r+0x2c>

08004f94 <_close_r>:
 8004f94:	b538      	push	{r3, r4, r5, lr}
 8004f96:	2300      	movs	r3, #0
 8004f98:	4d05      	ldr	r5, [pc, #20]	; (8004fb0 <_close_r+0x1c>)
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	602b      	str	r3, [r5, #0]
 8004fa0:	f7fc fc68 	bl	8001874 <_close>
 8004fa4:	1c43      	adds	r3, r0, #1
 8004fa6:	d102      	bne.n	8004fae <_close_r+0x1a>
 8004fa8:	682b      	ldr	r3, [r5, #0]
 8004faa:	b103      	cbz	r3, 8004fae <_close_r+0x1a>
 8004fac:	6023      	str	r3, [r4, #0]
 8004fae:	bd38      	pop	{r3, r4, r5, pc}
 8004fb0:	20000a08 	.word	0x20000a08

08004fb4 <_lseek_r>:
 8004fb4:	b538      	push	{r3, r4, r5, lr}
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	4608      	mov	r0, r1
 8004fba:	4611      	mov	r1, r2
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	4d05      	ldr	r5, [pc, #20]	; (8004fd4 <_lseek_r+0x20>)
 8004fc0:	602a      	str	r2, [r5, #0]
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7fc fc7a 	bl	80018bc <_lseek>
 8004fc8:	1c43      	adds	r3, r0, #1
 8004fca:	d102      	bne.n	8004fd2 <_lseek_r+0x1e>
 8004fcc:	682b      	ldr	r3, [r5, #0]
 8004fce:	b103      	cbz	r3, 8004fd2 <_lseek_r+0x1e>
 8004fd0:	6023      	str	r3, [r4, #0]
 8004fd2:	bd38      	pop	{r3, r4, r5, pc}
 8004fd4:	20000a08 	.word	0x20000a08

08004fd8 <_read_r>:
 8004fd8:	b538      	push	{r3, r4, r5, lr}
 8004fda:	4604      	mov	r4, r0
 8004fdc:	4608      	mov	r0, r1
 8004fde:	4611      	mov	r1, r2
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	4d05      	ldr	r5, [pc, #20]	; (8004ff8 <_read_r+0x20>)
 8004fe4:	602a      	str	r2, [r5, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f7fc fc27 	bl	800183a <_read>
 8004fec:	1c43      	adds	r3, r0, #1
 8004fee:	d102      	bne.n	8004ff6 <_read_r+0x1e>
 8004ff0:	682b      	ldr	r3, [r5, #0]
 8004ff2:	b103      	cbz	r3, 8004ff6 <_read_r+0x1e>
 8004ff4:	6023      	str	r3, [r4, #0]
 8004ff6:	bd38      	pop	{r3, r4, r5, pc}
 8004ff8:	20000a08 	.word	0x20000a08

08004ffc <_write_r>:
 8004ffc:	b538      	push	{r3, r4, r5, lr}
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	2200      	movs	r2, #0
 8005006:	4d05      	ldr	r5, [pc, #20]	; (800501c <_write_r+0x20>)
 8005008:	602a      	str	r2, [r5, #0]
 800500a:	461a      	mov	r2, r3
 800500c:	f7fb fef8 	bl	8000e00 <_write>
 8005010:	1c43      	adds	r3, r0, #1
 8005012:	d102      	bne.n	800501a <_write_r+0x1e>
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	b103      	cbz	r3, 800501a <_write_r+0x1e>
 8005018:	6023      	str	r3, [r4, #0]
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	20000a08 	.word	0x20000a08

08005020 <__errno>:
 8005020:	4b01      	ldr	r3, [pc, #4]	; (8005028 <__errno+0x8>)
 8005022:	6818      	ldr	r0, [r3, #0]
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	2000006c 	.word	0x2000006c

0800502c <__libc_init_array>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	2600      	movs	r6, #0
 8005030:	4d0c      	ldr	r5, [pc, #48]	; (8005064 <__libc_init_array+0x38>)
 8005032:	4c0d      	ldr	r4, [pc, #52]	; (8005068 <__libc_init_array+0x3c>)
 8005034:	1b64      	subs	r4, r4, r5
 8005036:	10a4      	asrs	r4, r4, #2
 8005038:	42a6      	cmp	r6, r4
 800503a:	d109      	bne.n	8005050 <__libc_init_array+0x24>
 800503c:	f000 fdce 	bl	8005bdc <_init>
 8005040:	2600      	movs	r6, #0
 8005042:	4d0a      	ldr	r5, [pc, #40]	; (800506c <__libc_init_array+0x40>)
 8005044:	4c0a      	ldr	r4, [pc, #40]	; (8005070 <__libc_init_array+0x44>)
 8005046:	1b64      	subs	r4, r4, r5
 8005048:	10a4      	asrs	r4, r4, #2
 800504a:	42a6      	cmp	r6, r4
 800504c:	d105      	bne.n	800505a <__libc_init_array+0x2e>
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	f855 3b04 	ldr.w	r3, [r5], #4
 8005054:	4798      	blx	r3
 8005056:	3601      	adds	r6, #1
 8005058:	e7ee      	b.n	8005038 <__libc_init_array+0xc>
 800505a:	f855 3b04 	ldr.w	r3, [r5], #4
 800505e:	4798      	blx	r3
 8005060:	3601      	adds	r6, #1
 8005062:	e7f2      	b.n	800504a <__libc_init_array+0x1e>
 8005064:	08006b54 	.word	0x08006b54
 8005068:	08006b54 	.word	0x08006b54
 800506c:	08006b54 	.word	0x08006b54
 8005070:	08006b58 	.word	0x08006b58

08005074 <__retarget_lock_init_recursive>:
 8005074:	4770      	bx	lr

08005076 <__retarget_lock_acquire_recursive>:
 8005076:	4770      	bx	lr

08005078 <__retarget_lock_release_recursive>:
 8005078:	4770      	bx	lr

0800507a <strcpy>:
 800507a:	4603      	mov	r3, r0
 800507c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005080:	f803 2b01 	strb.w	r2, [r3], #1
 8005084:	2a00      	cmp	r2, #0
 8005086:	d1f9      	bne.n	800507c <strcpy+0x2>
 8005088:	4770      	bx	lr

0800508a <memcpy>:
 800508a:	440a      	add	r2, r1
 800508c:	4291      	cmp	r1, r2
 800508e:	f100 33ff 	add.w	r3, r0, #4294967295
 8005092:	d100      	bne.n	8005096 <memcpy+0xc>
 8005094:	4770      	bx	lr
 8005096:	b510      	push	{r4, lr}
 8005098:	f811 4b01 	ldrb.w	r4, [r1], #1
 800509c:	4291      	cmp	r1, r2
 800509e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050a2:	d1f9      	bne.n	8005098 <memcpy+0xe>
 80050a4:	bd10      	pop	{r4, pc}
	...

080050a8 <__assert_func>:
 80050a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80050aa:	4614      	mov	r4, r2
 80050ac:	461a      	mov	r2, r3
 80050ae:	4b09      	ldr	r3, [pc, #36]	; (80050d4 <__assert_func+0x2c>)
 80050b0:	4605      	mov	r5, r0
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68d8      	ldr	r0, [r3, #12]
 80050b6:	b14c      	cbz	r4, 80050cc <__assert_func+0x24>
 80050b8:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <__assert_func+0x30>)
 80050ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80050be:	9100      	str	r1, [sp, #0]
 80050c0:	462b      	mov	r3, r5
 80050c2:	4906      	ldr	r1, [pc, #24]	; (80050dc <__assert_func+0x34>)
 80050c4:	f000 fc8a 	bl	80059dc <fiprintf>
 80050c8:	f000 fd3c 	bl	8005b44 <abort>
 80050cc:	4b04      	ldr	r3, [pc, #16]	; (80050e0 <__assert_func+0x38>)
 80050ce:	461c      	mov	r4, r3
 80050d0:	e7f3      	b.n	80050ba <__assert_func+0x12>
 80050d2:	bf00      	nop
 80050d4:	2000006c 	.word	0x2000006c
 80050d8:	08006adb 	.word	0x08006adb
 80050dc:	08006ae8 	.word	0x08006ae8
 80050e0:	08006b16 	.word	0x08006b16

080050e4 <_free_r>:
 80050e4:	b538      	push	{r3, r4, r5, lr}
 80050e6:	4605      	mov	r5, r0
 80050e8:	2900      	cmp	r1, #0
 80050ea:	d040      	beq.n	800516e <_free_r+0x8a>
 80050ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f0:	1f0c      	subs	r4, r1, #4
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	bfb8      	it	lt
 80050f6:	18e4      	addlt	r4, r4, r3
 80050f8:	f000 f8e4 	bl	80052c4 <__malloc_lock>
 80050fc:	4a1c      	ldr	r2, [pc, #112]	; (8005170 <_free_r+0x8c>)
 80050fe:	6813      	ldr	r3, [r2, #0]
 8005100:	b933      	cbnz	r3, 8005110 <_free_r+0x2c>
 8005102:	6063      	str	r3, [r4, #4]
 8005104:	6014      	str	r4, [r2, #0]
 8005106:	4628      	mov	r0, r5
 8005108:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800510c:	f000 b8e0 	b.w	80052d0 <__malloc_unlock>
 8005110:	42a3      	cmp	r3, r4
 8005112:	d908      	bls.n	8005126 <_free_r+0x42>
 8005114:	6820      	ldr	r0, [r4, #0]
 8005116:	1821      	adds	r1, r4, r0
 8005118:	428b      	cmp	r3, r1
 800511a:	bf01      	itttt	eq
 800511c:	6819      	ldreq	r1, [r3, #0]
 800511e:	685b      	ldreq	r3, [r3, #4]
 8005120:	1809      	addeq	r1, r1, r0
 8005122:	6021      	streq	r1, [r4, #0]
 8005124:	e7ed      	b.n	8005102 <_free_r+0x1e>
 8005126:	461a      	mov	r2, r3
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	b10b      	cbz	r3, 8005130 <_free_r+0x4c>
 800512c:	42a3      	cmp	r3, r4
 800512e:	d9fa      	bls.n	8005126 <_free_r+0x42>
 8005130:	6811      	ldr	r1, [r2, #0]
 8005132:	1850      	adds	r0, r2, r1
 8005134:	42a0      	cmp	r0, r4
 8005136:	d10b      	bne.n	8005150 <_free_r+0x6c>
 8005138:	6820      	ldr	r0, [r4, #0]
 800513a:	4401      	add	r1, r0
 800513c:	1850      	adds	r0, r2, r1
 800513e:	4283      	cmp	r3, r0
 8005140:	6011      	str	r1, [r2, #0]
 8005142:	d1e0      	bne.n	8005106 <_free_r+0x22>
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	4408      	add	r0, r1
 800514a:	6010      	str	r0, [r2, #0]
 800514c:	6053      	str	r3, [r2, #4]
 800514e:	e7da      	b.n	8005106 <_free_r+0x22>
 8005150:	d902      	bls.n	8005158 <_free_r+0x74>
 8005152:	230c      	movs	r3, #12
 8005154:	602b      	str	r3, [r5, #0]
 8005156:	e7d6      	b.n	8005106 <_free_r+0x22>
 8005158:	6820      	ldr	r0, [r4, #0]
 800515a:	1821      	adds	r1, r4, r0
 800515c:	428b      	cmp	r3, r1
 800515e:	bf01      	itttt	eq
 8005160:	6819      	ldreq	r1, [r3, #0]
 8005162:	685b      	ldreq	r3, [r3, #4]
 8005164:	1809      	addeq	r1, r1, r0
 8005166:	6021      	streq	r1, [r4, #0]
 8005168:	6063      	str	r3, [r4, #4]
 800516a:	6054      	str	r4, [r2, #4]
 800516c:	e7cb      	b.n	8005106 <_free_r+0x22>
 800516e:	bd38      	pop	{r3, r4, r5, pc}
 8005170:	20000a10 	.word	0x20000a10

08005174 <malloc>:
 8005174:	4b02      	ldr	r3, [pc, #8]	; (8005180 <malloc+0xc>)
 8005176:	4601      	mov	r1, r0
 8005178:	6818      	ldr	r0, [r3, #0]
 800517a:	f000 b823 	b.w	80051c4 <_malloc_r>
 800517e:	bf00      	nop
 8005180:	2000006c 	.word	0x2000006c

08005184 <sbrk_aligned>:
 8005184:	b570      	push	{r4, r5, r6, lr}
 8005186:	4e0e      	ldr	r6, [pc, #56]	; (80051c0 <sbrk_aligned+0x3c>)
 8005188:	460c      	mov	r4, r1
 800518a:	6831      	ldr	r1, [r6, #0]
 800518c:	4605      	mov	r5, r0
 800518e:	b911      	cbnz	r1, 8005196 <sbrk_aligned+0x12>
 8005190:	f000 fcba 	bl	8005b08 <_sbrk_r>
 8005194:	6030      	str	r0, [r6, #0]
 8005196:	4621      	mov	r1, r4
 8005198:	4628      	mov	r0, r5
 800519a:	f000 fcb5 	bl	8005b08 <_sbrk_r>
 800519e:	1c43      	adds	r3, r0, #1
 80051a0:	d00a      	beq.n	80051b8 <sbrk_aligned+0x34>
 80051a2:	1cc4      	adds	r4, r0, #3
 80051a4:	f024 0403 	bic.w	r4, r4, #3
 80051a8:	42a0      	cmp	r0, r4
 80051aa:	d007      	beq.n	80051bc <sbrk_aligned+0x38>
 80051ac:	1a21      	subs	r1, r4, r0
 80051ae:	4628      	mov	r0, r5
 80051b0:	f000 fcaa 	bl	8005b08 <_sbrk_r>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d101      	bne.n	80051bc <sbrk_aligned+0x38>
 80051b8:	f04f 34ff 	mov.w	r4, #4294967295
 80051bc:	4620      	mov	r0, r4
 80051be:	bd70      	pop	{r4, r5, r6, pc}
 80051c0:	20000a14 	.word	0x20000a14

080051c4 <_malloc_r>:
 80051c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c8:	1ccd      	adds	r5, r1, #3
 80051ca:	f025 0503 	bic.w	r5, r5, #3
 80051ce:	3508      	adds	r5, #8
 80051d0:	2d0c      	cmp	r5, #12
 80051d2:	bf38      	it	cc
 80051d4:	250c      	movcc	r5, #12
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	4607      	mov	r7, r0
 80051da:	db01      	blt.n	80051e0 <_malloc_r+0x1c>
 80051dc:	42a9      	cmp	r1, r5
 80051de:	d905      	bls.n	80051ec <_malloc_r+0x28>
 80051e0:	230c      	movs	r3, #12
 80051e2:	2600      	movs	r6, #0
 80051e4:	603b      	str	r3, [r7, #0]
 80051e6:	4630      	mov	r0, r6
 80051e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ec:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80052c0 <_malloc_r+0xfc>
 80051f0:	f000 f868 	bl	80052c4 <__malloc_lock>
 80051f4:	f8d8 3000 	ldr.w	r3, [r8]
 80051f8:	461c      	mov	r4, r3
 80051fa:	bb5c      	cbnz	r4, 8005254 <_malloc_r+0x90>
 80051fc:	4629      	mov	r1, r5
 80051fe:	4638      	mov	r0, r7
 8005200:	f7ff ffc0 	bl	8005184 <sbrk_aligned>
 8005204:	1c43      	adds	r3, r0, #1
 8005206:	4604      	mov	r4, r0
 8005208:	d155      	bne.n	80052b6 <_malloc_r+0xf2>
 800520a:	f8d8 4000 	ldr.w	r4, [r8]
 800520e:	4626      	mov	r6, r4
 8005210:	2e00      	cmp	r6, #0
 8005212:	d145      	bne.n	80052a0 <_malloc_r+0xdc>
 8005214:	2c00      	cmp	r4, #0
 8005216:	d048      	beq.n	80052aa <_malloc_r+0xe6>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	4631      	mov	r1, r6
 800521c:	4638      	mov	r0, r7
 800521e:	eb04 0903 	add.w	r9, r4, r3
 8005222:	f000 fc71 	bl	8005b08 <_sbrk_r>
 8005226:	4581      	cmp	r9, r0
 8005228:	d13f      	bne.n	80052aa <_malloc_r+0xe6>
 800522a:	6821      	ldr	r1, [r4, #0]
 800522c:	4638      	mov	r0, r7
 800522e:	1a6d      	subs	r5, r5, r1
 8005230:	4629      	mov	r1, r5
 8005232:	f7ff ffa7 	bl	8005184 <sbrk_aligned>
 8005236:	3001      	adds	r0, #1
 8005238:	d037      	beq.n	80052aa <_malloc_r+0xe6>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	442b      	add	r3, r5
 800523e:	6023      	str	r3, [r4, #0]
 8005240:	f8d8 3000 	ldr.w	r3, [r8]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d038      	beq.n	80052ba <_malloc_r+0xf6>
 8005248:	685a      	ldr	r2, [r3, #4]
 800524a:	42a2      	cmp	r2, r4
 800524c:	d12b      	bne.n	80052a6 <_malloc_r+0xe2>
 800524e:	2200      	movs	r2, #0
 8005250:	605a      	str	r2, [r3, #4]
 8005252:	e00f      	b.n	8005274 <_malloc_r+0xb0>
 8005254:	6822      	ldr	r2, [r4, #0]
 8005256:	1b52      	subs	r2, r2, r5
 8005258:	d41f      	bmi.n	800529a <_malloc_r+0xd6>
 800525a:	2a0b      	cmp	r2, #11
 800525c:	d917      	bls.n	800528e <_malloc_r+0xca>
 800525e:	1961      	adds	r1, r4, r5
 8005260:	42a3      	cmp	r3, r4
 8005262:	6025      	str	r5, [r4, #0]
 8005264:	bf18      	it	ne
 8005266:	6059      	strne	r1, [r3, #4]
 8005268:	6863      	ldr	r3, [r4, #4]
 800526a:	bf08      	it	eq
 800526c:	f8c8 1000 	streq.w	r1, [r8]
 8005270:	5162      	str	r2, [r4, r5]
 8005272:	604b      	str	r3, [r1, #4]
 8005274:	4638      	mov	r0, r7
 8005276:	f104 060b 	add.w	r6, r4, #11
 800527a:	f000 f829 	bl	80052d0 <__malloc_unlock>
 800527e:	f026 0607 	bic.w	r6, r6, #7
 8005282:	1d23      	adds	r3, r4, #4
 8005284:	1af2      	subs	r2, r6, r3
 8005286:	d0ae      	beq.n	80051e6 <_malloc_r+0x22>
 8005288:	1b9b      	subs	r3, r3, r6
 800528a:	50a3      	str	r3, [r4, r2]
 800528c:	e7ab      	b.n	80051e6 <_malloc_r+0x22>
 800528e:	42a3      	cmp	r3, r4
 8005290:	6862      	ldr	r2, [r4, #4]
 8005292:	d1dd      	bne.n	8005250 <_malloc_r+0x8c>
 8005294:	f8c8 2000 	str.w	r2, [r8]
 8005298:	e7ec      	b.n	8005274 <_malloc_r+0xb0>
 800529a:	4623      	mov	r3, r4
 800529c:	6864      	ldr	r4, [r4, #4]
 800529e:	e7ac      	b.n	80051fa <_malloc_r+0x36>
 80052a0:	4634      	mov	r4, r6
 80052a2:	6876      	ldr	r6, [r6, #4]
 80052a4:	e7b4      	b.n	8005210 <_malloc_r+0x4c>
 80052a6:	4613      	mov	r3, r2
 80052a8:	e7cc      	b.n	8005244 <_malloc_r+0x80>
 80052aa:	230c      	movs	r3, #12
 80052ac:	4638      	mov	r0, r7
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	f000 f80e 	bl	80052d0 <__malloc_unlock>
 80052b4:	e797      	b.n	80051e6 <_malloc_r+0x22>
 80052b6:	6025      	str	r5, [r4, #0]
 80052b8:	e7dc      	b.n	8005274 <_malloc_r+0xb0>
 80052ba:	605b      	str	r3, [r3, #4]
 80052bc:	deff      	udf	#255	; 0xff
 80052be:	bf00      	nop
 80052c0:	20000a10 	.word	0x20000a10

080052c4 <__malloc_lock>:
 80052c4:	4801      	ldr	r0, [pc, #4]	; (80052cc <__malloc_lock+0x8>)
 80052c6:	f7ff bed6 	b.w	8005076 <__retarget_lock_acquire_recursive>
 80052ca:	bf00      	nop
 80052cc:	20000a0c 	.word	0x20000a0c

080052d0 <__malloc_unlock>:
 80052d0:	4801      	ldr	r0, [pc, #4]	; (80052d8 <__malloc_unlock+0x8>)
 80052d2:	f7ff bed1 	b.w	8005078 <__retarget_lock_release_recursive>
 80052d6:	bf00      	nop
 80052d8:	20000a0c 	.word	0x20000a0c

080052dc <__sfputc_r>:
 80052dc:	6893      	ldr	r3, [r2, #8]
 80052de:	b410      	push	{r4}
 80052e0:	3b01      	subs	r3, #1
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	6093      	str	r3, [r2, #8]
 80052e6:	da07      	bge.n	80052f8 <__sfputc_r+0x1c>
 80052e8:	6994      	ldr	r4, [r2, #24]
 80052ea:	42a3      	cmp	r3, r4
 80052ec:	db01      	blt.n	80052f2 <__sfputc_r+0x16>
 80052ee:	290a      	cmp	r1, #10
 80052f0:	d102      	bne.n	80052f8 <__sfputc_r+0x1c>
 80052f2:	bc10      	pop	{r4}
 80052f4:	f7ff bd55 	b.w	8004da2 <__swbuf_r>
 80052f8:	6813      	ldr	r3, [r2, #0]
 80052fa:	1c58      	adds	r0, r3, #1
 80052fc:	6010      	str	r0, [r2, #0]
 80052fe:	7019      	strb	r1, [r3, #0]
 8005300:	4608      	mov	r0, r1
 8005302:	bc10      	pop	{r4}
 8005304:	4770      	bx	lr

08005306 <__sfputs_r>:
 8005306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005308:	4606      	mov	r6, r0
 800530a:	460f      	mov	r7, r1
 800530c:	4614      	mov	r4, r2
 800530e:	18d5      	adds	r5, r2, r3
 8005310:	42ac      	cmp	r4, r5
 8005312:	d101      	bne.n	8005318 <__sfputs_r+0x12>
 8005314:	2000      	movs	r0, #0
 8005316:	e007      	b.n	8005328 <__sfputs_r+0x22>
 8005318:	463a      	mov	r2, r7
 800531a:	4630      	mov	r0, r6
 800531c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005320:	f7ff ffdc 	bl	80052dc <__sfputc_r>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d1f3      	bne.n	8005310 <__sfputs_r+0xa>
 8005328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800532c <_vfiprintf_r>:
 800532c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005330:	460d      	mov	r5, r1
 8005332:	4614      	mov	r4, r2
 8005334:	4698      	mov	r8, r3
 8005336:	4606      	mov	r6, r0
 8005338:	b09d      	sub	sp, #116	; 0x74
 800533a:	b118      	cbz	r0, 8005344 <_vfiprintf_r+0x18>
 800533c:	6a03      	ldr	r3, [r0, #32]
 800533e:	b90b      	cbnz	r3, 8005344 <_vfiprintf_r+0x18>
 8005340:	f7ff fc48 	bl	8004bd4 <__sinit>
 8005344:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005346:	07d9      	lsls	r1, r3, #31
 8005348:	d405      	bmi.n	8005356 <_vfiprintf_r+0x2a>
 800534a:	89ab      	ldrh	r3, [r5, #12]
 800534c:	059a      	lsls	r2, r3, #22
 800534e:	d402      	bmi.n	8005356 <_vfiprintf_r+0x2a>
 8005350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005352:	f7ff fe90 	bl	8005076 <__retarget_lock_acquire_recursive>
 8005356:	89ab      	ldrh	r3, [r5, #12]
 8005358:	071b      	lsls	r3, r3, #28
 800535a:	d501      	bpl.n	8005360 <_vfiprintf_r+0x34>
 800535c:	692b      	ldr	r3, [r5, #16]
 800535e:	b99b      	cbnz	r3, 8005388 <_vfiprintf_r+0x5c>
 8005360:	4629      	mov	r1, r5
 8005362:	4630      	mov	r0, r6
 8005364:	f7ff fd5a 	bl	8004e1c <__swsetup_r>
 8005368:	b170      	cbz	r0, 8005388 <_vfiprintf_r+0x5c>
 800536a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800536c:	07dc      	lsls	r4, r3, #31
 800536e:	d504      	bpl.n	800537a <_vfiprintf_r+0x4e>
 8005370:	f04f 30ff 	mov.w	r0, #4294967295
 8005374:	b01d      	add	sp, #116	; 0x74
 8005376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800537a:	89ab      	ldrh	r3, [r5, #12]
 800537c:	0598      	lsls	r0, r3, #22
 800537e:	d4f7      	bmi.n	8005370 <_vfiprintf_r+0x44>
 8005380:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005382:	f7ff fe79 	bl	8005078 <__retarget_lock_release_recursive>
 8005386:	e7f3      	b.n	8005370 <_vfiprintf_r+0x44>
 8005388:	2300      	movs	r3, #0
 800538a:	9309      	str	r3, [sp, #36]	; 0x24
 800538c:	2320      	movs	r3, #32
 800538e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005392:	2330      	movs	r3, #48	; 0x30
 8005394:	f04f 0901 	mov.w	r9, #1
 8005398:	f8cd 800c 	str.w	r8, [sp, #12]
 800539c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800554c <_vfiprintf_r+0x220>
 80053a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80053a4:	4623      	mov	r3, r4
 80053a6:	469a      	mov	sl, r3
 80053a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80053ac:	b10a      	cbz	r2, 80053b2 <_vfiprintf_r+0x86>
 80053ae:	2a25      	cmp	r2, #37	; 0x25
 80053b0:	d1f9      	bne.n	80053a6 <_vfiprintf_r+0x7a>
 80053b2:	ebba 0b04 	subs.w	fp, sl, r4
 80053b6:	d00b      	beq.n	80053d0 <_vfiprintf_r+0xa4>
 80053b8:	465b      	mov	r3, fp
 80053ba:	4622      	mov	r2, r4
 80053bc:	4629      	mov	r1, r5
 80053be:	4630      	mov	r0, r6
 80053c0:	f7ff ffa1 	bl	8005306 <__sfputs_r>
 80053c4:	3001      	adds	r0, #1
 80053c6:	f000 80a9 	beq.w	800551c <_vfiprintf_r+0x1f0>
 80053ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053cc:	445a      	add	r2, fp
 80053ce:	9209      	str	r2, [sp, #36]	; 0x24
 80053d0:	f89a 3000 	ldrb.w	r3, [sl]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	f000 80a1 	beq.w	800551c <_vfiprintf_r+0x1f0>
 80053da:	2300      	movs	r3, #0
 80053dc:	f04f 32ff 	mov.w	r2, #4294967295
 80053e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053e4:	f10a 0a01 	add.w	sl, sl, #1
 80053e8:	9304      	str	r3, [sp, #16]
 80053ea:	9307      	str	r3, [sp, #28]
 80053ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80053f0:	931a      	str	r3, [sp, #104]	; 0x68
 80053f2:	4654      	mov	r4, sl
 80053f4:	2205      	movs	r2, #5
 80053f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053fa:	4854      	ldr	r0, [pc, #336]	; (800554c <_vfiprintf_r+0x220>)
 80053fc:	f000 fb94 	bl	8005b28 <memchr>
 8005400:	9a04      	ldr	r2, [sp, #16]
 8005402:	b9d8      	cbnz	r0, 800543c <_vfiprintf_r+0x110>
 8005404:	06d1      	lsls	r1, r2, #27
 8005406:	bf44      	itt	mi
 8005408:	2320      	movmi	r3, #32
 800540a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800540e:	0713      	lsls	r3, r2, #28
 8005410:	bf44      	itt	mi
 8005412:	232b      	movmi	r3, #43	; 0x2b
 8005414:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005418:	f89a 3000 	ldrb.w	r3, [sl]
 800541c:	2b2a      	cmp	r3, #42	; 0x2a
 800541e:	d015      	beq.n	800544c <_vfiprintf_r+0x120>
 8005420:	4654      	mov	r4, sl
 8005422:	2000      	movs	r0, #0
 8005424:	f04f 0c0a 	mov.w	ip, #10
 8005428:	9a07      	ldr	r2, [sp, #28]
 800542a:	4621      	mov	r1, r4
 800542c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005430:	3b30      	subs	r3, #48	; 0x30
 8005432:	2b09      	cmp	r3, #9
 8005434:	d94d      	bls.n	80054d2 <_vfiprintf_r+0x1a6>
 8005436:	b1b0      	cbz	r0, 8005466 <_vfiprintf_r+0x13a>
 8005438:	9207      	str	r2, [sp, #28]
 800543a:	e014      	b.n	8005466 <_vfiprintf_r+0x13a>
 800543c:	eba0 0308 	sub.w	r3, r0, r8
 8005440:	fa09 f303 	lsl.w	r3, r9, r3
 8005444:	4313      	orrs	r3, r2
 8005446:	46a2      	mov	sl, r4
 8005448:	9304      	str	r3, [sp, #16]
 800544a:	e7d2      	b.n	80053f2 <_vfiprintf_r+0xc6>
 800544c:	9b03      	ldr	r3, [sp, #12]
 800544e:	1d19      	adds	r1, r3, #4
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	9103      	str	r1, [sp, #12]
 8005454:	2b00      	cmp	r3, #0
 8005456:	bfbb      	ittet	lt
 8005458:	425b      	neglt	r3, r3
 800545a:	f042 0202 	orrlt.w	r2, r2, #2
 800545e:	9307      	strge	r3, [sp, #28]
 8005460:	9307      	strlt	r3, [sp, #28]
 8005462:	bfb8      	it	lt
 8005464:	9204      	strlt	r2, [sp, #16]
 8005466:	7823      	ldrb	r3, [r4, #0]
 8005468:	2b2e      	cmp	r3, #46	; 0x2e
 800546a:	d10c      	bne.n	8005486 <_vfiprintf_r+0x15a>
 800546c:	7863      	ldrb	r3, [r4, #1]
 800546e:	2b2a      	cmp	r3, #42	; 0x2a
 8005470:	d134      	bne.n	80054dc <_vfiprintf_r+0x1b0>
 8005472:	9b03      	ldr	r3, [sp, #12]
 8005474:	3402      	adds	r4, #2
 8005476:	1d1a      	adds	r2, r3, #4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	9203      	str	r2, [sp, #12]
 800547c:	2b00      	cmp	r3, #0
 800547e:	bfb8      	it	lt
 8005480:	f04f 33ff 	movlt.w	r3, #4294967295
 8005484:	9305      	str	r3, [sp, #20]
 8005486:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005550 <_vfiprintf_r+0x224>
 800548a:	2203      	movs	r2, #3
 800548c:	4650      	mov	r0, sl
 800548e:	7821      	ldrb	r1, [r4, #0]
 8005490:	f000 fb4a 	bl	8005b28 <memchr>
 8005494:	b138      	cbz	r0, 80054a6 <_vfiprintf_r+0x17a>
 8005496:	2240      	movs	r2, #64	; 0x40
 8005498:	9b04      	ldr	r3, [sp, #16]
 800549a:	eba0 000a 	sub.w	r0, r0, sl
 800549e:	4082      	lsls	r2, r0
 80054a0:	4313      	orrs	r3, r2
 80054a2:	3401      	adds	r4, #1
 80054a4:	9304      	str	r3, [sp, #16]
 80054a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054aa:	2206      	movs	r2, #6
 80054ac:	4829      	ldr	r0, [pc, #164]	; (8005554 <_vfiprintf_r+0x228>)
 80054ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80054b2:	f000 fb39 	bl	8005b28 <memchr>
 80054b6:	2800      	cmp	r0, #0
 80054b8:	d03f      	beq.n	800553a <_vfiprintf_r+0x20e>
 80054ba:	4b27      	ldr	r3, [pc, #156]	; (8005558 <_vfiprintf_r+0x22c>)
 80054bc:	bb1b      	cbnz	r3, 8005506 <_vfiprintf_r+0x1da>
 80054be:	9b03      	ldr	r3, [sp, #12]
 80054c0:	3307      	adds	r3, #7
 80054c2:	f023 0307 	bic.w	r3, r3, #7
 80054c6:	3308      	adds	r3, #8
 80054c8:	9303      	str	r3, [sp, #12]
 80054ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054cc:	443b      	add	r3, r7
 80054ce:	9309      	str	r3, [sp, #36]	; 0x24
 80054d0:	e768      	b.n	80053a4 <_vfiprintf_r+0x78>
 80054d2:	460c      	mov	r4, r1
 80054d4:	2001      	movs	r0, #1
 80054d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054da:	e7a6      	b.n	800542a <_vfiprintf_r+0xfe>
 80054dc:	2300      	movs	r3, #0
 80054de:	f04f 0c0a 	mov.w	ip, #10
 80054e2:	4619      	mov	r1, r3
 80054e4:	3401      	adds	r4, #1
 80054e6:	9305      	str	r3, [sp, #20]
 80054e8:	4620      	mov	r0, r4
 80054ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ee:	3a30      	subs	r2, #48	; 0x30
 80054f0:	2a09      	cmp	r2, #9
 80054f2:	d903      	bls.n	80054fc <_vfiprintf_r+0x1d0>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d0c6      	beq.n	8005486 <_vfiprintf_r+0x15a>
 80054f8:	9105      	str	r1, [sp, #20]
 80054fa:	e7c4      	b.n	8005486 <_vfiprintf_r+0x15a>
 80054fc:	4604      	mov	r4, r0
 80054fe:	2301      	movs	r3, #1
 8005500:	fb0c 2101 	mla	r1, ip, r1, r2
 8005504:	e7f0      	b.n	80054e8 <_vfiprintf_r+0x1bc>
 8005506:	ab03      	add	r3, sp, #12
 8005508:	9300      	str	r3, [sp, #0]
 800550a:	462a      	mov	r2, r5
 800550c:	4630      	mov	r0, r6
 800550e:	4b13      	ldr	r3, [pc, #76]	; (800555c <_vfiprintf_r+0x230>)
 8005510:	a904      	add	r1, sp, #16
 8005512:	f3af 8000 	nop.w
 8005516:	4607      	mov	r7, r0
 8005518:	1c78      	adds	r0, r7, #1
 800551a:	d1d6      	bne.n	80054ca <_vfiprintf_r+0x19e>
 800551c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800551e:	07d9      	lsls	r1, r3, #31
 8005520:	d405      	bmi.n	800552e <_vfiprintf_r+0x202>
 8005522:	89ab      	ldrh	r3, [r5, #12]
 8005524:	059a      	lsls	r2, r3, #22
 8005526:	d402      	bmi.n	800552e <_vfiprintf_r+0x202>
 8005528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800552a:	f7ff fda5 	bl	8005078 <__retarget_lock_release_recursive>
 800552e:	89ab      	ldrh	r3, [r5, #12]
 8005530:	065b      	lsls	r3, r3, #25
 8005532:	f53f af1d 	bmi.w	8005370 <_vfiprintf_r+0x44>
 8005536:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005538:	e71c      	b.n	8005374 <_vfiprintf_r+0x48>
 800553a:	ab03      	add	r3, sp, #12
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	462a      	mov	r2, r5
 8005540:	4630      	mov	r0, r6
 8005542:	4b06      	ldr	r3, [pc, #24]	; (800555c <_vfiprintf_r+0x230>)
 8005544:	a904      	add	r1, sp, #16
 8005546:	f000 f87d 	bl	8005644 <_printf_i>
 800554a:	e7e4      	b.n	8005516 <_vfiprintf_r+0x1ea>
 800554c:	08006b17 	.word	0x08006b17
 8005550:	08006b1d 	.word	0x08006b1d
 8005554:	08006b21 	.word	0x08006b21
 8005558:	00000000 	.word	0x00000000
 800555c:	08005307 	.word	0x08005307

08005560 <_printf_common>:
 8005560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005564:	4616      	mov	r6, r2
 8005566:	4699      	mov	r9, r3
 8005568:	688a      	ldr	r2, [r1, #8]
 800556a:	690b      	ldr	r3, [r1, #16]
 800556c:	4607      	mov	r7, r0
 800556e:	4293      	cmp	r3, r2
 8005570:	bfb8      	it	lt
 8005572:	4613      	movlt	r3, r2
 8005574:	6033      	str	r3, [r6, #0]
 8005576:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800557a:	460c      	mov	r4, r1
 800557c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005580:	b10a      	cbz	r2, 8005586 <_printf_common+0x26>
 8005582:	3301      	adds	r3, #1
 8005584:	6033      	str	r3, [r6, #0]
 8005586:	6823      	ldr	r3, [r4, #0]
 8005588:	0699      	lsls	r1, r3, #26
 800558a:	bf42      	ittt	mi
 800558c:	6833      	ldrmi	r3, [r6, #0]
 800558e:	3302      	addmi	r3, #2
 8005590:	6033      	strmi	r3, [r6, #0]
 8005592:	6825      	ldr	r5, [r4, #0]
 8005594:	f015 0506 	ands.w	r5, r5, #6
 8005598:	d106      	bne.n	80055a8 <_printf_common+0x48>
 800559a:	f104 0a19 	add.w	sl, r4, #25
 800559e:	68e3      	ldr	r3, [r4, #12]
 80055a0:	6832      	ldr	r2, [r6, #0]
 80055a2:	1a9b      	subs	r3, r3, r2
 80055a4:	42ab      	cmp	r3, r5
 80055a6:	dc2b      	bgt.n	8005600 <_printf_common+0xa0>
 80055a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80055ac:	1e13      	subs	r3, r2, #0
 80055ae:	6822      	ldr	r2, [r4, #0]
 80055b0:	bf18      	it	ne
 80055b2:	2301      	movne	r3, #1
 80055b4:	0692      	lsls	r2, r2, #26
 80055b6:	d430      	bmi.n	800561a <_printf_common+0xba>
 80055b8:	4649      	mov	r1, r9
 80055ba:	4638      	mov	r0, r7
 80055bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80055c0:	47c0      	blx	r8
 80055c2:	3001      	adds	r0, #1
 80055c4:	d023      	beq.n	800560e <_printf_common+0xae>
 80055c6:	6823      	ldr	r3, [r4, #0]
 80055c8:	6922      	ldr	r2, [r4, #16]
 80055ca:	f003 0306 	and.w	r3, r3, #6
 80055ce:	2b04      	cmp	r3, #4
 80055d0:	bf14      	ite	ne
 80055d2:	2500      	movne	r5, #0
 80055d4:	6833      	ldreq	r3, [r6, #0]
 80055d6:	f04f 0600 	mov.w	r6, #0
 80055da:	bf08      	it	eq
 80055dc:	68e5      	ldreq	r5, [r4, #12]
 80055de:	f104 041a 	add.w	r4, r4, #26
 80055e2:	bf08      	it	eq
 80055e4:	1aed      	subeq	r5, r5, r3
 80055e6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055ea:	bf08      	it	eq
 80055ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055f0:	4293      	cmp	r3, r2
 80055f2:	bfc4      	itt	gt
 80055f4:	1a9b      	subgt	r3, r3, r2
 80055f6:	18ed      	addgt	r5, r5, r3
 80055f8:	42b5      	cmp	r5, r6
 80055fa:	d11a      	bne.n	8005632 <_printf_common+0xd2>
 80055fc:	2000      	movs	r0, #0
 80055fe:	e008      	b.n	8005612 <_printf_common+0xb2>
 8005600:	2301      	movs	r3, #1
 8005602:	4652      	mov	r2, sl
 8005604:	4649      	mov	r1, r9
 8005606:	4638      	mov	r0, r7
 8005608:	47c0      	blx	r8
 800560a:	3001      	adds	r0, #1
 800560c:	d103      	bne.n	8005616 <_printf_common+0xb6>
 800560e:	f04f 30ff 	mov.w	r0, #4294967295
 8005612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005616:	3501      	adds	r5, #1
 8005618:	e7c1      	b.n	800559e <_printf_common+0x3e>
 800561a:	2030      	movs	r0, #48	; 0x30
 800561c:	18e1      	adds	r1, r4, r3
 800561e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005628:	4422      	add	r2, r4
 800562a:	3302      	adds	r3, #2
 800562c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005630:	e7c2      	b.n	80055b8 <_printf_common+0x58>
 8005632:	2301      	movs	r3, #1
 8005634:	4622      	mov	r2, r4
 8005636:	4649      	mov	r1, r9
 8005638:	4638      	mov	r0, r7
 800563a:	47c0      	blx	r8
 800563c:	3001      	adds	r0, #1
 800563e:	d0e6      	beq.n	800560e <_printf_common+0xae>
 8005640:	3601      	adds	r6, #1
 8005642:	e7d9      	b.n	80055f8 <_printf_common+0x98>

08005644 <_printf_i>:
 8005644:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005648:	7e0f      	ldrb	r7, [r1, #24]
 800564a:	4691      	mov	r9, r2
 800564c:	2f78      	cmp	r7, #120	; 0x78
 800564e:	4680      	mov	r8, r0
 8005650:	460c      	mov	r4, r1
 8005652:	469a      	mov	sl, r3
 8005654:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005656:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800565a:	d807      	bhi.n	800566c <_printf_i+0x28>
 800565c:	2f62      	cmp	r7, #98	; 0x62
 800565e:	d80a      	bhi.n	8005676 <_printf_i+0x32>
 8005660:	2f00      	cmp	r7, #0
 8005662:	f000 80d5 	beq.w	8005810 <_printf_i+0x1cc>
 8005666:	2f58      	cmp	r7, #88	; 0x58
 8005668:	f000 80c1 	beq.w	80057ee <_printf_i+0x1aa>
 800566c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005670:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005674:	e03a      	b.n	80056ec <_printf_i+0xa8>
 8005676:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800567a:	2b15      	cmp	r3, #21
 800567c:	d8f6      	bhi.n	800566c <_printf_i+0x28>
 800567e:	a101      	add	r1, pc, #4	; (adr r1, 8005684 <_printf_i+0x40>)
 8005680:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005684:	080056dd 	.word	0x080056dd
 8005688:	080056f1 	.word	0x080056f1
 800568c:	0800566d 	.word	0x0800566d
 8005690:	0800566d 	.word	0x0800566d
 8005694:	0800566d 	.word	0x0800566d
 8005698:	0800566d 	.word	0x0800566d
 800569c:	080056f1 	.word	0x080056f1
 80056a0:	0800566d 	.word	0x0800566d
 80056a4:	0800566d 	.word	0x0800566d
 80056a8:	0800566d 	.word	0x0800566d
 80056ac:	0800566d 	.word	0x0800566d
 80056b0:	080057f7 	.word	0x080057f7
 80056b4:	0800571d 	.word	0x0800571d
 80056b8:	080057b1 	.word	0x080057b1
 80056bc:	0800566d 	.word	0x0800566d
 80056c0:	0800566d 	.word	0x0800566d
 80056c4:	08005819 	.word	0x08005819
 80056c8:	0800566d 	.word	0x0800566d
 80056cc:	0800571d 	.word	0x0800571d
 80056d0:	0800566d 	.word	0x0800566d
 80056d4:	0800566d 	.word	0x0800566d
 80056d8:	080057b9 	.word	0x080057b9
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	1d1a      	adds	r2, r3, #4
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	602a      	str	r2, [r5, #0]
 80056e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80056e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80056ec:	2301      	movs	r3, #1
 80056ee:	e0a0      	b.n	8005832 <_printf_i+0x1ee>
 80056f0:	6820      	ldr	r0, [r4, #0]
 80056f2:	682b      	ldr	r3, [r5, #0]
 80056f4:	0607      	lsls	r7, r0, #24
 80056f6:	f103 0104 	add.w	r1, r3, #4
 80056fa:	6029      	str	r1, [r5, #0]
 80056fc:	d501      	bpl.n	8005702 <_printf_i+0xbe>
 80056fe:	681e      	ldr	r6, [r3, #0]
 8005700:	e003      	b.n	800570a <_printf_i+0xc6>
 8005702:	0646      	lsls	r6, r0, #25
 8005704:	d5fb      	bpl.n	80056fe <_printf_i+0xba>
 8005706:	f9b3 6000 	ldrsh.w	r6, [r3]
 800570a:	2e00      	cmp	r6, #0
 800570c:	da03      	bge.n	8005716 <_printf_i+0xd2>
 800570e:	232d      	movs	r3, #45	; 0x2d
 8005710:	4276      	negs	r6, r6
 8005712:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005716:	230a      	movs	r3, #10
 8005718:	4859      	ldr	r0, [pc, #356]	; (8005880 <_printf_i+0x23c>)
 800571a:	e012      	b.n	8005742 <_printf_i+0xfe>
 800571c:	682b      	ldr	r3, [r5, #0]
 800571e:	6820      	ldr	r0, [r4, #0]
 8005720:	1d19      	adds	r1, r3, #4
 8005722:	6029      	str	r1, [r5, #0]
 8005724:	0605      	lsls	r5, r0, #24
 8005726:	d501      	bpl.n	800572c <_printf_i+0xe8>
 8005728:	681e      	ldr	r6, [r3, #0]
 800572a:	e002      	b.n	8005732 <_printf_i+0xee>
 800572c:	0641      	lsls	r1, r0, #25
 800572e:	d5fb      	bpl.n	8005728 <_printf_i+0xe4>
 8005730:	881e      	ldrh	r6, [r3, #0]
 8005732:	2f6f      	cmp	r7, #111	; 0x6f
 8005734:	bf0c      	ite	eq
 8005736:	2308      	moveq	r3, #8
 8005738:	230a      	movne	r3, #10
 800573a:	4851      	ldr	r0, [pc, #324]	; (8005880 <_printf_i+0x23c>)
 800573c:	2100      	movs	r1, #0
 800573e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005742:	6865      	ldr	r5, [r4, #4]
 8005744:	2d00      	cmp	r5, #0
 8005746:	bfa8      	it	ge
 8005748:	6821      	ldrge	r1, [r4, #0]
 800574a:	60a5      	str	r5, [r4, #8]
 800574c:	bfa4      	itt	ge
 800574e:	f021 0104 	bicge.w	r1, r1, #4
 8005752:	6021      	strge	r1, [r4, #0]
 8005754:	b90e      	cbnz	r6, 800575a <_printf_i+0x116>
 8005756:	2d00      	cmp	r5, #0
 8005758:	d04b      	beq.n	80057f2 <_printf_i+0x1ae>
 800575a:	4615      	mov	r5, r2
 800575c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005760:	fb03 6711 	mls	r7, r3, r1, r6
 8005764:	5dc7      	ldrb	r7, [r0, r7]
 8005766:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800576a:	4637      	mov	r7, r6
 800576c:	42bb      	cmp	r3, r7
 800576e:	460e      	mov	r6, r1
 8005770:	d9f4      	bls.n	800575c <_printf_i+0x118>
 8005772:	2b08      	cmp	r3, #8
 8005774:	d10b      	bne.n	800578e <_printf_i+0x14a>
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	07de      	lsls	r6, r3, #31
 800577a:	d508      	bpl.n	800578e <_printf_i+0x14a>
 800577c:	6923      	ldr	r3, [r4, #16]
 800577e:	6861      	ldr	r1, [r4, #4]
 8005780:	4299      	cmp	r1, r3
 8005782:	bfde      	ittt	le
 8005784:	2330      	movle	r3, #48	; 0x30
 8005786:	f805 3c01 	strble.w	r3, [r5, #-1]
 800578a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800578e:	1b52      	subs	r2, r2, r5
 8005790:	6122      	str	r2, [r4, #16]
 8005792:	464b      	mov	r3, r9
 8005794:	4621      	mov	r1, r4
 8005796:	4640      	mov	r0, r8
 8005798:	f8cd a000 	str.w	sl, [sp]
 800579c:	aa03      	add	r2, sp, #12
 800579e:	f7ff fedf 	bl	8005560 <_printf_common>
 80057a2:	3001      	adds	r0, #1
 80057a4:	d14a      	bne.n	800583c <_printf_i+0x1f8>
 80057a6:	f04f 30ff 	mov.w	r0, #4294967295
 80057aa:	b004      	add	sp, #16
 80057ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057b0:	6823      	ldr	r3, [r4, #0]
 80057b2:	f043 0320 	orr.w	r3, r3, #32
 80057b6:	6023      	str	r3, [r4, #0]
 80057b8:	2778      	movs	r7, #120	; 0x78
 80057ba:	4832      	ldr	r0, [pc, #200]	; (8005884 <_printf_i+0x240>)
 80057bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	6829      	ldr	r1, [r5, #0]
 80057c4:	061f      	lsls	r7, r3, #24
 80057c6:	f851 6b04 	ldr.w	r6, [r1], #4
 80057ca:	d402      	bmi.n	80057d2 <_printf_i+0x18e>
 80057cc:	065f      	lsls	r7, r3, #25
 80057ce:	bf48      	it	mi
 80057d0:	b2b6      	uxthmi	r6, r6
 80057d2:	07df      	lsls	r7, r3, #31
 80057d4:	bf48      	it	mi
 80057d6:	f043 0320 	orrmi.w	r3, r3, #32
 80057da:	6029      	str	r1, [r5, #0]
 80057dc:	bf48      	it	mi
 80057de:	6023      	strmi	r3, [r4, #0]
 80057e0:	b91e      	cbnz	r6, 80057ea <_printf_i+0x1a6>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	f023 0320 	bic.w	r3, r3, #32
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	2310      	movs	r3, #16
 80057ec:	e7a6      	b.n	800573c <_printf_i+0xf8>
 80057ee:	4824      	ldr	r0, [pc, #144]	; (8005880 <_printf_i+0x23c>)
 80057f0:	e7e4      	b.n	80057bc <_printf_i+0x178>
 80057f2:	4615      	mov	r5, r2
 80057f4:	e7bd      	b.n	8005772 <_printf_i+0x12e>
 80057f6:	682b      	ldr	r3, [r5, #0]
 80057f8:	6826      	ldr	r6, [r4, #0]
 80057fa:	1d18      	adds	r0, r3, #4
 80057fc:	6961      	ldr	r1, [r4, #20]
 80057fe:	6028      	str	r0, [r5, #0]
 8005800:	0635      	lsls	r5, r6, #24
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	d501      	bpl.n	800580a <_printf_i+0x1c6>
 8005806:	6019      	str	r1, [r3, #0]
 8005808:	e002      	b.n	8005810 <_printf_i+0x1cc>
 800580a:	0670      	lsls	r0, r6, #25
 800580c:	d5fb      	bpl.n	8005806 <_printf_i+0x1c2>
 800580e:	8019      	strh	r1, [r3, #0]
 8005810:	2300      	movs	r3, #0
 8005812:	4615      	mov	r5, r2
 8005814:	6123      	str	r3, [r4, #16]
 8005816:	e7bc      	b.n	8005792 <_printf_i+0x14e>
 8005818:	682b      	ldr	r3, [r5, #0]
 800581a:	2100      	movs	r1, #0
 800581c:	1d1a      	adds	r2, r3, #4
 800581e:	602a      	str	r2, [r5, #0]
 8005820:	681d      	ldr	r5, [r3, #0]
 8005822:	6862      	ldr	r2, [r4, #4]
 8005824:	4628      	mov	r0, r5
 8005826:	f000 f97f 	bl	8005b28 <memchr>
 800582a:	b108      	cbz	r0, 8005830 <_printf_i+0x1ec>
 800582c:	1b40      	subs	r0, r0, r5
 800582e:	6060      	str	r0, [r4, #4]
 8005830:	6863      	ldr	r3, [r4, #4]
 8005832:	6123      	str	r3, [r4, #16]
 8005834:	2300      	movs	r3, #0
 8005836:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800583a:	e7aa      	b.n	8005792 <_printf_i+0x14e>
 800583c:	462a      	mov	r2, r5
 800583e:	4649      	mov	r1, r9
 8005840:	4640      	mov	r0, r8
 8005842:	6923      	ldr	r3, [r4, #16]
 8005844:	47d0      	blx	sl
 8005846:	3001      	adds	r0, #1
 8005848:	d0ad      	beq.n	80057a6 <_printf_i+0x162>
 800584a:	6823      	ldr	r3, [r4, #0]
 800584c:	079b      	lsls	r3, r3, #30
 800584e:	d413      	bmi.n	8005878 <_printf_i+0x234>
 8005850:	68e0      	ldr	r0, [r4, #12]
 8005852:	9b03      	ldr	r3, [sp, #12]
 8005854:	4298      	cmp	r0, r3
 8005856:	bfb8      	it	lt
 8005858:	4618      	movlt	r0, r3
 800585a:	e7a6      	b.n	80057aa <_printf_i+0x166>
 800585c:	2301      	movs	r3, #1
 800585e:	4632      	mov	r2, r6
 8005860:	4649      	mov	r1, r9
 8005862:	4640      	mov	r0, r8
 8005864:	47d0      	blx	sl
 8005866:	3001      	adds	r0, #1
 8005868:	d09d      	beq.n	80057a6 <_printf_i+0x162>
 800586a:	3501      	adds	r5, #1
 800586c:	68e3      	ldr	r3, [r4, #12]
 800586e:	9903      	ldr	r1, [sp, #12]
 8005870:	1a5b      	subs	r3, r3, r1
 8005872:	42ab      	cmp	r3, r5
 8005874:	dcf2      	bgt.n	800585c <_printf_i+0x218>
 8005876:	e7eb      	b.n	8005850 <_printf_i+0x20c>
 8005878:	2500      	movs	r5, #0
 800587a:	f104 0619 	add.w	r6, r4, #25
 800587e:	e7f5      	b.n	800586c <_printf_i+0x228>
 8005880:	08006b28 	.word	0x08006b28
 8005884:	08006b39 	.word	0x08006b39

08005888 <__sflush_r>:
 8005888:	898a      	ldrh	r2, [r1, #12]
 800588a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588c:	4605      	mov	r5, r0
 800588e:	0710      	lsls	r0, r2, #28
 8005890:	460c      	mov	r4, r1
 8005892:	d457      	bmi.n	8005944 <__sflush_r+0xbc>
 8005894:	684b      	ldr	r3, [r1, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	dc04      	bgt.n	80058a4 <__sflush_r+0x1c>
 800589a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	dc01      	bgt.n	80058a4 <__sflush_r+0x1c>
 80058a0:	2000      	movs	r0, #0
 80058a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058a6:	2e00      	cmp	r6, #0
 80058a8:	d0fa      	beq.n	80058a0 <__sflush_r+0x18>
 80058aa:	2300      	movs	r3, #0
 80058ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80058b0:	682f      	ldr	r7, [r5, #0]
 80058b2:	6a21      	ldr	r1, [r4, #32]
 80058b4:	602b      	str	r3, [r5, #0]
 80058b6:	d032      	beq.n	800591e <__sflush_r+0x96>
 80058b8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80058ba:	89a3      	ldrh	r3, [r4, #12]
 80058bc:	075a      	lsls	r2, r3, #29
 80058be:	d505      	bpl.n	80058cc <__sflush_r+0x44>
 80058c0:	6863      	ldr	r3, [r4, #4]
 80058c2:	1ac0      	subs	r0, r0, r3
 80058c4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80058c6:	b10b      	cbz	r3, 80058cc <__sflush_r+0x44>
 80058c8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80058ca:	1ac0      	subs	r0, r0, r3
 80058cc:	2300      	movs	r3, #0
 80058ce:	4602      	mov	r2, r0
 80058d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80058d2:	4628      	mov	r0, r5
 80058d4:	6a21      	ldr	r1, [r4, #32]
 80058d6:	47b0      	blx	r6
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	89a3      	ldrh	r3, [r4, #12]
 80058dc:	d106      	bne.n	80058ec <__sflush_r+0x64>
 80058de:	6829      	ldr	r1, [r5, #0]
 80058e0:	291d      	cmp	r1, #29
 80058e2:	d82b      	bhi.n	800593c <__sflush_r+0xb4>
 80058e4:	4a28      	ldr	r2, [pc, #160]	; (8005988 <__sflush_r+0x100>)
 80058e6:	410a      	asrs	r2, r1
 80058e8:	07d6      	lsls	r6, r2, #31
 80058ea:	d427      	bmi.n	800593c <__sflush_r+0xb4>
 80058ec:	2200      	movs	r2, #0
 80058ee:	6062      	str	r2, [r4, #4]
 80058f0:	6922      	ldr	r2, [r4, #16]
 80058f2:	04d9      	lsls	r1, r3, #19
 80058f4:	6022      	str	r2, [r4, #0]
 80058f6:	d504      	bpl.n	8005902 <__sflush_r+0x7a>
 80058f8:	1c42      	adds	r2, r0, #1
 80058fa:	d101      	bne.n	8005900 <__sflush_r+0x78>
 80058fc:	682b      	ldr	r3, [r5, #0]
 80058fe:	b903      	cbnz	r3, 8005902 <__sflush_r+0x7a>
 8005900:	6560      	str	r0, [r4, #84]	; 0x54
 8005902:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005904:	602f      	str	r7, [r5, #0]
 8005906:	2900      	cmp	r1, #0
 8005908:	d0ca      	beq.n	80058a0 <__sflush_r+0x18>
 800590a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800590e:	4299      	cmp	r1, r3
 8005910:	d002      	beq.n	8005918 <__sflush_r+0x90>
 8005912:	4628      	mov	r0, r5
 8005914:	f7ff fbe6 	bl	80050e4 <_free_r>
 8005918:	2000      	movs	r0, #0
 800591a:	6360      	str	r0, [r4, #52]	; 0x34
 800591c:	e7c1      	b.n	80058a2 <__sflush_r+0x1a>
 800591e:	2301      	movs	r3, #1
 8005920:	4628      	mov	r0, r5
 8005922:	47b0      	blx	r6
 8005924:	1c41      	adds	r1, r0, #1
 8005926:	d1c8      	bne.n	80058ba <__sflush_r+0x32>
 8005928:	682b      	ldr	r3, [r5, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d0c5      	beq.n	80058ba <__sflush_r+0x32>
 800592e:	2b1d      	cmp	r3, #29
 8005930:	d001      	beq.n	8005936 <__sflush_r+0xae>
 8005932:	2b16      	cmp	r3, #22
 8005934:	d101      	bne.n	800593a <__sflush_r+0xb2>
 8005936:	602f      	str	r7, [r5, #0]
 8005938:	e7b2      	b.n	80058a0 <__sflush_r+0x18>
 800593a:	89a3      	ldrh	r3, [r4, #12]
 800593c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005940:	81a3      	strh	r3, [r4, #12]
 8005942:	e7ae      	b.n	80058a2 <__sflush_r+0x1a>
 8005944:	690f      	ldr	r7, [r1, #16]
 8005946:	2f00      	cmp	r7, #0
 8005948:	d0aa      	beq.n	80058a0 <__sflush_r+0x18>
 800594a:	0793      	lsls	r3, r2, #30
 800594c:	bf18      	it	ne
 800594e:	2300      	movne	r3, #0
 8005950:	680e      	ldr	r6, [r1, #0]
 8005952:	bf08      	it	eq
 8005954:	694b      	ldreq	r3, [r1, #20]
 8005956:	1bf6      	subs	r6, r6, r7
 8005958:	600f      	str	r7, [r1, #0]
 800595a:	608b      	str	r3, [r1, #8]
 800595c:	2e00      	cmp	r6, #0
 800595e:	dd9f      	ble.n	80058a0 <__sflush_r+0x18>
 8005960:	4633      	mov	r3, r6
 8005962:	463a      	mov	r2, r7
 8005964:	4628      	mov	r0, r5
 8005966:	6a21      	ldr	r1, [r4, #32]
 8005968:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800596c:	47e0      	blx	ip
 800596e:	2800      	cmp	r0, #0
 8005970:	dc06      	bgt.n	8005980 <__sflush_r+0xf8>
 8005972:	89a3      	ldrh	r3, [r4, #12]
 8005974:	f04f 30ff 	mov.w	r0, #4294967295
 8005978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800597c:	81a3      	strh	r3, [r4, #12]
 800597e:	e790      	b.n	80058a2 <__sflush_r+0x1a>
 8005980:	4407      	add	r7, r0
 8005982:	1a36      	subs	r6, r6, r0
 8005984:	e7ea      	b.n	800595c <__sflush_r+0xd4>
 8005986:	bf00      	nop
 8005988:	dfbffffe 	.word	0xdfbffffe

0800598c <_fflush_r>:
 800598c:	b538      	push	{r3, r4, r5, lr}
 800598e:	690b      	ldr	r3, [r1, #16]
 8005990:	4605      	mov	r5, r0
 8005992:	460c      	mov	r4, r1
 8005994:	b913      	cbnz	r3, 800599c <_fflush_r+0x10>
 8005996:	2500      	movs	r5, #0
 8005998:	4628      	mov	r0, r5
 800599a:	bd38      	pop	{r3, r4, r5, pc}
 800599c:	b118      	cbz	r0, 80059a6 <_fflush_r+0x1a>
 800599e:	6a03      	ldr	r3, [r0, #32]
 80059a0:	b90b      	cbnz	r3, 80059a6 <_fflush_r+0x1a>
 80059a2:	f7ff f917 	bl	8004bd4 <__sinit>
 80059a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d0f3      	beq.n	8005996 <_fflush_r+0xa>
 80059ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80059b0:	07d0      	lsls	r0, r2, #31
 80059b2:	d404      	bmi.n	80059be <_fflush_r+0x32>
 80059b4:	0599      	lsls	r1, r3, #22
 80059b6:	d402      	bmi.n	80059be <_fflush_r+0x32>
 80059b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059ba:	f7ff fb5c 	bl	8005076 <__retarget_lock_acquire_recursive>
 80059be:	4628      	mov	r0, r5
 80059c0:	4621      	mov	r1, r4
 80059c2:	f7ff ff61 	bl	8005888 <__sflush_r>
 80059c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80059c8:	4605      	mov	r5, r0
 80059ca:	07da      	lsls	r2, r3, #31
 80059cc:	d4e4      	bmi.n	8005998 <_fflush_r+0xc>
 80059ce:	89a3      	ldrh	r3, [r4, #12]
 80059d0:	059b      	lsls	r3, r3, #22
 80059d2:	d4e1      	bmi.n	8005998 <_fflush_r+0xc>
 80059d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80059d6:	f7ff fb4f 	bl	8005078 <__retarget_lock_release_recursive>
 80059da:	e7dd      	b.n	8005998 <_fflush_r+0xc>

080059dc <fiprintf>:
 80059dc:	b40e      	push	{r1, r2, r3}
 80059de:	b503      	push	{r0, r1, lr}
 80059e0:	4601      	mov	r1, r0
 80059e2:	ab03      	add	r3, sp, #12
 80059e4:	4805      	ldr	r0, [pc, #20]	; (80059fc <fiprintf+0x20>)
 80059e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80059ea:	6800      	ldr	r0, [r0, #0]
 80059ec:	9301      	str	r3, [sp, #4]
 80059ee:	f7ff fc9d 	bl	800532c <_vfiprintf_r>
 80059f2:	b002      	add	sp, #8
 80059f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80059f8:	b003      	add	sp, #12
 80059fa:	4770      	bx	lr
 80059fc:	2000006c 	.word	0x2000006c

08005a00 <__swhatbuf_r>:
 8005a00:	b570      	push	{r4, r5, r6, lr}
 8005a02:	460c      	mov	r4, r1
 8005a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a08:	4615      	mov	r5, r2
 8005a0a:	2900      	cmp	r1, #0
 8005a0c:	461e      	mov	r6, r3
 8005a0e:	b096      	sub	sp, #88	; 0x58
 8005a10:	da0c      	bge.n	8005a2c <__swhatbuf_r+0x2c>
 8005a12:	89a3      	ldrh	r3, [r4, #12]
 8005a14:	2100      	movs	r1, #0
 8005a16:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005a1a:	bf0c      	ite	eq
 8005a1c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005a20:	2340      	movne	r3, #64	; 0x40
 8005a22:	2000      	movs	r0, #0
 8005a24:	6031      	str	r1, [r6, #0]
 8005a26:	602b      	str	r3, [r5, #0]
 8005a28:	b016      	add	sp, #88	; 0x58
 8005a2a:	bd70      	pop	{r4, r5, r6, pc}
 8005a2c:	466a      	mov	r2, sp
 8005a2e:	f000 f849 	bl	8005ac4 <_fstat_r>
 8005a32:	2800      	cmp	r0, #0
 8005a34:	dbed      	blt.n	8005a12 <__swhatbuf_r+0x12>
 8005a36:	9901      	ldr	r1, [sp, #4]
 8005a38:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005a3c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005a40:	4259      	negs	r1, r3
 8005a42:	4159      	adcs	r1, r3
 8005a44:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a48:	e7eb      	b.n	8005a22 <__swhatbuf_r+0x22>

08005a4a <__smakebuf_r>:
 8005a4a:	898b      	ldrh	r3, [r1, #12]
 8005a4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005a4e:	079d      	lsls	r5, r3, #30
 8005a50:	4606      	mov	r6, r0
 8005a52:	460c      	mov	r4, r1
 8005a54:	d507      	bpl.n	8005a66 <__smakebuf_r+0x1c>
 8005a56:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005a5a:	6023      	str	r3, [r4, #0]
 8005a5c:	6123      	str	r3, [r4, #16]
 8005a5e:	2301      	movs	r3, #1
 8005a60:	6163      	str	r3, [r4, #20]
 8005a62:	b002      	add	sp, #8
 8005a64:	bd70      	pop	{r4, r5, r6, pc}
 8005a66:	466a      	mov	r2, sp
 8005a68:	ab01      	add	r3, sp, #4
 8005a6a:	f7ff ffc9 	bl	8005a00 <__swhatbuf_r>
 8005a6e:	9900      	ldr	r1, [sp, #0]
 8005a70:	4605      	mov	r5, r0
 8005a72:	4630      	mov	r0, r6
 8005a74:	f7ff fba6 	bl	80051c4 <_malloc_r>
 8005a78:	b948      	cbnz	r0, 8005a8e <__smakebuf_r+0x44>
 8005a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a7e:	059a      	lsls	r2, r3, #22
 8005a80:	d4ef      	bmi.n	8005a62 <__smakebuf_r+0x18>
 8005a82:	f023 0303 	bic.w	r3, r3, #3
 8005a86:	f043 0302 	orr.w	r3, r3, #2
 8005a8a:	81a3      	strh	r3, [r4, #12]
 8005a8c:	e7e3      	b.n	8005a56 <__smakebuf_r+0xc>
 8005a8e:	89a3      	ldrh	r3, [r4, #12]
 8005a90:	6020      	str	r0, [r4, #0]
 8005a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a96:	81a3      	strh	r3, [r4, #12]
 8005a98:	9b00      	ldr	r3, [sp, #0]
 8005a9a:	6120      	str	r0, [r4, #16]
 8005a9c:	6163      	str	r3, [r4, #20]
 8005a9e:	9b01      	ldr	r3, [sp, #4]
 8005aa0:	b15b      	cbz	r3, 8005aba <__smakebuf_r+0x70>
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005aa8:	f000 f81e 	bl	8005ae8 <_isatty_r>
 8005aac:	b128      	cbz	r0, 8005aba <__smakebuf_r+0x70>
 8005aae:	89a3      	ldrh	r3, [r4, #12]
 8005ab0:	f023 0303 	bic.w	r3, r3, #3
 8005ab4:	f043 0301 	orr.w	r3, r3, #1
 8005ab8:	81a3      	strh	r3, [r4, #12]
 8005aba:	89a3      	ldrh	r3, [r4, #12]
 8005abc:	431d      	orrs	r5, r3
 8005abe:	81a5      	strh	r5, [r4, #12]
 8005ac0:	e7cf      	b.n	8005a62 <__smakebuf_r+0x18>
	...

08005ac4 <_fstat_r>:
 8005ac4:	b538      	push	{r3, r4, r5, lr}
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	4d06      	ldr	r5, [pc, #24]	; (8005ae4 <_fstat_r+0x20>)
 8005aca:	4604      	mov	r4, r0
 8005acc:	4608      	mov	r0, r1
 8005ace:	4611      	mov	r1, r2
 8005ad0:	602b      	str	r3, [r5, #0]
 8005ad2:	f7fb feda 	bl	800188a <_fstat>
 8005ad6:	1c43      	adds	r3, r0, #1
 8005ad8:	d102      	bne.n	8005ae0 <_fstat_r+0x1c>
 8005ada:	682b      	ldr	r3, [r5, #0]
 8005adc:	b103      	cbz	r3, 8005ae0 <_fstat_r+0x1c>
 8005ade:	6023      	str	r3, [r4, #0]
 8005ae0:	bd38      	pop	{r3, r4, r5, pc}
 8005ae2:	bf00      	nop
 8005ae4:	20000a08 	.word	0x20000a08

08005ae8 <_isatty_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	2300      	movs	r3, #0
 8005aec:	4d05      	ldr	r5, [pc, #20]	; (8005b04 <_isatty_r+0x1c>)
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	f7fb fed8 	bl	80018a8 <_isatty>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_isatty_r+0x1a>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_isatty_r+0x1a>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	20000a08 	.word	0x20000a08

08005b08 <_sbrk_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	4d05      	ldr	r5, [pc, #20]	; (8005b24 <_sbrk_r+0x1c>)
 8005b0e:	4604      	mov	r4, r0
 8005b10:	4608      	mov	r0, r1
 8005b12:	602b      	str	r3, [r5, #0]
 8005b14:	f7fb fede 	bl	80018d4 <_sbrk>
 8005b18:	1c43      	adds	r3, r0, #1
 8005b1a:	d102      	bne.n	8005b22 <_sbrk_r+0x1a>
 8005b1c:	682b      	ldr	r3, [r5, #0]
 8005b1e:	b103      	cbz	r3, 8005b22 <_sbrk_r+0x1a>
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	bd38      	pop	{r3, r4, r5, pc}
 8005b24:	20000a08 	.word	0x20000a08

08005b28 <memchr>:
 8005b28:	4603      	mov	r3, r0
 8005b2a:	b510      	push	{r4, lr}
 8005b2c:	b2c9      	uxtb	r1, r1
 8005b2e:	4402      	add	r2, r0
 8005b30:	4293      	cmp	r3, r2
 8005b32:	4618      	mov	r0, r3
 8005b34:	d101      	bne.n	8005b3a <memchr+0x12>
 8005b36:	2000      	movs	r0, #0
 8005b38:	e003      	b.n	8005b42 <memchr+0x1a>
 8005b3a:	7804      	ldrb	r4, [r0, #0]
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	428c      	cmp	r4, r1
 8005b40:	d1f6      	bne.n	8005b30 <memchr+0x8>
 8005b42:	bd10      	pop	{r4, pc}

08005b44 <abort>:
 8005b44:	2006      	movs	r0, #6
 8005b46:	b508      	push	{r3, lr}
 8005b48:	f000 f82c 	bl	8005ba4 <raise>
 8005b4c:	2001      	movs	r0, #1
 8005b4e:	f7fb fe6a 	bl	8001826 <_exit>

08005b52 <_raise_r>:
 8005b52:	291f      	cmp	r1, #31
 8005b54:	b538      	push	{r3, r4, r5, lr}
 8005b56:	4604      	mov	r4, r0
 8005b58:	460d      	mov	r5, r1
 8005b5a:	d904      	bls.n	8005b66 <_raise_r+0x14>
 8005b5c:	2316      	movs	r3, #22
 8005b5e:	6003      	str	r3, [r0, #0]
 8005b60:	f04f 30ff 	mov.w	r0, #4294967295
 8005b64:	bd38      	pop	{r3, r4, r5, pc}
 8005b66:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005b68:	b112      	cbz	r2, 8005b70 <_raise_r+0x1e>
 8005b6a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005b6e:	b94b      	cbnz	r3, 8005b84 <_raise_r+0x32>
 8005b70:	4620      	mov	r0, r4
 8005b72:	f000 f831 	bl	8005bd8 <_getpid_r>
 8005b76:	462a      	mov	r2, r5
 8005b78:	4601      	mov	r1, r0
 8005b7a:	4620      	mov	r0, r4
 8005b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005b80:	f000 b818 	b.w	8005bb4 <_kill_r>
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d00a      	beq.n	8005b9e <_raise_r+0x4c>
 8005b88:	1c59      	adds	r1, r3, #1
 8005b8a:	d103      	bne.n	8005b94 <_raise_r+0x42>
 8005b8c:	2316      	movs	r3, #22
 8005b8e:	6003      	str	r3, [r0, #0]
 8005b90:	2001      	movs	r0, #1
 8005b92:	e7e7      	b.n	8005b64 <_raise_r+0x12>
 8005b94:	2400      	movs	r4, #0
 8005b96:	4628      	mov	r0, r5
 8005b98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005b9c:	4798      	blx	r3
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	e7e0      	b.n	8005b64 <_raise_r+0x12>
	...

08005ba4 <raise>:
 8005ba4:	4b02      	ldr	r3, [pc, #8]	; (8005bb0 <raise+0xc>)
 8005ba6:	4601      	mov	r1, r0
 8005ba8:	6818      	ldr	r0, [r3, #0]
 8005baa:	f7ff bfd2 	b.w	8005b52 <_raise_r>
 8005bae:	bf00      	nop
 8005bb0:	2000006c 	.word	0x2000006c

08005bb4 <_kill_r>:
 8005bb4:	b538      	push	{r3, r4, r5, lr}
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	4d06      	ldr	r5, [pc, #24]	; (8005bd4 <_kill_r+0x20>)
 8005bba:	4604      	mov	r4, r0
 8005bbc:	4608      	mov	r0, r1
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	602b      	str	r3, [r5, #0]
 8005bc2:	f7fb fe20 	bl	8001806 <_kill>
 8005bc6:	1c43      	adds	r3, r0, #1
 8005bc8:	d102      	bne.n	8005bd0 <_kill_r+0x1c>
 8005bca:	682b      	ldr	r3, [r5, #0]
 8005bcc:	b103      	cbz	r3, 8005bd0 <_kill_r+0x1c>
 8005bce:	6023      	str	r3, [r4, #0]
 8005bd0:	bd38      	pop	{r3, r4, r5, pc}
 8005bd2:	bf00      	nop
 8005bd4:	20000a08 	.word	0x20000a08

08005bd8 <_getpid_r>:
 8005bd8:	f7fb be0e 	b.w	80017f8 <_getpid>

08005bdc <_init>:
 8005bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bde:	bf00      	nop
 8005be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005be2:	bc08      	pop	{r3}
 8005be4:	469e      	mov	lr, r3
 8005be6:	4770      	bx	lr

08005be8 <_fini>:
 8005be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bea:	bf00      	nop
 8005bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005bee:	bc08      	pop	{r3}
 8005bf0:	469e      	mov	lr, r3
 8005bf2:	4770      	bx	lr
