
SubGHz_Phy_PingPong.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d438  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d90  0800d578  0800d578  0001d578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e308  0800e308  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e308  0800e308  0001e308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e310  0800e310  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e310  0800e310  0001e310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800e318  0800e318  0001e318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800e320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000920  200001e0  0800e500  000201e0  2**3
                  ALLOC
 10 RAM1_region   00000000  20000b00  20000b00  000201e0  2**0
                  CONTENTS
 11 RAM2_region   00000000  20008000  20008000  000201e0  2**0
                  CONTENTS
 12 ._user_heap_stack 00000a00  20000b00  20000b00  00020b00  2**0
                  ALLOC
 13 .ARM.attributes 0000002a  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY
 15 .debug_info   00034e2e  00000000  00000000  0002024d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00007a30  00000000  00000000  0005507b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loclists 0000ff2a  00000000  00000000  0005caab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00001e20  00000000  00000000  0006c9d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00001726  00000000  00000000  0006e7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00025c00  00000000  00000000  0006ff1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   00035fd2  00000000  00000000  00095b1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000caeb7  00000000  00000000  000cbaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000063bc  00000000  00000000  001969a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 0000007f  00000000  00000000  0019cd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001e0 	.word	0x200001e0
 800015c:	00000000 	.word	0x00000000
 8000160:	0800d560 	.word	0x0800d560

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e4 	.word	0x200001e4
 800017c:	0800d560 	.word	0x0800d560

08000180 <memchr>:
 8000180:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000184:	2a10      	cmp	r2, #16
 8000186:	db2b      	blt.n	80001e0 <memchr+0x60>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	d008      	beq.n	80001a0 <memchr+0x20>
 800018e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000192:	3a01      	subs	r2, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d02d      	beq.n	80001f4 <memchr+0x74>
 8000198:	f010 0f07 	tst.w	r0, #7
 800019c:	b342      	cbz	r2, 80001f0 <memchr+0x70>
 800019e:	d1f6      	bne.n	800018e <memchr+0xe>
 80001a0:	b4f0      	push	{r4, r5, r6, r7}
 80001a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001aa:	f022 0407 	bic.w	r4, r2, #7
 80001ae:	f07f 0700 	mvns.w	r7, #0
 80001b2:	2300      	movs	r3, #0
 80001b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001b8:	3c08      	subs	r4, #8
 80001ba:	ea85 0501 	eor.w	r5, r5, r1
 80001be:	ea86 0601 	eor.w	r6, r6, r1
 80001c2:	fa85 f547 	uadd8	r5, r5, r7
 80001c6:	faa3 f587 	sel	r5, r3, r7
 80001ca:	fa86 f647 	uadd8	r6, r6, r7
 80001ce:	faa5 f687 	sel	r6, r5, r7
 80001d2:	b98e      	cbnz	r6, 80001f8 <memchr+0x78>
 80001d4:	d1ee      	bne.n	80001b4 <memchr+0x34>
 80001d6:	bcf0      	pop	{r4, r5, r6, r7}
 80001d8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001dc:	f002 0207 	and.w	r2, r2, #7
 80001e0:	b132      	cbz	r2, 80001f0 <memchr+0x70>
 80001e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e6:	3a01      	subs	r2, #1
 80001e8:	ea83 0301 	eor.w	r3, r3, r1
 80001ec:	b113      	cbz	r3, 80001f4 <memchr+0x74>
 80001ee:	d1f8      	bne.n	80001e2 <memchr+0x62>
 80001f0:	2000      	movs	r0, #0
 80001f2:	4770      	bx	lr
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr
 80001f8:	2d00      	cmp	r5, #0
 80001fa:	bf06      	itte	eq
 80001fc:	4635      	moveq	r5, r6
 80001fe:	3803      	subeq	r0, #3
 8000200:	3807      	subne	r0, #7
 8000202:	f015 0f01 	tst.w	r5, #1
 8000206:	d107      	bne.n	8000218 <memchr+0x98>
 8000208:	3001      	adds	r0, #1
 800020a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800020e:	bf02      	ittt	eq
 8000210:	3001      	addeq	r0, #1
 8000212:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000216:	3001      	addeq	r0, #1
 8000218:	bcf0      	pop	{r4, r5, r6, r7}
 800021a:	3801      	subs	r0, #1
 800021c:	4770      	bx	lr
 800021e:	bf00      	nop

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_drsub>:
 8000230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000234:	e002      	b.n	800023c <__adddf3>
 8000236:	bf00      	nop

08000238 <__aeabi_dsub>:
 8000238:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800023c <__adddf3>:
 800023c:	b530      	push	{r4, r5, lr}
 800023e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000242:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000246:	ea94 0f05 	teq	r4, r5
 800024a:	bf08      	it	eq
 800024c:	ea90 0f02 	teqeq	r0, r2
 8000250:	bf1f      	itttt	ne
 8000252:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000256:	ea55 0c02 	orrsne.w	ip, r5, r2
 800025a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800025e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000262:	f000 80e2 	beq.w	800042a <__adddf3+0x1ee>
 8000266:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800026a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800026e:	bfb8      	it	lt
 8000270:	426d      	neglt	r5, r5
 8000272:	dd0c      	ble.n	800028e <__adddf3+0x52>
 8000274:	442c      	add	r4, r5
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	ea82 0000 	eor.w	r0, r2, r0
 8000282:	ea83 0101 	eor.w	r1, r3, r1
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	2d36      	cmp	r5, #54	; 0x36
 8000290:	bf88      	it	hi
 8000292:	bd30      	pophi	{r4, r5, pc}
 8000294:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000298:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800029c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002a4:	d002      	beq.n	80002ac <__adddf3+0x70>
 80002a6:	4240      	negs	r0, r0
 80002a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ac:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b8:	d002      	beq.n	80002c0 <__adddf3+0x84>
 80002ba:	4252      	negs	r2, r2
 80002bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c0:	ea94 0f05 	teq	r4, r5
 80002c4:	f000 80a7 	beq.w	8000416 <__adddf3+0x1da>
 80002c8:	f1a4 0401 	sub.w	r4, r4, #1
 80002cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d0:	db0d      	blt.n	80002ee <__adddf3+0xb2>
 80002d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002d6:	fa22 f205 	lsr.w	r2, r2, r5
 80002da:	1880      	adds	r0, r0, r2
 80002dc:	f141 0100 	adc.w	r1, r1, #0
 80002e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002e4:	1880      	adds	r0, r0, r2
 80002e6:	fa43 f305 	asr.w	r3, r3, r5
 80002ea:	4159      	adcs	r1, r3
 80002ec:	e00e      	b.n	800030c <__adddf3+0xd0>
 80002ee:	f1a5 0520 	sub.w	r5, r5, #32
 80002f2:	f10e 0e20 	add.w	lr, lr, #32
 80002f6:	2a01      	cmp	r2, #1
 80002f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002fc:	bf28      	it	cs
 80002fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000302:	fa43 f305 	asr.w	r3, r3, r5
 8000306:	18c0      	adds	r0, r0, r3
 8000308:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800030c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000310:	d507      	bpl.n	8000322 <__adddf3+0xe6>
 8000312:	f04f 0e00 	mov.w	lr, #0
 8000316:	f1dc 0c00 	rsbs	ip, ip, #0
 800031a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800031e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000322:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000326:	d31b      	bcc.n	8000360 <__adddf3+0x124>
 8000328:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800032c:	d30c      	bcc.n	8000348 <__adddf3+0x10c>
 800032e:	0849      	lsrs	r1, r1, #1
 8000330:	ea5f 0030 	movs.w	r0, r0, rrx
 8000334:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000338:	f104 0401 	add.w	r4, r4, #1
 800033c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000340:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000344:	f080 809a 	bcs.w	800047c <__adddf3+0x240>
 8000348:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800034c:	bf08      	it	eq
 800034e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000352:	f150 0000 	adcs.w	r0, r0, #0
 8000356:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800035a:	ea41 0105 	orr.w	r1, r1, r5
 800035e:	bd30      	pop	{r4, r5, pc}
 8000360:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000364:	4140      	adcs	r0, r0
 8000366:	eb41 0101 	adc.w	r1, r1, r1
 800036a:	3c01      	subs	r4, #1
 800036c:	bf28      	it	cs
 800036e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000372:	d2e9      	bcs.n	8000348 <__adddf3+0x10c>
 8000374:	f091 0f00 	teq	r1, #0
 8000378:	bf04      	itt	eq
 800037a:	4601      	moveq	r1, r0
 800037c:	2000      	moveq	r0, #0
 800037e:	fab1 f381 	clz	r3, r1
 8000382:	bf08      	it	eq
 8000384:	3320      	addeq	r3, #32
 8000386:	f1a3 030b 	sub.w	r3, r3, #11
 800038a:	f1b3 0220 	subs.w	r2, r3, #32
 800038e:	da0c      	bge.n	80003aa <__adddf3+0x16e>
 8000390:	320c      	adds	r2, #12
 8000392:	dd08      	ble.n	80003a6 <__adddf3+0x16a>
 8000394:	f102 0c14 	add.w	ip, r2, #20
 8000398:	f1c2 020c 	rsb	r2, r2, #12
 800039c:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a0:	fa21 f102 	lsr.w	r1, r1, r2
 80003a4:	e00c      	b.n	80003c0 <__adddf3+0x184>
 80003a6:	f102 0214 	add.w	r2, r2, #20
 80003aa:	bfd8      	it	le
 80003ac:	f1c2 0c20 	rsble	ip, r2, #32
 80003b0:	fa01 f102 	lsl.w	r1, r1, r2
 80003b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b8:	bfdc      	itt	le
 80003ba:	ea41 010c 	orrle.w	r1, r1, ip
 80003be:	4090      	lslle	r0, r2
 80003c0:	1ae4      	subs	r4, r4, r3
 80003c2:	bfa2      	ittt	ge
 80003c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c8:	4329      	orrge	r1, r5
 80003ca:	bd30      	popge	{r4, r5, pc}
 80003cc:	ea6f 0404 	mvn.w	r4, r4
 80003d0:	3c1f      	subs	r4, #31
 80003d2:	da1c      	bge.n	800040e <__adddf3+0x1d2>
 80003d4:	340c      	adds	r4, #12
 80003d6:	dc0e      	bgt.n	80003f6 <__adddf3+0x1ba>
 80003d8:	f104 0414 	add.w	r4, r4, #20
 80003dc:	f1c4 0220 	rsb	r2, r4, #32
 80003e0:	fa20 f004 	lsr.w	r0, r0, r4
 80003e4:	fa01 f302 	lsl.w	r3, r1, r2
 80003e8:	ea40 0003 	orr.w	r0, r0, r3
 80003ec:	fa21 f304 	lsr.w	r3, r1, r4
 80003f0:	ea45 0103 	orr.w	r1, r5, r3
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	f1c4 040c 	rsb	r4, r4, #12
 80003fa:	f1c4 0220 	rsb	r2, r4, #32
 80003fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000402:	fa01 f304 	lsl.w	r3, r1, r4
 8000406:	ea40 0003 	orr.w	r0, r0, r3
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	fa21 f004 	lsr.w	r0, r1, r4
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	f094 0f00 	teq	r4, #0
 800041a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800041e:	bf06      	itte	eq
 8000420:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000424:	3401      	addeq	r4, #1
 8000426:	3d01      	subne	r5, #1
 8000428:	e74e      	b.n	80002c8 <__adddf3+0x8c>
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf18      	it	ne
 8000430:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000434:	d029      	beq.n	800048a <__adddf3+0x24e>
 8000436:	ea94 0f05 	teq	r4, r5
 800043a:	bf08      	it	eq
 800043c:	ea90 0f02 	teqeq	r0, r2
 8000440:	d005      	beq.n	800044e <__adddf3+0x212>
 8000442:	ea54 0c00 	orrs.w	ip, r4, r0
 8000446:	bf04      	itt	eq
 8000448:	4619      	moveq	r1, r3
 800044a:	4610      	moveq	r0, r2
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	ea91 0f03 	teq	r1, r3
 8000452:	bf1e      	ittt	ne
 8000454:	2100      	movne	r1, #0
 8000456:	2000      	movne	r0, #0
 8000458:	bd30      	popne	{r4, r5, pc}
 800045a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800045e:	d105      	bne.n	800046c <__adddf3+0x230>
 8000460:	0040      	lsls	r0, r0, #1
 8000462:	4149      	adcs	r1, r1
 8000464:	bf28      	it	cs
 8000466:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800046a:	bd30      	pop	{r4, r5, pc}
 800046c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000470:	bf3c      	itt	cc
 8000472:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000476:	bd30      	popcc	{r4, r5, pc}
 8000478:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800047c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000484:	f04f 0000 	mov.w	r0, #0
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf1a      	itte	ne
 8000490:	4619      	movne	r1, r3
 8000492:	4610      	movne	r0, r2
 8000494:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000498:	bf1c      	itt	ne
 800049a:	460b      	movne	r3, r1
 800049c:	4602      	movne	r2, r0
 800049e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004a2:	bf06      	itte	eq
 80004a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a8:	ea91 0f03 	teqeq	r1, r3
 80004ac:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b0:	bd30      	pop	{r4, r5, pc}
 80004b2:	bf00      	nop

080004b4 <__aeabi_ui2d>:
 80004b4:	f090 0f00 	teq	r0, #0
 80004b8:	bf04      	itt	eq
 80004ba:	2100      	moveq	r1, #0
 80004bc:	4770      	bxeq	lr
 80004be:	b530      	push	{r4, r5, lr}
 80004c0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c8:	f04f 0500 	mov.w	r5, #0
 80004cc:	f04f 0100 	mov.w	r1, #0
 80004d0:	e750      	b.n	8000374 <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_i2d>:
 80004d4:	f090 0f00 	teq	r0, #0
 80004d8:	bf04      	itt	eq
 80004da:	2100      	moveq	r1, #0
 80004dc:	4770      	bxeq	lr
 80004de:	b530      	push	{r4, r5, lr}
 80004e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ec:	bf48      	it	mi
 80004ee:	4240      	negmi	r0, r0
 80004f0:	f04f 0100 	mov.w	r1, #0
 80004f4:	e73e      	b.n	8000374 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_f2d>:
 80004f8:	0042      	lsls	r2, r0, #1
 80004fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000502:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000506:	bf1f      	itttt	ne
 8000508:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800050c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000510:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000514:	4770      	bxne	lr
 8000516:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800051a:	bf08      	it	eq
 800051c:	4770      	bxeq	lr
 800051e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000522:	bf04      	itt	eq
 8000524:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000528:	4770      	bxeq	lr
 800052a:	b530      	push	{r4, r5, lr}
 800052c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000530:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000534:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000538:	e71c      	b.n	8000374 <__adddf3+0x138>
 800053a:	bf00      	nop

0800053c <__aeabi_ul2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f04f 0500 	mov.w	r5, #0
 800054a:	e00a      	b.n	8000562 <__aeabi_l2d+0x16>

0800054c <__aeabi_l2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800055a:	d502      	bpl.n	8000562 <__aeabi_l2d+0x16>
 800055c:	4240      	negs	r0, r0
 800055e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000562:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000566:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800056a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800056e:	f43f aed8 	beq.w	8000322 <__adddf3+0xe6>
 8000572:	f04f 0203 	mov.w	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800058a:	f1c2 0320 	rsb	r3, r2, #32
 800058e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000592:	fa20 f002 	lsr.w	r0, r0, r2
 8000596:	fa01 fe03 	lsl.w	lr, r1, r3
 800059a:	ea40 000e 	orr.w	r0, r0, lr
 800059e:	fa21 f102 	lsr.w	r1, r1, r2
 80005a2:	4414      	add	r4, r2
 80005a4:	e6bd      	b.n	8000322 <__adddf3+0xe6>
 80005a6:	bf00      	nop

080005a8 <__aeabi_dmul>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ae:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005b6:	bf1d      	ittte	ne
 80005b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005bc:	ea94 0f0c 	teqne	r4, ip
 80005c0:	ea95 0f0c 	teqne	r5, ip
 80005c4:	f000 f8de 	bleq	8000784 <__aeabi_dmul+0x1dc>
 80005c8:	442c      	add	r4, r5
 80005ca:	ea81 0603 	eor.w	r6, r1, r3
 80005ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005da:	bf18      	it	ne
 80005dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e8:	d038      	beq.n	800065c <__aeabi_dmul+0xb4>
 80005ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005f6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005fe:	f04f 0600 	mov.w	r6, #0
 8000602:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000606:	f09c 0f00 	teq	ip, #0
 800060a:	bf18      	it	ne
 800060c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000610:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000614:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000618:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800061c:	d204      	bcs.n	8000628 <__aeabi_dmul+0x80>
 800061e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000622:	416d      	adcs	r5, r5
 8000624:	eb46 0606 	adc.w	r6, r6, r6
 8000628:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800062c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000630:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000634:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000638:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800063c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000640:	bf88      	it	hi
 8000642:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000646:	d81e      	bhi.n	8000686 <__aeabi_dmul+0xde>
 8000648:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800064c:	bf08      	it	eq
 800064e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000652:	f150 0000 	adcs.w	r0, r0, #0
 8000656:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800065a:	bd70      	pop	{r4, r5, r6, pc}
 800065c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000660:	ea46 0101 	orr.w	r1, r6, r1
 8000664:	ea40 0002 	orr.w	r0, r0, r2
 8000668:	ea81 0103 	eor.w	r1, r1, r3
 800066c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000670:	bfc2      	ittt	gt
 8000672:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000676:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800067a:	bd70      	popgt	{r4, r5, r6, pc}
 800067c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000680:	f04f 0e00 	mov.w	lr, #0
 8000684:	3c01      	subs	r4, #1
 8000686:	f300 80ab 	bgt.w	80007e0 <__aeabi_dmul+0x238>
 800068a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800068e:	bfde      	ittt	le
 8000690:	2000      	movle	r0, #0
 8000692:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000696:	bd70      	pople	{r4, r5, r6, pc}
 8000698:	f1c4 0400 	rsb	r4, r4, #0
 800069c:	3c20      	subs	r4, #32
 800069e:	da35      	bge.n	800070c <__aeabi_dmul+0x164>
 80006a0:	340c      	adds	r4, #12
 80006a2:	dc1b      	bgt.n	80006dc <__aeabi_dmul+0x134>
 80006a4:	f104 0414 	add.w	r4, r4, #20
 80006a8:	f1c4 0520 	rsb	r5, r4, #32
 80006ac:	fa00 f305 	lsl.w	r3, r0, r5
 80006b0:	fa20 f004 	lsr.w	r0, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea40 0002 	orr.w	r0, r0, r2
 80006bc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c8:	fa21 f604 	lsr.w	r6, r1, r4
 80006cc:	eb42 0106 	adc.w	r1, r2, r6
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f1c4 040c 	rsb	r4, r4, #12
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f304 	lsl.w	r3, r0, r4
 80006e8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ec:	fa01 f204 	lsl.w	r2, r1, r4
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006fc:	f141 0100 	adc.w	r1, r1, #0
 8000700:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000704:	bf08      	it	eq
 8000706:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f1c4 0520 	rsb	r5, r4, #32
 8000710:	fa00 f205 	lsl.w	r2, r0, r5
 8000714:	ea4e 0e02 	orr.w	lr, lr, r2
 8000718:	fa20 f304 	lsr.w	r3, r0, r4
 800071c:	fa01 f205 	lsl.w	r2, r1, r5
 8000720:	ea43 0302 	orr.w	r3, r3, r2
 8000724:	fa21 f004 	lsr.w	r0, r1, r4
 8000728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800072c:	fa21 f204 	lsr.w	r2, r1, r4
 8000730:	ea20 0002 	bic.w	r0, r0, r2
 8000734:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f094 0f00 	teq	r4, #0
 8000748:	d10f      	bne.n	800076a <__aeabi_dmul+0x1c2>
 800074a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800074e:	0040      	lsls	r0, r0, #1
 8000750:	eb41 0101 	adc.w	r1, r1, r1
 8000754:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000758:	bf08      	it	eq
 800075a:	3c01      	subeq	r4, #1
 800075c:	d0f7      	beq.n	800074e <__aeabi_dmul+0x1a6>
 800075e:	ea41 0106 	orr.w	r1, r1, r6
 8000762:	f095 0f00 	teq	r5, #0
 8000766:	bf18      	it	ne
 8000768:	4770      	bxne	lr
 800076a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800076e:	0052      	lsls	r2, r2, #1
 8000770:	eb43 0303 	adc.w	r3, r3, r3
 8000774:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000778:	bf08      	it	eq
 800077a:	3d01      	subeq	r5, #1
 800077c:	d0f7      	beq.n	800076e <__aeabi_dmul+0x1c6>
 800077e:	ea43 0306 	orr.w	r3, r3, r6
 8000782:	4770      	bx	lr
 8000784:	ea94 0f0c 	teq	r4, ip
 8000788:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800078c:	bf18      	it	ne
 800078e:	ea95 0f0c 	teqne	r5, ip
 8000792:	d00c      	beq.n	80007ae <__aeabi_dmul+0x206>
 8000794:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000798:	bf18      	it	ne
 800079a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800079e:	d1d1      	bne.n	8000744 <__aeabi_dmul+0x19c>
 80007a0:	ea81 0103 	eor.w	r1, r1, r3
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007b2:	bf06      	itte	eq
 80007b4:	4610      	moveq	r0, r2
 80007b6:	4619      	moveq	r1, r3
 80007b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007bc:	d019      	beq.n	80007f2 <__aeabi_dmul+0x24a>
 80007be:	ea94 0f0c 	teq	r4, ip
 80007c2:	d102      	bne.n	80007ca <__aeabi_dmul+0x222>
 80007c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c8:	d113      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007ca:	ea95 0f0c 	teq	r5, ip
 80007ce:	d105      	bne.n	80007dc <__aeabi_dmul+0x234>
 80007d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007d4:	bf1c      	itt	ne
 80007d6:	4610      	movne	r0, r2
 80007d8:	4619      	movne	r1, r3
 80007da:	d10a      	bne.n	80007f2 <__aeabi_dmul+0x24a>
 80007dc:	ea81 0103 	eor.w	r1, r1, r3
 80007e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	bd70      	pop	{r4, r5, r6, pc}
 80007f2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007fa:	bd70      	pop	{r4, r5, r6, pc}

080007fc <__aeabi_ddiv>:
 80007fc:	b570      	push	{r4, r5, r6, lr}
 80007fe:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000802:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000806:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800080a:	bf1d      	ittte	ne
 800080c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000810:	ea94 0f0c 	teqne	r4, ip
 8000814:	ea95 0f0c 	teqne	r5, ip
 8000818:	f000 f8a7 	bleq	800096a <__aeabi_ddiv+0x16e>
 800081c:	eba4 0405 	sub.w	r4, r4, r5
 8000820:	ea81 0e03 	eor.w	lr, r1, r3
 8000824:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000828:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800082c:	f000 8088 	beq.w	8000940 <__aeabi_ddiv+0x144>
 8000830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000834:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000838:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800083c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000840:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000844:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000848:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800084c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000850:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000854:	429d      	cmp	r5, r3
 8000856:	bf08      	it	eq
 8000858:	4296      	cmpeq	r6, r2
 800085a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800085e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000862:	d202      	bcs.n	800086a <__aeabi_ddiv+0x6e>
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	1ab6      	subs	r6, r6, r2
 800086c:	eb65 0503 	sbc.w	r5, r5, r3
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800087a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008dc:	d018      	beq.n	8000910 <__aeabi_ddiv+0x114>
 80008de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008fa:	d1c0      	bne.n	800087e <__aeabi_ddiv+0x82>
 80008fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000900:	d10b      	bne.n	800091a <__aeabi_ddiv+0x11e>
 8000902:	ea41 0100 	orr.w	r1, r1, r0
 8000906:	f04f 0000 	mov.w	r0, #0
 800090a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800090e:	e7b6      	b.n	800087e <__aeabi_ddiv+0x82>
 8000910:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000914:	bf04      	itt	eq
 8000916:	4301      	orreq	r1, r0
 8000918:	2000      	moveq	r0, #0
 800091a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800091e:	bf88      	it	hi
 8000920:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000924:	f63f aeaf 	bhi.w	8000686 <__aeabi_dmul+0xde>
 8000928:	ebb5 0c03 	subs.w	ip, r5, r3
 800092c:	bf04      	itt	eq
 800092e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000932:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000936:	f150 0000 	adcs.w	r0, r0, #0
 800093a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093e:	bd70      	pop	{r4, r5, r6, pc}
 8000940:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000944:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000948:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800094c:	bfc2      	ittt	gt
 800094e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000952:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000956:	bd70      	popgt	{r4, r5, r6, pc}
 8000958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800095c:	f04f 0e00 	mov.w	lr, #0
 8000960:	3c01      	subs	r4, #1
 8000962:	e690      	b.n	8000686 <__aeabi_dmul+0xde>
 8000964:	ea45 0e06 	orr.w	lr, r5, r6
 8000968:	e68d      	b.n	8000686 <__aeabi_dmul+0xde>
 800096a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800096e:	ea94 0f0c 	teq	r4, ip
 8000972:	bf08      	it	eq
 8000974:	ea95 0f0c 	teqeq	r5, ip
 8000978:	f43f af3b 	beq.w	80007f2 <__aeabi_dmul+0x24a>
 800097c:	ea94 0f0c 	teq	r4, ip
 8000980:	d10a      	bne.n	8000998 <__aeabi_ddiv+0x19c>
 8000982:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000986:	f47f af34 	bne.w	80007f2 <__aeabi_dmul+0x24a>
 800098a:	ea95 0f0c 	teq	r5, ip
 800098e:	f47f af25 	bne.w	80007dc <__aeabi_dmul+0x234>
 8000992:	4610      	mov	r0, r2
 8000994:	4619      	mov	r1, r3
 8000996:	e72c      	b.n	80007f2 <__aeabi_dmul+0x24a>
 8000998:	ea95 0f0c 	teq	r5, ip
 800099c:	d106      	bne.n	80009ac <__aeabi_ddiv+0x1b0>
 800099e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009a2:	f43f aefd 	beq.w	80007a0 <__aeabi_dmul+0x1f8>
 80009a6:	4610      	mov	r0, r2
 80009a8:	4619      	mov	r1, r3
 80009aa:	e722      	b.n	80007f2 <__aeabi_dmul+0x24a>
 80009ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009b6:	f47f aec5 	bne.w	8000744 <__aeabi_dmul+0x19c>
 80009ba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009be:	f47f af0d 	bne.w	80007dc <__aeabi_dmul+0x234>
 80009c2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009c6:	f47f aeeb 	bne.w	80007a0 <__aeabi_dmul+0x1f8>
 80009ca:	e712      	b.n	80007f2 <__aeabi_dmul+0x24a>

080009cc <__gedf2>:
 80009cc:	f04f 3cff 	mov.w	ip, #4294967295
 80009d0:	e006      	b.n	80009e0 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__ledf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	e002      	b.n	80009e0 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__cmpdf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009f6:	d01b      	beq.n	8000a30 <__cmpdf2+0x54>
 80009f8:	b001      	add	sp, #4
 80009fa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009fe:	bf0c      	ite	eq
 8000a00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a04:	ea91 0f03 	teqne	r1, r3
 8000a08:	bf02      	ittt	eq
 8000a0a:	ea90 0f02 	teqeq	r0, r2
 8000a0e:	2000      	moveq	r0, #0
 8000a10:	4770      	bxeq	lr
 8000a12:	f110 0f00 	cmn.w	r0, #0
 8000a16:	ea91 0f03 	teq	r1, r3
 8000a1a:	bf58      	it	pl
 8000a1c:	4299      	cmppl	r1, r3
 8000a1e:	bf08      	it	eq
 8000a20:	4290      	cmpeq	r0, r2
 8000a22:	bf2c      	ite	cs
 8000a24:	17d8      	asrcs	r0, r3, #31
 8000a26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a2a:	f040 0001 	orr.w	r0, r0, #1
 8000a2e:	4770      	bx	lr
 8000a30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__cmpdf2+0x64>
 8000a3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a3e:	d107      	bne.n	8000a50 <__cmpdf2+0x74>
 8000a40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d1d6      	bne.n	80009f8 <__cmpdf2+0x1c>
 8000a4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a4e:	d0d3      	beq.n	80009f8 <__cmpdf2+0x1c>
 8000a50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdrcmple>:
 8000a58:	4684      	mov	ip, r0
 8000a5a:	4610      	mov	r0, r2
 8000a5c:	4662      	mov	r2, ip
 8000a5e:	468c      	mov	ip, r1
 8000a60:	4619      	mov	r1, r3
 8000a62:	4663      	mov	r3, ip
 8000a64:	e000      	b.n	8000a68 <__aeabi_cdcmpeq>
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdcmpeq>:
 8000a68:	b501      	push	{r0, lr}
 8000a6a:	f7ff ffb7 	bl	80009dc <__cmpdf2>
 8000a6e:	2800      	cmp	r0, #0
 8000a70:	bf48      	it	mi
 8000a72:	f110 0f00 	cmnmi.w	r0, #0
 8000a76:	bd01      	pop	{r0, pc}

08000a78 <__aeabi_dcmpeq>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff fff4 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a80:	bf0c      	ite	eq
 8000a82:	2001      	moveq	r0, #1
 8000a84:	2000      	movne	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmplt>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffea 	bl	8000a68 <__aeabi_cdcmpeq>
 8000a94:	bf34      	ite	cc
 8000a96:	2001      	movcc	r0, #1
 8000a98:	2000      	movcs	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmple>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffe0 	bl	8000a68 <__aeabi_cdcmpeq>
 8000aa8:	bf94      	ite	ls
 8000aaa:	2001      	movls	r0, #1
 8000aac:	2000      	movhi	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_dcmpge>:
 8000ab4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab8:	f7ff ffce 	bl	8000a58 <__aeabi_cdrcmple>
 8000abc:	bf94      	ite	ls
 8000abe:	2001      	movls	r0, #1
 8000ac0:	2000      	movhi	r0, #0
 8000ac2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_dcmpgt>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff ffc4 	bl	8000a58 <__aeabi_cdrcmple>
 8000ad0:	bf34      	ite	cc
 8000ad2:	2001      	movcc	r0, #1
 8000ad4:	2000      	movcs	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmpun>:
 8000adc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae4:	d102      	bne.n	8000aec <__aeabi_dcmpun+0x10>
 8000ae6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aea:	d10a      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x20>
 8000af6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afa:	d102      	bne.n	8000b02 <__aeabi_dcmpun+0x26>
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	f04f 0001 	mov.w	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <__aeabi_d2iz>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d215      	bcs.n	8000b3e <__aeabi_d2iz+0x36>
 8000b12:	d511      	bpl.n	8000b38 <__aeabi_d2iz+0x30>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d912      	bls.n	8000b44 <__aeabi_d2iz+0x3c>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b32:	bf18      	it	ne
 8000b34:	4240      	negne	r0, r0
 8000b36:	4770      	bx	lr
 8000b38:	f04f 0000 	mov.w	r0, #0
 8000b3c:	4770      	bx	lr
 8000b3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b42:	d105      	bne.n	8000b50 <__aeabi_d2iz+0x48>
 8000b44:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	bf08      	it	eq
 8000b4a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b4e:	4770      	bx	lr
 8000b50:	f04f 0000 	mov.w	r0, #0
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a8 	b.w	8000fa0 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83e 	bl	8000cd8 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	4605      	mov	r5, r0
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	4628      	mov	r0, r5
 8000c70:	4621      	mov	r1, r4
 8000c72:	2200      	movs	r2, #0
 8000c74:	2300      	movs	r3, #0
 8000c76:	f7ff ff09 	bl	8000a8c <__aeabi_dcmplt>
 8000c7a:	b928      	cbnz	r0, 8000c88 <__aeabi_d2lz+0x20>
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	4621      	mov	r1, r4
 8000c80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c84:	f000 b80a 	b.w	8000c9c <__aeabi_d2ulz>
 8000c88:	4628      	mov	r0, r5
 8000c8a:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000c8e:	f000 f805 	bl	8000c9c <__aeabi_d2ulz>
 8000c92:	4240      	negs	r0, r0
 8000c94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c98:	bd38      	pop	{r3, r4, r5, pc}
 8000c9a:	bf00      	nop

08000c9c <__aeabi_d2ulz>:
 8000c9c:	b5d0      	push	{r4, r6, r7, lr}
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <__aeabi_d2ulz+0x34>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4606      	mov	r6, r0
 8000ca4:	460f      	mov	r7, r1
 8000ca6:	f7ff fc7f 	bl	80005a8 <__aeabi_dmul>
 8000caa:	f7ff ff55 	bl	8000b58 <__aeabi_d2uiz>
 8000cae:	4604      	mov	r4, r0
 8000cb0:	f7ff fc00 	bl	80004b4 <__aeabi_ui2d>
 8000cb4:	4b07      	ldr	r3, [pc, #28]	; (8000cd4 <__aeabi_d2ulz+0x38>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f7ff fc76 	bl	80005a8 <__aeabi_dmul>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	4639      	mov	r1, r7
 8000cc4:	f7ff fab8 	bl	8000238 <__aeabi_dsub>
 8000cc8:	f7ff ff46 	bl	8000b58 <__aeabi_d2uiz>
 8000ccc:	4621      	mov	r1, r4
 8000cce:	bdd0      	pop	{r4, r6, r7, pc}
 8000cd0:	3df00000 	.word	0x3df00000
 8000cd4:	41f00000 	.word	0x41f00000

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	460d      	mov	r5, r1
 8000ce0:	4604      	mov	r4, r0
 8000ce2:	460f      	mov	r7, r1
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d14a      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce8:	428a      	cmp	r2, r1
 8000cea:	4694      	mov	ip, r2
 8000cec:	d965      	bls.n	8000dba <__udivmoddi4+0xe2>
 8000cee:	fab2 f382 	clz	r3, r2
 8000cf2:	b143      	cbz	r3, 8000d06 <__udivmoddi4+0x2e>
 8000cf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cf8:	f1c3 0220 	rsb	r2, r3, #32
 8000cfc:	409f      	lsls	r7, r3
 8000cfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000d02:	4317      	orrs	r7, r2
 8000d04:	409c      	lsls	r4, r3
 8000d06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d0a:	fa1f f58c 	uxth.w	r5, ip
 8000d0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d12:	0c22      	lsrs	r2, r4, #16
 8000d14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d1c:	fb01 f005 	mul.w	r0, r1, r5
 8000d20:	4290      	cmp	r0, r2
 8000d22:	d90a      	bls.n	8000d3a <__udivmoddi4+0x62>
 8000d24:	eb1c 0202 	adds.w	r2, ip, r2
 8000d28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d2c:	f080 811b 	bcs.w	8000f66 <__udivmoddi4+0x28e>
 8000d30:	4290      	cmp	r0, r2
 8000d32:	f240 8118 	bls.w	8000f66 <__udivmoddi4+0x28e>
 8000d36:	3902      	subs	r1, #2
 8000d38:	4462      	add	r2, ip
 8000d3a:	1a12      	subs	r2, r2, r0
 8000d3c:	b2a4      	uxth	r4, r4
 8000d3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d4a:	fb00 f505 	mul.w	r5, r0, r5
 8000d4e:	42a5      	cmp	r5, r4
 8000d50:	d90a      	bls.n	8000d68 <__udivmoddi4+0x90>
 8000d52:	eb1c 0404 	adds.w	r4, ip, r4
 8000d56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d5a:	f080 8106 	bcs.w	8000f6a <__udivmoddi4+0x292>
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	f240 8103 	bls.w	8000f6a <__udivmoddi4+0x292>
 8000d64:	4464      	add	r4, ip
 8000d66:	3802      	subs	r0, #2
 8000d68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	2100      	movs	r1, #0
 8000d70:	b11e      	cbz	r6, 8000d7a <__udivmoddi4+0xa2>
 8000d72:	40dc      	lsrs	r4, r3
 8000d74:	2300      	movs	r3, #0
 8000d76:	e9c6 4300 	strd	r4, r3, [r6]
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0xbc>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80ec 	beq.w	8000f60 <__udivmoddi4+0x288>
 8000d88:	2100      	movs	r1, #0
 8000d8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d8e:	4608      	mov	r0, r1
 8000d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d94:	fab3 f183 	clz	r1, r3
 8000d98:	2900      	cmp	r1, #0
 8000d9a:	d149      	bne.n	8000e30 <__udivmoddi4+0x158>
 8000d9c:	42ab      	cmp	r3, r5
 8000d9e:	d302      	bcc.n	8000da6 <__udivmoddi4+0xce>
 8000da0:	4282      	cmp	r2, r0
 8000da2:	f200 80f7 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000da6:	1a84      	subs	r4, r0, r2
 8000da8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dac:	2001      	movs	r0, #1
 8000dae:	4617      	mov	r7, r2
 8000db0:	2e00      	cmp	r6, #0
 8000db2:	d0e2      	beq.n	8000d7a <__udivmoddi4+0xa2>
 8000db4:	e9c6 4700 	strd	r4, r7, [r6]
 8000db8:	e7df      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000dba:	b902      	cbnz	r2, 8000dbe <__udivmoddi4+0xe6>
 8000dbc:	deff      	udf	#255	; 0xff
 8000dbe:	fab2 f382 	clz	r3, r2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	f040 808f 	bne.w	8000ee6 <__udivmoddi4+0x20e>
 8000dc8:	1a8a      	subs	r2, r1, r2
 8000dca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dce:	fa1f fe8c 	uxth.w	lr, ip
 8000dd2:	2101      	movs	r1, #1
 8000dd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000dd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000ddc:	0c22      	lsrs	r2, r4, #16
 8000dde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000de2:	fb0e f005 	mul.w	r0, lr, r5
 8000de6:	4290      	cmp	r0, r2
 8000de8:	d908      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dea:	eb1c 0202 	adds.w	r2, ip, r2
 8000dee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4290      	cmp	r0, r2
 8000df6:	f200 80ca 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000dfa:	4645      	mov	r5, r8
 8000dfc:	1a12      	subs	r2, r2, r0
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e04:	fb07 2210 	mls	r2, r7, r0, r2
 8000e08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d908      	bls.n	8000e26 <__udivmoddi4+0x14e>
 8000e14:	eb1c 0404 	adds.w	r4, ip, r4
 8000e18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e1c:	d202      	bcs.n	8000e24 <__udivmoddi4+0x14c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f200 80ba 	bhi.w	8000f98 <__udivmoddi4+0x2c0>
 8000e24:	4610      	mov	r0, r2
 8000e26:	eba4 040e 	sub.w	r4, r4, lr
 8000e2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e2e:	e79f      	b.n	8000d70 <__udivmoddi4+0x98>
 8000e30:	f1c1 0720 	rsb	r7, r1, #32
 8000e34:	408b      	lsls	r3, r1
 8000e36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e42:	fa20 f307 	lsr.w	r3, r0, r7
 8000e46:	40fd      	lsrs	r5, r7
 8000e48:	4323      	orrs	r3, r4
 8000e4a:	fa00 f901 	lsl.w	r9, r0, r1
 8000e4e:	ea4f 401c 	mov.w	r0, ip, lsr #16
 8000e52:	fa1f fe8c 	uxth.w	lr, ip
 8000e56:	fbb5 f8f0 	udiv	r8, r5, r0
 8000e5a:	0c1c      	lsrs	r4, r3, #16
 8000e5c:	fb00 5518 	mls	r5, r0, r8, r5
 8000e60:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e64:	fb08 f50e 	mul.w	r5, r8, lr
 8000e68:	42a5      	cmp	r5, r4
 8000e6a:	fa02 f201 	lsl.w	r2, r2, r1
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	42a5      	cmp	r5, r4
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a8 0802 	sub.w	r8, r8, #2
 8000e86:	4464      	add	r4, ip
 8000e88:	1b64      	subs	r4, r4, r5
 8000e8a:	b29d      	uxth	r5, r3
 8000e8c:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e90:	fb00 4413 	mls	r4, r0, r3, r4
 8000e94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3b02      	subs	r3, #2
 8000eb0:	4464      	add	r4, ip
 8000eb2:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000eb6:	fba0 8302 	umull	r8, r3, r0, r2
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	429c      	cmp	r4, r3
 8000ec0:	46c6      	mov	lr, r8
 8000ec2:	461d      	mov	r5, r3
 8000ec4:	d355      	bcc.n	8000f72 <__udivmoddi4+0x29a>
 8000ec6:	d052      	beq.n	8000f6e <__udivmoddi4+0x296>
 8000ec8:	b156      	cbz	r6, 8000ee0 <__udivmoddi4+0x208>
 8000eca:	ebb9 030e 	subs.w	r3, r9, lr
 8000ece:	eb64 0405 	sbc.w	r4, r4, r5
 8000ed2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ed6:	40cb      	lsrs	r3, r1
 8000ed8:	40cc      	lsrs	r4, r1
 8000eda:	431f      	orrs	r7, r3
 8000edc:	e9c6 7400 	strd	r7, r4, [r6]
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ee6:	f1c3 0120 	rsb	r1, r3, #32
 8000eea:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eee:	fa20 f201 	lsr.w	r2, r0, r1
 8000ef2:	fa25 f101 	lsr.w	r1, r5, r1
 8000ef6:	409d      	lsls	r5, r3
 8000ef8:	432a      	orrs	r2, r5
 8000efa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000efe:	fa1f fe8c 	uxth.w	lr, ip
 8000f02:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f06:	fb07 1510 	mls	r5, r7, r0, r1
 8000f0a:	0c11      	lsrs	r1, r2, #16
 8000f0c:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f10:	fb00 f50e 	mul.w	r5, r0, lr
 8000f14:	428d      	cmp	r5, r1
 8000f16:	fa04 f403 	lsl.w	r4, r4, r3
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f20:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428d      	cmp	r5, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	4461      	add	r1, ip
 8000f2e:	1b49      	subs	r1, r1, r5
 8000f30:	b292      	uxth	r2, r2
 8000f32:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f36:	fb07 1115 	mls	r1, r7, r5, r1
 8000f3a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f3e:	fb05 f10e 	mul.w	r1, r5, lr
 8000f42:	4291      	cmp	r1, r2
 8000f44:	d908      	bls.n	8000f58 <__udivmoddi4+0x280>
 8000f46:	eb1c 0202 	adds.w	r2, ip, r2
 8000f4a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f4e:	d216      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f50:	4291      	cmp	r1, r2
 8000f52:	d914      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f54:	3d02      	subs	r5, #2
 8000f56:	4462      	add	r2, ip
 8000f58:	1a52      	subs	r2, r2, r1
 8000f5a:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f5e:	e739      	b.n	8000dd4 <__udivmoddi4+0xfc>
 8000f60:	4631      	mov	r1, r6
 8000f62:	4630      	mov	r0, r6
 8000f64:	e709      	b.n	8000d7a <__udivmoddi4+0xa2>
 8000f66:	4639      	mov	r1, r7
 8000f68:	e6e7      	b.n	8000d3a <__udivmoddi4+0x62>
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	e6fc      	b.n	8000d68 <__udivmoddi4+0x90>
 8000f6e:	45c1      	cmp	r9, r8
 8000f70:	d2aa      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f72:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f76:	eb63 050c 	sbc.w	r5, r3, ip
 8000f7a:	3801      	subs	r0, #1
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4645      	mov	r5, r8
 8000f80:	e7ea      	b.n	8000f58 <__udivmoddi4+0x280>
 8000f82:	4603      	mov	r3, r0
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4640      	mov	r0, r8
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	46d0      	mov	r8, sl
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3d02      	subs	r5, #2
 8000f90:	4462      	add	r2, ip
 8000f92:	e733      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f94:	4608      	mov	r0, r1
 8000f96:	e70b      	b.n	8000db0 <__udivmoddi4+0xd8>
 8000f98:	4464      	add	r4, ip
 8000f9a:	3802      	subs	r0, #2
 8000f9c:	e743      	b.n	8000e26 <__udivmoddi4+0x14e>
 8000f9e:	bf00      	nop

08000fa0 <__aeabi_idiv0>:
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop

08000fa4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fa4:	b500      	push	{lr}
 8000fa6:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fa8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fae:	f042 0204 	orr.w	r2, r2, #4
 8000fb2:	649a      	str	r2, [r3, #72]	; 0x48
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fb4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fb6:	f002 0204 	and.w	r2, r2, #4
 8000fba:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000fbc:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000fbe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000fc0:	f042 0201 	orr.w	r2, r2, #1
 8000fc4:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fc8:	f003 0301 	and.w	r3, r3, #1
 8000fcc:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8000fce:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 2, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	200f      	movs	r0, #15
 8000fd6:	f001 fab5 	bl	8002544 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f001 faea 	bl	80025b4 <HAL_NVIC_EnableIRQ>

}
 8000fe0:	b003      	add	sp, #12
 8000fe2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000fe8 <MX_GPIO_Init>:
     PA12   ------> I2C2_SCL
     PA11   ------> I2C2_SDA
     PB6   ------> I2C1_SCL
*/
void MX_GPIO_Init(void)
{
 8000fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fec:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fee:	2400      	movs	r4, #0
 8000ff0:	9403      	str	r4, [sp, #12]
 8000ff2:	9404      	str	r4, [sp, #16]
 8000ff4:	9405      	str	r4, [sp, #20]
 8000ff6:	9406      	str	r4, [sp, #24]
 8000ff8:	9407      	str	r4, [sp, #28]
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ffa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001000:	f042 0201 	orr.w	r2, r2, #1
 8001004:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001006:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001008:	f002 0201 	and.w	r2, r2, #1
 800100c:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 800100e:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001010:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001012:	f042 0202 	orr.w	r2, r2, #2
 8001016:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001018:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800101a:	f002 0202 	and.w	r2, r2, #2
 800101e:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001020:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001022:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001024:	f042 0204 	orr.w	r2, r2, #4
 8001028:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	f003 0304 	and.w	r3, r3, #4
 8001030:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001032:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 8001034:	4e28      	ldr	r6, [pc, #160]	; (80010d8 <MX_GPIO_Init+0xf0>)
 8001036:	4622      	mov	r2, r4
 8001038:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 800103c:	4630      	mov	r0, r6
 800103e:	f001 feaf 	bl	8002da0 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA12 PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001042:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001046:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001048:	f04f 0a12 	mov.w	sl, #18
 800104c:	f8cd a010 	str.w	sl, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001050:	2501      	movs	r5, #1
 8001052:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001054:	2703      	movs	r7, #3
 8001056:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001058:	f04f 0904 	mov.w	r9, #4
 800105c:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001060:	a903      	add	r1, sp, #12
 8001062:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001066:	f001 fd4b 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 800106a:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 800106e:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001070:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001074:	2302      	movs	r3, #2
 8001076:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001078:	a903      	add	r1, sp, #12
 800107a:	4630      	mov	r0, r6
 800107c:	f001 fd40 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 8001080:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001082:	f44f 1804 	mov.w	r8, #2162688	; 0x210000
 8001086:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108a:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108c:	a903      	add	r1, sp, #12
 800108e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001092:	f001 fd35 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 8001096:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800109a:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109c:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a0:	9706      	str	r7, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	a903      	add	r1, sp, #12
 80010a4:	4630      	mov	r0, r6
 80010a6:	f001 fd2b 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010aa:	2440      	movs	r4, #64	; 0x40
 80010ac:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ae:	f8cd a010 	str.w	sl, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b2:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010b6:	f8cd 901c 	str.w	r9, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ba:	a903      	add	r1, sp, #12
 80010bc:	4630      	mov	r0, r6
 80010be:	f001 fd1f 	bl	8002b00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 80010c2:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c4:	f8cd 8010 	str.w	r8, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c8:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 80010ca:	a903      	add	r1, sp, #12
 80010cc:	4803      	ldr	r0, [pc, #12]	; (80010dc <MX_GPIO_Init+0xf4>)
 80010ce:	f001 fd17 	bl	8002b00 <HAL_GPIO_Init>

}
 80010d2:	b008      	add	sp, #32
 80010d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d8:	48000400 	.word	0x48000400
 80010dc:	48000800 	.word	0x48000800

080010e0 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 80010e0:	b508      	push	{r3, lr}
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80010e2:	4812      	ldr	r0, [pc, #72]	; (800112c <MX_I2C3_Init+0x4c>)
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <MX_I2C3_Init+0x50>)
 80010e6:	6003      	str	r3, [r0, #0]
  hi2c3.Init.Timing = 0x20303E5D;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C3_Init+0x54>)
 80010ea:	6043      	str	r3, [r0, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	6083      	str	r3, [r0, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f0:	2201      	movs	r2, #1
 80010f2:	60c2      	str	r2, [r0, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010f4:	6103      	str	r3, [r0, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80010f6:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010f8:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010fa:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010fc:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80010fe:	f001 fe54 	bl	8002daa <HAL_I2C_Init>
 8001102:	b950      	cbnz	r0, 800111a <MX_I2C3_Init+0x3a>
    Error_Handler();
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001104:	2100      	movs	r1, #0
 8001106:	4809      	ldr	r0, [pc, #36]	; (800112c <MX_I2C3_Init+0x4c>)
 8001108:	f001 fead 	bl	8002e66 <HAL_I2CEx_ConfigAnalogFilter>
 800110c:	b940      	cbnz	r0, 8001120 <MX_I2C3_Init+0x40>
    Error_Handler();
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800110e:	2100      	movs	r1, #0
 8001110:	4806      	ldr	r0, [pc, #24]	; (800112c <MX_I2C3_Init+0x4c>)
 8001112:	f001 fed6 	bl	8002ec2 <HAL_I2CEx_ConfigDigitalFilter>
 8001116:	b930      	cbnz	r0, 8001126 <MX_I2C3_Init+0x46>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001118:	bd08      	pop	{r3, pc}
    Error_Handler();
 800111a:	f000 f871 	bl	8001200 <Error_Handler>
 800111e:	e7f1      	b.n	8001104 <MX_I2C3_Init+0x24>
    Error_Handler();
 8001120:	f000 f86e 	bl	8001200 <Error_Handler>
 8001124:	e7f3      	b.n	800110e <MX_I2C3_Init+0x2e>
    Error_Handler();
 8001126:	f000 f86b 	bl	8001200 <Error_Handler>
}
 800112a:	e7f5      	b.n	8001118 <MX_I2C3_Init+0x38>
 800112c:	200001fc 	.word	0x200001fc
 8001130:	40005c00 	.word	0x40005c00
 8001134:	20303e5d 	.word	0x20303e5d

08001138 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800113c:	b096      	sub	sp, #88	; 0x58
 800113e:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	2100      	movs	r1, #0
 8001142:	9111      	str	r1, [sp, #68]	; 0x44
 8001144:	9112      	str	r1, [sp, #72]	; 0x48
 8001146:	9113      	str	r1, [sp, #76]	; 0x4c
 8001148:	9114      	str	r1, [sp, #80]	; 0x50
 800114a:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800114c:	2238      	movs	r2, #56	; 0x38
 800114e:	a803      	add	r0, sp, #12
 8001150:	f008 fdff 	bl	8009d52 <memset>
  if(i2cHandle->Instance==I2C3)
 8001154:	6822      	ldr	r2, [r4, #0]
 8001156:	4b27      	ldr	r3, [pc, #156]	; (80011f4 <HAL_I2C_MspInit+0xbc>)
 8001158:	429a      	cmp	r2, r3
 800115a:	d002      	beq.n	8001162 <HAL_I2C_MspInit+0x2a>
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800115c:	b016      	add	sp, #88	; 0x58
 800115e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8001162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001166:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8001168:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800116c:	930a      	str	r3, [sp, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116e:	a803      	add	r0, sp, #12
 8001170:	f002 fcf4 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 8001174:	2800      	cmp	r0, #0
 8001176:	d139      	bne.n	80011ec <HAL_I2C_MspInit+0xb4>
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001178:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800117c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800117e:	f043 0304 	orr.w	r3, r3, #4
 8001182:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001184:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001186:	f003 0304 	and.w	r3, r3, #4
 800118a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800118c:	9b02      	ldr	r3, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800118e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001196:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001198:	f003 0302 	and.w	r3, r3, #2
 800119c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800119e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80011a0:	2302      	movs	r3, #2
 80011a2:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011a4:	f04f 0812 	mov.w	r8, #18
 80011a8:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ac:	2701      	movs	r7, #1
 80011ae:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2603      	movs	r6, #3
 80011b2:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011b4:	2504      	movs	r5, #4
 80011b6:	9515      	str	r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011b8:	a911      	add	r1, sp, #68	; 0x44
 80011ba:	480f      	ldr	r0, [pc, #60]	; (80011f8 <HAL_I2C_MspInit+0xc0>)
 80011bc:	f001 fca0 	bl	8002b00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c4:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011c6:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011ca:	9713      	str	r7, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	9614      	str	r6, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80011ce:	9515      	str	r5, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011d0:	a911      	add	r1, sp, #68	; 0x44
 80011d2:	480a      	ldr	r0, [pc, #40]	; (80011fc <HAL_I2C_MspInit+0xc4>)
 80011d4:	f001 fc94 	bl	8002b00 <HAL_GPIO_Init>
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80011d8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011da:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80011de:	65a3      	str	r3, [r4, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80011e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80011e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011e6:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80011e8:	9b00      	ldr	r3, [sp, #0]
}
 80011ea:	e7b7      	b.n	800115c <HAL_I2C_MspInit+0x24>
      Error_Handler();
 80011ec:	f000 f808 	bl	8001200 <Error_Handler>
 80011f0:	e7c2      	b.n	8001178 <HAL_I2C_MspInit+0x40>
 80011f2:	bf00      	nop
 80011f4:	40005c00 	.word	0x40005c00
 80011f8:	48000800 	.word	0x48000800
 80011fc:	48000400 	.word	0x48000400

08001200 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001200:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001202:	e7fe      	b.n	8001202 <Error_Handler+0x2>

08001204 <SystemClock_Config>:
{
 8001204:	b510      	push	{r4, lr}
 8001206:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001208:	2248      	movs	r2, #72	; 0x48
 800120a:	2100      	movs	r1, #0
 800120c:	a808      	add	r0, sp, #32
 800120e:	f008 fda0 	bl	8009d52 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001212:	2400      	movs	r4, #0
 8001214:	9401      	str	r4, [sp, #4]
 8001216:	9402      	str	r4, [sp, #8]
 8001218:	9403      	str	r4, [sp, #12]
 800121a:	9404      	str	r4, [sp, #16]
 800121c:	9405      	str	r4, [sp, #20]
 800121e:	9406      	str	r4, [sp, #24]
 8001220:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001222:	f001 fe7b 	bl	8002f1c <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8001226:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800122a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800122e:	f023 0318 	bic.w	r3, r3, #24
 8001232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001236:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800123a:	6813      	ldr	r3, [r2, #0]
 800123c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001240:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001250:	2324      	movs	r3, #36	; 0x24
 8001252:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001254:	2381      	movs	r3, #129	; 0x81
 8001256:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001258:	2301      	movs	r3, #1
 800125a:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800125c:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 800125e:	23b0      	movs	r3, #176	; 0xb0
 8001260:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001262:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	a808      	add	r0, sp, #32
 8001266:	f001 fff3 	bl	8003250 <HAL_RCC_OscConfig>
 800126a:	b970      	cbnz	r0, 800128a <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800126c:	234f      	movs	r3, #79	; 0x4f
 800126e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001270:	2300      	movs	r3, #0
 8001272:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001274:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001276:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001278:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 800127a:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800127c:	2102      	movs	r1, #2
 800127e:	a801      	add	r0, sp, #4
 8001280:	f002 fb18 	bl	80038b4 <HAL_RCC_ClockConfig>
 8001284:	b918      	cbnz	r0, 800128e <SystemClock_Config+0x8a>
}
 8001286:	b01a      	add	sp, #104	; 0x68
 8001288:	bd10      	pop	{r4, pc}
    Error_Handler();
 800128a:	f7ff ffb9 	bl	8001200 <Error_Handler>
    Error_Handler();
 800128e:	f7ff ffb7 	bl	8001200 <Error_Handler>
	...

08001294 <main>:
{
 8001294:	b508      	push	{r3, lr}
  HAL_Init();
 8001296:	f001 f907 	bl	80024a8 <HAL_Init>
  SystemClock_Config();
 800129a:	f7ff ffb3 	bl	8001204 <SystemClock_Config>
  MX_GPIO_Init();
 800129e:	f7ff fea3 	bl	8000fe8 <MX_GPIO_Init>
  MX_SubGHz_Phy_Init();
 80012a2:	f000 fce0 	bl	8001c66 <MX_SubGHz_Phy_Init>
  MX_I2C3_Init();
 80012a6:	f7ff ff1b 	bl	80010e0 <MX_I2C3_Init>
  SHT31_Config(SHT31_ADDRESS_A, &hi2c3);
 80012aa:	4905      	ldr	r1, [pc, #20]	; (80012c0 <main+0x2c>)
 80012ac:	2044      	movs	r0, #68	; 0x44
 80012ae:	f006 ff13 	bl	80080d8 <SHT31_Config>
  HAL_Delay(2000);
 80012b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012b6:	f000 f961 	bl	800157c <HAL_Delay>
    MX_SubGHz_Phy_Process();
 80012ba:	f000 fcda 	bl	8001c72 <MX_SubGHz_Phy_Process>
  while (1)
 80012be:	e7fc      	b.n	80012ba <main+0x26>
 80012c0:	200001fc 	.word	0x200001fc

080012c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80012c4:	b500      	push	{lr}
 80012c6:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80012c8:	222c      	movs	r2, #44	; 0x2c
 80012ca:	2100      	movs	r1, #0
 80012cc:	a801      	add	r0, sp, #4
 80012ce:	f008 fd40 	bl	8009d52 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80012d2:	4819      	ldr	r0, [pc, #100]	; (8001338 <MX_RTC_Init+0x74>)
 80012d4:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_RTC_Init+0x78>)
 80012d6:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80012d8:	231f      	movs	r3, #31
 80012da:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80012dc:	2300      	movs	r3, #0
 80012de:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80012e0:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80012e2:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80012e4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012e8:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80012ea:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 80012ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012f0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80012f2:	f002 fe43 	bl	8003f7c <HAL_RTC_Init>
 80012f6:	b9a8      	cbnz	r0, 8001324 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 80012f8:	480f      	ldr	r0, [pc, #60]	; (8001338 <MX_RTC_Init+0x74>)
 80012fa:	f002 ff81 	bl	8004200 <HAL_RTCEx_SetSSRU_IT>
 80012fe:	b9a0      	cbnz	r0, 800132a <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001300:	2200      	movs	r2, #0
 8001302:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001304:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001306:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001308:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800130c:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800130e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001312:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001314:	a901      	add	r1, sp, #4
 8001316:	4808      	ldr	r0, [pc, #32]	; (8001338 <MX_RTC_Init+0x74>)
 8001318:	f002 fe96 	bl	8004048 <HAL_RTC_SetAlarm_IT>
 800131c:	b940      	cbnz	r0, 8001330 <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800131e:	b00d      	add	sp, #52	; 0x34
 8001320:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001324:	f7ff ff6c 	bl	8001200 <Error_Handler>
 8001328:	e7e6      	b.n	80012f8 <MX_RTC_Init+0x34>
    Error_Handler();
 800132a:	f7ff ff69 	bl	8001200 <Error_Handler>
 800132e:	e7e7      	b.n	8001300 <MX_RTC_Init+0x3c>
    Error_Handler();
 8001330:	f7ff ff66 	bl	8001200 <Error_Handler>
}
 8001334:	e7f3      	b.n	800131e <MX_RTC_Init+0x5a>
 8001336:	bf00      	nop
 8001338:	20000250 	.word	0x20000250
 800133c:	40002800 	.word	0x40002800

08001340 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001340:	b510      	push	{r4, lr}
 8001342:	b090      	sub	sp, #64	; 0x40
 8001344:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001346:	2238      	movs	r2, #56	; 0x38
 8001348:	2100      	movs	r1, #0
 800134a:	a802      	add	r0, sp, #8
 800134c:	f008 fd01 	bl	8009d52 <memset>
  if(rtcHandle->Instance==RTC)
 8001350:	6822      	ldr	r2, [r4, #0]
 8001352:	4b1a      	ldr	r3, [pc, #104]	; (80013bc <HAL_RTC_MspInit+0x7c>)
 8001354:	429a      	cmp	r2, r3
 8001356:	d001      	beq.n	800135c <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001358:	b010      	add	sp, #64	; 0x40
 800135a:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800135c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001360:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001362:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001366:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001368:	a802      	add	r0, sp, #8
 800136a:	f002 fbf7 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 800136e:	bb08      	cbnz	r0, 80013b4 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001374:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800137c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001380:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001382:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001386:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800138a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800138e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001390:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	4611      	mov	r1, r2
 8001396:	2002      	movs	r0, #2
 8001398:	f001 f8d4 	bl	8002544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 800139c:	2002      	movs	r0, #2
 800139e:	f001 f909 	bl	80025b4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	4611      	mov	r1, r2
 80013a6:	202a      	movs	r0, #42	; 0x2a
 80013a8:	f001 f8cc 	bl	8002544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80013ac:	202a      	movs	r0, #42	; 0x2a
 80013ae:	f001 f901 	bl	80025b4 <HAL_NVIC_EnableIRQ>
}
 80013b2:	e7d1      	b.n	8001358 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 80013b4:	f7ff ff24 	bl	8001200 <Error_Handler>
 80013b8:	e7da      	b.n	8001370 <HAL_RTC_MspInit+0x30>
 80013ba:	bf00      	nop
 80013bc:	40002800 	.word	0x40002800

080013c0 <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 80013c0:	4770      	bx	lr

080013c2 <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 80013c2:	4770      	bx	lr

080013c4 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 80013c4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 80013c6:	f001 f885 	bl	80024d4 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80013ca:	2001      	movs	r0, #1
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <PWR_EnterStopMode+0x14>)
 80013ce:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 80013d2:	f001 fe07 	bl	8002fe4 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 80013d6:	bd08      	pop	{r3, pc}
 80013d8:	58000400 	.word	0x58000400

080013dc <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 80013dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 80013de:	f001 f880 	bl	80024e2 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 80013e2:	bd08      	pop	{r3, pc}

080013e4 <PWR_ExitStopMode>:
{
 80013e4:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 80013e6:	f001 f87c 	bl	80024e2 <HAL_ResumeTick>
  vcom_Resume();
 80013ea:	f000 fbd3 	bl	8001b94 <vcom_Resume>
}
 80013ee:	bd08      	pop	{r3, pc}

080013f0 <PWR_EnterSleepMode>:
{
 80013f0:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 80013f2:	f001 f86f 	bl	80024d4 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 80013f6:	2101      	movs	r1, #1
 80013f8:	2000      	movs	r0, #0
 80013fa:	f001 fd97 	bl	8002f2c <HAL_PWR_EnterSLEEPMode>
}
 80013fe:	bd08      	pop	{r3, pc}

08001400 <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	4770      	bx	lr

08001402 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001402:	e7fe      	b.n	8001402 <NMI_Handler>

08001404 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001404:	e7fe      	b.n	8001404 <HardFault_Handler>

08001406 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <MemManage_Handler>

08001408 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001408:	e7fe      	b.n	8001408 <BusFault_Handler>

0800140a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800140a:	e7fe      	b.n	800140a <UsageFault_Handler>

0800140c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140c:	4770      	bx	lr

0800140e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140e:	4770      	bx	lr

08001410 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001410:	4770      	bx	lr

08001412 <SysTick_Handler>:

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001412:	4770      	bx	lr

08001414 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 8001414:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 8001416:	4802      	ldr	r0, [pc, #8]	; (8001420 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 8001418:	f002 ff1e 	bl	8004258 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 800141c:	bd08      	pop	{r3, pc}
 800141e:	bf00      	nop
 8001420:	20000250 	.word	0x20000250

08001424 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001424:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001426:	4802      	ldr	r0, [pc, #8]	; (8001430 <DMA1_Channel5_IRQHandler+0xc>)
 8001428:	f001 fae2 	bl	80029f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800142c:	bd08      	pop	{r3, pc}
 800142e:	bf00      	nop
 8001430:	200002a4 	.word	0x200002a4

08001434 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001434:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001436:	4802      	ldr	r0, [pc, #8]	; (8001440 <USART2_IRQHandler+0xc>)
 8001438:	f003 fbcc 	bl	8004bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800143c:	bd08      	pop	{r3, pc}
 800143e:	bf00      	nop
 8001440:	20000304 	.word	0x20000304

08001444 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001444:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001446:	4802      	ldr	r0, [pc, #8]	; (8001450 <RTC_Alarm_IRQHandler+0xc>)
 8001448:	f002 fd12 	bl	8003e70 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800144c:	bd08      	pop	{r3, pc}
 800144e:	bf00      	nop
 8001450:	20000250 	.word	0x20000250

08001454 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001454:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001456:	4802      	ldr	r0, [pc, #8]	; (8001460 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001458:	f003 f9b2 	bl	80047c0 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800145c:	bd08      	pop	{r3, pc}
 800145e:	bf00      	nop
 8001460:	20000288 	.word	0x20000288

08001464 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001464:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_SUBGHZ_Init+0x18>)
 8001468:	2308      	movs	r3, #8
 800146a:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800146c:	f002 ff2a 	bl	80042c4 <HAL_SUBGHZ_Init>
 8001470:	b900      	cbnz	r0, 8001474 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001472:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001474:	f7ff fec4 	bl	8001200 <Error_Handler>
}
 8001478:	e7fb      	b.n	8001472 <MX_SUBGHZ_Init+0xe>
 800147a:	bf00      	nop
 800147c:	20000288 	.word	0x20000288

08001480 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001480:	b500      	push	{lr}
 8001482:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001488:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800148a:	f042 0201 	orr.w	r2, r2, #1
 800148e:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001492:	f003 0301 	and.w	r3, r3, #1
 8001496:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001498:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 800149a:	2200      	movs	r2, #0
 800149c:	4611      	mov	r1, r2
 800149e:	2032      	movs	r0, #50	; 0x32
 80014a0:	f001 f850 	bl	8002544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80014a4:	2032      	movs	r0, #50	; 0x32
 80014a6:	f001 f885 	bl	80025b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80014aa:	b003      	add	sp, #12
 80014ac:	f85d fb04 	ldr.w	pc, [sp], #4

080014b0 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 80014b0:	b40c      	push	{r2, r3}
 80014b2:	b500      	push	{lr}
 80014b4:	b083      	sub	sp, #12
 80014b6:	ab04      	add	r3, sp, #16
 80014b8:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 80014bc:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 80014be:	f007 fb8d 	bl	8008bdc <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 80014c2:	b003      	add	sp, #12
 80014c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80014c8:	b002      	add	sp, #8
 80014ca:	4770      	bx	lr

080014cc <TimestampNow>:
{
 80014cc:	b530      	push	{r4, r5, lr}
 80014ce:	b085      	sub	sp, #20
 80014d0:	4604      	mov	r4, r0
 80014d2:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 80014d4:	a802      	add	r0, sp, #8
 80014d6:	f007 f957 	bl	8008788 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 80014da:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	9b02      	ldr	r3, [sp, #8]
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <TimestampNow+0x2c>)
 80014e4:	2110      	movs	r1, #16
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff ffe2 	bl	80014b0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 80014ec:	4620      	mov	r0, r4
 80014ee:	f7fe fe97 	bl	8000220 <strlen>
 80014f2:	8028      	strh	r0, [r5, #0]
}
 80014f4:	b005      	add	sp, #20
 80014f6:	bd30      	pop	{r4, r5, pc}
 80014f8:	0800d5d0 	.word	0x0800d5d0

080014fc <SystemApp_Init>:
{
 80014fc:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80014fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001502:	6893      	ldr	r3, [r2, #8]
 8001504:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001508:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 800150a:	f007 f95f 	bl	80087cc <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 800150e:	2401      	movs	r4, #1
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <SystemApp_Init+0x3c>)
 8001512:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001514:	f000 f83c 	bl	8001590 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001518:	f006 fe9e 	bl	8008258 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 800151c:	4807      	ldr	r0, [pc, #28]	; (800153c <SystemApp_Init+0x40>)
 800151e:	f006 feb5 	bl	800828c <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001522:	2002      	movs	r0, #2
 8001524:	f006 feb8 	bl	8008298 <UTIL_ADV_TRACE_SetVerboseLevel>
  UTIL_LPM_Init();
 8001528:	f006 ffc6 	bl	80084b8 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 800152c:	4621      	mov	r1, r4
 800152e:	4620      	mov	r0, r4
 8001530:	f006 ffe2 	bl	80084f8 <UTIL_LPM_SetOffMode>
}
 8001534:	bd10      	pop	{r4, pc}
 8001536:	bf00      	nop
 8001538:	20000294 	.word	0x20000294
 800153c:	080014cd 	.word	0x080014cd

08001540 <UTIL_SEQ_Idle>:
{
 8001540:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001542:	f006 ffef 	bl	8008524 <UTIL_LPM_EnterLowPower>
}
 8001546:	bd08      	pop	{r3, pc}

08001548 <UTIL_ADV_TRACE_PreSendHook>:
{
 8001548:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 800154a:	2101      	movs	r1, #1
 800154c:	2002      	movs	r0, #2
 800154e:	f006 ffbd 	bl	80084cc <UTIL_LPM_SetStopMode>
}
 8001552:	bd08      	pop	{r3, pc}

08001554 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001554:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001556:	2100      	movs	r1, #0
 8001558:	2002      	movs	r0, #2
 800155a:	f006 ffb7 	bl	80084cc <UTIL_LPM_SetStopMode>
}
 800155e:	bd08      	pop	{r3, pc}

08001560 <HAL_InitTick>:
  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001560:	2000      	movs	r0, #0
 8001562:	4770      	bx	lr

08001564 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001564:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001566:	4b04      	ldr	r3, [pc, #16]	; (8001578 <HAL_GetTick+0x14>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b90b      	cbnz	r3, 8001570 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 800156c:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 800156e:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001570:	f000 f8da 	bl	8001728 <TIMER_IF_GetTimerValue>
 8001574:	e7fb      	b.n	800156e <HAL_GetTick+0xa>
 8001576:	bf00      	nop
 8001578:	20000294 	.word	0x20000294

0800157c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 800157c:	b500      	push	{lr}
 800157e:	b083      	sub	sp, #12
 8001580:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001582:	9801      	ldr	r0, [sp, #4]
 8001584:	f000 f9b6 	bl	80018f4 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001588:	b003      	add	sp, #12
 800158a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001590 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001592:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001594:	f000 ffac 	bl	80024f0 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001598:	f000 ffb2 	bl	8002500 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 800159c:	f000 ffb8 	bl	8002510 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 80015a0:	2400      	movs	r4, #0
 80015a2:	9403      	str	r4, [sp, #12]
 80015a4:	9404      	str	r4, [sp, #16]
 80015a6:	9405      	str	r4, [sp, #20]
 80015a8:	9406      	str	r4, [sp, #24]
 80015aa:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 80015ac:	2301      	movs	r3, #1
 80015ae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 80015b0:	2303      	movs	r3, #3
 80015b2:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015ba:	f042 0202 	orr.w	r2, r2, #2
 80015be:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015c2:	f002 0202 	and.w	r2, r2, #2
 80015c6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80015c8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80015ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015cc:	f042 0202 	orr.w	r2, r2, #2
 80015d0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d4:	f003 0302 	and.w	r3, r3, #2
 80015d8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80015da:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 80015dc:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 80015e0:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 80015e2:	4d0c      	ldr	r5, [pc, #48]	; (8001614 <DBG_Init+0x84>)
 80015e4:	a903      	add	r1, sp, #12
 80015e6:	4628      	mov	r0, r5
 80015e8:	f001 fa8a 	bl	8002b00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 80015ec:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 80015f0:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 80015f2:	a903      	add	r1, sp, #12
 80015f4:	4628      	mov	r0, r5
 80015f6:	f001 fa83 	bl	8002b00 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 80015fa:	4622      	mov	r2, r4
 80015fc:	4639      	mov	r1, r7
 80015fe:	4628      	mov	r0, r5
 8001600:	f001 fbce 	bl	8002da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001604:	4622      	mov	r2, r4
 8001606:	4631      	mov	r1, r6
 8001608:	4628      	mov	r0, r5
 800160a:	f001 fbc9 	bl	8002da0 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 800160e:	b009      	add	sp, #36	; 0x24
 8001610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001612:	bf00      	nop
 8001614:	48000400 	.word	0x48000400

08001618 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 8001618:	2001      	movs	r0, #1
 800161a:	4770      	bx	lr

0800161c <_kill>:

int _kill(int pid, int sig)
{
 800161c:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800161e:	f008 fbeb 	bl	8009df8 <__errno>
 8001622:	2316      	movs	r3, #22
 8001624:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001626:	f04f 30ff 	mov.w	r0, #4294967295
 800162a:	bd08      	pop	{r3, pc}

0800162c <_exit>:

void _exit (int status)
{
 800162c:	b508      	push	{r3, lr}
  _kill(status, -1);
 800162e:	f04f 31ff 	mov.w	r1, #4294967295
 8001632:	f7ff fff3 	bl	800161c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001636:	e7fe      	b.n	8001636 <_exit+0xa>

08001638 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001638:	b570      	push	{r4, r5, r6, lr}
 800163a:	460c      	mov	r4, r1
 800163c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800163e:	2500      	movs	r5, #0
 8001640:	e006      	b.n	8001650 <_read+0x18>
  {
    *ptr++ = __io_getchar();
 8001642:	f3af 8000 	nop.w
 8001646:	4621      	mov	r1, r4
 8001648:	f801 0b01 	strb.w	r0, [r1], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800164c:	3501      	adds	r5, #1
    *ptr++ = __io_getchar();
 800164e:	460c      	mov	r4, r1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001650:	42b5      	cmp	r5, r6
 8001652:	dbf6      	blt.n	8001642 <_read+0xa>
  }

  return len;
}
 8001654:	4630      	mov	r0, r6
 8001656:	bd70      	pop	{r4, r5, r6, pc}

08001658 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001658:	b570      	push	{r4, r5, r6, lr}
 800165a:	460c      	mov	r4, r1
 800165c:	4616      	mov	r6, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	2500      	movs	r5, #0
 8001660:	e004      	b.n	800166c <_write+0x14>
  {
    __io_putchar(*ptr++);
 8001662:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001666:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800166a:	3501      	adds	r5, #1
 800166c:	42b5      	cmp	r5, r6
 800166e:	dbf8      	blt.n	8001662 <_write+0xa>
  }
  return len;
}
 8001670:	4630      	mov	r0, r6
 8001672:	bd70      	pop	{r4, r5, r6, pc}

08001674 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001674:	f04f 30ff 	mov.w	r0, #4294967295
 8001678:	4770      	bx	lr

0800167a <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800167a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800167e:	604b      	str	r3, [r1, #4]
  return 0;
}
 8001680:	2000      	movs	r0, #0
 8001682:	4770      	bx	lr

08001684 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001684:	2001      	movs	r0, #1
 8001686:	4770      	bx	lr

08001688 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001688:	2000      	movs	r0, #0
 800168a:	4770      	bx	lr

0800168c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800168c:	b510      	push	{r4, lr}
 800168e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001690:	4a0c      	ldr	r2, [pc, #48]	; (80016c4 <_sbrk+0x38>)
 8001692:	490d      	ldr	r1, [pc, #52]	; (80016c8 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <_sbrk+0x40>)
 8001696:	6800      	ldr	r0, [r0, #0]
 8001698:	b140      	cbz	r0, 80016ac <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800169a:	480c      	ldr	r0, [pc, #48]	; (80016cc <_sbrk+0x40>)
 800169c:	6800      	ldr	r0, [r0, #0]
 800169e:	4403      	add	r3, r0
 80016a0:	1a52      	subs	r2, r2, r1
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d806      	bhi.n	80016b4 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80016a6:	4a09      	ldr	r2, [pc, #36]	; (80016cc <_sbrk+0x40>)
 80016a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80016aa:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80016ac:	4807      	ldr	r0, [pc, #28]	; (80016cc <_sbrk+0x40>)
 80016ae:	4c08      	ldr	r4, [pc, #32]	; (80016d0 <_sbrk+0x44>)
 80016b0:	6004      	str	r4, [r0, #0]
 80016b2:	e7f2      	b.n	800169a <_sbrk+0xe>
    errno = ENOMEM;
 80016b4:	f008 fba0 	bl	8009df8 <__errno>
 80016b8:	230c      	movs	r3, #12
 80016ba:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	e7f3      	b.n	80016aa <_sbrk+0x1e>
 80016c2:	bf00      	nop
 80016c4:	20008000 	.word	0x20008000
 80016c8:	00000800 	.word	0x00000800
 80016cc:	20000298 	.word	0x20000298
 80016d0:	20000b00 	.word	0x20000b00

080016d4 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <TIMER_IF_SetTimerContext+0x1c>)
 80016d6:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80016d8:	e001      	b.n	80016de <TIMER_IF_SetTimerContext+0xa>
 80016da:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <TIMER_IF_SetTimerContext+0x1c>)
 80016dc:	6898      	ldr	r0, [r3, #8]
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <TIMER_IF_SetTimerContext+0x1c>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	4283      	cmp	r3, r0
 80016e4:	d1f9      	bne.n	80016da <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 80016e6:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 80016e8:	4b02      	ldr	r3, [pc, #8]	; (80016f4 <TIMER_IF_SetTimerContext+0x20>)
 80016ea:	6018      	str	r0, [r3, #0]
}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop
 80016f0:	40002800 	.word	0x40002800
 80016f4:	200002a0 	.word	0x200002a0

080016f8 <TIMER_IF_GetTimerContext>:
}
 80016f8:	4b01      	ldr	r3, [pc, #4]	; (8001700 <TIMER_IF_GetTimerContext+0x8>)
 80016fa:	6818      	ldr	r0, [r3, #0]
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	200002a0 	.word	0x200002a0

08001704 <TIMER_IF_GetTimerElapsedTime>:
 8001704:	4b06      	ldr	r3, [pc, #24]	; (8001720 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001706:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001708:	e001      	b.n	800170e <TIMER_IF_GetTimerElapsedTime+0xa>
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 800170c:	6898      	ldr	r0, [r3, #8]
 800170e:	4b04      	ldr	r3, [pc, #16]	; (8001720 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	4283      	cmp	r3, r0
 8001714:	d1f9      	bne.n	800170a <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001716:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001718:	4b02      	ldr	r3, [pc, #8]	; (8001724 <TIMER_IF_GetTimerElapsedTime+0x20>)
 800171a:	681b      	ldr	r3, [r3, #0]
}
 800171c:	1ac0      	subs	r0, r0, r3
 800171e:	4770      	bx	lr
 8001720:	40002800 	.word	0x40002800
 8001724:	200002a0 	.word	0x200002a0

08001728 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <TIMER_IF_GetTimerValue+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	b153      	cbz	r3, 8001744 <TIMER_IF_GetTimerValue+0x1c>
 800172e:	4b07      	ldr	r3, [pc, #28]	; (800174c <TIMER_IF_GetTimerValue+0x24>)
 8001730:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001732:	e001      	b.n	8001738 <TIMER_IF_GetTimerValue+0x10>
 8001734:	4b05      	ldr	r3, [pc, #20]	; (800174c <TIMER_IF_GetTimerValue+0x24>)
 8001736:	6898      	ldr	r0, [r3, #8]
 8001738:	4b04      	ldr	r3, [pc, #16]	; (800174c <TIMER_IF_GetTimerValue+0x24>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4283      	cmp	r3, r0
 800173e:	d1f9      	bne.n	8001734 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001740:	43c0      	mvns	r0, r0
 8001742:	4770      	bx	lr
  uint32_t ret = 0;
 8001744:	2000      	movs	r0, #0
}
 8001746:	4770      	bx	lr
 8001748:	2000029c 	.word	0x2000029c
 800174c:	40002800 	.word	0x40002800

08001750 <TIMER_IF_GetMinimumTimeout>:
}
 8001750:	2003      	movs	r0, #3
 8001752:	4770      	bx	lr

08001754 <TIMER_IF_Convert_ms2Tick>:
{
 8001754:	b508      	push	{r3, lr}
 8001756:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001758:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800175c:	2300      	movs	r3, #0
 800175e:	0280      	lsls	r0, r0, #10
 8001760:	0d89      	lsrs	r1, r1, #22
 8001762:	f7ff fa69 	bl	8000c38 <__aeabi_uldivmod>
}
 8001766:	bd08      	pop	{r3, pc}

08001768 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001768:	0ec2      	lsrs	r2, r0, #27
 800176a:	0143      	lsls	r3, r0, #5
 800176c:	1a1b      	subs	r3, r3, r0
 800176e:	f162 0200 	sbc.w	r2, r2, #0
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	181b      	adds	r3, r3, r0
 800177c:	f142 0000 	adc.w	r0, r2, #0
 8001780:	00c0      	lsls	r0, r0, #3
 8001782:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001786:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 800178a:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 800178e:	4770      	bx	lr

08001790 <TIMER_IF_StopTimer>:
{
 8001790:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001792:	4b07      	ldr	r3, [pc, #28]	; (80017b0 <TIMER_IF_StopTimer+0x20>)
 8001794:	2201      	movs	r2, #1
 8001796:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001798:	4c06      	ldr	r4, [pc, #24]	; (80017b4 <TIMER_IF_StopTimer+0x24>)
 800179a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800179e:	4620      	mov	r0, r4
 80017a0:	f002 fb26 	bl	8003df0 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80017a4:	f04f 33ff 	mov.w	r3, #4294967295
 80017a8:	6323      	str	r3, [r4, #48]	; 0x30
}
 80017aa:	2000      	movs	r0, #0
 80017ac:	bd10      	pop	{r4, pc}
 80017ae:	bf00      	nop
 80017b0:	40002800 	.word	0x40002800
 80017b4:	20000250 	.word	0x20000250

080017b8 <TIMER_IF_BkUp_Write_MSBticks>:
{
 80017b8:	b508      	push	{r3, lr}
 80017ba:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 80017bc:	2102      	movs	r1, #2
 80017be:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 80017c0:	f002 fd5f 	bl	8004282 <HAL_RTCEx_BKUPWrite>
}
 80017c4:	bd08      	pop	{r3, pc}
 80017c6:	bf00      	nop
 80017c8:	20000250 	.word	0x20000250

080017cc <TIMER_IF_Init>:
{
 80017cc:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <TIMER_IF_Init+0x40>)
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	b10b      	cbz	r3, 80017d8 <TIMER_IF_Init+0xc>
}
 80017d4:	2000      	movs	r0, #0
 80017d6:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80017d8:	4c0d      	ldr	r4, [pc, #52]	; (8001810 <TIMER_IF_Init+0x44>)
 80017da:	f04f 35ff 	mov.w	r5, #4294967295
 80017de:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 80017e0:	f7ff fd70 	bl	80012c4 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 80017e4:	f7ff ffd4 	bl	8001790 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 80017e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80017ec:	4620      	mov	r0, r4
 80017ee:	f002 faff 	bl	8003df0 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 80017f2:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 80017f4:	4620      	mov	r0, r4
 80017f6:	f002 fce3 	bl	80041c0 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 80017fa:	2000      	movs	r0, #0
 80017fc:	f7ff ffdc 	bl	80017b8 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001800:	f7ff ff68 	bl	80016d4 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001804:	4b01      	ldr	r3, [pc, #4]	; (800180c <TIMER_IF_Init+0x40>)
 8001806:	2201      	movs	r2, #1
 8001808:	701a      	strb	r2, [r3, #0]
 800180a:	e7e3      	b.n	80017d4 <TIMER_IF_Init+0x8>
 800180c:	2000029c 	.word	0x2000029c
 8001810:	20000250 	.word	0x20000250

08001814 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001814:	b508      	push	{r3, lr}
 8001816:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001818:	2100      	movs	r1, #0
 800181a:	4802      	ldr	r0, [pc, #8]	; (8001824 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 800181c:	f002 fd31 	bl	8004282 <HAL_RTCEx_BKUPWrite>
}
 8001820:	bd08      	pop	{r3, pc}
 8001822:	bf00      	nop
 8001824:	20000250 	.word	0x20000250

08001828 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001828:	b508      	push	{r3, lr}
 800182a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 800182c:	2101      	movs	r1, #1
 800182e:	4802      	ldr	r0, [pc, #8]	; (8001838 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001830:	f002 fd27 	bl	8004282 <HAL_RTCEx_BKUPWrite>
}
 8001834:	bd08      	pop	{r3, pc}
 8001836:	bf00      	nop
 8001838:	20000250 	.word	0x20000250

0800183c <TIMER_IF_StartTimer>:
{
 800183c:	b510      	push	{r4, lr}
 800183e:	b08c      	sub	sp, #48	; 0x30
 8001840:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001842:	222c      	movs	r2, #44	; 0x2c
 8001844:	2100      	movs	r1, #0
 8001846:	a801      	add	r0, sp, #4
 8001848:	f008 fa83 	bl	8009d52 <memset>
  TIMER_IF_StopTimer();
 800184c:	f7ff ffa0 	bl	8001790 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001850:	4b0c      	ldr	r3, [pc, #48]	; (8001884 <TIMER_IF_StartTimer+0x48>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	441c      	add	r4, r3
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001856:	2300      	movs	r3, #0
 8001858:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 800185a:	43e4      	mvns	r4, r4
 800185c:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800185e:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001860:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001864:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001866:	f44f 7380 	mov.w	r3, #256	; 0x100
 800186a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800186c:	2201      	movs	r2, #1
 800186e:	a901      	add	r1, sp, #4
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <TIMER_IF_StartTimer+0x4c>)
 8001872:	f002 fbe9 	bl	8004048 <HAL_RTC_SetAlarm_IT>
 8001876:	b910      	cbnz	r0, 800187e <TIMER_IF_StartTimer+0x42>
}
 8001878:	2000      	movs	r0, #0
 800187a:	b00c      	add	sp, #48	; 0x30
 800187c:	bd10      	pop	{r4, pc}
    Error_Handler();
 800187e:	f7ff fcbf 	bl	8001200 <Error_Handler>
 8001882:	e7f9      	b.n	8001878 <TIMER_IF_StartTimer+0x3c>
 8001884:	200002a0 	.word	0x200002a0
 8001888:	20000250 	.word	0x20000250

0800188c <TIMER_IF_BkUp_Read_MSBticks>:
{
 800188c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 800188e:	2102      	movs	r1, #2
 8001890:	4801      	ldr	r0, [pc, #4]	; (8001898 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001892:	f002 fcfd 	bl	8004290 <HAL_RTCEx_BKUPRead>
}
 8001896:	bd08      	pop	{r3, pc}
 8001898:	20000250 	.word	0x20000250

0800189c <TIMER_IF_GetTime>:
{
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	4605      	mov	r5, r0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <TIMER_IF_GetTime+0x34>)
 80018a2:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80018a4:	e001      	b.n	80018aa <TIMER_IF_GetTime+0xe>
 80018a6:	4b0a      	ldr	r3, [pc, #40]	; (80018d0 <TIMER_IF_GetTime+0x34>)
 80018a8:	689c      	ldr	r4, [r3, #8]
 80018aa:	4a09      	ldr	r2, [pc, #36]	; (80018d0 <TIMER_IF_GetTime+0x34>)
 80018ac:	6892      	ldr	r2, [r2, #8]
 80018ae:	42a2      	cmp	r2, r4
 80018b0:	d1f9      	bne.n	80018a6 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 80018b2:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 80018b4:	f7ff ffea 	bl	800188c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 80018b8:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80018ba:	0aa4      	lsrs	r4, r4, #10
 80018bc:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80018c0:	f3c3 0009 	ubfx	r0, r3, #0, #10
 80018c4:	f7ff ff50 	bl	8001768 <TIMER_IF_Convert_Tick2ms>
 80018c8:	8028      	strh	r0, [r5, #0]
}
 80018ca:	4620      	mov	r0, r4
 80018cc:	bd38      	pop	{r3, r4, r5, pc}
 80018ce:	bf00      	nop
 80018d0:	40002800 	.word	0x40002800

080018d4 <TIMER_IF_BkUp_Read_Seconds>:
{
 80018d4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 80018d6:	2100      	movs	r1, #0
 80018d8:	4801      	ldr	r0, [pc, #4]	; (80018e0 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 80018da:	f002 fcd9 	bl	8004290 <HAL_RTCEx_BKUPRead>
}
 80018de:	bd08      	pop	{r3, pc}
 80018e0:	20000250 	.word	0x20000250

080018e4 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 80018e4:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 80018e6:	2101      	movs	r1, #1
 80018e8:	4801      	ldr	r0, [pc, #4]	; (80018f0 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 80018ea:	f002 fcd1 	bl	8004290 <HAL_RTCEx_BKUPRead>
}
 80018ee:	bd08      	pop	{r3, pc}
 80018f0:	20000250 	.word	0x20000250

080018f4 <TIMER_IF_DelayMs>:
{
 80018f4:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 80018f6:	f7ff ff2d 	bl	8001754 <TIMER_IF_Convert_ms2Tick>
 80018fa:	4b0d      	ldr	r3, [pc, #52]	; (8001930 <TIMER_IF_DelayMs+0x3c>)
 80018fc:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80018fe:	e001      	b.n	8001904 <TIMER_IF_DelayMs+0x10>
 8001900:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <TIMER_IF_DelayMs+0x3c>)
 8001902:	6899      	ldr	r1, [r3, #8]
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <TIMER_IF_DelayMs+0x3c>)
 8001906:	6892      	ldr	r2, [r2, #8]
 8001908:	428a      	cmp	r2, r1
 800190a:	d1f9      	bne.n	8001900 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 800190c:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800190e:	e00a      	b.n	8001926 <TIMER_IF_DelayMs+0x32>
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <TIMER_IF_DelayMs+0x3c>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	4a06      	ldr	r2, [pc, #24]	; (8001930 <TIMER_IF_DelayMs+0x3c>)
 8001916:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001918:	429a      	cmp	r2, r3
 800191a:	d1f9      	bne.n	8001910 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 800191c:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800191e:	1a5b      	subs	r3, r3, r1
 8001920:	4283      	cmp	r3, r0
 8001922:	d203      	bcs.n	800192c <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001924:	bf00      	nop
 8001926:	4b02      	ldr	r3, [pc, #8]	; (8001930 <TIMER_IF_DelayMs+0x3c>)
 8001928:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 800192a:	e7f3      	b.n	8001914 <TIMER_IF_DelayMs+0x20>
}
 800192c:	bd08      	pop	{r3, pc}
 800192e:	bf00      	nop
 8001930:	40002800 	.word	0x40002800

08001934 <HAL_RTC_AlarmAEventCallback>:
{
 8001934:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001936:	f007 f86d 	bl	8008a14 <UTIL_TIMER_IRQ_Handler>
}
 800193a:	bd08      	pop	{r3, pc}

0800193c <HAL_RTCEx_SSRUEventCallback>:
{
 800193c:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 800193e:	f7ff ffa5 	bl	800188c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001942:	3001      	adds	r0, #1
 8001944:	f7ff ff38 	bl	80017b8 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001948:	bd08      	pop	{r3, pc}
	...

0800194c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800194c:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800194e:	4817      	ldr	r0, [pc, #92]	; (80019ac <MX_USART2_UART_Init+0x60>)
 8001950:	4b17      	ldr	r3, [pc, #92]	; (80019b0 <MX_USART2_UART_Init+0x64>)
 8001952:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001954:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001958:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800195a:	2300      	movs	r3, #0
 800195c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800195e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001960:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001962:	220c      	movs	r2, #12
 8001964:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001966:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001968:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800196a:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800196c:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800196e:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001970:	f003 ffea 	bl	8005948 <HAL_UART_Init>
 8001974:	b970      	cbnz	r0, 8001994 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001976:	2100      	movs	r1, #0
 8001978:	480c      	ldr	r0, [pc, #48]	; (80019ac <MX_USART2_UART_Init+0x60>)
 800197a:	f004 f99a 	bl	8005cb2 <HAL_UARTEx_SetTxFifoThreshold>
 800197e:	b960      	cbnz	r0, 800199a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001980:	2100      	movs	r1, #0
 8001982:	480a      	ldr	r0, [pc, #40]	; (80019ac <MX_USART2_UART_Init+0x60>)
 8001984:	f004 f9ba 	bl	8005cfc <HAL_UARTEx_SetRxFifoThreshold>
 8001988:	b950      	cbnz	r0, 80019a0 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800198a:	4808      	ldr	r0, [pc, #32]	; (80019ac <MX_USART2_UART_Init+0x60>)
 800198c:	f004 f96d 	bl	8005c6a <HAL_UARTEx_EnableFifoMode>
 8001990:	b948      	cbnz	r0, 80019a6 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001992:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001994:	f7ff fc34 	bl	8001200 <Error_Handler>
 8001998:	e7ed      	b.n	8001976 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800199a:	f7ff fc31 	bl	8001200 <Error_Handler>
 800199e:	e7ef      	b.n	8001980 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 80019a0:	f7ff fc2e 	bl	8001200 <Error_Handler>
 80019a4:	e7f1      	b.n	800198a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 80019a6:	f7ff fc2b 	bl	8001200 <Error_Handler>
}
 80019aa:	e7f2      	b.n	8001992 <MX_USART2_UART_Init+0x46>
 80019ac:	20000304 	.word	0x20000304
 80019b0:	40004400 	.word	0x40004400

080019b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019b4:	b530      	push	{r4, r5, lr}
 80019b6:	b097      	sub	sp, #92	; 0x5c
 80019b8:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ba:	2100      	movs	r1, #0
 80019bc:	9111      	str	r1, [sp, #68]	; 0x44
 80019be:	9112      	str	r1, [sp, #72]	; 0x48
 80019c0:	9113      	str	r1, [sp, #76]	; 0x4c
 80019c2:	9114      	str	r1, [sp, #80]	; 0x50
 80019c4:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c6:	2238      	movs	r2, #56	; 0x38
 80019c8:	a803      	add	r0, sp, #12
 80019ca:	f008 f9c2 	bl	8009d52 <memset>
  if(uartHandle->Instance==USART2)
 80019ce:	6822      	ldr	r2, [r4, #0]
 80019d0:	4b2d      	ldr	r3, [pc, #180]	; (8001a88 <HAL_UART_MspInit+0xd4>)
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d001      	beq.n	80019da <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019d6:	b017      	add	sp, #92	; 0x5c
 80019d8:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019da:	2302      	movs	r3, #2
 80019dc:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 80019de:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_UART_MspInit+0xd8>)
 80019e0:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e2:	a803      	add	r0, sp, #12
 80019e4:	f002 f8ba 	bl	8003b5c <HAL_RCCEx_PeriphCLKConfig>
 80019e8:	2800      	cmp	r0, #0
 80019ea:	d144      	bne.n	8001a76 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019f6:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80019f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80019fa:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80019fe:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001a00:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001a02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a04:	f042 0201 	orr.w	r2, r2, #1
 8001a08:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a12:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8001a14:	230c      	movs	r3, #12
 8001a16:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2500      	movs	r5, #0
 8001a1e:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a24:	2307      	movs	r3, #7
 8001a26:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a28:	a911      	add	r1, sp, #68	; 0x44
 8001a2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a2e:	f001 f867 	bl	8002b00 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 8001a32:	4817      	ldr	r0, [pc, #92]	; (8001a90 <HAL_UART_MspInit+0xdc>)
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <HAL_UART_MspInit+0xe0>)
 8001a36:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001a38:	2314      	movs	r3, #20
 8001a3a:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a40:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a46:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a48:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a4a:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a4c:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a4e:	f000 fe41 	bl	80026d4 <HAL_DMA_Init>
 8001a52:	b998      	cbnz	r0, 8001a7c <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001a54:	2110      	movs	r1, #16
 8001a56:	480e      	ldr	r0, [pc, #56]	; (8001a90 <HAL_UART_MspInit+0xdc>)
 8001a58:	f001 f83e 	bl	8002ad8 <HAL_DMA_ConfigChannelAttributes>
 8001a5c:	b988      	cbnz	r0, 8001a82 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_UART_MspInit+0xdc>)
 8001a60:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001a62:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2102      	movs	r1, #2
 8001a68:	2025      	movs	r0, #37	; 0x25
 8001a6a:	f000 fd6b 	bl	8002544 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a6e:	2025      	movs	r0, #37	; 0x25
 8001a70:	f000 fda0 	bl	80025b4 <HAL_NVIC_EnableIRQ>
}
 8001a74:	e7af      	b.n	80019d6 <HAL_UART_MspInit+0x22>
      Error_Handler();
 8001a76:	f7ff fbc3 	bl	8001200 <Error_Handler>
 8001a7a:	e7b7      	b.n	80019ec <HAL_UART_MspInit+0x38>
      Error_Handler();
 8001a7c:	f7ff fbc0 	bl	8001200 <Error_Handler>
 8001a80:	e7e8      	b.n	8001a54 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8001a82:	f7ff fbbd 	bl	8001200 <Error_Handler>
 8001a86:	e7ea      	b.n	8001a5e <HAL_UART_MspInit+0xaa>
 8001a88:	40004400 	.word	0x40004400
 8001a8c:	000c0004 	.word	0x000c0004
 8001a90:	200002a4 	.word	0x200002a4
 8001a94:	40020058 	.word	0x40020058

08001a98 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8001a98:	6802      	ldr	r2, [r0, #0]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_UART_MspDeInit+0x34>)
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	d000      	beq.n	8001aa2 <HAL_UART_MspDeInit+0xa>
 8001aa0:	4770      	bx	lr
{
 8001aa2:	b510      	push	{r4, lr}
 8001aa4:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8001aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aaa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8001aac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ab0:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8001ab2:	210c      	movs	r1, #12
 8001ab4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab8:	f001 f8f4 	bl	8002ca4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 8001abc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 8001abe:	f000 fe7b 	bl	80027b8 <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8001ac2:	2025      	movs	r0, #37	; 0x25
 8001ac4:	f000 fd84 	bl	80025d0 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	bf00      	nop
 8001acc:	40004400 	.word	0x40004400

08001ad0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8001ad0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8001ad2:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <vcom_Init+0x20>)
 8001ad4:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8001ad6:	f7ff fa65 	bl	8000fa4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001ada:	f7ff ff37 	bl	800194c <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <vcom_Init+0x24>)
 8001ae0:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8001ae4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ae8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 8001aec:	2000      	movs	r0, #0
 8001aee:	bd08      	pop	{r3, pc}
 8001af0:	2000039c 	.word	0x2000039c
 8001af4:	58000800 	.word	0x58000800

08001af8 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8001af8:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 8001afa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b00:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b04:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8001b06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001b08:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001b0c:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 8001b0e:	4804      	ldr	r0, [pc, #16]	; (8001b20 <vcom_DeInit+0x28>)
 8001b10:	f7ff ffc2 	bl	8001a98 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8001b14:	200f      	movs	r0, #15
 8001b16:	f000 fd5b 	bl	80025d0 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	bd08      	pop	{r3, pc}
 8001b1e:	bf00      	nop
 8001b20:	20000304 	.word	0x20000304

08001b24 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8001b24:	b508      	push	{r3, lr}
 8001b26:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 8001b28:	4601      	mov	r1, r0
 8001b2a:	4802      	ldr	r0, [pc, #8]	; (8001b34 <vcom_Trace_DMA+0x10>)
 8001b2c:	f002 ff8e 	bl	8004a4c <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8001b30:	2000      	movs	r0, #0
 8001b32:	bd08      	pop	{r3, pc}
 8001b34:	20000304 	.word	0x20000304

08001b38 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8001b38:	b510      	push	{r4, lr}
 8001b3a:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <vcom_ReceiveInit+0x50>)
 8001b3e:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 8001b40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b44:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 8001b46:	ab02      	add	r3, sp, #8
 8001b48:	e913 0006 	ldmdb	r3, {r1, r2}
 8001b4c:	480f      	ldr	r0, [pc, #60]	; (8001b8c <vcom_ReceiveInit+0x54>)
 8001b4e:	f004 f834 	bl	8005bba <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 8001b52:	4b0e      	ldr	r3, [pc, #56]	; (8001b8c <vcom_ReceiveInit+0x54>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	69da      	ldr	r2, [r3, #28]
 8001b58:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 8001b5c:	d1f9      	bne.n	8001b52 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 8001b5e:	69da      	ldr	r2, [r3, #28]
 8001b60:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8001b64:	d0fb      	beq.n	8001b5e <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 8001b66:	689a      	ldr	r2, [r3, #8]
 8001b68:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001b6c:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 8001b6e:	4c07      	ldr	r4, [pc, #28]	; (8001b8c <vcom_ReceiveInit+0x54>)
 8001b70:	4620      	mov	r0, r4
 8001b72:	f004 f863 	bl	8005c3c <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 8001b76:	2201      	movs	r2, #1
 8001b78:	4905      	ldr	r1, [pc, #20]	; (8001b90 <vcom_ReceiveInit+0x58>)
 8001b7a:	4620      	mov	r0, r4
 8001b7c:	f003 ffb6 	bl	8005aec <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8001b80:	2000      	movs	r0, #0
 8001b82:	b002      	add	sp, #8
 8001b84:	bd10      	pop	{r4, pc}
 8001b86:	bf00      	nop
 8001b88:	20000398 	.word	0x20000398
 8001b8c:	20000304 	.word	0x20000304
 8001b90:	200003a0 	.word	0x200003a0

08001b94 <vcom_Resume>:

void vcom_Resume(void)
{
 8001b94:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b96:	4807      	ldr	r0, [pc, #28]	; (8001bb4 <vcom_Resume+0x20>)
 8001b98:	f003 fed6 	bl	8005948 <HAL_UART_Init>
 8001b9c:	b920      	cbnz	r0, 8001ba8 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001b9e:	4806      	ldr	r0, [pc, #24]	; (8001bb8 <vcom_Resume+0x24>)
 8001ba0:	f000 fd98 	bl	80026d4 <HAL_DMA_Init>
 8001ba4:	b918      	cbnz	r0, 8001bae <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8001ba6:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001ba8:	f7ff fb2a 	bl	8001200 <Error_Handler>
 8001bac:	e7f7      	b.n	8001b9e <vcom_Resume+0xa>
    Error_Handler();
 8001bae:	f7ff fb27 	bl	8001200 <Error_Handler>
}
 8001bb2:	e7f8      	b.n	8001ba6 <vcom_Resume+0x12>
 8001bb4:	20000304 	.word	0x20000304
 8001bb8:	200002a4 	.word	0x200002a4

08001bbc <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bbc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 8001bbe:	6802      	ldr	r2, [r0, #0]
 8001bc0:	4b04      	ldr	r3, [pc, #16]	; (8001bd4 <HAL_UART_TxCpltCallback+0x18>)
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d000      	beq.n	8001bc8 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8001bc6:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8001bc8:	4b03      	ldr	r3, [pc, #12]	; (8001bd8 <HAL_UART_TxCpltCallback+0x1c>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2000      	movs	r0, #0
 8001bce:	4798      	blx	r3
}
 8001bd0:	e7f9      	b.n	8001bc6 <HAL_UART_TxCpltCallback+0xa>
 8001bd2:	bf00      	nop
 8001bd4:	40004400 	.word	0x40004400
 8001bd8:	2000039c 	.word	0x2000039c

08001bdc <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 8001bdc:	6802      	ldr	r2, [r0, #0]
 8001bde:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <HAL_UART_RxCpltCallback+0x2c>)
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d000      	beq.n	8001be6 <HAL_UART_RxCpltCallback+0xa>
 8001be4:	4770      	bx	lr
{
 8001be6:	b510      	push	{r4, lr}
 8001be8:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 8001bea:	4b08      	ldr	r3, [pc, #32]	; (8001c0c <HAL_UART_RxCpltCallback+0x30>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	b12b      	cbz	r3, 8001bfc <HAL_UART_RxCpltCallback+0x20>
 8001bf0:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8001bf4:	b912      	cbnz	r2, 8001bfc <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4805      	ldr	r0, [pc, #20]	; (8001c10 <HAL_UART_RxCpltCallback+0x34>)
 8001bfa:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4904      	ldr	r1, [pc, #16]	; (8001c10 <HAL_UART_RxCpltCallback+0x34>)
 8001c00:	4620      	mov	r0, r4
 8001c02:	f003 ff73 	bl	8005aec <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8001c06:	bd10      	pop	{r4, pc}
 8001c08:	40004400 	.word	0x40004400
 8001c0c:	20000398 	.word	0x20000398
 8001c10:	200003a0 	.word	0x200003a0

08001c14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c16:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c18:	f000 fc45 	bl	80024a6 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c1c:	480c      	ldr	r0, [pc, #48]	; (8001c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c1e:	490d      	ldr	r1, [pc, #52]	; (8001c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c20:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <LoopForever+0xe>)
  movs r3, #0
 8001c22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c24:	e002      	b.n	8001c2c <LoopCopyDataInit>

08001c26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2a:	3304      	adds	r3, #4

08001c2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c30:	d3f9      	bcc.n	8001c26 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c32:	4a0a      	ldr	r2, [pc, #40]	; (8001c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c34:	4c0a      	ldr	r4, [pc, #40]	; (8001c60 <LoopForever+0x16>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c38:	e001      	b.n	8001c3e <LoopFillZerobss>

08001c3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c3c:	3204      	adds	r2, #4

08001c3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c40:	d3fb      	bcc.n	8001c3a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001c42:	f008 f8df 	bl	8009e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c46:	f7ff fb25 	bl	8001294 <main>

08001c4a <LoopForever>:

LoopForever:
    b LoopForever
 8001c4a:	e7fe      	b.n	8001c4a <LoopForever>
  ldr   r0, =_estack
 8001c4c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c58:	0800e320 	.word	0x0800e320
  ldr r2, =_sbss
 8001c5c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c60:	20000b00 	.word	0x20000b00

08001c64 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC_IRQHandler>

08001c66 <MX_SubGHz_Phy_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_SubGHz_Phy_Init(void)
{
 8001c66:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1 */
  SystemApp_Init();
 8001c68:	f7ff fc48 	bl	80014fc <SystemApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_1_1 */

  /* USER CODE END MX_SubGHz_Phy_Init_1_1 */
  SubghzApp_Init();
 8001c6c:	f000 fa88 	bl	8002180 <SubghzApp_Init>
  /* USER CODE BEGIN MX_SubGHz_Phy_Init_2 */

  /* USER CODE END MX_SubGHz_Phy_Init_2 */
}
 8001c70:	bd08      	pop	{r3, pc}

08001c72 <MX_SubGHz_Phy_Process>:

void MX_SubGHz_Phy_Process(void)
{
 8001c72:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_1 */

  /* USER CODE END MX_SubGHz_Phy_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8001c74:	f04f 30ff 	mov.w	r0, #4294967295
 8001c78:	f006 fcc0 	bl	80085fc <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_SubGHz_Phy_Process_2 */

  /* USER CODE END MX_SubGHz_Phy_Process_2 */
}
 8001c7c:	bd08      	pop	{r3, pc}

08001c7e <powInt>:
{
  SYS_LED_Off(SYS_LED_RED) ;
}

static uint32_t powInt(uint32_t base, uint32_t exp)
{
 8001c7e:	4603      	mov	r3, r0
    uint32_t result = 1;
 8001c80:	2001      	movs	r0, #1
    while(exp) { result *= base; exp--; }
 8001c82:	e002      	b.n	8001c8a <powInt+0xc>
 8001c84:	fb03 f000 	mul.w	r0, r3, r0
 8001c88:	3901      	subs	r1, #1
 8001c8a:	2900      	cmp	r1, #0
 8001c8c:	d1fa      	bne.n	8001c84 <powInt+0x6>
    return result;
}
 8001c8e:	4770      	bx	lr

08001c90 <OnRxError>:
{
 8001c90:	b508      	push	{r3, lr}
  State = RX_ERR;
 8001c92:	2002      	movs	r0, #2
 8001c94:	4b02      	ldr	r3, [pc, #8]	; (8001ca0 <OnRxError+0x10>)
 8001c96:	7018      	strb	r0, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 8001c98:	2100      	movs	r1, #0
 8001c9a:	f006 fc7b 	bl	8008594 <UTIL_SEQ_SetTask>
}
 8001c9e:	bd08      	pop	{r3, pc}
 8001ca0:	20000002 	.word	0x20000002

08001ca4 <OnRxTimeout>:
{
 8001ca4:	b508      	push	{r3, lr}
  State = RX_TO;
 8001ca6:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <OnRxTimeout+0x14>)
 8001ca8:	2201      	movs	r2, #1
 8001caa:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 8001cac:	2100      	movs	r1, #0
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f006 fc70 	bl	8008594 <UTIL_SEQ_SetTask>
}
 8001cb4:	bd08      	pop	{r3, pc}
 8001cb6:	bf00      	nop
 8001cb8:	20000002 	.word	0x20000002

08001cbc <OnTxTimeout>:
{
 8001cbc:	b508      	push	{r3, lr}
  State = TX_TO;
 8001cbe:	4b04      	ldr	r3, [pc, #16]	; (8001cd0 <OnTxTimeout+0x14>)
 8001cc0:	2206      	movs	r2, #6
 8001cc2:	701a      	strb	r2, [r3, #0]
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 8001cc4:	2100      	movs	r1, #0
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f006 fc64 	bl	8008594 <UTIL_SEQ_SetTask>
}
 8001ccc:	bd08      	pop	{r3, pc}
 8001cce:	bf00      	nop
 8001cd0:	20000002 	.word	0x20000002

08001cd4 <OnTxDone>:
{
 8001cd4:	b508      	push	{r3, lr}
	 State = TX_DONE;
 8001cd6:	4b04      	ldr	r3, [pc, #16]	; (8001ce8 <OnTxDone+0x14>)
 8001cd8:	2204      	movs	r2, #4
 8001cda:	701a      	strb	r2, [r3, #0]
	 UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 8001cdc:	2100      	movs	r1, #0
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f006 fc58 	bl	8008594 <UTIL_SEQ_SetTask>
}
 8001ce4:	bd08      	pop	{r3, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000002 	.word	0x20000002

08001cec <onTimerRelayEvent>:
	Buffer[i++] = NODE_END;
	BufferSize = i;
}

#elif defined RELAY
static void onTimerRelayEvent(void *context){
 8001cec:	b508      	push	{r3, lr}
	State = TX_START;
 8001cee:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <onTimerRelayEvent+0x2c>)
 8001cf0:	2203      	movs	r2, #3
 8001cf2:	701a      	strb	r2, [r3, #0]
	relayState = true;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <onTimerRelayEvent+0x30>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	701a      	strb	r2, [r3, #0]
	UTIL_TIMER_Start(&timerRelay);
 8001cfa:	4809      	ldr	r0, [pc, #36]	; (8001d20 <onTimerRelayEvent+0x34>)
 8001cfc:	f006 fe2a 	bl	8008954 <UTIL_TIMER_Start>
	UTIL_TIMER_Start(&timerLedTx);
 8001d00:	4808      	ldr	r0, [pc, #32]	; (8001d24 <onTimerRelayEvent+0x38>)
 8001d02:	f006 fe27 	bl	8008954 <UTIL_TIMER_Start>
	SYS_LED_On(SYS_LED_BLUE);
 8001d06:	2002      	movs	r0, #2
 8001d08:	f006 fa22 	bl	8008150 <SYS_LED_On>
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2002      	movs	r0, #2
 8001d10:	f006 fc40 	bl	8008594 <UTIL_SEQ_SetTask>

}
 8001d14:	bd08      	pop	{r3, pc}
 8001d16:	bf00      	nop
 8001d18:	20000002 	.word	0x20000002
 8001d1c:	20000443 	.word	0x20000443
 8001d20:	20000490 	.word	0x20000490
 8001d24:	20000478 	.word	0x20000478

08001d28 <SHT31_Process>:
	else
		NVIC_SystemReset();
}
#endif

static void SHT31_Process(void){
 8001d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d2c:	b082      	sub	sp, #8
	int16_t rssi;
	bool isChannelFree = true;
	uint32_t i,backoffTime,carrierSenseTime;
	switch (State){
 8001d2e:	4bac      	ldr	r3, [pc, #688]	; (8001fe0 <SHT31_Process+0x2b8>)
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	f200 8111 	bhi.w	8001f5a <SHT31_Process+0x232>
 8001d38:	e8df f013 	tbh	[pc, r3, lsl #1]
 8001d3c:	01c1012f 	.word	0x01c1012f
 8001d40:	000701c9 	.word	0x000701c9
 8001d44:	01200112 	.word	0x01200112
 8001d48:	00fc      	.short	0x00fc
 8001d4a:	2400      	movs	r4, #0
	case TX_START:
#if defined NODE
		UTIL_TIMER_Start(&timerNode);

#elif defined RELAY
		if(Buffer[0] == NODE_START && Buffer[1] == RELAY_ID){
 8001d4c:	4ba5      	ldr	r3, [pc, #660]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2bb0      	cmp	r3, #176	; 0xb0
 8001d52:	d010      	beq.n	8001d76 <SHT31_Process+0x4e>

#endif


		/*RF 충돌방지*/
		Radio.SetChannel(RF_FREQUENCY);
 8001d54:	4da4      	ldr	r5, [pc, #656]	; (8001fe8 <SHT31_Process+0x2c0>)
 8001d56:	f8d5 900c 	ldr.w	r9, [r5, #12]
 8001d5a:	48a4      	ldr	r0, [pc, #656]	; (8001fec <SHT31_Process+0x2c4>)
 8001d5c:	47c8      	blx	r9
		Radio.Rx(0);
 8001d5e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8001d60:	2000      	movs	r0, #0
 8001d62:	4798      	blx	r3
		HAL_Delay(Radio.GetWakeupTime());
 8001d64:	f8d5 805c 	ldr.w	r8, [r5, #92]	; 0x5c
 8001d68:	47c0      	blx	r8
 8001d6a:	f7ff fc07 	bl	800157c <HAL_Delay>

		for (i=0;i<RF_CHANNEL_FREE_TRIALS_MAX;i++)
 8001d6e:	2600      	movs	r6, #0
	bool isChannelFree = true;
 8001d70:	f04f 0a01 	mov.w	sl, #1
		for (i=0;i<RF_CHANNEL_FREE_TRIALS_MAX;i++)
 8001d74:	e059      	b.n	8001e2a <SHT31_Process+0x102>
		if(Buffer[0] == NODE_START && Buffer[1] == RELAY_ID){
 8001d76:	4b9b      	ldr	r3, [pc, #620]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001d78:	785b      	ldrb	r3, [r3, #1]
 8001d7a:	2bee      	cmp	r3, #238	; 0xee
 8001d7c:	d1ea      	bne.n	8001d54 <SHT31_Process+0x2c>
			RelayBuffer[0] = RELAY_START;
 8001d7e:	4d9c      	ldr	r5, [pc, #624]	; (8001ff0 <SHT31_Process+0x2c8>)
 8001d80:	27b2      	movs	r7, #178	; 0xb2
 8001d82:	702f      	strb	r7, [r5, #0]
			RelayBuffer[1] = GATEWAY_ID;
 8001d84:	23ff      	movs	r3, #255	; 0xff
 8001d86:	706b      	strb	r3, [r5, #1]
			RelayBuffer[2] = RELAY_ID;
 8001d88:	26ee      	movs	r6, #238	; 0xee
 8001d8a:	70ae      	strb	r6, [r5, #2]
			RelayBuffer[12] = RELAY_END;
 8001d8c:	23c2      	movs	r3, #194	; 0xc2
 8001d8e:	732b      	strb	r3, [r5, #12]
			uint32_t crc = CalcCRC(RelayBuffer, 8);
 8001d90:	2108      	movs	r1, #8
 8001d92:	4628      	mov	r0, r5
 8001d94:	f006 f988 	bl	80080a8 <CalcCRC>
			RelayBuffer[8] = (crc >> 24) & 0xFF;
 8001d98:	0e02      	lsrs	r2, r0, #24
 8001d9a:	722a      	strb	r2, [r5, #8]
			RelayBuffer[9] = (crc >> 16) & 0xFF;
 8001d9c:	0c02      	lsrs	r2, r0, #16
 8001d9e:	726a      	strb	r2, [r5, #9]
			RelayBuffer[10] = (crc >> 8) & 0xFF;
 8001da0:	0a02      	lsrs	r2, r0, #8
 8001da2:	72aa      	strb	r2, [r5, #10]
			RelayBuffer[11] = crc & 0xFF;
 8001da4:	72e8      	strb	r0, [r5, #11]
			Buffer[i++] = RELAY_START;
 8001da6:	4b8f      	ldr	r3, [pc, #572]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001da8:	701f      	strb	r7, [r3, #0]
			Buffer[i++] = NODE_ID;
 8001daa:	2207      	movs	r2, #7
 8001dac:	705a      	strb	r2, [r3, #1]
			Buffer[i++] = RELAY_ID;
 8001dae:	709e      	strb	r6, [r3, #2]
			if(isCRCok){
 8001db0:	4b90      	ldr	r3, [pc, #576]	; (8001ff4 <SHT31_Process+0x2cc>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	b14b      	cbz	r3, 8001dca <SHT31_Process+0xa2>
			  Buffer[i++] = ACK_OK;
 8001db6:	4b8b      	ldr	r3, [pc, #556]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001db8:	22dd      	movs	r2, #221	; 0xdd
 8001dba:	70da      	strb	r2, [r3, #3]
			Buffer[i++] = RELAY_END;
 8001dbc:	4b89      	ldr	r3, [pc, #548]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001dbe:	22c2      	movs	r2, #194	; 0xc2
 8001dc0:	711a      	strb	r2, [r3, #4]
			BufferSize = i;
 8001dc2:	4b8d      	ldr	r3, [pc, #564]	; (8001ff8 <SHT31_Process+0x2d0>)
 8001dc4:	2205      	movs	r2, #5
 8001dc6:	801a      	strh	r2, [r3, #0]
 8001dc8:	e7c4      	b.n	8001d54 <SHT31_Process+0x2c>
			else Buffer[i++] = ACK_NO;
 8001dca:	4b86      	ldr	r3, [pc, #536]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001dcc:	22de      	movs	r2, #222	; 0xde
 8001dce:	70da      	strb	r2, [r3, #3]
 8001dd0:	e7f4      	b.n	8001dbc <SHT31_Process+0x94>
		{
			APP_LOG(TS_ON,VLEVEL_L,"RF Channel Sensing #%u ...",i+1);
			isChannelFree = true;
 8001dd2:	f04f 0a01 	mov.w	sl, #1
			{
			  rssi = Radio.Rssi(MODEM_LORA);
			  if (rssi > RF_CHANNEL_FREE_RSSI_TRESHOLD) { isChannelFree = false; break; }
			}

			carrierSenseTime = UTIL_TIMER_GetElapsedTime(carrierSenseTime);
 8001dd6:	4628      	mov	r0, r5
 8001dd8:	f006 fd2c 	bl	8008834 <UTIL_TIMER_GetElapsedTime>
			APP_LOG(TS_OFF,VLEVEL_L," CS: %ddBm , CS time: %ums\r\n",rssi,carrierSenseTime);
 8001ddc:	9001      	str	r0, [sp, #4]
 8001dde:	9400      	str	r4, [sp, #0]
 8001de0:	4b86      	ldr	r3, [pc, #536]	; (8001ffc <SHT31_Process+0x2d4>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	4611      	mov	r1, r2
 8001de6:	2001      	movs	r0, #1
 8001de8:	f006 faaa 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
			if (isChannelFree)
 8001dec:	f1ba 0f00 	cmp.w	sl, #0
 8001df0:	d138      	bne.n	8001e64 <SHT31_Process+0x13c>
			{
			  break; //RF collisions avoidance loop
			}
			else
			{
			  if (i<RF_CHANNEL_FREE_TRIALS_MAX-1)
 8001df2:	2e03      	cmp	r6, #3
 8001df4:	d818      	bhi.n	8001e28 <SHT31_Process+0x100>
			  {
				backoffTime = CS_BACKOFF_TIME_UNIT * (1 + (rand() % powInt(2,i+1)));
 8001df6:	f006 ffe3 	bl	8008dc0 <rand>
 8001dfa:	4605      	mov	r5, r0
 8001dfc:	4639      	mov	r1, r7
 8001dfe:	2002      	movs	r0, #2
 8001e00:	f7ff ff3d 	bl	8001c7e <powInt>
 8001e04:	fbb5 f3f0 	udiv	r3, r5, r0
 8001e08:	fb00 5513 	mls	r5, r0, r3, r5
 8001e0c:	3501      	adds	r5, #1
 8001e0e:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8001e12:	00ad      	lsls	r5, r5, #2
				APP_LOG(TS_ON,VLEVEL_L,"RF channel is busy, next attempt after %ums...\r\n",backoffTime);
 8001e14:	9500      	str	r5, [sp, #0]
 8001e16:	4b7a      	ldr	r3, [pc, #488]	; (8002000 <SHT31_Process+0x2d8>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	f006 fa8f 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
				HAL_Delay(backoffTime);
 8001e22:	4628      	mov	r0, r5
 8001e24:	f7ff fbaa 	bl	800157c <HAL_Delay>
			isChannelFree = true;
 8001e28:	463e      	mov	r6, r7
		for (i=0;i<RF_CHANNEL_FREE_TRIALS_MAX;i++)
 8001e2a:	2e04      	cmp	r6, #4
 8001e2c:	d81a      	bhi.n	8001e64 <SHT31_Process+0x13c>
			APP_LOG(TS_ON,VLEVEL_L,"RF Channel Sensing #%u ...",i+1);
 8001e2e:	1c77      	adds	r7, r6, #1
 8001e30:	9700      	str	r7, [sp, #0]
 8001e32:	4b74      	ldr	r3, [pc, #464]	; (8002004 <SHT31_Process+0x2dc>)
 8001e34:	2201      	movs	r2, #1
 8001e36:	2100      	movs	r1, #0
 8001e38:	4610      	mov	r0, r2
 8001e3a:	f006 fa81 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
			carrierSenseTime = UTIL_TIMER_GetCurrentTime();
 8001e3e:	f006 fcef 	bl	8008820 <UTIL_TIMER_GetCurrentTime>
 8001e42:	4605      	mov	r5, r0
			while( UTIL_TIMER_GetElapsedTime(carrierSenseTime) < RSSI_SENSING_TIME)
 8001e44:	4628      	mov	r0, r5
 8001e46:	f006 fcf5 	bl	8008834 <UTIL_TIMER_GetElapsedTime>
 8001e4a:	2809      	cmp	r0, #9
 8001e4c:	d8c1      	bhi.n	8001dd2 <SHT31_Process+0xaa>
			  rssi = Radio.Rssi(MODEM_LORA);
 8001e4e:	4b66      	ldr	r3, [pc, #408]	; (8001fe8 <SHT31_Process+0x2c0>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e52:	2001      	movs	r0, #1
 8001e54:	4798      	blx	r3
 8001e56:	4604      	mov	r4, r0
			  if (rssi > RF_CHANNEL_FREE_RSSI_TRESHOLD) { isChannelFree = false; break; }
 8001e58:	f110 0f4f 	cmn.w	r0, #79	; 0x4f
 8001e5c:	dbf2      	blt.n	8001e44 <SHT31_Process+0x11c>
 8001e5e:	f04f 0a00 	mov.w	sl, #0
 8001e62:	e7b8      	b.n	8001dd6 <SHT31_Process+0xae>
			  }
			}
	    }

		if (isChannelFree){
 8001e64:	f1ba 0f00 	cmp.w	sl, #0
 8001e68:	d055      	beq.n	8001f16 <SHT31_Process+0x1ee>
			Radio.SetChannel(RF_FREQUENCY);
 8001e6a:	4860      	ldr	r0, [pc, #384]	; (8001fec <SHT31_Process+0x2c4>)
 8001e6c:	47c8      	blx	r9
			HAL_Delay(Radio.GetWakeupTime() + TCXO_WORKAROUND_TIME_MARGIN);
 8001e6e:	47c0      	blx	r8
 8001e70:	3032      	adds	r0, #50	; 0x32
 8001e72:	f7ff fb83 	bl	800157c <HAL_Delay>
			for(uint32_t k =0; k<BufferSize; k++) APP_LOG(TS_OFF,VLEVEL_L,"%02X|",Buffer[k]);
			APP_LOG(TS_OFF,VLEVEL_L,"\r\n");
#endif

#ifdef RELAY
			if(!relayState){
 8001e76:	4b64      	ldr	r3, [pc, #400]	; (8002008 <SHT31_Process+0x2e0>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	bb23      	cbnz	r3, 8001ec6 <SHT31_Process+0x19e>
				Radio.Send(Buffer,BufferSize);
 8001e7c:	4b5a      	ldr	r3, [pc, #360]	; (8001fe8 <SHT31_Process+0x2c0>)
 8001e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e80:	4a5d      	ldr	r2, [pc, #372]	; (8001ff8 <SHT31_Process+0x2d0>)
 8001e82:	7811      	ldrb	r1, [r2, #0]
 8001e84:	4857      	ldr	r0, [pc, #348]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001e86:	4798      	blx	r3
				isCRCok = false;
 8001e88:	2400      	movs	r4, #0
 8001e8a:	4b5a      	ldr	r3, [pc, #360]	; (8001ff4 <SHT31_Process+0x2cc>)
 8001e8c:	701c      	strb	r4, [r3, #0]
				APP_LOG(TS_ON,VLEVEL_L,"Relay SEND to NODE VALUE : ");
 8001e8e:	4b5f      	ldr	r3, [pc, #380]	; (800200c <SHT31_Process+0x2e4>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	4621      	mov	r1, r4
 8001e94:	4610      	mov	r0, r2
 8001e96:	f006 fa53 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
				for(uint32_t k =0; k<BufferSize; k++) APP_LOG(TS_OFF,VLEVEL_L,"%02X|",Buffer[k]);
 8001e9a:	e009      	b.n	8001eb0 <SHT31_Process+0x188>
 8001e9c:	4b51      	ldr	r3, [pc, #324]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001e9e:	5d1b      	ldrb	r3, [r3, r4]
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <SHT31_Process+0x2e8>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	4611      	mov	r1, r2
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f006 fa49 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
 8001eae:	3401      	adds	r4, #1
 8001eb0:	4b51      	ldr	r3, [pc, #324]	; (8001ff8 <SHT31_Process+0x2d0>)
 8001eb2:	881b      	ldrh	r3, [r3, #0]
 8001eb4:	42a3      	cmp	r3, r4
 8001eb6:	d8f1      	bhi.n	8001e9c <SHT31_Process+0x174>
				APP_LOG(TS_OFF,VLEVEL_L,"\r\n\r\n");
 8001eb8:	4b56      	ldr	r3, [pc, #344]	; (8002014 <SHT31_Process+0x2ec>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	2001      	movs	r0, #1
 8001ec0:	f006 fa3e 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
 8001ec4:	e049      	b.n	8001f5a <SHT31_Process+0x232>
			}
			else{
				Radio.Send(RelayBuffer,13);
 8001ec6:	4b48      	ldr	r3, [pc, #288]	; (8001fe8 <SHT31_Process+0x2c0>)
 8001ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eca:	210d      	movs	r1, #13
 8001ecc:	4848      	ldr	r0, [pc, #288]	; (8001ff0 <SHT31_Process+0x2c8>)
 8001ece:	4798      	blx	r3
				APP_LOG(TS_ON,VLEVEL_L,"Relay SEND to Gateway VALUE : ");
 8001ed0:	4b51      	ldr	r3, [pc, #324]	; (8002018 <SHT31_Process+0x2f0>)
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	f006 fa32 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
				for(uint32_t k =0; k<13; k++) APP_LOG(TS_OFF,VLEVEL_L,"%02X|",RelayBuffer[k]);
 8001edc:	2400      	movs	r4, #0
 8001ede:	e009      	b.n	8001ef4 <SHT31_Process+0x1cc>
 8001ee0:	4b43      	ldr	r3, [pc, #268]	; (8001ff0 <SHT31_Process+0x2c8>)
 8001ee2:	5d1b      	ldrb	r3, [r3, r4]
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	4b4a      	ldr	r3, [pc, #296]	; (8002010 <SHT31_Process+0x2e8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	4611      	mov	r1, r2
 8001eec:	2001      	movs	r0, #1
 8001eee:	f006 fa27 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
 8001ef2:	3401      	adds	r4, #1
 8001ef4:	2c0c      	cmp	r4, #12
 8001ef6:	d9f3      	bls.n	8001ee0 <SHT31_Process+0x1b8>
				memset(RelayBuffer,0,13);
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <SHT31_Process+0x2c8>)
 8001efa:	2400      	movs	r4, #0
 8001efc:	601c      	str	r4, [r3, #0]
 8001efe:	605c      	str	r4, [r3, #4]
 8001f00:	609c      	str	r4, [r3, #8]
 8001f02:	731c      	strb	r4, [r3, #12]
				APP_LOG(TS_OFF,VLEVEL_L,"\r\n\r\n");
 8001f04:	4b43      	ldr	r3, [pc, #268]	; (8002014 <SHT31_Process+0x2ec>)
 8001f06:	4622      	mov	r2, r4
 8001f08:	4621      	mov	r1, r4
 8001f0a:	2001      	movs	r0, #1
 8001f0c:	f006 fa18 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
				relayState = false;
 8001f10:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <SHT31_Process+0x2e0>)
 8001f12:	701c      	strb	r4, [r3, #0]
 8001f14:	e021      	b.n	8001f5a <SHT31_Process+0x232>
			}
#endif

		}
		else{
			UTIL_TIMER_Start(&timerLedError);
 8001f16:	4841      	ldr	r0, [pc, #260]	; (800201c <SHT31_Process+0x2f4>)
 8001f18:	f006 fd1c 	bl	8008954 <UTIL_TIMER_Start>
			SYS_LED_On(SYS_LED_RED);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f006 f917 	bl	8008150 <SYS_LED_On>
			APP_LOG(TS_ON, VLEVEL_L, "RF channel: %uHz is BUSY\r\n\r\n",RF_FREQUENCY);
 8001f22:	4b32      	ldr	r3, [pc, #200]	; (8001fec <SHT31_Process+0x2c4>)
 8001f24:	9300      	str	r3, [sp, #0]
 8001f26:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <SHT31_Process+0x2f8>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	f006 fa07 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
 8001f32:	e012      	b.n	8001f5a <SHT31_Process+0x232>



		break;
	case TX_TO:
		UTIL_TIMER_Start(&timerLedError);
 8001f34:	4839      	ldr	r0, [pc, #228]	; (800201c <SHT31_Process+0x2f4>)
 8001f36:	f006 fd0d 	bl	8008954 <UTIL_TIMER_Start>
		SYS_LED_On(SYS_LED_RED);
 8001f3a:	2000      	movs	r0, #0
 8001f3c:	f006 f908 	bl	8008150 <SYS_LED_On>
		APP_LOG(TS_ON, VLEVEL_L, "TX timeout\r\n");
 8001f40:	4b38      	ldr	r3, [pc, #224]	; (8002024 <SHT31_Process+0x2fc>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	2100      	movs	r1, #0
 8001f46:	4610      	mov	r0, r2
 8001f48:	f006 f9fa 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>

#if defined NODE
		Radio.Sleep();
#endif
#if defined GATEWAY || defined RELAY
		State = RX_START;
 8001f4c:	4b24      	ldr	r3, [pc, #144]	; (8001fe0 <SHT31_Process+0x2b8>)
 8001f4e:	2205      	movs	r2, #5
 8001f50:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 8001f52:	2100      	movs	r1, #0
 8001f54:	2002      	movs	r0, #2
 8001f56:	f006 fb1d 	bl	8008594 <UTIL_SEQ_SetTask>


	default:
		break;
	}
}
 8001f5a:	b002      	add	sp, #8
 8001f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  UTIL_TIMER_Start(&timerLedTx);
 8001f60:	4831      	ldr	r0, [pc, #196]	; (8002028 <SHT31_Process+0x300>)
 8001f62:	f006 fcf7 	bl	8008954 <UTIL_TIMER_Start>
	  SYS_LED_On(SYS_LED_BLUE);
 8001f66:	2002      	movs	r0, #2
 8001f68:	f006 f8f2 	bl	8008150 <SYS_LED_On>
	  State = RX_START;
 8001f6c:	4b1c      	ldr	r3, [pc, #112]	; (8001fe0 <SHT31_Process+0x2b8>)
 8001f6e:	2205      	movs	r2, #5
 8001f70:	701a      	strb	r2, [r3, #0]
	  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 8001f72:	2100      	movs	r1, #0
 8001f74:	2002      	movs	r0, #2
 8001f76:	f006 fb0d 	bl	8008594 <UTIL_SEQ_SetTask>
		break;
 8001f7a:	e7ee      	b.n	8001f5a <SHT31_Process+0x232>
		Radio.SetChannel(RF_FREQUENCY);
 8001f7c:	4c1a      	ldr	r4, [pc, #104]	; (8001fe8 <SHT31_Process+0x2c0>)
 8001f7e:	68e3      	ldr	r3, [r4, #12]
 8001f80:	481a      	ldr	r0, [pc, #104]	; (8001fec <SHT31_Process+0x2c4>)
 8001f82:	4798      	blx	r3
		Radio.Rx(RX_TIMEOUT_VALUE);
 8001f84:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001f86:	f641 3058 	movw	r0, #7000	; 0x1b58
 8001f8a:	4798      	blx	r3
		APP_LOG(TS_ON, VLEVEL_L, "RX...\r\n");
 8001f8c:	4b27      	ldr	r3, [pc, #156]	; (800202c <SHT31_Process+0x304>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	2100      	movs	r1, #0
 8001f92:	4610      	mov	r0, r2
 8001f94:	f006 f9d4 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
		break;
 8001f98:	e7df      	b.n	8001f5a <SHT31_Process+0x232>
		if(Buffer[0] == NODE_START && Buffer[1] == RELAY_ID){
 8001f9a:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2bb0      	cmp	r3, #176	; 0xb0
 8001fa0:	d04a      	beq.n	8002038 <SHT31_Process+0x310>
		else if(Buffer[0] == GATEWAY_START && Buffer[1] == RELAY_ID && Buffer[3] == ACK_OK){
 8001fa2:	2bb1      	cmp	r3, #177	; 0xb1
 8001fa4:	d1d9      	bne.n	8001f5a <SHT31_Process+0x232>
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001fa8:	785b      	ldrb	r3, [r3, #1]
 8001faa:	2bee      	cmp	r3, #238	; 0xee
 8001fac:	d1d5      	bne.n	8001f5a <SHT31_Process+0x232>
 8001fae:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <SHT31_Process+0x2bc>)
 8001fb0:	78db      	ldrb	r3, [r3, #3]
 8001fb2:	2bdd      	cmp	r3, #221	; 0xdd
 8001fb4:	d1d1      	bne.n	8001f5a <SHT31_Process+0x232>
			relay_ack_count++;
 8001fb6:	4a1e      	ldr	r2, [pc, #120]	; (8002030 <SHT31_Process+0x308>)
 8001fb8:	8813      	ldrh	r3, [r2, #0]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	8013      	strh	r3, [r2, #0]
			APP_LOG(TS_ON,VLEVEL_L,"RELAY ACK COUNT : %d\r\n\r\n",relay_ack_count);
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <SHT31_Process+0x30c>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	2100      	movs	r1, #0
 8001fc8:	4610      	mov	r0, r2
 8001fca:	f006 f9b9 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
			State = TX_START;
 8001fce:	4b04      	ldr	r3, [pc, #16]	; (8001fe0 <SHT31_Process+0x2b8>)
 8001fd0:	2203      	movs	r2, #3
 8001fd2:	701a      	strb	r2, [r3, #0]
			UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	f006 fadc 	bl	8008594 <UTIL_SEQ_SetTask>
 8001fdc:	e7bd      	b.n	8001f5a <SHT31_Process+0x232>
 8001fde:	bf00      	nop
 8001fe0:	20000002 	.word	0x20000002
 8001fe4:	200003a4 	.word	0x200003a4
 8001fe8:	0800d8cc 	.word	0x0800d8cc
 8001fec:	3703dcc0 	.word	0x3703dcc0
 8001ff0:	20000400 	.word	0x20000400
 8001ff4:	20000442 	.word	0x20000442
 8001ff8:	20000000 	.word	0x20000000
 8001ffc:	0800d648 	.word	0x0800d648
 8002000:	0800d668 	.word	0x0800d668
 8002004:	0800d62c 	.word	0x0800d62c
 8002008:	20000443 	.word	0x20000443
 800200c:	0800d69c 	.word	0x0800d69c
 8002010:	0800d6b8 	.word	0x0800d6b8
 8002014:	0800d6f8 	.word	0x0800d6f8
 8002018:	0800d6c0 	.word	0x0800d6c0
 800201c:	20000448 	.word	0x20000448
 8002020:	0800d6e0 	.word	0x0800d6e0
 8002024:	0800d700 	.word	0x0800d700
 8002028:	20000478 	.word	0x20000478
 800202c:	0800d710 	.word	0x0800d710
 8002030:	20000444 	.word	0x20000444
 8002034:	0800d738 	.word	0x0800d738
		if(Buffer[0] == NODE_START && Buffer[1] == RELAY_ID){
 8002038:	4a2f      	ldr	r2, [pc, #188]	; (80020f8 <SHT31_Process+0x3d0>)
 800203a:	7852      	ldrb	r2, [r2, #1]
 800203c:	2aee      	cmp	r2, #238	; 0xee
 800203e:	d1b0      	bne.n	8001fa2 <SHT31_Process+0x27a>
			uint32_t receiveCRC = ((uint32_t)Buffer[8] << 24) | ((uint32_t)Buffer[9] << 16) | ((uint32_t)Buffer[10] << 8) | (uint32_t)Buffer[11];
 8002040:	482d      	ldr	r0, [pc, #180]	; (80020f8 <SHT31_Process+0x3d0>)
 8002042:	7a03      	ldrb	r3, [r0, #8]
 8002044:	7a44      	ldrb	r4, [r0, #9]
 8002046:	0424      	lsls	r4, r4, #16
 8002048:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
 800204c:	7a83      	ldrb	r3, [r0, #10]
 800204e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002052:	7ac3      	ldrb	r3, [r0, #11]
 8002054:	431c      	orrs	r4, r3
			uint32_t calculateCRC = CalcCRC(Buffer, 8);
 8002056:	2108      	movs	r1, #8
 8002058:	f006 f826 	bl	80080a8 <CalcCRC>
			if(receiveCRC == calculateCRC){
 800205c:	4284      	cmp	r4, r0
 800205e:	f47f af7c 	bne.w	8001f5a <SHT31_Process+0x232>
				APP_LOG(TS_ON, VLEVEL_L ,"\r\nNODE %d RECEIVE : ",Buffer[2]);
 8002062:	4b25      	ldr	r3, [pc, #148]	; (80020f8 <SHT31_Process+0x3d0>)
 8002064:	789b      	ldrb	r3, [r3, #2]
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	4b24      	ldr	r3, [pc, #144]	; (80020fc <SHT31_Process+0x3d4>)
 800206a:	2201      	movs	r2, #1
 800206c:	2100      	movs	r1, #0
 800206e:	4610      	mov	r0, r2
 8002070:	f006 f966 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
				for(uint32_t k = 0; k<13; k++)APP_LOG(TS_OFF, VLEVEL_L, "%02X | ",Buffer[k]);
 8002074:	2400      	movs	r4, #0
 8002076:	e009      	b.n	800208c <SHT31_Process+0x364>
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <SHT31_Process+0x3d0>)
 800207a:	5d1b      	ldrb	r3, [r3, r4]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <SHT31_Process+0x3d8>)
 8002080:	2200      	movs	r2, #0
 8002082:	4611      	mov	r1, r2
 8002084:	2001      	movs	r0, #1
 8002086:	f006 f95b 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
 800208a:	3401      	adds	r4, #1
 800208c:	2c0c      	cmp	r4, #12
 800208e:	d9f3      	bls.n	8002078 <SHT31_Process+0x350>
				APP_LOG(TS_OFF, VLEVEL_L, "\r\n");
 8002090:	4b1c      	ldr	r3, [pc, #112]	; (8002104 <SHT31_Process+0x3dc>)
 8002092:	2200      	movs	r2, #0
 8002094:	4611      	mov	r1, r2
 8002096:	2001      	movs	r0, #1
 8002098:	f006 f952 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
				isCRCok = true;
 800209c:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <SHT31_Process+0x3e0>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
				memcpy(RelayBuffer,Buffer,BufferSize);
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <SHT31_Process+0x3e4>)
 80020a4:	881a      	ldrh	r2, [r3, #0]
 80020a6:	4914      	ldr	r1, [pc, #80]	; (80020f8 <SHT31_Process+0x3d0>)
 80020a8:	4819      	ldr	r0, [pc, #100]	; (8002110 <SHT31_Process+0x3e8>)
 80020aa:	f007 fed2 	bl	8009e52 <memcpy>
				State = TX_START;
 80020ae:	4b19      	ldr	r3, [pc, #100]	; (8002114 <SHT31_Process+0x3ec>)
 80020b0:	2203      	movs	r2, #3
 80020b2:	701a      	strb	r2, [r3, #0]
				UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 80020b4:	2100      	movs	r1, #0
 80020b6:	2002      	movs	r0, #2
 80020b8:	f006 fa6c 	bl	8008594 <UTIL_SEQ_SetTask>
 80020bc:	e74d      	b.n	8001f5a <SHT31_Process+0x232>
		State = RX_START;
 80020be:	4b15      	ldr	r3, [pc, #84]	; (8002114 <SHT31_Process+0x3ec>)
 80020c0:	2205      	movs	r2, #5
 80020c2:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 80020c4:	2100      	movs	r1, #0
 80020c6:	2002      	movs	r0, #2
 80020c8:	f006 fa64 	bl	8008594 <UTIL_SEQ_SetTask>
		break;
 80020cc:	e745      	b.n	8001f5a <SHT31_Process+0x232>
		UTIL_TIMER_Start(&timerLedError);
 80020ce:	4812      	ldr	r0, [pc, #72]	; (8002118 <SHT31_Process+0x3f0>)
 80020d0:	f006 fc40 	bl	8008954 <UTIL_TIMER_Start>
		SYS_LED_On(SYS_LED_RED);
 80020d4:	2000      	movs	r0, #0
 80020d6:	f006 f83b 	bl	8008150 <SYS_LED_On>
		APP_LOG(TS_ON, VLEVEL_L, "RX error\r\n");
 80020da:	4b10      	ldr	r3, [pc, #64]	; (800211c <SHT31_Process+0x3f4>)
 80020dc:	2201      	movs	r2, #1
 80020de:	2100      	movs	r1, #0
 80020e0:	4610      	mov	r0, r2
 80020e2:	f006 f92d 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
		State = RX_START;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <SHT31_Process+0x3ec>)
 80020e8:	2205      	movs	r2, #5
 80020ea:	701a      	strb	r2, [r3, #0]
		UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 80020ec:	2100      	movs	r1, #0
 80020ee:	2002      	movs	r0, #2
 80020f0:	f006 fa50 	bl	8008594 <UTIL_SEQ_SetTask>
}
 80020f4:	e731      	b.n	8001f5a <SHT31_Process+0x232>
 80020f6:	bf00      	nop
 80020f8:	200003a4 	.word	0x200003a4
 80020fc:	0800d718 	.word	0x0800d718
 8002100:	0800d730 	.word	0x0800d730
 8002104:	0800d75c 	.word	0x0800d75c
 8002108:	20000442 	.word	0x20000442
 800210c:	20000000 	.word	0x20000000
 8002110:	20000400 	.word	0x20000400
 8002114:	20000002 	.word	0x20000002
 8002118:	20000448 	.word	0x20000448
 800211c:	0800d754 	.word	0x0800d754

08002120 <OnRxDone>:
{
 8002120:	b538      	push	{r3, r4, r5, lr}
 8002122:	4615      	mov	r5, r2
 8002124:	461c      	mov	r4, r3
	BufferSize = size;
 8002126:	4b09      	ldr	r3, [pc, #36]	; (800214c <OnRxDone+0x2c>)
 8002128:	8019      	strh	r1, [r3, #0]
	memcpy(Buffer, payload, BufferSize);
 800212a:	460a      	mov	r2, r1
 800212c:	4601      	mov	r1, r0
 800212e:	4808      	ldr	r0, [pc, #32]	; (8002150 <OnRxDone+0x30>)
 8002130:	f007 fe8f 	bl	8009e52 <memcpy>
	RssiValue = rssi;
 8002134:	4b07      	ldr	r3, [pc, #28]	; (8002154 <OnRxDone+0x34>)
 8002136:	701d      	strb	r5, [r3, #0]
	SnrValue = LoraSnr_FskCfo;
 8002138:	4b07      	ldr	r3, [pc, #28]	; (8002158 <OnRxDone+0x38>)
 800213a:	701c      	strb	r4, [r3, #0]
	State = RX_DONE;
 800213c:	2100      	movs	r1, #0
 800213e:	4b07      	ldr	r3, [pc, #28]	; (800215c <OnRxDone+0x3c>)
 8002140:	7019      	strb	r1, [r3, #0]
	UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_SHT31_Process), CFG_SEQ_Prio_0);
 8002142:	2002      	movs	r0, #2
 8002144:	f006 fa26 	bl	8008594 <UTIL_SEQ_SetTask>
}
 8002148:	bd38      	pop	{r3, r4, r5, pc}
 800214a:	bf00      	nop
 800214c:	20000000 	.word	0x20000000
 8002150:	200003a4 	.word	0x200003a4
 8002154:	20000440 	.word	0x20000440
 8002158:	20000441 	.word	0x20000441
 800215c:	20000002 	.word	0x20000002

08002160 <OnLedRxEvent>:
{
 8002160:	b508      	push	{r3, lr}
  SYS_LED_Off(SYS_LED_GREEN) ;
 8002162:	2001      	movs	r0, #1
 8002164:	f006 f804 	bl	8008170 <SYS_LED_Off>
}
 8002168:	bd08      	pop	{r3, pc}

0800216a <OnLedErrorEvent>:
{
 800216a:	b508      	push	{r3, lr}
  SYS_LED_Off(SYS_LED_RED) ;
 800216c:	2000      	movs	r0, #0
 800216e:	f005 ffff 	bl	8008170 <SYS_LED_Off>
}
 8002172:	bd08      	pop	{r3, pc}

08002174 <OnLedTxEvent>:
{
 8002174:	b508      	push	{r3, lr}
  SYS_LED_Off(SYS_LED_BLUE) ;
 8002176:	2002      	movs	r0, #2
 8002178:	f005 fffa 	bl	8008170 <SYS_LED_Off>
}
 800217c:	bd08      	pop	{r3, pc}
	...

08002180 <SubghzApp_Init>:
{
 8002180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002184:	b08a      	sub	sp, #40	; 0x28
	UTIL_TIMER_Create(&timerLedTx,0xFFFFFFFF,UTIL_TIMER_ONESHOT,OnLedTxEvent,NULL);
 8002186:	4d59      	ldr	r5, [pc, #356]	; (80022ec <SubghzApp_Init+0x16c>)
 8002188:	2400      	movs	r4, #0
 800218a:	9400      	str	r4, [sp, #0]
 800218c:	4b58      	ldr	r3, [pc, #352]	; (80022f0 <SubghzApp_Init+0x170>)
 800218e:	4622      	mov	r2, r4
 8002190:	f04f 31ff 	mov.w	r1, #4294967295
 8002194:	4628      	mov	r0, r5
 8002196:	f006 fb25 	bl	80087e4 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&timerLedTx, LED_PERIOD_MS);
 800219a:	2164      	movs	r1, #100	; 0x64
 800219c:	4628      	mov	r0, r5
 800219e:	f006 fc1f 	bl	80089e0 <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Create(&timerLedError,0xFFFFFFFF,UTIL_TIMER_ONESHOT,OnLedErrorEvent,NULL);
 80021a2:	4d54      	ldr	r5, [pc, #336]	; (80022f4 <SubghzApp_Init+0x174>)
 80021a4:	9400      	str	r4, [sp, #0]
 80021a6:	4b54      	ldr	r3, [pc, #336]	; (80022f8 <SubghzApp_Init+0x178>)
 80021a8:	4622      	mov	r2, r4
 80021aa:	f04f 31ff 	mov.w	r1, #4294967295
 80021ae:	4628      	mov	r0, r5
 80021b0:	f006 fb18 	bl	80087e4 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&timerLedError,LED_ERROR_PERIOD_MS);
 80021b4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80021b8:	4628      	mov	r0, r5
 80021ba:	f006 fc11 	bl	80089e0 <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Create(&timerLedRx,0xFFFFFFFF,UTIL_TIMER_ONESHOT,OnLedRxEvent,NULL);
 80021be:	4d4f      	ldr	r5, [pc, #316]	; (80022fc <SubghzApp_Init+0x17c>)
 80021c0:	9400      	str	r4, [sp, #0]
 80021c2:	4b4f      	ldr	r3, [pc, #316]	; (8002300 <SubghzApp_Init+0x180>)
 80021c4:	4622      	mov	r2, r4
 80021c6:	f04f 31ff 	mov.w	r1, #4294967295
 80021ca:	4628      	mov	r0, r5
 80021cc:	f006 fb0a 	bl	80087e4 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&timerLedRx,LED_PERIOD_MS);
 80021d0:	2164      	movs	r1, #100	; 0x64
 80021d2:	4628      	mov	r0, r5
 80021d4:	f006 fc04 	bl	80089e0 <UTIL_TIMER_SetPeriod>
	UTIL_TIMER_Create(&timerRelay,0xFFFFFFFF,UTIL_TIMER_ONESHOT,onTimerRelayEvent,NULL);
 80021d8:	4d4a      	ldr	r5, [pc, #296]	; (8002304 <SubghzApp_Init+0x184>)
 80021da:	9400      	str	r4, [sp, #0]
 80021dc:	4b4a      	ldr	r3, [pc, #296]	; (8002308 <SubghzApp_Init+0x188>)
 80021de:	4622      	mov	r2, r4
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295
 80021e4:	4628      	mov	r0, r5
 80021e6:	f006 fafd 	bl	80087e4 <UTIL_TIMER_Create>
	UTIL_TIMER_SetPeriod(&timerRelay,RELAY_PERIOD_MS);
 80021ea:	f642 21f8 	movw	r1, #11000	; 0x2af8
 80021ee:	4628      	mov	r0, r5
 80021f0:	f006 fbf6 	bl	80089e0 <UTIL_TIMER_SetPeriod>
  RadioEvents.TxDone = OnTxDone;
 80021f4:	4845      	ldr	r0, [pc, #276]	; (800230c <SubghzApp_Init+0x18c>)
 80021f6:	4b46      	ldr	r3, [pc, #280]	; (8002310 <SubghzApp_Init+0x190>)
 80021f8:	6003      	str	r3, [r0, #0]
  RadioEvents.RxDone = OnRxDone;
 80021fa:	4b46      	ldr	r3, [pc, #280]	; (8002314 <SubghzApp_Init+0x194>)
 80021fc:	6083      	str	r3, [r0, #8]
  RadioEvents.TxTimeout = OnTxTimeout;
 80021fe:	4b46      	ldr	r3, [pc, #280]	; (8002318 <SubghzApp_Init+0x198>)
 8002200:	6043      	str	r3, [r0, #4]
  RadioEvents.RxTimeout = OnRxTimeout;
 8002202:	4b46      	ldr	r3, [pc, #280]	; (800231c <SubghzApp_Init+0x19c>)
 8002204:	60c3      	str	r3, [r0, #12]
  RadioEvents.RxError = OnRxError;
 8002206:	4b46      	ldr	r3, [pc, #280]	; (8002320 <SubghzApp_Init+0x1a0>)
 8002208:	6103      	str	r3, [r0, #16]
  Radio.Init(&RadioEvents);
 800220a:	4e46      	ldr	r6, [pc, #280]	; (8002324 <SubghzApp_Init+0x1a4>)
 800220c:	6833      	ldr	r3, [r6, #0]
 800220e:	4798      	blx	r3
  srand(Radio.Random());
 8002210:	6973      	ldr	r3, [r6, #20]
 8002212:	4798      	blx	r3
 8002214:	f006 fda6 	bl	8008d64 <srand>
  Radio.SetTxConfig(MODEM_LORA, TX_OUTPUT_POWER, 0, LORA_BANDWIDTH,
 8002218:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800221c:	9308      	str	r3, [sp, #32]
 800221e:	9407      	str	r4, [sp, #28]
 8002220:	9406      	str	r4, [sp, #24]
 8002222:	9405      	str	r4, [sp, #20]
 8002224:	2501      	movs	r5, #1
 8002226:	9504      	str	r5, [sp, #16]
 8002228:	9403      	str	r4, [sp, #12]
 800222a:	f04f 0808 	mov.w	r8, #8
 800222e:	f8cd 8008 	str.w	r8, [sp, #8]
 8002232:	9501      	str	r5, [sp, #4]
 8002234:	2707      	movs	r7, #7
 8002236:	9700      	str	r7, [sp, #0]
 8002238:	4623      	mov	r3, r4
 800223a:	4622      	mov	r2, r4
 800223c:	210e      	movs	r1, #14
 800223e:	4628      	mov	r0, r5
 8002240:	f8d6 c01c 	ldr.w	ip, [r6, #28]
 8002244:	47e0      	blx	ip
  Radio.SetRxConfig(MODEM_LORA, LORA_BANDWIDTH, LORA_SPREADING_FACTOR,
 8002246:	9509      	str	r5, [sp, #36]	; 0x24
 8002248:	9408      	str	r4, [sp, #32]
 800224a:	9407      	str	r4, [sp, #28]
 800224c:	9406      	str	r4, [sp, #24]
 800224e:	9505      	str	r5, [sp, #20]
 8002250:	9404      	str	r4, [sp, #16]
 8002252:	9403      	str	r4, [sp, #12]
 8002254:	2305      	movs	r3, #5
 8002256:	9302      	str	r3, [sp, #8]
 8002258:	f8cd 8004 	str.w	r8, [sp, #4]
 800225c:	9400      	str	r4, [sp, #0]
 800225e:	462b      	mov	r3, r5
 8002260:	463a      	mov	r2, r7
 8002262:	4621      	mov	r1, r4
 8002264:	4628      	mov	r0, r5
 8002266:	f8d6 c018 	ldr.w	ip, [r6, #24]
 800226a:	47e0      	blx	ip
  Radio.SetMaxPayloadLength(MODEM_LORA, BUFFER_SIZE);
 800226c:	6d73      	ldr	r3, [r6, #84]	; 0x54
 800226e:	2140      	movs	r1, #64	; 0x40
 8002270:	4628      	mov	r0, r5
 8002272:	4798      	blx	r3
  Radio.SetChannel(RF_FREQUENCY);
 8002274:	68f3      	ldr	r3, [r6, #12]
 8002276:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8002328 <SubghzApp_Init+0x1a8>
 800227a:	4640      	mov	r0, r8
 800227c:	4798      	blx	r3
  SYS_LED_Init(SYS_LED_BLUE);
 800227e:	2002      	movs	r0, #2
 8002280:	f005 ff38 	bl	80080f4 <SYS_LED_Init>
  SYS_LED_Init(SYS_LED_GREEN);
 8002284:	4628      	mov	r0, r5
 8002286:	f005 ff35 	bl	80080f4 <SYS_LED_Init>
  SYS_LED_Init(SYS_LED_RED);
 800228a:	4620      	mov	r0, r4
 800228c:	f005 ff32 	bl	80080f4 <SYS_LED_Init>
  Radio.Rx(RX_TIMEOUT_VALUE);
 8002290:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8002292:	f641 3058 	movw	r0, #7000	; 0x1b58
 8002296:	4798      	blx	r3
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_SHT31_Process), 0, SHT31_Process);
 8002298:	4a24      	ldr	r2, [pc, #144]	; (800232c <SubghzApp_Init+0x1ac>)
 800229a:	4621      	mov	r1, r4
 800229c:	2002      	movs	r0, #2
 800229e:	f006 fa43 	bl	8008728 <UTIL_SEQ_RegTask>
  onTimerRelayEvent(NULL);
 80022a2:	4620      	mov	r0, r4
 80022a4:	f7ff fd22 	bl	8001cec <onTimerRelayEvent>
  APP_LOG(TS_OFF, VLEVEL_L, "\r\nRELAY Start -> ");
 80022a8:	4b21      	ldr	r3, [pc, #132]	; (8002330 <SubghzApp_Init+0x1b0>)
 80022aa:	4622      	mov	r2, r4
 80022ac:	4621      	mov	r1, r4
 80022ae:	4628      	mov	r0, r5
 80022b0:	f006 f846 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, " , RF=%uMHz , SF=%u",RF_FREQUENCY,LORA_SPREADING_FACTOR);
 80022b4:	9701      	str	r7, [sp, #4]
 80022b6:	f8cd 8000 	str.w	r8, [sp]
 80022ba:	4b1e      	ldr	r3, [pc, #120]	; (8002334 <SubghzApp_Init+0x1b4>)
 80022bc:	4622      	mov	r2, r4
 80022be:	4621      	mov	r1, r4
 80022c0:	4628      	mov	r0, r5
 80022c2:	f006 f83d 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF,VLEVEL_L," , CS=%ddBm",RF_CHANNEL_FREE_RSSI_TRESHOLD);
 80022c6:	f06f 034f 	mvn.w	r3, #79	; 0x4f
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	4b1a      	ldr	r3, [pc, #104]	; (8002338 <SubghzApp_Init+0x1b8>)
 80022ce:	4622      	mov	r2, r4
 80022d0:	4621      	mov	r1, r4
 80022d2:	4628      	mov	r0, r5
 80022d4:	f006 f834 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_L, "\r\n");
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <SubghzApp_Init+0x1bc>)
 80022da:	4622      	mov	r2, r4
 80022dc:	4621      	mov	r1, r4
 80022de:	4628      	mov	r0, r5
 80022e0:	f006 f82e 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
}
 80022e4:	b00a      	add	sp, #40	; 0x28
 80022e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022ea:	bf00      	nop
 80022ec:	20000478 	.word	0x20000478
 80022f0:	08002175 	.word	0x08002175
 80022f4:	20000448 	.word	0x20000448
 80022f8:	0800216b 	.word	0x0800216b
 80022fc:	20000460 	.word	0x20000460
 8002300:	08002161 	.word	0x08002161
 8002304:	20000490 	.word	0x20000490
 8002308:	08001ced 	.word	0x08001ced
 800230c:	200003e4 	.word	0x200003e4
 8002310:	08001cd5 	.word	0x08001cd5
 8002314:	08002121 	.word	0x08002121
 8002318:	08001cbd 	.word	0x08001cbd
 800231c:	08001ca5 	.word	0x08001ca5
 8002320:	08001c91 	.word	0x08001c91
 8002324:	0800d8cc 	.word	0x0800d8cc
 8002328:	3703dcc0 	.word	0x3703dcc0
 800232c:	08001d29 	.word	0x08001d29
 8002330:	0800d760 	.word	0x0800d760
 8002334:	0800d774 	.word	0x0800d774
 8002338:	0800d788 	.word	0x0800d788
 800233c:	0800d75c 	.word	0x0800d75c

08002340 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002340:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002342:	f000 f815 	bl	8002370 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002346:	bd08      	pop	{r3, pc}

08002348 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002348:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800234a:	f000 f853 	bl	80023f4 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800234e:	bd08      	pop	{r3, pc}

08002350 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002350:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002352:	f000 f89d 	bl	8002490 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002356:	bd08      	pop	{r3, pc}

08002358 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002358:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800235a:	f000 f89b 	bl	8002494 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800235e:	bd08      	pop	{r3, pc}

08002360 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002360:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002362:	f000 f899 	bl	8002498 <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002366:	bd08      	pop	{r3, pc}

08002368 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002368:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800236a:	f000 f897 	bl	800249c <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800236e:	bd08      	pop	{r3, pc}

08002370 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002374:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002376:	2400      	movs	r4, #0
 8002378:	9401      	str	r4, [sp, #4]
 800237a:	9402      	str	r4, [sp, #8]
 800237c:	9403      	str	r4, [sp, #12]
 800237e:	9404      	str	r4, [sp, #16]
 8002380:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002382:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002386:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002388:	f042 0204 	orr.w	r2, r2, #4
 800238c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800238e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002396:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002398:	2710      	movs	r7, #16
 800239a:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800239c:	2301      	movs	r3, #1
 800239e:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023a0:	2303      	movs	r3, #3
 80023a2:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80023a4:	4d12      	ldr	r5, [pc, #72]	; (80023f0 <BSP_RADIO_Init+0x80>)
 80023a6:	a901      	add	r1, sp, #4
 80023a8:	4628      	mov	r0, r5
 80023aa:	f000 fba9 	bl	8002b00 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80023ae:	f04f 0820 	mov.w	r8, #32
 80023b2:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80023b6:	a901      	add	r1, sp, #4
 80023b8:	4628      	mov	r0, r5
 80023ba:	f000 fba1 	bl	8002b00 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 80023be:	2608      	movs	r6, #8
 80023c0:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 80023c2:	a901      	add	r1, sp, #4
 80023c4:	4628      	mov	r0, r5
 80023c6:	f000 fb9b 	bl	8002b00 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80023ca:	4622      	mov	r2, r4
 80023cc:	4641      	mov	r1, r8
 80023ce:	4628      	mov	r0, r5
 80023d0:	f000 fce6 	bl	8002da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 80023d4:	4622      	mov	r2, r4
 80023d6:	4639      	mov	r1, r7
 80023d8:	4628      	mov	r0, r5
 80023da:	f000 fce1 	bl	8002da0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 80023de:	4622      	mov	r2, r4
 80023e0:	4631      	mov	r1, r6
 80023e2:	4628      	mov	r0, r5
 80023e4:	f000 fcdc 	bl	8002da0 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 80023e8:	4620      	mov	r0, r4
 80023ea:	b006      	add	sp, #24
 80023ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023f0:	48000800 	.word	0x48000800

080023f4 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 80023f4:	b510      	push	{r4, lr}
  switch (Config)
 80023f6:	2803      	cmp	r0, #3
 80023f8:	d813      	bhi.n	8002422 <BSP_RADIO_ConfigRFSwitch+0x2e>
 80023fa:	e8df f000 	tbb	[pc, r0]
 80023fe:	1402      	.short	0x1402
 8002400:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002402:	4c22      	ldr	r4, [pc, #136]	; (800248c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002404:	2200      	movs	r2, #0
 8002406:	2108      	movs	r1, #8
 8002408:	4620      	mov	r0, r4
 800240a:	f000 fcc9 	bl	8002da0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	2110      	movs	r1, #16
 8002412:	4620      	mov	r0, r4
 8002414:	f000 fcc4 	bl	8002da0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002418:	2200      	movs	r2, #0
 800241a:	2120      	movs	r1, #32
 800241c:	4620      	mov	r0, r4
 800241e:	f000 fcbf 	bl	8002da0 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002422:	2000      	movs	r0, #0
 8002424:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002426:	4c19      	ldr	r4, [pc, #100]	; (800248c <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002428:	2201      	movs	r2, #1
 800242a:	2108      	movs	r1, #8
 800242c:	4620      	mov	r0, r4
 800242e:	f000 fcb7 	bl	8002da0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002432:	2201      	movs	r2, #1
 8002434:	2110      	movs	r1, #16
 8002436:	4620      	mov	r0, r4
 8002438:	f000 fcb2 	bl	8002da0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800243c:	2200      	movs	r2, #0
 800243e:	2120      	movs	r1, #32
 8002440:	4620      	mov	r0, r4
 8002442:	f000 fcad 	bl	8002da0 <HAL_GPIO_WritePin>
      break;
 8002446:	e7ec      	b.n	8002422 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002448:	4c10      	ldr	r4, [pc, #64]	; (800248c <BSP_RADIO_ConfigRFSwitch+0x98>)
 800244a:	2201      	movs	r2, #1
 800244c:	2108      	movs	r1, #8
 800244e:	4620      	mov	r0, r4
 8002450:	f000 fca6 	bl	8002da0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002454:	2201      	movs	r2, #1
 8002456:	2110      	movs	r1, #16
 8002458:	4620      	mov	r0, r4
 800245a:	f000 fca1 	bl	8002da0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800245e:	2201      	movs	r2, #1
 8002460:	2120      	movs	r1, #32
 8002462:	4620      	mov	r0, r4
 8002464:	f000 fc9c 	bl	8002da0 <HAL_GPIO_WritePin>
      break;
 8002468:	e7db      	b.n	8002422 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 800246a:	4c08      	ldr	r4, [pc, #32]	; (800248c <BSP_RADIO_ConfigRFSwitch+0x98>)
 800246c:	2201      	movs	r2, #1
 800246e:	2108      	movs	r1, #8
 8002470:	4620      	mov	r0, r4
 8002472:	f000 fc95 	bl	8002da0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002476:	2200      	movs	r2, #0
 8002478:	2110      	movs	r1, #16
 800247a:	4620      	mov	r0, r4
 800247c:	f000 fc90 	bl	8002da0 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002480:	2201      	movs	r2, #1
 8002482:	2120      	movs	r1, #32
 8002484:	4620      	mov	r0, r4
 8002486:	f000 fc8b 	bl	8002da0 <HAL_GPIO_WritePin>
      break;
 800248a:	e7ca      	b.n	8002422 <BSP_RADIO_ConfigRFSwitch+0x2e>
 800248c:	48000800 	.word	0x48000800

08002490 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002490:	2000      	movs	r0, #0
 8002492:	4770      	bx	lr

08002494 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002494:	2001      	movs	r0, #1
 8002496:	4770      	bx	lr

08002498 <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002498:	2001      	movs	r0, #1
 800249a:	4770      	bx	lr

0800249c <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 800249c:	b908      	cbnz	r0, 80024a2 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 800249e:	200f      	movs	r0, #15
 80024a0:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80024a2:	2016      	movs	r0, #22
  }

  return ret;
}
 80024a4:	4770      	bx	lr

080024a6 <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80024a6:	4770      	bx	lr

080024a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a8:	b510      	push	{r4, lr}
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024aa:	2003      	movs	r0, #3
 80024ac:	f000 f838 	bl	8002520 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024b0:	f000 febe 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 80024b4:	4b06      	ldr	r3, [pc, #24]	; (80024d0 <HAL_Init+0x28>)
 80024b6:	6018      	str	r0, [r3, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80024b8:	200f      	movs	r0, #15
 80024ba:	f7ff f851 	bl	8001560 <HAL_InitTick>
 80024be:	b110      	cbz	r0, 80024c6 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80024c0:	2401      	movs	r4, #1
    HAL_MspInit();
  }

  /* Return function status */
  return status;
}
 80024c2:	4620      	mov	r0, r4
 80024c4:	bd10      	pop	{r4, pc}
 80024c6:	4604      	mov	r4, r0
    HAL_MspInit();
 80024c8:	f7fe ff9a 	bl	8001400 <HAL_MspInit>
 80024cc:	e7f9      	b.n	80024c2 <HAL_Init+0x1a>
 80024ce:	bf00      	nop
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80024d4:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80024d8:	6913      	ldr	r3, [r2, #16]
 80024da:	f023 0302 	bic.w	r3, r3, #2
 80024de:	6113      	str	r3, [r2, #16]
}
 80024e0:	4770      	bx	lr

080024e2 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80024e2:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80024e6:	6913      	ldr	r3, [r2, #16]
 80024e8:	f043 0302 	orr.w	r3, r3, #2
 80024ec:	6113      	str	r3, [r2, #16]
}
 80024ee:	4770      	bx	lr

080024f0 <HAL_DBGMCU_DisableDBGSleepMode>:
  * @rmtoll DBGMCU_CR    DBG_SLEEP     LL_DBGMCU_DisableDBGSleepMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGSleepMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 80024f0:	4a02      	ldr	r2, [pc, #8]	; (80024fc <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 80024f2:	6853      	ldr	r3, [r2, #4]
 80024f4:	f023 0301 	bic.w	r3, r3, #1
 80024f8:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 80024fa:	4770      	bx	lr
 80024fc:	e0042000 	.word	0xe0042000

08002500 <HAL_DBGMCU_DisableDBGStopMode>:
  * @rmtoll DBGMCU_CR    DBG_STOP      LL_DBGMCU_DisableDBGStopMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStopMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002500:	4a02      	ldr	r2, [pc, #8]	; (800250c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8002502:	6853      	ldr	r3, [r2, #4]
 8002504:	f023 0302 	bic.w	r3, r3, #2
 8002508:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 800250a:	4770      	bx	lr
 800250c:	e0042000 	.word	0xe0042000

08002510 <HAL_DBGMCU_DisableDBGStandbyMode>:
  * @rmtoll DBGMCU_CR    DBG_STANDBY   LL_DBGMCU_DisableDBGStandbyMode
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_DisableDBGStandbyMode(void)
{
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002510:	4a02      	ldr	r2, [pc, #8]	; (800251c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8002512:	6853      	ldr	r3, [r2, #4]
 8002514:	f023 0304 	bic.w	r3, r3, #4
 8002518:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 800251a:	4770      	bx	lr
 800251c:	e0042000 	.word	0xe0042000

08002520 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002520:	4a07      	ldr	r2, [pc, #28]	; (8002540 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8002522:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002524:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002528:	041b      	lsls	r3, r3, #16
 800252a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800252c:	0200      	lsls	r0, r0, #8
 800252e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002532:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8002534:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002538:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800253c:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002544:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002546:	4b19      	ldr	r3, [pc, #100]	; (80025ac <HAL_NVIC_SetPriority+0x68>)
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800254e:	f1c3 0c07 	rsb	ip, r3, #7
 8002552:	f1bc 0f04 	cmp.w	ip, #4
 8002556:	bf28      	it	cs
 8002558:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800255c:	f103 0e04 	add.w	lr, r3, #4
 8002560:	f1be 0f06 	cmp.w	lr, #6
 8002564:	d918      	bls.n	8002598 <HAL_NVIC_SetPriority+0x54>
 8002566:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002568:	f04f 3eff 	mov.w	lr, #4294967295
 800256c:	fa0e fc0c 	lsl.w	ip, lr, ip
 8002570:	ea21 010c 	bic.w	r1, r1, ip
 8002574:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002576:	fa0e fe03 	lsl.w	lr, lr, r3
 800257a:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257e:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8002580:	2800      	cmp	r0, #0
 8002582:	db0b      	blt.n	800259c <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002584:	0112      	lsls	r2, r2, #4
 8002586:	b2d2      	uxtb	r2, r2
 8002588:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 800258c:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8002590:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8002594:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002598:	2300      	movs	r3, #0
 800259a:	e7e5      	b.n	8002568 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800259c:	f000 000f 	and.w	r0, r0, #15
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	4b02      	ldr	r3, [pc, #8]	; (80025b0 <HAL_NVIC_SetPriority+0x6c>)
 80025a6:	541a      	strb	r2, [r3, r0]
 80025a8:	e7f4      	b.n	8002594 <HAL_NVIC_SetPriority+0x50>
 80025aa:	bf00      	nop
 80025ac:	e000ed00 	.word	0xe000ed00
 80025b0:	e000ed14 	.word	0xe000ed14

080025b4 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80025b4:	2800      	cmp	r0, #0
 80025b6:	db07      	blt.n	80025c8 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b8:	f000 021f 	and.w	r2, r0, #31
 80025bc:	0940      	lsrs	r0, r0, #5
 80025be:	2301      	movs	r3, #1
 80025c0:	4093      	lsls	r3, r2
 80025c2:	4a02      	ldr	r2, [pc, #8]	; (80025cc <HAL_NVIC_EnableIRQ+0x18>)
 80025c4:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	e000e100 	.word	0xe000e100

080025d0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80025d0:	2800      	cmp	r0, #0
 80025d2:	db0c      	blt.n	80025ee <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025d4:	f000 021f 	and.w	r2, r0, #31
 80025d8:	0940      	lsrs	r0, r0, #5
 80025da:	2301      	movs	r3, #1
 80025dc:	4093      	lsls	r3, r2
 80025de:	3020      	adds	r0, #32
 80025e0:	4a03      	ldr	r2, [pc, #12]	; (80025f0 <HAL_NVIC_DisableIRQ+0x20>)
 80025e2:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80025ea:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80025ee:	4770      	bx	lr
 80025f0:	e000e100 	.word	0xe000e100

080025f4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025f4:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80025f6:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 80025f8:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 80025fc:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8002600:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8002602:	b124      	cbz	r4, 800260e <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002604:	6d84      	ldr	r4, [r0, #88]	; 0x58
 8002606:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 800260a:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800260e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002610:	f004 0c1c 	and.w	ip, r4, #28
 8002614:	2401      	movs	r4, #1
 8002616:	fa04 f40c 	lsl.w	r4, r4, ip
 800261a:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 800261e:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002622:	6804      	ldr	r4, [r0, #0]
 8002624:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002626:	6883      	ldr	r3, [r0, #8]
 8002628:	2b10      	cmp	r3, #16
 800262a:	d005      	beq.n	8002638 <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800262c:	6803      	ldr	r3, [r0, #0]
 800262e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002630:	6803      	ldr	r3, [r0, #0]
 8002632:	60da      	str	r2, [r3, #12]
  }
}
 8002634:	bc10      	pop	{r4}
 8002636:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002638:	6803      	ldr	r3, [r0, #0]
 800263a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800263c:	6803      	ldr	r3, [r0, #0]
 800263e:	60d9      	str	r1, [r3, #12]
 8002640:	e7f8      	b.n	8002634 <DMA_SetConfig+0x40>
	...

08002644 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8002644:	6803      	ldr	r3, [r0, #0]
 8002646:	4a14      	ldr	r2, [pc, #80]	; (8002698 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d816      	bhi.n	800267a <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800264c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800264e:	f022 0203 	bic.w	r2, r2, #3
 8002652:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8002656:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 800265a:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800265c:	b2db      	uxtb	r3, r3
 800265e:	3b08      	subs	r3, #8
 8002660:	4a0e      	ldr	r2, [pc, #56]	; (800269c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8002662:	fba2 2303 	umull	r2, r3, r2, r3
 8002666:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002668:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 800266a:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	2201      	movs	r2, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	6503      	str	r3, [r0, #80]	; 0x50
}
 8002678:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800267a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800267c:	f022 0103 	bic.w	r1, r2, #3
 8002680:	4a08      	ldr	r2, [pc, #32]	; (80026a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8002682:	440a      	add	r2, r1
 8002684:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8002686:	b2db      	uxtb	r3, r3
 8002688:	3b08      	subs	r3, #8
 800268a:	4a04      	ldr	r2, [pc, #16]	; (800269c <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 800268c:	fba2 2303 	umull	r2, r3, r2, r3
 8002690:	091b      	lsrs	r3, r3, #4
 8002692:	3307      	adds	r3, #7
 8002694:	e7e8      	b.n	8002668 <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 8002696:	bf00      	nop
 8002698:	40020407 	.word	0x40020407
 800269c:	cccccccd 	.word	0xcccccccd
 80026a0:	40020880 	.word	0x40020880
 80026a4:	4002081c 	.word	0x4002081c

080026a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80026a8:	6843      	ldr	r3, [r0, #4]
 80026aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80026ae:	4a07      	ldr	r2, [pc, #28]	; (80026cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 80026b0:	441a      	add	r2, r3
 80026b2:	0092      	lsls	r2, r2, #2
 80026b4:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80026b6:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 80026b8:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80026ba:	3b01      	subs	r3, #1
 80026bc:	f003 0303 	and.w	r3, r3, #3
 80026c0:	2201      	movs	r2, #1
 80026c2:	fa02 f303 	lsl.w	r3, r2, r3
 80026c6:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 80026c8:	4770      	bx	lr
 80026ca:	bf00      	nop
 80026cc:	1000823f 	.word	0x1000823f
 80026d0:	40020940 	.word	0x40020940

080026d4 <HAL_DMA_Init>:
  if (hdma == NULL)
 80026d4:	2800      	cmp	r0, #0
 80026d6:	d060      	beq.n	800279a <HAL_DMA_Init+0xc6>
{
 80026d8:	b510      	push	{r4, lr}
 80026da:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026dc:	6802      	ldr	r2, [r0, #0]
 80026de:	4b30      	ldr	r3, [pc, #192]	; (80027a0 <HAL_DMA_Init+0xcc>)
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d842      	bhi.n	800276a <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80026e4:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_DMA_Init+0xd0>)
 80026e6:	4413      	add	r3, r2
 80026e8:	492f      	ldr	r1, [pc, #188]	; (80027a8 <HAL_DMA_Init+0xd4>)
 80026ea:	fba1 1303 	umull	r1, r3, r1, r3
 80026ee:	091b      	lsrs	r3, r3, #4
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80026f4:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_DMA_Init+0xd8>)
 80026f6:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 80026f8:	2302      	movs	r3, #2
 80026fa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80026fe:	6813      	ldr	r3, [r2, #0]
 8002700:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002708:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800270a:	6821      	ldr	r1, [r4, #0]
 800270c:	680a      	ldr	r2, [r1, #0]
 800270e:	68a3      	ldr	r3, [r4, #8]
 8002710:	68e0      	ldr	r0, [r4, #12]
 8002712:	4303      	orrs	r3, r0
 8002714:	6920      	ldr	r0, [r4, #16]
 8002716:	4303      	orrs	r3, r0
 8002718:	6960      	ldr	r0, [r4, #20]
 800271a:	4303      	orrs	r3, r0
 800271c:	69a0      	ldr	r0, [r4, #24]
 800271e:	4303      	orrs	r3, r0
 8002720:	69e0      	ldr	r0, [r4, #28]
 8002722:	4303      	orrs	r3, r0
 8002724:	6a20      	ldr	r0, [r4, #32]
 8002726:	4303      	orrs	r3, r0
 8002728:	4313      	orrs	r3, r2
 800272a:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800272c:	4620      	mov	r0, r4
 800272e:	f7ff ff89 	bl	8002644 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002732:	68a3      	ldr	r3, [r4, #8]
 8002734:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002738:	d022      	beq.n	8002780 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800273a:	6863      	ldr	r3, [r4, #4]
 800273c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 800273e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002742:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002744:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002746:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002748:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800274a:	6863      	ldr	r3, [r4, #4]
 800274c:	3b01      	subs	r3, #1
 800274e:	2b03      	cmp	r3, #3
 8002750:	d919      	bls.n	8002786 <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 8002752:	2300      	movs	r3, #0
 8002754:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 8002756:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002758:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800275a:	2000      	movs	r0, #0
 800275c:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 800275e:	2301      	movs	r3, #1
 8002760:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002764:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 8002768:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800276a:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_DMA_Init+0xdc>)
 800276c:	4413      	add	r3, r2
 800276e:	490e      	ldr	r1, [pc, #56]	; (80027a8 <HAL_DMA_Init+0xd4>)
 8002770:	fba1 1303 	umull	r1, r3, r1, r3
 8002774:	091b      	lsrs	r3, r3, #4
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800277a:	4b0e      	ldr	r3, [pc, #56]	; (80027b4 <HAL_DMA_Init+0xe0>)
 800277c:	6403      	str	r3, [r0, #64]	; 0x40
 800277e:	e7bb      	b.n	80026f8 <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002780:	2300      	movs	r3, #0
 8002782:	6063      	str	r3, [r4, #4]
 8002784:	e7d9      	b.n	800273a <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002786:	4620      	mov	r0, r4
 8002788:	f7ff ff8e 	bl	80026a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800278c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002792:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002794:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002796:	605a      	str	r2, [r3, #4]
 8002798:	e7df      	b.n	800275a <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800279a:	2001      	movs	r0, #1
}
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40020407 	.word	0x40020407
 80027a4:	bffdfff8 	.word	0xbffdfff8
 80027a8:	cccccccd 	.word	0xcccccccd
 80027ac:	40020000 	.word	0x40020000
 80027b0:	bffdfbf8 	.word	0xbffdfbf8
 80027b4:	40020400 	.word	0x40020400

080027b8 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d04b      	beq.n	8002854 <HAL_DMA_DeInit+0x9c>
{
 80027bc:	b538      	push	{r3, r4, r5, lr}
 80027be:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 80027c0:	6802      	ldr	r2, [r0, #0]
 80027c2:	6813      	ldr	r3, [r2, #0]
 80027c4:	f023 0301 	bic.w	r3, r3, #1
 80027c8:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80027ca:	6802      	ldr	r2, [r0, #0]
 80027cc:	4b22      	ldr	r3, [pc, #136]	; (8002858 <HAL_DMA_DeInit+0xa0>)
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d82c      	bhi.n	800282c <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80027d2:	4b22      	ldr	r3, [pc, #136]	; (800285c <HAL_DMA_DeInit+0xa4>)
 80027d4:	4413      	add	r3, r2
 80027d6:	4922      	ldr	r1, [pc, #136]	; (8002860 <HAL_DMA_DeInit+0xa8>)
 80027d8:	fba1 1303 	umull	r1, r3, r1, r3
 80027dc:	091b      	lsrs	r3, r3, #4
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <HAL_DMA_DeInit+0xac>)
 80027e4:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 80027e6:	2500      	movs	r5, #0
 80027e8:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80027ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80027ec:	f003 021c 	and.w	r2, r3, #28
 80027f0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80027f2:	2301      	movs	r3, #1
 80027f4:	4093      	lsls	r3, r2
 80027f6:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80027f8:	4620      	mov	r0, r4
 80027fa:	f7ff ff23 	bl	8002644 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 80027fe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8002800:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002802:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8002804:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002806:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002808:	6863      	ldr	r3, [r4, #4]
 800280a:	3b01      	subs	r3, #1
 800280c:	2b03      	cmp	r3, #3
 800280e:	d918      	bls.n	8002842 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 8002810:	2000      	movs	r0, #0
 8002812:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 8002814:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8002816:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8002818:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 800281a:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 800281c:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 800281e:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002820:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 8002822:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 8002826:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 800282a:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800282c:	4b0e      	ldr	r3, [pc, #56]	; (8002868 <HAL_DMA_DeInit+0xb0>)
 800282e:	4413      	add	r3, r2
 8002830:	490b      	ldr	r1, [pc, #44]	; (8002860 <HAL_DMA_DeInit+0xa8>)
 8002832:	fba1 1303 	umull	r1, r3, r1, r3
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <HAL_DMA_DeInit+0xb4>)
 800283e:	6403      	str	r3, [r0, #64]	; 0x40
 8002840:	e7d1      	b.n	80027e6 <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002842:	4620      	mov	r0, r4
 8002844:	f7ff ff30 	bl	80026a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002848:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800284a:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800284c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800284e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8002850:	605a      	str	r2, [r3, #4]
 8002852:	e7dd      	b.n	8002810 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 8002854:	2001      	movs	r0, #1
}
 8002856:	4770      	bx	lr
 8002858:	40020407 	.word	0x40020407
 800285c:	bffdfff8 	.word	0xbffdfff8
 8002860:	cccccccd 	.word	0xcccccccd
 8002864:	40020000 	.word	0x40020000
 8002868:	bffdfbf8 	.word	0xbffdfbf8
 800286c:	40020400 	.word	0x40020400

08002870 <HAL_DMA_Start_IT>:
{
 8002870:	b538      	push	{r3, r4, r5, lr}
 8002872:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8002874:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 8002878:	2801      	cmp	r0, #1
 800287a:	d043      	beq.n	8002904 <HAL_DMA_Start_IT+0x94>
 800287c:	2001      	movs	r0, #1
 800287e:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8002882:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 8002886:	b2c0      	uxtb	r0, r0
 8002888:	2801      	cmp	r0, #1
 800288a:	d006      	beq.n	800289a <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8002890:	2300      	movs	r3, #0
 8002892:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 8002896:	2001      	movs	r0, #1
}
 8002898:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800289a:	2002      	movs	r0, #2
 800289c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028a0:	2000      	movs	r0, #0
 80028a2:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 80028a4:	6825      	ldr	r5, [r4, #0]
 80028a6:	6828      	ldr	r0, [r5, #0]
 80028a8:	f020 0001 	bic.w	r0, r0, #1
 80028ac:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ae:	4620      	mov	r0, r4
 80028b0:	f7ff fea0 	bl	80025f4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 80028b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80028b6:	b1d3      	cbz	r3, 80028ee <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028b8:	6822      	ldr	r2, [r4, #0]
 80028ba:	6813      	ldr	r3, [r2, #0]
 80028bc:	f043 030e 	orr.w	r3, r3, #14
 80028c0:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80028c2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80028ca:	d003      	beq.n	80028d4 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028d2:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 80028d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80028d6:	b11b      	cbz	r3, 80028e0 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028de:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 80028e0:	6822      	ldr	r2, [r4, #0]
 80028e2:	6813      	ldr	r3, [r2, #0]
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028ea:	2000      	movs	r0, #0
 80028ec:	e7d4      	b.n	8002898 <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028ee:	6822      	ldr	r2, [r4, #0]
 80028f0:	6813      	ldr	r3, [r2, #0]
 80028f2:	f023 0304 	bic.w	r3, r3, #4
 80028f6:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028f8:	6822      	ldr	r2, [r4, #0]
 80028fa:	6813      	ldr	r3, [r2, #0]
 80028fc:	f043 030a 	orr.w	r3, r3, #10
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e7de      	b.n	80028c2 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8002904:	2002      	movs	r0, #2
 8002906:	e7c7      	b.n	8002898 <HAL_DMA_Start_IT+0x28>

08002908 <HAL_DMA_Abort>:
  if (NULL == hdma)
 8002908:	4603      	mov	r3, r0
 800290a:	2800      	cmp	r0, #0
 800290c:	d034      	beq.n	8002978 <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800290e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	2a02      	cmp	r2, #2
 8002916:	d006      	beq.n	8002926 <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002918:	2204      	movs	r2, #4
 800291a:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 800291c:	2200      	movs	r2, #0
 800291e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 8002922:	2001      	movs	r0, #1
 8002924:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002926:	6801      	ldr	r1, [r0, #0]
 8002928:	680a      	ldr	r2, [r1, #0]
 800292a:	f022 020e 	bic.w	r2, r2, #14
 800292e:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002930:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002932:	680a      	ldr	r2, [r1, #0]
 8002934:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002938:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 800293a:	6801      	ldr	r1, [r0, #0]
 800293c:	680a      	ldr	r2, [r1, #0]
 800293e:	f022 0201 	bic.w	r2, r2, #1
 8002942:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002944:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002946:	f002 011c 	and.w	r1, r2, #28
 800294a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800294c:	2201      	movs	r2, #1
 800294e:	408a      	lsls	r2, r1
 8002950:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002954:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002956:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8002958:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800295a:	b132      	cbz	r2, 800296a <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800295c:	6811      	ldr	r1, [r2, #0]
 800295e:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8002962:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002964:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002966:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8002968:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800296a:	2201      	movs	r2, #1
 800296c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002970:	2000      	movs	r0, #0
 8002972:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 8002976:	4770      	bx	lr
    return HAL_ERROR;
 8002978:	2001      	movs	r0, #1
}
 800297a:	4770      	bx	lr

0800297c <HAL_DMA_Abort_IT>:
{
 800297c:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800297e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8002982:	b2db      	uxtb	r3, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d003      	beq.n	8002990 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002988:	2304      	movs	r3, #4
 800298a:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 800298c:	2001      	movs	r0, #1
}
 800298e:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002990:	6802      	ldr	r2, [r0, #0]
 8002992:	6813      	ldr	r3, [r2, #0]
 8002994:	f023 030e 	bic.w	r3, r3, #14
 8002998:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800299a:	6802      	ldr	r2, [r0, #0]
 800299c:	6813      	ldr	r3, [r2, #0]
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80029a4:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80029a6:	6813      	ldr	r3, [r2, #0]
 80029a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029ac:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80029ae:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80029b0:	f003 021c 	and.w	r2, r3, #28
 80029b4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80029b6:	2301      	movs	r3, #1
 80029b8:	4093      	lsls	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80029be:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80029c0:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80029c2:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80029c4:	b133      	cbz	r3, 80029d4 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029cc:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029ce:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80029d0:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 80029d2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80029d4:	2301      	movs	r3, #1
 80029d6:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80029da:	2300      	movs	r3, #0
 80029dc:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 80029e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80029e2:	b113      	cbz	r3, 80029ea <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 80029e4:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2000      	movs	r0, #0
 80029e8:	e7d1      	b.n	800298e <HAL_DMA_Abort_IT+0x12>
 80029ea:	2000      	movs	r0, #0
 80029ec:	e7cf      	b.n	800298e <HAL_DMA_Abort_IT+0x12>
	...

080029f0 <HAL_DMA_IRQHandler>:
{
 80029f0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80029f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80029f4:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80029f6:	6804      	ldr	r4, [r0, #0]
 80029f8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80029fa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80029fc:	f003 031c 	and.w	r3, r3, #28
 8002a00:	2204      	movs	r2, #4
 8002a02:	409a      	lsls	r2, r3
 8002a04:	420a      	tst	r2, r1
 8002a06:	d015      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x44>
 8002a08:	f015 0f04 	tst.w	r5, #4
 8002a0c:	d012      	beq.n	8002a34 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a0e:	6823      	ldr	r3, [r4, #0]
 8002a10:	f013 0f20 	tst.w	r3, #32
 8002a14:	d103      	bne.n	8002a1e <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a16:	6823      	ldr	r3, [r4, #0]
 8002a18:	f023 0304 	bic.w	r3, r3, #4
 8002a1c:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002a1e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a20:	f003 021c 	and.w	r2, r3, #28
 8002a24:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002a26:	2304      	movs	r3, #4
 8002a28:	4093      	lsls	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 8002a2c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002a2e:	b103      	cbz	r3, 8002a32 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 8002a30:	4798      	blx	r3
}
 8002a32:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002a34:	2202      	movs	r2, #2
 8002a36:	409a      	lsls	r2, r3
 8002a38:	420a      	tst	r2, r1
 8002a3a:	d028      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x9e>
 8002a3c:	f015 0f02 	tst.w	r5, #2
 8002a40:	d025      	beq.n	8002a8e <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	f013 0f20 	tst.w	r3, #32
 8002a48:	d106      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a4a:	6823      	ldr	r3, [r4, #0]
 8002a4c:	f023 030a 	bic.w	r3, r3, #10
 8002a50:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 8002a52:	2301      	movs	r3, #1
 8002a54:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002a58:	6802      	ldr	r2, [r0, #0]
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_DMA_IRQHandler+0xdc>)
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d90e      	bls.n	8002a7e <HAL_DMA_IRQHandler+0x8e>
 8002a60:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a62:	f003 021c 	and.w	r2, r3, #28
 8002a66:	2302      	movs	r3, #2
 8002a68:	4093      	lsls	r3, r2
 8002a6a:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_DMA_IRQHandler+0xe0>)
 8002a6c:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8002a74:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d0db      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 8002a7a:	4798      	blx	r3
 8002a7c:	e7d9      	b.n	8002a32 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002a7e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002a80:	f003 021c 	and.w	r2, r3, #28
 8002a84:	2302      	movs	r3, #2
 8002a86:	4093      	lsls	r3, r2
 8002a88:	4a12      	ldr	r2, [pc, #72]	; (8002ad4 <HAL_DMA_IRQHandler+0xe4>)
 8002a8a:	6053      	str	r3, [r2, #4]
 8002a8c:	e7ef      	b.n	8002a6e <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002a8e:	2208      	movs	r2, #8
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	420b      	tst	r3, r1
 8002a96:	d0cc      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x42>
 8002a98:	f015 0f08 	tst.w	r5, #8
 8002a9c:	d0c9      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	f023 030e 	bic.w	r3, r3, #14
 8002aa4:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002aa6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8002aa8:	f003 031c 	and.w	r3, r3, #28
 8002aac:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002aae:	2201      	movs	r2, #1
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002ab6:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002ab8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8002abc:	2300      	movs	r3, #0
 8002abe:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8002ac2:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0b4      	beq.n	8002a32 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 8002ac8:	4798      	blx	r3
  return;
 8002aca:	e7b2      	b.n	8002a32 <HAL_DMA_IRQHandler+0x42>
 8002acc:	40020080 	.word	0x40020080
 8002ad0:	40020400 	.word	0x40020400
 8002ad4:	40020000 	.word	0x40020000

08002ad8 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8002ad8:	b178      	cbz	r0, 8002afa <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8002ada:	6803      	ldr	r3, [r0, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8002ade:	f011 0f10 	tst.w	r1, #16
 8002ae2:	d004      	beq.n	8002aee <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 8002ae4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002ae8:	d004      	beq.n	8002af4 <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8002aea:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8002aee:	601a      	str	r2, [r3, #0]
  return status;
 8002af0:	2000      	movs	r0, #0
 8002af2:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 8002af4:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002af8:	e7f9      	b.n	8002aee <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8002afa:	2001      	movs	r0, #1
}
 8002afc:	4770      	bx	lr
	...

08002b00 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b00:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8002b02:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b04:	e069      	b.n	8002bda <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b06:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002b08:	005e      	lsls	r6, r3, #1
 8002b0a:	2403      	movs	r4, #3
 8002b0c:	40b4      	lsls	r4, r6
 8002b0e:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b12:	68cc      	ldr	r4, [r1, #12]
 8002b14:	40b4      	lsls	r4, r6
 8002b16:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 8002b18:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b1a:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b1c:	ea25 050c 	bic.w	r5, r5, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b20:	684c      	ldr	r4, [r1, #4]
 8002b22:	f3c4 1400 	ubfx	r4, r4, #4, #1
 8002b26:	409c      	lsls	r4, r3
 8002b28:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002b2a:	6044      	str	r4, [r0, #4]
 8002b2c:	e066      	b.n	8002bfc <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b2e:	08dd      	lsrs	r5, r3, #3
 8002b30:	3508      	adds	r5, #8
 8002b32:	f850 4025 	ldr.w	r4, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002b36:	f003 0c07 	and.w	ip, r3, #7
 8002b3a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002b3e:	f04f 0e0f 	mov.w	lr, #15
 8002b42:	fa0e fe0c 	lsl.w	lr, lr, ip
 8002b46:	ea24 0e0e 	bic.w	lr, r4, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b4a:	690c      	ldr	r4, [r1, #16]
 8002b4c:	fa04 f40c 	lsl.w	r4, r4, ip
 8002b50:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8002b54:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 8002b58:	e067      	b.n	8002c2a <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002b5a:	2402      	movs	r4, #2
 8002b5c:	e000      	b.n	8002b60 <HAL_GPIO_Init+0x60>
 8002b5e:	2400      	movs	r4, #0
 8002b60:	fa04 f40e 	lsl.w	r4, r4, lr
 8002b64:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002b66:	f10c 0c02 	add.w	ip, ip, #2
 8002b6a:	4d4b      	ldr	r5, [pc, #300]	; (8002c98 <HAL_GPIO_Init+0x198>)
 8002b6c:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b70:	4c4a      	ldr	r4, [pc, #296]	; (8002c9c <HAL_GPIO_Init+0x19c>)
 8002b72:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8002b74:	43d4      	mvns	r4, r2
 8002b76:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b7a:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8002b7e:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 8002b82:	d001      	beq.n	8002b88 <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 8002b84:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 8002b88:	4d44      	ldr	r5, [pc, #272]	; (8002c9c <HAL_GPIO_Init+0x19c>)
 8002b8a:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 8002b8c:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002b8e:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b92:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8002b96:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 8002b9a:	d001      	beq.n	8002ba0 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 8002b9c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 8002ba0:	4d3e      	ldr	r5, [pc, #248]	; (8002c9c <HAL_GPIO_Init+0x19c>)
 8002ba2:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8002ba4:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002ba8:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002bac:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8002bb0:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 8002bb4:	d001      	beq.n	8002bba <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 8002bb6:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8002bba:	4d38      	ldr	r5, [pc, #224]	; (8002c9c <HAL_GPIO_Init+0x19c>)
 8002bbc:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8002bc0:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8002bc4:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002bc6:	684e      	ldr	r6, [r1, #4]
 8002bc8:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8002bcc:	d001      	beq.n	8002bd2 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8002bce:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8002bd2:	4a32      	ldr	r2, [pc, #200]	; (8002c9c <HAL_GPIO_Init+0x19c>)
 8002bd4:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8002bd8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bda:	680a      	ldr	r2, [r1, #0]
 8002bdc:	fa32 f403 	lsrs.w	r4, r2, r3
 8002be0:	d058      	beq.n	8002c94 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002be2:	f04f 0c01 	mov.w	ip, #1
 8002be6:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 8002bea:	ea1c 0202 	ands.w	r2, ip, r2
 8002bee:	d0f3      	beq.n	8002bd8 <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf0:	684c      	ldr	r4, [r1, #4]
 8002bf2:	f004 0403 	and.w	r4, r4, #3
 8002bf6:	3c01      	subs	r4, #1
 8002bf8:	2c01      	cmp	r4, #1
 8002bfa:	d984      	bls.n	8002b06 <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002bfc:	684c      	ldr	r4, [r1, #4]
 8002bfe:	f004 0403 	and.w	r4, r4, #3
 8002c02:	2c03      	cmp	r4, #3
 8002c04:	d00c      	beq.n	8002c20 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 8002c06:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c08:	005d      	lsls	r5, r3, #1
 8002c0a:	f04f 0c03 	mov.w	ip, #3
 8002c0e:	fa0c fc05 	lsl.w	ip, ip, r5
 8002c12:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c16:	688c      	ldr	r4, [r1, #8]
 8002c18:	40ac      	lsls	r4, r5
 8002c1a:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8002c1e:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c20:	684c      	ldr	r4, [r1, #4]
 8002c22:	f004 0403 	and.w	r4, r4, #3
 8002c26:	2c02      	cmp	r4, #2
 8002c28:	d081      	beq.n	8002b2e <HAL_GPIO_Init+0x2e>
      temp = GPIOx->MODER;
 8002c2a:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002c2c:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8002c30:	f04f 0c03 	mov.w	ip, #3
 8002c34:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002c38:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002c3c:	684c      	ldr	r4, [r1, #4]
 8002c3e:	f004 0403 	and.w	r4, r4, #3
 8002c42:	fa04 f40e 	lsl.w	r4, r4, lr
 8002c46:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 8002c4a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c4c:	684c      	ldr	r4, [r1, #4]
 8002c4e:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8002c52:	d0c1      	beq.n	8002bd8 <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8002c54:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 8002c58:	f10c 0502 	add.w	r5, ip, #2
 8002c5c:	4c0e      	ldr	r4, [pc, #56]	; (8002c98 <HAL_GPIO_Init+0x198>)
 8002c5e:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8002c62:	f003 0e03 	and.w	lr, r3, #3
 8002c66:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8002c6a:	2407      	movs	r4, #7
 8002c6c:	fa04 f40e 	lsl.w	r4, r4, lr
 8002c70:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c74:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002c78:	f43f af71 	beq.w	8002b5e <HAL_GPIO_Init+0x5e>
 8002c7c:	4c08      	ldr	r4, [pc, #32]	; (8002ca0 <HAL_GPIO_Init+0x1a0>)
 8002c7e:	42a0      	cmp	r0, r4
 8002c80:	d006      	beq.n	8002c90 <HAL_GPIO_Init+0x190>
 8002c82:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002c86:	42a0      	cmp	r0, r4
 8002c88:	f43f af67 	beq.w	8002b5a <HAL_GPIO_Init+0x5a>
 8002c8c:	2407      	movs	r4, #7
 8002c8e:	e767      	b.n	8002b60 <HAL_GPIO_Init+0x60>
 8002c90:	2401      	movs	r4, #1
 8002c92:	e765      	b.n	8002b60 <HAL_GPIO_Init+0x60>
  }
}
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
 8002c96:	bf00      	nop
 8002c98:	40010000 	.word	0x40010000
 8002c9c:	58000800 	.word	0x58000800
 8002ca0:	48000400 	.word	0x48000400

08002ca4 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 8002ca4:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002ca6:	fa31 f203 	lsrs.w	r2, r1, r3
 8002caa:	d071      	beq.n	8002d90 <HAL_GPIO_DeInit+0xec>
{
 8002cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cae:	e02e      	b.n	8002d0e <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002cb0:	2502      	movs	r5, #2
 8002cb2:	e000      	b.n	8002cb6 <HAL_GPIO_DeInit+0x12>
 8002cb4:	2500      	movs	r5, #0
 8002cb6:	fa05 f50c 	lsl.w	r5, r5, ip
 8002cba:	42a5      	cmp	r5, r4
 8002cbc:	d049      	beq.n	8002d52 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8002cbe:	6804      	ldr	r4, [r0, #0]
 8002cc0:	005d      	lsls	r5, r3, #1
 8002cc2:	f04f 0c03 	mov.w	ip, #3
 8002cc6:	fa0c fc05 	lsl.w	ip, ip, r5
 8002cca:	ea44 040c 	orr.w	r4, r4, ip
 8002cce:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8002cd0:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8002cd4:	f10e 0e08 	add.w	lr, lr, #8
 8002cd8:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8002cdc:	f003 0607 	and.w	r6, r3, #7
 8002ce0:	00b6      	lsls	r6, r6, #2
 8002ce2:	250f      	movs	r5, #15
 8002ce4:	40b5      	lsls	r5, r6
 8002ce6:	ea24 0405 	bic.w	r4, r4, r5
 8002cea:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002cee:	6884      	ldr	r4, [r0, #8]
 8002cf0:	ea24 040c 	bic.w	r4, r4, ip
 8002cf4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cf6:	6844      	ldr	r4, [r0, #4]
 8002cf8:	ea24 0202 	bic.w	r2, r4, r2
 8002cfc:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002cfe:	68c2      	ldr	r2, [r0, #12]
 8002d00:	ea22 020c 	bic.w	r2, r2, ip
 8002d04:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8002d06:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8002d08:	fa31 f203 	lsrs.w	r2, r1, r3
 8002d0c:	d03f      	beq.n	8002d8e <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002d0e:	2201      	movs	r2, #1
 8002d10:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8002d12:	ea12 0701 	ands.w	r7, r2, r1
 8002d16:	d0f6      	beq.n	8002d06 <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002d18:	089e      	lsrs	r6, r3, #2
 8002d1a:	1cb5      	adds	r5, r6, #2
 8002d1c:	4c1d      	ldr	r4, [pc, #116]	; (8002d94 <HAL_GPIO_DeInit+0xf0>)
 8002d1e:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8002d22:	f003 0c03 	and.w	ip, r3, #3
 8002d26:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8002d2a:	f04f 0e07 	mov.w	lr, #7
 8002d2e:	fa0e fe0c 	lsl.w	lr, lr, ip
 8002d32:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8002d36:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8002d3a:	d0bb      	beq.n	8002cb4 <HAL_GPIO_DeInit+0x10>
 8002d3c:	4d16      	ldr	r5, [pc, #88]	; (8002d98 <HAL_GPIO_DeInit+0xf4>)
 8002d3e:	42a8      	cmp	r0, r5
 8002d40:	d005      	beq.n	8002d4e <HAL_GPIO_DeInit+0xaa>
 8002d42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d46:	42a8      	cmp	r0, r5
 8002d48:	d0b2      	beq.n	8002cb0 <HAL_GPIO_DeInit+0xc>
 8002d4a:	2507      	movs	r5, #7
 8002d4c:	e7b3      	b.n	8002cb6 <HAL_GPIO_DeInit+0x12>
 8002d4e:	2501      	movs	r5, #1
 8002d50:	e7b1      	b.n	8002cb6 <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8002d52:	4c12      	ldr	r4, [pc, #72]	; (8002d9c <HAL_GPIO_DeInit+0xf8>)
 8002d54:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8002d58:	ea25 0507 	bic.w	r5, r5, r7
 8002d5c:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8002d60:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8002d64:	ea25 0507 	bic.w	r5, r5, r7
 8002d68:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8002d6c:	6825      	ldr	r5, [r4, #0]
 8002d6e:	ea25 0507 	bic.w	r5, r5, r7
 8002d72:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002d74:	6865      	ldr	r5, [r4, #4]
 8002d76:	ea25 0507 	bic.w	r5, r5, r7
 8002d7a:	6065      	str	r5, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002d7c:	4d05      	ldr	r5, [pc, #20]	; (8002d94 <HAL_GPIO_DeInit+0xf0>)
 8002d7e:	3602      	adds	r6, #2
 8002d80:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8002d84:	ea24 040e 	bic.w	r4, r4, lr
 8002d88:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8002d8c:	e797      	b.n	8002cbe <HAL_GPIO_DeInit+0x1a>
  }
}
 8002d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	40010000 	.word	0x40010000
 8002d98:	48000400 	.word	0x48000400
 8002d9c:	58000800 	.word	0x58000800

08002da0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002da0:	b10a      	cbz	r2, 8002da6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002da2:	6181      	str	r1, [r0, #24]
 8002da4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002da6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8002da8:	4770      	bx	lr

08002daa <HAL_I2C_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002daa:	2800      	cmp	r0, #0
 8002dac:	d059      	beq.n	8002e62 <HAL_I2C_Init+0xb8>
{
 8002dae:	b510      	push	{r4, lr}
 8002db0:	4604      	mov	r4, r0
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002db2:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d043      	beq.n	8002e42 <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002dba:	2324      	movs	r3, #36	; 0x24
 8002dbc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002dc0:	6822      	ldr	r2, [r4, #0]
 8002dc2:	6813      	ldr	r3, [r2, #0]
 8002dc4:	f023 0301 	bic.w	r3, r3, #1
 8002dc8:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002dca:	6863      	ldr	r3, [r4, #4]
 8002dcc:	6822      	ldr	r2, [r4, #0]
 8002dce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002dd2:	6113      	str	r3, [r2, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002dd4:	6822      	ldr	r2, [r4, #0]
 8002dd6:	6893      	ldr	r3, [r2, #8]
 8002dd8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ddc:	6093      	str	r3, [r2, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002dde:	68e3      	ldr	r3, [r4, #12]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d033      	beq.n	8002e4c <HAL_I2C_Init+0xa2>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002de4:	68a3      	ldr	r3, [r4, #8]
 8002de6:	6822      	ldr	r2, [r4, #0]
 8002de8:	f443 4304 	orr.w	r3, r3, #33792	; 0x8400
 8002dec:	6093      	str	r3, [r2, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002dee:	68e3      	ldr	r3, [r4, #12]
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d031      	beq.n	8002e58 <HAL_I2C_Init+0xae>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002df4:	6822      	ldr	r2, [r4, #0]
 8002df6:	6853      	ldr	r3, [r2, #4]
 8002df8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dfc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e00:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002e02:	6822      	ldr	r2, [r4, #0]
 8002e04:	68d3      	ldr	r3, [r2, #12]
 8002e06:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002e0a:	60d3      	str	r3, [r2, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e0c:	6923      	ldr	r3, [r4, #16]
 8002e0e:	6962      	ldr	r2, [r4, #20]
 8002e10:	4313      	orrs	r3, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002e12:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002e14:	6822      	ldr	r2, [r4, #0]
 8002e16:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002e1a:	60d3      	str	r3, [r2, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002e1c:	69e3      	ldr	r3, [r4, #28]
 8002e1e:	6a21      	ldr	r1, [r4, #32]
 8002e20:	6822      	ldr	r2, [r4, #0]
 8002e22:	430b      	orrs	r3, r1
 8002e24:	6013      	str	r3, [r2, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	6813      	ldr	r3, [r2, #0]
 8002e2a:	f043 0301 	orr.w	r3, r3, #1
 8002e2e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e30:	2000      	movs	r0, #0
 8002e32:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002e34:	2320      	movs	r3, #32
 8002e36:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e3a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
}
 8002e40:	bd10      	pop	{r4, pc}
    hi2c->Lock = HAL_UNLOCKED;
 8002e42:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8002e46:	f7fe f977 	bl	8001138 <HAL_I2C_MspInit>
 8002e4a:	e7b6      	b.n	8002dba <HAL_I2C_Init+0x10>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e4c:	68a3      	ldr	r3, [r4, #8]
 8002e4e:	6822      	ldr	r2, [r4, #0]
 8002e50:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e54:	6093      	str	r3, [r2, #8]
 8002e56:	e7ca      	b.n	8002dee <HAL_I2C_Init+0x44>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002e58:	6823      	ldr	r3, [r4, #0]
 8002e5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e5e:	605a      	str	r2, [r3, #4]
 8002e60:	e7c8      	b.n	8002df4 <HAL_I2C_Init+0x4a>
    return HAL_ERROR;
 8002e62:	2001      	movs	r0, #1
}
 8002e64:	4770      	bx	lr

08002e66 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002e66:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e68:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	2a20      	cmp	r2, #32
 8002e70:	d123      	bne.n	8002eba <HAL_I2CEx_ConfigAnalogFilter+0x54>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e72:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002e76:	2a01      	cmp	r2, #1
 8002e78:	d021      	beq.n	8002ebe <HAL_I2CEx_ConfigAnalogFilter+0x58>
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e80:	2224      	movs	r2, #36	; 0x24
 8002e82:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e86:	6800      	ldr	r0, [r0, #0]
 8002e88:	6802      	ldr	r2, [r0, #0]
 8002e8a:	f022 0201 	bic.w	r2, r2, #1
 8002e8e:	6002      	str	r2, [r0, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	6802      	ldr	r2, [r0, #0]
 8002e94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002e98:	6002      	str	r2, [r0, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	6802      	ldr	r2, [r0, #0]
 8002e9e:	4311      	orrs	r1, r2
 8002ea0:	6001      	str	r1, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ea2:	6819      	ldr	r1, [r3, #0]
 8002ea4:	680a      	ldr	r2, [r1, #0]
 8002ea6:	f042 0201 	orr.w	r2, r2, #1
 8002eaa:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eb2:	2000      	movs	r0, #0
 8002eb4:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8002eb8:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002eba:	2002      	movs	r0, #2
 8002ebc:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002ebe:	2002      	movs	r0, #2
  }
}
 8002ec0:	4770      	bx	lr

08002ec2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002ec2:	4603      	mov	r3, r0

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ec4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	2a20      	cmp	r2, #32
 8002ecc:	d121      	bne.n	8002f12 <HAL_I2CEx_ConfigDigitalFilter+0x50>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ece:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8002ed2:	2a01      	cmp	r2, #1
 8002ed4:	d01f      	beq.n	8002f16 <HAL_I2CEx_ConfigDigitalFilter+0x54>
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002edc:	2224      	movs	r2, #36	; 0x24
 8002ede:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ee2:	6800      	ldr	r0, [r0, #0]
 8002ee4:	6802      	ldr	r2, [r0, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	6002      	str	r2, [r0, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002eec:	6818      	ldr	r0, [r3, #0]
 8002eee:	6802      	ldr	r2, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ef0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ef4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ef8:	6002      	str	r2, [r0, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	680a      	ldr	r2, [r1, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	600a      	str	r2, [r1, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f04:	2220      	movs	r2, #32
 8002f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f883 0040 	strb.w	r0, [r3, #64]	; 0x40

    return HAL_OK;
 8002f10:	4770      	bx	lr
  }
  else
  {
    return HAL_BUSY;
 8002f12:	2002      	movs	r0, #2
 8002f14:	4770      	bx	lr
    __HAL_LOCK(hi2c);
 8002f16:	2002      	movs	r0, #2
  }
}
 8002f18:	4770      	bx	lr
	...

08002f1c <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f1c:	4a02      	ldr	r2, [pc, #8]	; (8002f28 <HAL_PWR_EnableBkUpAccess+0xc>)
 8002f1e:	6813      	ldr	r3, [r2, #0]
 8002f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f24:	6013      	str	r3, [r2, #0]
}
 8002f26:	4770      	bx	lr
 8002f28:	58000400 	.word	0x58000400

08002f2c <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002f2c:	b510      	push	{r4, lr}
 8002f2e:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8002f30:	b9a0      	cbnz	r0, 8002f5c <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002f32:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <HAL_PWR_EnterSLEEPMode+0x44>)
 8002f34:	695b      	ldr	r3, [r3, #20]
 8002f36:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f3a:	d10a      	bne.n	8002f52 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002f3c:	4a0d      	ldr	r2, [pc, #52]	; (8002f74 <HAL_PWR_EnterSLEEPMode+0x48>)
 8002f3e:	6913      	ldr	r3, [r2, #16]
 8002f40:	f023 0304 	bic.w	r3, r3, #4
 8002f44:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002f46:	2c01      	cmp	r4, #1
 8002f48:	d010      	beq.n	8002f6c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8002f4a:	bf40      	sev
    __WFE();
 8002f4c:	bf20      	wfe
    __WFE();
 8002f4e:	bf20      	wfe
  }
}
 8002f50:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8002f52:	f000 f821 	bl	8002f98 <HAL_PWREx_DisableLowPowerRunMode>
 8002f56:	2800      	cmp	r0, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_PWR_EnterSLEEPMode+0x10>
 8002f5a:	e7f9      	b.n	8002f50 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8002f5c:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <HAL_PWR_EnterSLEEPMode+0x44>)
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002f64:	d1ea      	bne.n	8002f3c <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8002f66:	f000 f80f 	bl	8002f88 <HAL_PWREx_EnableLowPowerRunMode>
 8002f6a:	e7e7      	b.n	8002f3c <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 8002f6c:	bf30      	wfi
 8002f6e:	e7ef      	b.n	8002f50 <HAL_PWR_EnterSLEEPMode+0x24>
 8002f70:	58000400 	.word	0x58000400
 8002f74:	e000ed00 	.word	0xe000ed00

08002f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8002f78:	4b02      	ldr	r3, [pc, #8]	; (8002f84 <HAL_PWREx_GetVoltageRange+0xc>)
 8002f7a:	6818      	ldr	r0, [r3, #0]
}
 8002f7c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	58000400 	.word	0x58000400

08002f88 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8002f88:	4a02      	ldr	r2, [pc, #8]	; (8002f94 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 8002f8a:	6813      	ldr	r3, [r2, #0]
 8002f8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f90:	6013      	str	r3, [r2, #0]
}
 8002f92:	4770      	bx	lr
 8002f94:	58000400 	.word	0x58000400

08002f98 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8002f98:	4a0f      	ldr	r2, [pc, #60]	; (8002fd8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8002f9a:	6813      	ldr	r3, [r2, #0]
 8002f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fa0:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8002fa2:	4b0e      	ldr	r3, [pc, #56]	; (8002fdc <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2232      	movs	r2, #50	; 0x32
 8002fa8:	fb02 f303 	mul.w	r3, r2, r3
 8002fac:	4a0c      	ldr	r2, [pc, #48]	; (8002fe0 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002fb4:	e000      	b.n	8002fb8 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8002fb6:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8002fb8:	4a07      	ldr	r2, [pc, #28]	; (8002fd8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8002fba:	6952      	ldr	r2, [r2, #20]
 8002fbc:	f412 7f00 	tst.w	r2, #512	; 0x200
 8002fc0:	d001      	beq.n	8002fc6 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1f7      	bne.n	8002fb6 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8002fc6:	4b04      	ldr	r3, [pc, #16]	; (8002fd8 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002fce:	d101      	bne.n	8002fd4 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	4770      	bx	lr
    return HAL_TIMEOUT;
 8002fd4:	2003      	movs	r0, #3
}
 8002fd6:	4770      	bx	lr
 8002fd8:	58000400 	.word	0x58000400
 8002fdc:	20000004 	.word	0x20000004
 8002fe0:	431bde83 	.word	0x431bde83

08002fe4 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8002fe4:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8002fe6:	6813      	ldr	r3, [r2, #0]
 8002fe8:	f023 0307 	bic.w	r3, r3, #7
 8002fec:	f043 0302 	orr.w	r3, r3, #2
 8002ff0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8002ff2:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8002ff4:	6913      	ldr	r3, [r2, #16]
 8002ff6:	f043 0304 	orr.w	r3, r3, #4
 8002ffa:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8002ffc:	2801      	cmp	r0, #1
 8002ffe:	d008      	beq.n	8003012 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003000:	bf40      	sev
    __WFE();
 8003002:	bf20      	wfe
    __WFE();
 8003004:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003006:	4a05      	ldr	r2, [pc, #20]	; (800301c <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8003008:	6913      	ldr	r3, [r2, #16]
 800300a:	f023 0304 	bic.w	r3, r3, #4
 800300e:	6113      	str	r3, [r2, #16]
}
 8003010:	4770      	bx	lr
    __WFI();
 8003012:	bf30      	wfi
 8003014:	e7f7      	b.n	8003006 <HAL_PWREx_EnterSTOP2Mode+0x22>
 8003016:	bf00      	nop
 8003018:	58000400 	.word	0x58000400
 800301c:	e000ed00 	.word	0xe000ed00

08003020 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8003020:	b530      	push	{r4, r5, lr}
 8003022:	b089      	sub	sp, #36	; 0x24
 8003024:	4604      	mov	r4, r0
 8003026:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8003028:	4b2a      	ldr	r3, [pc, #168]	; (80030d4 <RCC_SetFlashLatency+0xb4>)
 800302a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800302e:	9006      	str	r0, [sp, #24]
 8003030:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 8003034:	f103 0208 	add.w	r2, r3, #8
 8003038:	e892 0003 	ldmia.w	r2, {r0, r1}
 800303c:	9004      	str	r0, [sp, #16]
 800303e:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 8003042:	ad01      	add	r5, sp, #4
 8003044:	3310      	adds	r3, #16
 8003046:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800304a:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800304e:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8003052:	d007      	beq.n	8003064 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003054:	2300      	movs	r3, #0
 8003056:	e014      	b.n	8003082 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 8003058:	aa08      	add	r2, sp, #32
 800305a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800305e:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8003062:	e01e      	b.n	80030a2 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003064:	2300      	movs	r3, #0
 8003066:	2b02      	cmp	r3, #2
 8003068:	d808      	bhi.n	800307c <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800306a:	aa08      	add	r2, sp, #32
 800306c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8003070:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8003074:	42a2      	cmp	r2, r4
 8003076:	d2ef      	bcs.n	8003058 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8003078:	3301      	adds	r3, #1
 800307a:	e7f4      	b.n	8003066 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800307c:	2500      	movs	r5, #0
 800307e:	e010      	b.n	80030a2 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8003080:	3301      	adds	r3, #1
 8003082:	2b02      	cmp	r3, #2
 8003084:	d80c      	bhi.n	80030a0 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8003086:	aa08      	add	r2, sp, #32
 8003088:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800308c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8003090:	42a2      	cmp	r2, r4
 8003092:	d3f5      	bcc.n	8003080 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8003094:	aa08      	add	r2, sp, #32
 8003096:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800309a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800309e:	e000      	b.n	80030a2 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80030a0:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030a2:	4a0d      	ldr	r2, [pc, #52]	; (80030d8 <RCC_SetFlashLatency+0xb8>)
 80030a4:	6813      	ldr	r3, [r2, #0]
 80030a6:	f023 0307 	bic.w	r3, r3, #7
 80030aa:	432b      	orrs	r3, r5
 80030ac:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80030ae:	f7fe fa59 	bl	8001564 <HAL_GetTick>
 80030b2:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80030b4:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <RCC_SetFlashLatency+0xb8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	42ab      	cmp	r3, r5
 80030be:	d006      	beq.n	80030ce <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80030c0:	f7fe fa50 	bl	8001564 <HAL_GetTick>
 80030c4:	1b00      	subs	r0, r0, r4
 80030c6:	2802      	cmp	r0, #2
 80030c8:	d9f4      	bls.n	80030b4 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 80030ca:	2003      	movs	r0, #3
 80030cc:	e000      	b.n	80030d0 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 80030ce:	2000      	movs	r0, #0
}
 80030d0:	b009      	add	sp, #36	; 0x24
 80030d2:	bd30      	pop	{r4, r5, pc}
 80030d4:	0800d578 	.word	0x0800d578
 80030d8:	58004000 	.word	0x58004000

080030dc <RCC_SetFlashLatencyFromMSIRange>:
{
 80030dc:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80030de:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80030e2:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 80030e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80030e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80030ec:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80030f0:	f003 030f 	and.w	r3, r3, #15
 80030f4:	4a08      	ldr	r2, [pc, #32]	; (8003118 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 80030f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fa:	fbb4 f4f3 	udiv	r4, r4, r3
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80030fe:	f7ff ff3b 	bl	8002f78 <HAL_PWREx_GetVoltageRange>
 8003102:	4601      	mov	r1, r0
 8003104:	4b05      	ldr	r3, [pc, #20]	; (800311c <RCC_SetFlashLatencyFromMSIRange+0x40>)
 8003106:	fba3 3404 	umull	r3, r4, r3, r4
 800310a:	0ca0      	lsrs	r0, r4, #18
 800310c:	f7ff ff88 	bl	8003020 <RCC_SetFlashLatency>
}
 8003110:	bd10      	pop	{r4, pc}
 8003112:	bf00      	nop
 8003114:	0800d7f4 	.word	0x0800d7f4
 8003118:	0800d794 	.word	0x0800d794
 800311c:	431bde83 	.word	0x431bde83

08003120 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003120:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003124:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800312c:	f011 010c 	ands.w	r1, r1, #12
 8003130:	d00a      	beq.n	8003148 <HAL_RCC_GetSysClockFreq+0x28>
 8003132:	290c      	cmp	r1, #12
 8003134:	d006      	beq.n	8003144 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003136:	2904      	cmp	r1, #4
 8003138:	d047      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800313a:	2908      	cmp	r1, #8
 800313c:	d03b      	beq.n	80031b6 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 800313e:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 8003140:	4610      	mov	r0, r2
 8003142:	e026      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8003144:	2b01      	cmp	r3, #1
 8003146:	d1f6      	bne.n	8003136 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003148:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f013 0308 	ands.w	r3, r3, #8
 8003152:	d00d      	beq.n	8003170 <HAL_RCC_GetSysClockFreq+0x50>
 8003154:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f013 0308 	ands.w	r3, r3, #8
 800315e:	d124      	bne.n	80031aa <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003160:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003164:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003168:	4a2e      	ldr	r2, [pc, #184]	; (8003224 <HAL_RCC_GetSysClockFreq+0x104>)
 800316a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800316e:	e00e      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8003170:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003174:	6812      	ldr	r2, [r2, #0]
 8003176:	f012 0f08 	tst.w	r2, #8
 800317a:	d112      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800317c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003184:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8003188:	4a26      	ldr	r2, [pc, #152]	; (8003224 <HAL_RCC_GetSysClockFreq+0x104>)
 800318a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800318e:	b1d1      	cbz	r1, 80031c6 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8003190:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800319c:	2b0c      	cmp	r3, #12
 800319e:	d01a      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0xb6>
}
 80031a0:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80031a2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80031a6:	6812      	ldr	r2, [r2, #0]
 80031a8:	e7ee      	b.n	8003188 <HAL_RCC_GetSysClockFreq+0x68>
 80031aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ae:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80031b0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80031b4:	e7d8      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80031b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 80031c0:	d106      	bne.n	80031d0 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 80031c2:	4819      	ldr	r0, [pc, #100]	; (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c4:	e7e5      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 80031c6:	4610      	mov	r0, r2
 80031c8:	e7e3      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80031ca:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 80031cc:	4817      	ldr	r0, [pc, #92]	; (800322c <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ce:	e7e0      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 80031d0:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 80031d2:	4816      	ldr	r0, [pc, #88]	; (800322c <HAL_RCC_GetSysClockFreq+0x10c>)
 80031d4:	e7dd      	b.n	8003192 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80031d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d009      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0xd8>
 80031e4:	2b03      	cmp	r3, #3
 80031e6:	d108      	bne.n	80031fa <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 80031e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80031f2:	d115      	bne.n	8003220 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80031f4:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <HAL_RCC_GetSysClockFreq+0x108>)
 80031f6:	e000      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 80031f8:	4a0c      	ldr	r2, [pc, #48]	; (800322c <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80031fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80031fe:	68cb      	ldr	r3, [r1, #12]
 8003200:	f3c3 2306 	ubfx	r3, r3, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003204:	fb03 f202 	mul.w	r2, r3, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003208:	68cb      	ldr	r3, [r1, #12]
 800320a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800320e:	3301      	adds	r3, #1
 8003210:	fbb2 f2f3 	udiv	r2, r2, r3
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003214:	68c8      	ldr	r0, [r1, #12]
 8003216:	0f40      	lsrs	r0, r0, #29
 8003218:	3001      	adds	r0, #1
 800321a:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 800321e:	e7bf      	b.n	80031a0 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 8003220:	4a02      	ldr	r2, [pc, #8]	; (800322c <HAL_RCC_GetSysClockFreq+0x10c>)
 8003222:	e7ea      	b.n	80031fa <HAL_RCC_GetSysClockFreq+0xda>
 8003224:	0800d7f4 	.word	0x0800d7f4
 8003228:	01e84800 	.word	0x01e84800
 800322c:	00f42400 	.word	0x00f42400

08003230 <HAL_RCC_GetHCLKFreq>:
{
 8003230:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8003232:	f7ff ff75 	bl	8003120 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8003240:	4a02      	ldr	r2, [pc, #8]	; (800324c <HAL_RCC_GetHCLKFreq+0x1c>)
 8003242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003246:	fbb0 f0f3 	udiv	r0, r0, r3
 800324a:	bd08      	pop	{r3, pc}
 800324c:	0800d794 	.word	0x0800d794

08003250 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 8003250:	2800      	cmp	r0, #0
 8003252:	f000 8311 	beq.w	8003878 <HAL_RCC_OscConfig+0x628>
{
 8003256:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003258:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800325a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800325e:	689d      	ldr	r5, [r3, #8]
 8003260:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003264:	68de      	ldr	r6, [r3, #12]
 8003266:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800326a:	6803      	ldr	r3, [r0, #0]
 800326c:	f013 0f20 	tst.w	r3, #32
 8003270:	d02a      	beq.n	80032c8 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8003272:	2d00      	cmp	r5, #0
 8003274:	d065      	beq.n	8003342 <HAL_RCC_OscConfig+0xf2>
 8003276:	2d0c      	cmp	r5, #12
 8003278:	d061      	beq.n	800333e <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800327a:	6a23      	ldr	r3, [r4, #32]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80bf 	beq.w	8003400 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8003282:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003286:	6813      	ldr	r3, [r2, #0]
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800328e:	f7fe f969 	bl	8001564 <HAL_GetTick>
 8003292:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003294:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f013 0f02 	tst.w	r3, #2
 800329e:	f000 80a7 	beq.w	80033f0 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	f042 0208 	orr.w	r2, r2, #8
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80032b4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80032b6:	430a      	orrs	r2, r1
 80032b8:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032ba:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80032c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80032c6:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032c8:	6823      	ldr	r3, [r4, #0]
 80032ca:	f013 0f01 	tst.w	r3, #1
 80032ce:	f000 80b5 	beq.w	800343c <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80032d2:	2d08      	cmp	r5, #8
 80032d4:	f000 80ae 	beq.w	8003434 <HAL_RCC_OscConfig+0x1e4>
 80032d8:	2d0c      	cmp	r5, #12
 80032da:	f000 80a8 	beq.w	800342e <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80032de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80032e2:	6813      	ldr	r3, [r2, #0]
 80032e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80032e8:	68a1      	ldr	r1, [r4, #8]
 80032ea:	430b      	orrs	r3, r1
 80032ec:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032ee:	6863      	ldr	r3, [r4, #4]
 80032f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f4:	f000 80c4 	beq.w	8003480 <HAL_RCC_OscConfig+0x230>
 80032f8:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80032fc:	f000 80c5 	beq.w	800348a <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8003300:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800330a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8003312:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003314:	6863      	ldr	r3, [r4, #4]
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80c2 	beq.w	80034a0 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 800331c:	f7fe f922 	bl	8001564 <HAL_GetTick>
 8003320:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800332c:	f040 8086 	bne.w	800343c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003330:	f7fe f918 	bl	8001564 <HAL_GetTick>
 8003334:	1bc0      	subs	r0, r0, r7
 8003336:	2864      	cmp	r0, #100	; 0x64
 8003338:	d9f3      	bls.n	8003322 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 800333a:	2003      	movs	r0, #3
 800333c:	e2a9      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800333e:	2e01      	cmp	r6, #1
 8003340:	d19b      	bne.n	800327a <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8003342:	6a23      	ldr	r3, [r4, #32]
 8003344:	2b00      	cmp	r3, #0
 8003346:	f000 8299 	beq.w	800387c <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800334a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800334c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f013 0f08 	tst.w	r3, #8
 8003356:	d029      	beq.n	80033ac <HAL_RCC_OscConfig+0x15c>
 8003358:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003362:	4298      	cmp	r0, r3
 8003364:	d92a      	bls.n	80033bc <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003366:	f7ff feb9 	bl	80030dc <RCC_SetFlashLatencyFromMSIRange>
 800336a:	2800      	cmp	r0, #0
 800336c:	f040 8288 	bne.w	8003880 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003370:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	f042 0208 	orr.w	r2, r2, #8
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003382:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003388:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8003390:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003394:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003396:	f7ff ff4b 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 800339a:	4bba      	ldr	r3, [pc, #744]	; (8003684 <HAL_RCC_OscConfig+0x434>)
 800339c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800339e:	4bba      	ldr	r3, [pc, #744]	; (8003688 <HAL_RCC_OscConfig+0x438>)
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	f7fe f8dd 	bl	8001560 <HAL_InitTick>
        if (status != HAL_OK)
 80033a6:	2800      	cmp	r0, #0
 80033a8:	d08e      	beq.n	80032c8 <HAL_RCC_OscConfig+0x78>
 80033aa:	e272      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80033ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033b4:	091b      	lsrs	r3, r3, #4
 80033b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80033ba:	e7d2      	b.n	8003362 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	f042 0208 	orr.w	r2, r2, #8
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80033ce:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80033dc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033e0:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80033e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80033e4:	f7ff fe7a 	bl	80030dc <RCC_SetFlashLatencyFromMSIRange>
 80033e8:	2800      	cmp	r0, #0
 80033ea:	d0d4      	beq.n	8003396 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 80033ec:	2001      	movs	r0, #1
 80033ee:	e250      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033f0:	f7fe f8b8 	bl	8001564 <HAL_GetTick>
 80033f4:	1bc0      	subs	r0, r0, r7
 80033f6:	2802      	cmp	r0, #2
 80033f8:	f67f af4c 	bls.w	8003294 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 80033fc:	2003      	movs	r0, #3
 80033fe:	e248      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8003400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003404:	6813      	ldr	r3, [r2, #0]
 8003406:	f023 0301 	bic.w	r3, r3, #1
 800340a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800340c:	f7fe f8aa 	bl	8001564 <HAL_GetTick>
 8003410:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003412:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f013 0f02 	tst.w	r3, #2
 800341c:	f43f af54 	beq.w	80032c8 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003420:	f7fe f8a0 	bl	8001564 <HAL_GetTick>
 8003424:	1bc0      	subs	r0, r0, r7
 8003426:	2802      	cmp	r0, #2
 8003428:	d9f3      	bls.n	8003412 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 800342a:	2003      	movs	r0, #3
 800342c:	e231      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800342e:	2e03      	cmp	r6, #3
 8003430:	f47f af55 	bne.w	80032de <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003434:	6863      	ldr	r3, [r4, #4]
 8003436:	2b00      	cmp	r3, #0
 8003438:	f000 8224 	beq.w	8003884 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343c:	6823      	ldr	r3, [r4, #0]
 800343e:	f013 0f02 	tst.w	r3, #2
 8003442:	d056      	beq.n	80034f2 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8003444:	2d04      	cmp	r5, #4
 8003446:	d03d      	beq.n	80034c4 <HAL_RCC_OscConfig+0x274>
 8003448:	2d0c      	cmp	r5, #12
 800344a:	d039      	beq.n	80034c0 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800344c:	6923      	ldr	r3, [r4, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	f000 808a 	beq.w	8003568 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003454:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003458:	6813      	ldr	r3, [r2, #0]
 800345a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800345e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003460:	f7fe f880 	bl	8001564 <HAL_GetTick>
 8003464:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003466:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003470:	d136      	bne.n	80034e0 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7fe f877 	bl	8001564 <HAL_GetTick>
 8003476:	1b80      	subs	r0, r0, r6
 8003478:	2802      	cmp	r0, #2
 800347a:	d9f4      	bls.n	8003466 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 800347c:	2003      	movs	r0, #3
 800347e:	e208      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
}
 8003488:	e744      	b.n	8003314 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800348a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8003494:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800349c:	601a      	str	r2, [r3, #0]
}
 800349e:	e739      	b.n	8003314 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80034a0:	f7fe f860 	bl	8001564 <HAL_GetTick>
 80034a4:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80034a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80034b0:	d0c4      	beq.n	800343c <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b2:	f7fe f857 	bl	8001564 <HAL_GetTick>
 80034b6:	1bc0      	subs	r0, r0, r7
 80034b8:	2864      	cmp	r0, #100	; 0x64
 80034ba:	d9f4      	bls.n	80034a6 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 80034bc:	2003      	movs	r0, #3
 80034be:	e1e8      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80034c0:	2e02      	cmp	r6, #2
 80034c2:	d1c3      	bne.n	800344c <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034c4:	6923      	ldr	r3, [r4, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 81de 	beq.w	8003888 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034cc:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80034ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034d2:	6853      	ldr	r3, [r2, #4]
 80034d4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80034d8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80034dc:	6053      	str	r3, [r2, #4]
}
 80034de:	e008      	b.n	80034f2 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e0:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80034e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80034e6:	6853      	ldr	r3, [r2, #4]
 80034e8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80034ec:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 80034f0:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	f013 0f08 	tst.w	r3, #8
 80034f8:	d07e      	beq.n	80035f8 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034fa:	69a3      	ldr	r3, [r4, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d062      	beq.n	80035c6 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 8003500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003504:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8003508:	69e1      	ldr	r1, [r4, #28]
 800350a:	f003 0210 	and.w	r2, r3, #16
 800350e:	4291      	cmp	r1, r2
 8003510:	d011      	beq.n	8003536 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8003512:	f003 0203 	and.w	r2, r3, #3
 8003516:	2a02      	cmp	r2, #2
 8003518:	f000 81b8 	beq.w	800388c <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800351c:	f013 0f01 	tst.w	r3, #1
 8003520:	d138      	bne.n	8003594 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8003522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003526:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800352a:	f023 0310 	bic.w	r3, r3, #16
 800352e:	69e1      	ldr	r1, [r4, #28]
 8003530:	430b      	orrs	r3, r1
 8003532:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8003536:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800353a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800353e:	f043 0301 	orr.w	r3, r3, #1
 8003542:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8003546:	f7fe f80d 	bl	8001564 <HAL_GetTick>
 800354a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800354c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003554:	f013 0f02 	tst.w	r3, #2
 8003558:	d14e      	bne.n	80035f8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800355a:	f7fe f803 	bl	8001564 <HAL_GetTick>
 800355e:	1b80      	subs	r0, r0, r6
 8003560:	2811      	cmp	r0, #17
 8003562:	d9f3      	bls.n	800354c <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8003564:	2003      	movs	r0, #3
 8003566:	e194      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8003568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800356c:	6813      	ldr	r3, [r2, #0]
 800356e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003572:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8003574:	f7fd fff6 	bl	8001564 <HAL_GetTick>
 8003578:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800357a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003584:	d0b5      	beq.n	80034f2 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003586:	f7fd ffed 	bl	8001564 <HAL_GetTick>
 800358a:	1b80      	subs	r0, r0, r6
 800358c:	2802      	cmp	r0, #2
 800358e:	d9f4      	bls.n	800357a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8003590:	2003      	movs	r0, #3
 8003592:	e17e      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003594:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003598:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800359c:	f023 0301 	bic.w	r3, r3, #1
 80035a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 80035a4:	f7fd ffde 	bl	8001564 <HAL_GetTick>
 80035a8:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80035aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035b2:	f013 0f02 	tst.w	r3, #2
 80035b6:	d0b4      	beq.n	8003522 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035b8:	f7fd ffd4 	bl	8001564 <HAL_GetTick>
 80035bc:	1b80      	subs	r0, r0, r6
 80035be:	2811      	cmp	r0, #17
 80035c0:	d9f3      	bls.n	80035aa <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 80035c2:	2003      	movs	r0, #3
 80035c4:	e165      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80035c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80035ca:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80035ce:	f023 0301 	bic.w	r3, r3, #1
 80035d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80035d6:	f7fd ffc5 	bl	8001564 <HAL_GetTick>
 80035da:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80035dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80035e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035e4:	f013 0f02 	tst.w	r3, #2
 80035e8:	d006      	beq.n	80035f8 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ea:	f7fd ffbb 	bl	8001564 <HAL_GetTick>
 80035ee:	1b80      	subs	r0, r0, r6
 80035f0:	2811      	cmp	r0, #17
 80035f2:	d9f3      	bls.n	80035dc <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 80035f4:	2003      	movs	r0, #3
 80035f6:	e14c      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035f8:	6823      	ldr	r3, [r4, #0]
 80035fa:	f013 0f04 	tst.w	r3, #4
 80035fe:	f000 80b8 	beq.w	8003772 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_RCC_OscConfig+0x43c>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f413 7f80 	tst.w	r3, #256	; 0x100
 800360a:	d110      	bne.n	800362e <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 800360c:	f7ff fc86 	bl	8002f1c <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 8003610:	f7fd ffa8 	bl	8001564 <HAL_GetTick>
 8003614:	4606      	mov	r6, r0
 8003616:	4b1d      	ldr	r3, [pc, #116]	; (800368c <HAL_RCC_OscConfig+0x43c>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800361e:	d106      	bne.n	800362e <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003620:	f7fd ffa0 	bl	8001564 <HAL_GetTick>
 8003624:	1b80      	subs	r0, r0, r6
 8003626:	2802      	cmp	r0, #2
 8003628:	d9f5      	bls.n	8003616 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 800362a:	2003      	movs	r0, #3
 800362c:	e131      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800362e:	68e3      	ldr	r3, [r4, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d068      	beq.n	8003706 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8003634:	2b85      	cmp	r3, #133	; 0x85
 8003636:	d001      	beq.n	800363c <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8003638:	2b05      	cmp	r3, #5
 800363a:	d107      	bne.n	800364c <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800363c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003640:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 800364c:	f7fd ff8a 	bl	8001564 <HAL_GetTick>
 8003650:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003656:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800365a:	f043 0301 	orr.w	r3, r3, #1
 800365e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366a:	f013 0f02 	tst.w	r3, #2
 800366e:	d10f      	bne.n	8003690 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fd ff78 	bl	8001564 <HAL_GetTick>
 8003674:	1b80      	subs	r0, r0, r6
 8003676:	f241 3388 	movw	r3, #5000	; 0x1388
 800367a:	4298      	cmp	r0, r3
 800367c:	d9f1      	bls.n	8003662 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 800367e:	2003      	movs	r0, #3
 8003680:	e107      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
 8003682:	bf00      	nop
 8003684:	20000004 	.word	0x20000004
 8003688:	20000008 	.word	0x20000008
 800368c:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8003690:	68e3      	ldr	r3, [r4, #12]
 8003692:	2b81      	cmp	r3, #129	; 0x81
 8003694:	d001      	beq.n	800369a <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8003696:	2b85      	cmp	r3, #133	; 0x85
 8003698:	d11a      	bne.n	80036d0 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 800369a:	f7fd ff63 	bl	8001564 <HAL_GetTick>
 800369e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036a4:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80036a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80036b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80036bc:	d159      	bne.n	8003772 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fd ff51 	bl	8001564 <HAL_GetTick>
 80036c2:	1b80      	subs	r0, r0, r6
 80036c4:	f241 3388 	movw	r3, #5000	; 0x1388
 80036c8:	4298      	cmp	r0, r3
 80036ca:	d9f1      	bls.n	80036b0 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 80036cc:	2003      	movs	r0, #3
 80036ce:	e0e0      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 80036d0:	f7fd ff48 	bl	8001564 <HAL_GetTick>
 80036d4:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80036d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80036da:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80036de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80036e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80036f2:	d03e      	beq.n	8003772 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f4:	f7fd ff36 	bl	8001564 <HAL_GetTick>
 80036f8:	1b80      	subs	r0, r0, r6
 80036fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80036fe:	4298      	cmp	r0, r3
 8003700:	d9f1      	bls.n	80036e6 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 8003702:	2003      	movs	r0, #3
 8003704:	e0c5      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 8003706:	f7fd ff2d 	bl	8001564 <HAL_GetTick>
 800370a:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800370c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003710:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8003714:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800371c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003728:	d008      	beq.n	800373c <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fd ff1b 	bl	8001564 <HAL_GetTick>
 800372e:	1b80      	subs	r0, r0, r6
 8003730:	f241 3388 	movw	r3, #5000	; 0x1388
 8003734:	4298      	cmp	r0, r3
 8003736:	d9f1      	bls.n	800371c <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 8003738:	2003      	movs	r0, #3
 800373a:	e0aa      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 800373c:	f7fd ff12 	bl	8001564 <HAL_GetTick>
 8003740:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8003742:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003746:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800374a:	f023 0301 	bic.w	r3, r3, #1
 800374e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003752:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800375a:	f013 0f02 	tst.w	r3, #2
 800375e:	d008      	beq.n	8003772 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7fd ff00 	bl	8001564 <HAL_GetTick>
 8003764:	1b80      	subs	r0, r0, r6
 8003766:	f241 3388 	movw	r3, #5000	; 0x1388
 800376a:	4298      	cmp	r0, r3
 800376c:	d9f1      	bls.n	8003752 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 800376e:	2003      	movs	r0, #3
 8003770:	e08f      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003772:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003774:	2b00      	cmp	r3, #0
 8003776:	f000 808b 	beq.w	8003890 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800377a:	2d0c      	cmp	r5, #12
 800377c:	d060      	beq.n	8003840 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800377e:	2b02      	cmp	r3, #2
 8003780:	d016      	beq.n	80037b0 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003786:	6813      	ldr	r3, [r2, #0]
 8003788:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800378e:	f7fd fee9 	bl	8001564 <HAL_GetTick>
 8003792:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800379e:	d148      	bne.n	8003832 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80037a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037a4:	68d1      	ldr	r1, [r2, #12]
 80037a6:	4b41      	ldr	r3, [pc, #260]	; (80038ac <HAL_RCC_OscConfig+0x65c>)
 80037a8:	400b      	ands	r3, r1
 80037aa:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 80037ac:	2000      	movs	r0, #0
 80037ae:	e070      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80037b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037ba:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80037bc:	f7fd fed2 	bl	8001564 <HAL_GetTick>
 80037c0:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80037c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80037cc:	d12a      	bne.n	8003824 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80037d2:	68d3      	ldr	r3, [r2, #12]
 80037d4:	4936      	ldr	r1, [pc, #216]	; (80038b0 <HAL_RCC_OscConfig+0x660>)
 80037d6:	4019      	ands	r1, r3
 80037d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80037da:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80037dc:	4303      	orrs	r3, r0
 80037de:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80037e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80037e4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80037e6:	4303      	orrs	r3, r0
 80037e8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80037ea:	4303      	orrs	r3, r0
 80037ec:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80037ee:	4303      	orrs	r3, r0
 80037f0:	4319      	orrs	r1, r3
 80037f2:	60d1      	str	r1, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80037f4:	6813      	ldr	r3, [r2, #0]
 80037f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037fa:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037fc:	68d3      	ldr	r3, [r2, #12]
 80037fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003802:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8003804:	f7fd feae 	bl	8001564 <HAL_GetTick>
 8003808:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800380a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8003814:	d13e      	bne.n	8003894 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7fd fea5 	bl	8001564 <HAL_GetTick>
 800381a:	1b00      	subs	r0, r0, r4
 800381c:	280a      	cmp	r0, #10
 800381e:	d9f4      	bls.n	800380a <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8003820:	2003      	movs	r0, #3
 8003822:	e036      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003824:	f7fd fe9e 	bl	8001564 <HAL_GetTick>
 8003828:	1b40      	subs	r0, r0, r5
 800382a:	280a      	cmp	r0, #10
 800382c:	d9c9      	bls.n	80037c2 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 800382e:	2003      	movs	r0, #3
 8003830:	e02f      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003832:	f7fd fe97 	bl	8001564 <HAL_GetTick>
 8003836:	1b00      	subs	r0, r0, r4
 8003838:	280a      	cmp	r0, #10
 800383a:	d9ab      	bls.n	8003794 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 800383c:	2003      	movs	r0, #3
 800383e:	e028      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003840:	2b01      	cmp	r3, #1
 8003842:	d029      	beq.n	8003898 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8003844:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003848:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800384a:	f003 0103 	and.w	r1, r3, #3
 800384e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003850:	4291      	cmp	r1, r2
 8003852:	d123      	bne.n	800389c <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8003854:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003858:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800385a:	428a      	cmp	r2, r1
 800385c:	d120      	bne.n	80038a0 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 800385e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003862:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8003864:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8003868:	d11c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 800386a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 800386e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8003870:	4293      	cmp	r3, r2
 8003872:	d119      	bne.n	80038a8 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8003874:	2000      	movs	r0, #0
 8003876:	e00c      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8003878:	2001      	movs	r0, #1
}
 800387a:	4770      	bx	lr
        return HAL_ERROR;
 800387c:	2001      	movs	r0, #1
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8003880:	2001      	movs	r0, #1
 8003882:	e006      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8003884:	2001      	movs	r0, #1
 8003886:	e004      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8003888:	2001      	movs	r0, #1
 800388a:	e002      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800388c:	2001      	movs	r0, #1
 800388e:	e000      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8003890:	2000      	movs	r0, #0
}
 8003892:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8003894:	2000      	movs	r0, #0
 8003896:	e7fc      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8003898:	2001      	movs	r0, #1
 800389a:	e7fa      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 800389c:	2001      	movs	r0, #1
 800389e:	e7f8      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
 80038a0:	2001      	movs	r0, #1
 80038a2:	e7f6      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
 80038a4:	2001      	movs	r0, #1
 80038a6:	e7f4      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
 80038a8:	2001      	movs	r0, #1
 80038aa:	e7f2      	b.n	8003892 <HAL_RCC_OscConfig+0x642>
 80038ac:	eefefffc 	.word	0xeefefffc
 80038b0:	11c1808c 	.word	0x11c1808c

080038b4 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80038b4:	2800      	cmp	r0, #0
 80038b6:	f000 8127 	beq.w	8003b08 <HAL_RCC_ClockConfig+0x254>
{
 80038ba:	b570      	push	{r4, r5, r6, lr}
 80038bc:	460c      	mov	r4, r1
 80038be:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038c0:	4b93      	ldr	r3, [pc, #588]	; (8003b10 <HAL_RCC_ClockConfig+0x25c>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	428b      	cmp	r3, r1
 80038ca:	d32d      	bcc.n	8003928 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038cc:	682b      	ldr	r3, [r5, #0]
 80038ce:	f013 0f02 	tst.w	r3, #2
 80038d2:	d13f      	bne.n	8003954 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80038d4:	682b      	ldr	r3, [r5, #0]
 80038d6:	f013 0f20 	tst.w	r3, #32
 80038da:	d153      	bne.n	8003984 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80038dc:	682b      	ldr	r3, [r5, #0]
 80038de:	f013 0f40 	tst.w	r3, #64	; 0x40
 80038e2:	d16a      	bne.n	80039ba <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038e4:	682b      	ldr	r3, [r5, #0]
 80038e6:	f013 0f04 	tst.w	r3, #4
 80038ea:	f040 8083 	bne.w	80039f4 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ee:	682b      	ldr	r3, [r5, #0]
 80038f0:	f013 0f08 	tst.w	r3, #8
 80038f4:	f040 8097 	bne.w	8003a26 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f8:	682b      	ldr	r3, [r5, #0]
 80038fa:	f013 0f01 	tst.w	r3, #1
 80038fe:	f000 80de 	beq.w	8003abe <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003902:	686b      	ldr	r3, [r5, #4]
 8003904:	2b02      	cmp	r3, #2
 8003906:	f000 80a8 	beq.w	8003a5a <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390a:	2b03      	cmp	r3, #3
 800390c:	f000 80ad 	beq.w	8003a6a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003910:	2b00      	cmp	r3, #0
 8003912:	f040 80b2 	bne.w	8003a7a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8003916:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800391a:	6812      	ldr	r2, [r2, #0]
 800391c:	f012 0f02 	tst.w	r2, #2
 8003920:	f040 80b1 	bne.w	8003a86 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003924:	2001      	movs	r0, #1
 8003926:	e0ee      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003928:	4a79      	ldr	r2, [pc, #484]	; (8003b10 <HAL_RCC_ClockConfig+0x25c>)
 800392a:	6813      	ldr	r3, [r2, #0]
 800392c:	f023 0307 	bic.w	r3, r3, #7
 8003930:	430b      	orrs	r3, r1
 8003932:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003934:	f7fd fe16 	bl	8001564 <HAL_GetTick>
 8003938:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393a:	4b75      	ldr	r3, [pc, #468]	; (8003b10 <HAL_RCC_ClockConfig+0x25c>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0307 	and.w	r3, r3, #7
 8003942:	42a3      	cmp	r3, r4
 8003944:	d0c2      	beq.n	80038cc <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003946:	f7fd fe0d 	bl	8001564 <HAL_GetTick>
 800394a:	1b80      	subs	r0, r0, r6
 800394c:	2802      	cmp	r0, #2
 800394e:	d9f4      	bls.n	800393a <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8003950:	2003      	movs	r0, #3
 8003952:	e0d8      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003956:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800395a:	688a      	ldr	r2, [r1, #8]
 800395c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003960:	4313      	orrs	r3, r2
 8003962:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003964:	f7fd fdfe 	bl	8001564 <HAL_GetTick>
 8003968:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800396a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003974:	d1ae      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003976:	f7fd fdf5 	bl	8001564 <HAL_GetTick>
 800397a:	1b80      	subs	r0, r0, r6
 800397c:	2802      	cmp	r0, #2
 800397e:	d9f4      	bls.n	800396a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8003980:	2003      	movs	r0, #3
 8003982:	e0c0      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8003984:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8003986:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800398a:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 800398e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8003998:	f7fd fde4 	bl	8001564 <HAL_GetTick>
 800399c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800399e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039a2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039a6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80039aa:	d197      	bne.n	80038dc <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039ac:	f7fd fdda 	bl	8001564 <HAL_GetTick>
 80039b0:	1b80      	subs	r0, r0, r6
 80039b2:	2802      	cmp	r0, #2
 80039b4:	d9f3      	bls.n	800399e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 80039b6:	2003      	movs	r0, #3
 80039b8:	e0a5      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80039ba:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80039bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80039c0:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 80039c4:	f023 030f 	bic.w	r3, r3, #15
 80039c8:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 80039cc:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 80039d0:	f7fd fdc8 	bl	8001564 <HAL_GetTick>
 80039d4:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80039d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80039da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80039de:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80039e2:	f47f af7f 	bne.w	80038e4 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80039e6:	f7fd fdbd 	bl	8001564 <HAL_GetTick>
 80039ea:	1b80      	subs	r0, r0, r6
 80039ec:	2802      	cmp	r0, #2
 80039ee:	d9f2      	bls.n	80039d6 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 80039f0:	2003      	movs	r0, #3
 80039f2:	e088      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 80039f4:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80039f6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80039fa:	688a      	ldr	r2, [r1, #8]
 80039fc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a00:	4313      	orrs	r3, r2
 8003a02:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003a04:	f7fd fdae 	bl	8001564 <HAL_GetTick>
 8003a08:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8003a0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8003a14:	f47f af6b 	bne.w	80038ee <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a18:	f7fd fda4 	bl	8001564 <HAL_GetTick>
 8003a1c:	1b80      	subs	r0, r0, r6
 8003a1e:	2802      	cmp	r0, #2
 8003a20:	d9f3      	bls.n	8003a0a <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8003a22:	2003      	movs	r0, #3
 8003a24:	e06f      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8003a26:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8003a28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a2c:	6893      	ldr	r3, [r2, #8]
 8003a2e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8003a32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8003a36:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003a38:	f7fd fd94 	bl	8001564 <HAL_GetTick>
 8003a3c:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8003a3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8003a48:	f47f af56 	bne.w	80038f8 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8003a4c:	f7fd fd8a 	bl	8001564 <HAL_GetTick>
 8003a50:	1b80      	subs	r0, r0, r6
 8003a52:	2802      	cmp	r0, #2
 8003a54:	d9f3      	bls.n	8003a3e <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8003a56:	2003      	movs	r0, #3
 8003a58:	e055      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8003a5a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a5e:	6812      	ldr	r2, [r2, #0]
 8003a60:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8003a64:	d10f      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003a66:	2001      	movs	r0, #1
 8003a68:	e04d      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8003a6a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a6e:	6812      	ldr	r2, [r2, #0]
 8003a70:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8003a74:	d107      	bne.n	8003a86 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8003a76:	2001      	movs	r0, #1
 8003a78:	e045      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8003a7a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8003a84:	d042      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003a86:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003a8a:	688a      	ldr	r2, [r1, #8]
 8003a8c:	f022 0203 	bic.w	r2, r2, #3
 8003a90:	4313      	orrs	r3, r2
 8003a92:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8003a94:	f7fd fd66 	bl	8001564 <HAL_GetTick>
 8003a98:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003a9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa4:	686a      	ldr	r2, [r5, #4]
 8003aa6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8003aaa:	d008      	beq.n	8003abe <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aac:	f7fd fd5a 	bl	8001564 <HAL_GetTick>
 8003ab0:	1b80      	subs	r0, r0, r6
 8003ab2:	f241 3388 	movw	r3, #5000	; 0x1388
 8003ab6:	4298      	cmp	r0, r3
 8003ab8:	d9ef      	bls.n	8003a9a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8003aba:	2003      	movs	r0, #3
 8003abc:	e023      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003abe:	4b14      	ldr	r3, [pc, #80]	; (8003b10 <HAL_RCC_ClockConfig+0x25c>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 0307 	and.w	r3, r3, #7
 8003ac6:	42a3      	cmp	r3, r4
 8003ac8:	d915      	bls.n	8003af6 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4a11      	ldr	r2, [pc, #68]	; (8003b10 <HAL_RCC_ClockConfig+0x25c>)
 8003acc:	6813      	ldr	r3, [r2, #0]
 8003ace:	f023 0307 	bic.w	r3, r3, #7
 8003ad2:	4323      	orrs	r3, r4
 8003ad4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8003ad6:	f7fd fd45 	bl	8001564 <HAL_GetTick>
 8003ada:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003adc:	4b0c      	ldr	r3, [pc, #48]	; (8003b10 <HAL_RCC_ClockConfig+0x25c>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0307 	and.w	r3, r3, #7
 8003ae4:	42a3      	cmp	r3, r4
 8003ae6:	d006      	beq.n	8003af6 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8003ae8:	f7fd fd3c 	bl	8001564 <HAL_GetTick>
 8003aec:	1b40      	subs	r0, r0, r5
 8003aee:	2802      	cmp	r0, #2
 8003af0:	d9f4      	bls.n	8003adc <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8003af2:	2003      	movs	r0, #3
 8003af4:	e007      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8003af6:	f7ff fb9b 	bl	8003230 <HAL_RCC_GetHCLKFreq>
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_RCC_ClockConfig+0x260>)
 8003afc:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_RCC_ClockConfig+0x264>)
 8003b00:	6818      	ldr	r0, [r3, #0]
 8003b02:	f7fd fd2d 	bl	8001560 <HAL_InitTick>
}
 8003b06:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003b08:	2001      	movs	r0, #1
}
 8003b0a:	4770      	bx	lr
        return HAL_ERROR;
 8003b0c:	2001      	movs	r0, #1
 8003b0e:	e7fa      	b.n	8003b06 <HAL_RCC_ClockConfig+0x252>
 8003b10:	58004000 	.word	0x58004000
 8003b14:	20000004 	.word	0x20000004
 8003b18:	20000008 	.word	0x20000008

08003b1c <HAL_RCC_GetPCLK1Freq>:
{
 8003b1c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8003b1e:	f7ff fb87 	bl	8003230 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003b22:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8003b2c:	4a02      	ldr	r2, [pc, #8]	; (8003b38 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003b32:	40d8      	lsrs	r0, r3
 8003b34:	bd08      	pop	{r3, pc}
 8003b36:	bf00      	nop
 8003b38:	0800d7d4 	.word	0x0800d7d4

08003b3c <HAL_RCC_GetPCLK2Freq>:
{
 8003b3c:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8003b3e:	f7ff fb77 	bl	8003230 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8003b4c:	4a02      	ldr	r2, [pc, #8]	; (8003b58 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8003b4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8003b52:	40d8      	lsrs	r0, r3
 8003b54:	bd08      	pop	{r3, pc}
 8003b56:	bf00      	nop
 8003b58:	0800d7d4 	.word	0x0800d7d4

08003b5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b5c:	b570      	push	{r4, r5, r6, lr}
 8003b5e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b60:	6803      	ldr	r3, [r0, #0]
 8003b62:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8003b66:	f040 80ab 	bne.w	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8003b6a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b6c:	6823      	ldr	r3, [r4, #0]
 8003b6e:	f013 0f01 	tst.w	r3, #1
 8003b72:	d00a      	beq.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b74:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8003b76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b7a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003b7e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8003b82:	b292      	uxth	r2, r2
 8003b84:	4313      	orrs	r3, r2
 8003b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003b8a:	6823      	ldr	r3, [r4, #0]
 8003b8c:	f013 0f02 	tst.w	r3, #2
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003b92:	68a2      	ldr	r2, [r4, #8]
 8003b94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003b98:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003b9c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8003ba0:	b292      	uxth	r2, r2
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ba8:	6823      	ldr	r3, [r4, #0]
 8003baa:	f013 0f20 	tst.w	r3, #32
 8003bae:	d009      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003bb0:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8003bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bb6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003bba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	f413 7f00 	tst.w	r3, #512	; 0x200
 8003bca:	d00c      	beq.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bcc:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8003bce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bd2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003bd6:	0c02      	lsrs	r2, r0, #16
 8003bd8:	0412      	lsls	r2, r2, #16
 8003bda:	ea23 0302 	bic.w	r3, r3, r2
 8003bde:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8003bec:	d00c      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003bee:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8003bf0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003bf4:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003bf8:	0c02      	lsrs	r2, r0, #16
 8003bfa:	0412      	lsls	r2, r2, #16
 8003bfc:	ea23 0302 	bic.w	r3, r3, r2
 8003c00:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8003c08:	6823      	ldr	r3, [r4, #0]
 8003c0a:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003c0e:	d00c      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8003c10:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003c12:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003c1a:	0c02      	lsrs	r2, r0, #16
 8003c1c:	0412      	lsls	r2, r2, #16
 8003c1e:	ea23 0302 	bic.w	r3, r3, r2
 8003c22:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8003c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003c30:	f040 809e 	bne.w	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c34:	6823      	ldr	r3, [r4, #0]
 8003c36:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003c3a:	f040 80aa 	bne.w	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003c3e:	6823      	ldr	r3, [r4, #0]
 8003c40:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003c44:	f040 80b6 	bne.w	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	f013 0f10 	tst.w	r3, #16
 8003c4e:	d00e      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003c50:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8003c52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c56:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003c5a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003c64:	68e3      	ldr	r3, [r4, #12]
 8003c66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c6a:	f000 80b4 	beq.w	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c6e:	6823      	ldr	r3, [r4, #0]
 8003c70:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8003c74:	d00f      	beq.n	8003c96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003c76:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8003c78:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003c7c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003c80:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8003c84:	4313      	orrs	r3, r2
 8003c86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003c8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003c8c:	b91b      	cbnz	r3, 8003c96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8003c8e:	68cb      	ldr	r3, [r1, #12]
 8003c90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c94:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c96:	6823      	ldr	r3, [r4, #0]
 8003c98:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8003c9c:	d00e      	beq.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c9e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8003ca0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003ca4:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003ca8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cac:	4313      	orrs	r3, r2
 8003cae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8003cb2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003cb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003cb8:	f000 8092 	beq.w	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8003cbc:	4628      	mov	r0, r5
 8003cbe:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8003cc0:	f7ff f92c 	bl	8002f1c <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8003cc4:	f7fd fc4e 	bl	8001564 <HAL_GetTick>
 8003cc8:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8003cca:	4b48      	ldr	r3, [pc, #288]	; (8003dec <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f413 7f80 	tst.w	r3, #256	; 0x100
 8003cd2:	d106      	bne.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd4:	f7fd fc46 	bl	8001564 <HAL_GetTick>
 8003cd8:	1b40      	subs	r0, r0, r5
 8003cda:	2802      	cmp	r0, #2
 8003cdc:	d9f5      	bls.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8003cde:	2503      	movs	r5, #3
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8003ce2:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8003ce4:	2d00      	cmp	r5, #0
 8003ce6:	f47f af41 	bne.w	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8003cea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8003cf6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	d024      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003cfc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d00:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003d04:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003d08:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8003d0c:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8003d10:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8003d14:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8003d18:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8003d1c:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8003d20:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8003d24:	f012 0f02 	tst.w	r2, #2
 8003d28:	d10f      	bne.n	8003d4a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8003d2a:	2d00      	cmp	r5, #0
 8003d2c:	f47f af1e 	bne.w	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d30:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8003d32:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8003d36:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8003d3a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8003d44:	e712      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8003d46:	2200      	movs	r2, #0
 8003d48:	e7ec      	b.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8003d4a:	f7fd fc0b 	bl	8001564 <HAL_GetTick>
 8003d4e:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8003d50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d58:	f013 0f02 	tst.w	r3, #2
 8003d5c:	d1e5      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d5e:	f7fd fc01 	bl	8001564 <HAL_GetTick>
 8003d62:	1b80      	subs	r0, r0, r6
 8003d64:	f241 3388 	movw	r3, #5000	; 0x1388
 8003d68:	4298      	cmp	r0, r3
 8003d6a:	d9f1      	bls.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 8003d6c:	2503      	movs	r5, #3
 8003d6e:	e7dc      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d70:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d72:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003d76:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003d7a:	0919      	lsrs	r1, r3, #4
 8003d7c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8003d80:	ea22 0201 	bic.w	r2, r2, r1
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8003d90:	e750      	b.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003d92:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003d94:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003d98:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003d9c:	0919      	lsrs	r1, r3, #4
 8003d9e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8003da2:	ea22 0201 	bic.w	r2, r2, r1
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003dac:	4313      	orrs	r3, r2
 8003dae:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8003db2:	e744      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003db4:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8003db6:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8003dba:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8003dbe:	0919      	lsrs	r1, r3, #4
 8003dc0:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8003dc4:	ea22 0201 	bic.w	r2, r2, r1
 8003dc8:	011b      	lsls	r3, r3, #4
 8003dca:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8003dd4:	e738      	b.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8003dd6:	68cb      	ldr	r3, [r1, #12]
 8003dd8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ddc:	60cb      	str	r3, [r1, #12]
 8003dde:	e746      	b.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003de0:	68cb      	ldr	r3, [r1, #12]
 8003de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003de6:	60cb      	str	r3, [r1, #12]
 8003de8:	e768      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003dea:	bf00      	nop
 8003dec:	58000400 	.word	0x58000400

08003df0 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 8003df0:	4603      	mov	r3, r0
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003df2:	f890 202c 	ldrb.w	r2, [r0, #44]	; 0x2c
 8003df6:	2a01      	cmp	r2, #1
 8003df8:	d035      	beq.n	8003e66 <HAL_RTC_DeactivateAlarm+0x76>
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e00:	2202      	movs	r2, #2
 8003e02:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e06:	4a19      	ldr	r2, [pc, #100]	; (8003e6c <HAL_RTC_DeactivateAlarm+0x7c>)
 8003e08:	20ca      	movs	r0, #202	; 0xca
 8003e0a:	6250      	str	r0, [r2, #36]	; 0x24
 8003e0c:	2053      	movs	r0, #83	; 0x53
 8003e0e:	6250      	str	r0, [r2, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 8003e10:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8003e14:	d018      	beq.n	8003e48 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8003e16:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <HAL_RTC_DeactivateAlarm+0x7c>)
 8003e18:	6991      	ldr	r1, [r2, #24]
 8003e1a:	f421 5108 	bic.w	r1, r1, #8704	; 0x2200
 8003e1e:	6191      	str	r1, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 8003e20:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8003e22:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003e26:	64d1      	str	r1, [r2, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8003e28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e2a:	f021 0102 	bic.w	r1, r1, #2
 8003e2e:	6319      	str	r1, [r3, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003e30:	2102      	movs	r1, #2
 8003e32:	65d1      	str	r1, [r2, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e34:	4a0d      	ldr	r2, [pc, #52]	; (8003e6c <HAL_RTC_DeactivateAlarm+0x7c>)
 8003e36:	21ff      	movs	r1, #255	; 0xff
 8003e38:	6251      	str	r1, [r2, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e40:	2000      	movs	r0, #0
 8003e42:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c

  return HAL_OK;
 8003e46:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8003e48:	6991      	ldr	r1, [r2, #24]
 8003e4a:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8003e4e:	6191      	str	r1, [r2, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8003e50:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003e52:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003e56:	6451      	str	r1, [r2, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8003e58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e5a:	f021 0101 	bic.w	r1, r1, #1
 8003e5e:	6319      	str	r1, [r3, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003e60:	2101      	movs	r1, #1
 8003e62:	65d1      	str	r1, [r2, #92]	; 0x5c
 8003e64:	e7e6      	b.n	8003e34 <HAL_RTC_DeactivateAlarm+0x44>
  __HAL_LOCK(hrtc);
 8003e66:	2002      	movs	r0, #2
}
 8003e68:	4770      	bx	lr
 8003e6a:	bf00      	nop
 8003e6c:	40002800 	.word	0x40002800

08003e70 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8003e70:	b538      	push	{r3, r4, r5, lr}
 8003e72:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8003e74:	4b0d      	ldr	r3, [pc, #52]	; (8003eac <HAL_RTC_AlarmIRQHandler+0x3c>)
 8003e76:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8003e78:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003e7a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 8003e7c:	f015 0f01 	tst.w	r5, #1
 8003e80:	d106      	bne.n	8003e90 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8003e82:	f015 0f02 	tst.w	r5, #2
 8003e86:	d109      	bne.n	8003e9c <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8003e8e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8003e90:	4b06      	ldr	r3, [pc, #24]	; (8003eac <HAL_RTC_AlarmIRQHandler+0x3c>)
 8003e92:	2201      	movs	r2, #1
 8003e94:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8003e96:	f7fd fd4d 	bl	8001934 <HAL_RTC_AlarmAEventCallback>
 8003e9a:	e7f2      	b.n	8003e82 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8003e9c:	4b03      	ldr	r3, [pc, #12]	; (8003eac <HAL_RTC_AlarmIRQHandler+0x3c>)
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003ea2:	4620      	mov	r0, r4
 8003ea4:	f000 f9ec 	bl	8004280 <HAL_RTCEx_AlarmBEventCallback>
 8003ea8:	e7ee      	b.n	8003e88 <HAL_RTC_AlarmIRQHandler+0x18>
 8003eaa:	bf00      	nop
 8003eac:	40002800 	.word	0x40002800

08003eb0 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003eb0:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8003eb2:	4a0b      	ldr	r2, [pc, #44]	; (8003ee0 <HAL_RTC_WaitForSynchro+0x30>)
 8003eb4:	68d3      	ldr	r3, [r2, #12]
 8003eb6:	f023 0320 	bic.w	r3, r3, #32
 8003eba:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8003ebc:	f7fd fb52 	bl	8001564 <HAL_GetTick>
 8003ec0:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8003ec2:	4b07      	ldr	r3, [pc, #28]	; (8003ee0 <HAL_RTC_WaitForSynchro+0x30>)
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f013 0f20 	tst.w	r3, #32
 8003eca:	d107      	bne.n	8003edc <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003ecc:	f7fd fb4a 	bl	8001564 <HAL_GetTick>
 8003ed0:	1b00      	subs	r0, r0, r4
 8003ed2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003ed6:	d9f4      	bls.n	8003ec2 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8003ed8:	2003      	movs	r0, #3
 8003eda:	e000      	b.n	8003ede <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003edc:	2000      	movs	r0, #0
}
 8003ede:	bd10      	pop	{r4, pc}
 8003ee0:	40002800 	.word	0x40002800

08003ee4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003ee4:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8003ee6:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <RTC_EnterInitMode+0x48>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003eee:	d002      	beq.n	8003ef6 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8003ef0:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8003ef2:	4620      	mov	r0, r4
 8003ef4:	bd70      	pop	{r4, r5, r6, pc}
 8003ef6:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003ef8:	4a0c      	ldr	r2, [pc, #48]	; (8003f2c <RTC_EnterInitMode+0x48>)
 8003efa:	68d3      	ldr	r3, [r2, #12]
 8003efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f00:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 8003f02:	f7fd fb2f 	bl	8001564 <HAL_GetTick>
 8003f06:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 8003f08:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <RTC_EnterInitMode+0x48>)
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003f12:	d1ee      	bne.n	8003ef2 <RTC_EnterInitMode+0xe>
 8003f14:	2c03      	cmp	r4, #3
 8003f16:	d0ec      	beq.n	8003ef2 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003f18:	f7fd fb24 	bl	8001564 <HAL_GetTick>
 8003f1c:	1b43      	subs	r3, r0, r5
 8003f1e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f22:	d9f2      	bls.n	8003f0a <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f24:	2403      	movs	r4, #3
 8003f26:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 8003f2a:	e7ee      	b.n	8003f0a <RTC_EnterInitMode+0x26>
 8003f2c:	40002800 	.word	0x40002800

08003f30 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f30:	b510      	push	{r4, lr}
 8003f32:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8003f34:	4b10      	ldr	r3, [pc, #64]	; (8003f78 <RTC_ExitInitMode+0x48>)
 8003f36:	68da      	ldr	r2, [r3, #12]
 8003f38:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f3c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003f3e:	699b      	ldr	r3, [r3, #24]
 8003f40:	f013 0f20 	tst.w	r3, #32
 8003f44:	d106      	bne.n	8003f54 <RTC_ExitInitMode+0x24>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f46:	f7ff ffb3 	bl	8003eb0 <HAL_RTC_WaitForSynchro>
 8003f4a:	b198      	cbz	r0, 8003f74 <RTC_ExitInitMode+0x44>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f4c:	2003      	movs	r0, #3
 8003f4e:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8003f52:	e00f      	b.n	8003f74 <RTC_ExitInitMode+0x44>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003f54:	4a08      	ldr	r2, [pc, #32]	; (8003f78 <RTC_ExitInitMode+0x48>)
 8003f56:	6993      	ldr	r3, [r2, #24]
 8003f58:	f023 0320 	bic.w	r3, r3, #32
 8003f5c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003f5e:	f7ff ffa7 	bl	8003eb0 <HAL_RTC_WaitForSynchro>
 8003f62:	b110      	cbz	r0, 8003f6a <RTC_ExitInitMode+0x3a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003f64:	2003      	movs	r0, #3
 8003f66:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003f6a:	4a03      	ldr	r2, [pc, #12]	; (8003f78 <RTC_ExitInitMode+0x48>)
 8003f6c:	6993      	ldr	r3, [r2, #24]
 8003f6e:	f043 0320 	orr.w	r3, r3, #32
 8003f72:	6193      	str	r3, [r2, #24]
  }

  return status;
}
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	bf00      	nop
 8003f78:	40002800 	.word	0x40002800

08003f7c <HAL_RTC_Init>:
  if (hrtc != NULL)
 8003f7c:	2800      	cmp	r0, #0
 8003f7e:	d052      	beq.n	8004026 <HAL_RTC_Init+0xaa>
{
 8003f80:	b538      	push	{r3, r4, r5, lr}
 8003f82:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003f84:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8003f88:	b163      	cbz	r3, 8003fa4 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003f90:	4b26      	ldr	r3, [pc, #152]	; (800402c <HAL_RTC_Init+0xb0>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f013 0f10 	tst.w	r3, #16
 8003f98:	d009      	beq.n	8003fae <HAL_RTC_Init+0x32>
      status = HAL_OK;
 8003f9a:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8003fa2:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8003fa4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 8003fa8:	f7fd f9ca 	bl	8001340 <HAL_RTC_MspInit>
 8003fac:	e7ed      	b.n	8003f8a <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003fae:	4b1f      	ldr	r3, [pc, #124]	; (800402c <HAL_RTC_Init+0xb0>)
 8003fb0:	22ca      	movs	r2, #202	; 0xca
 8003fb2:	625a      	str	r2, [r3, #36]	; 0x24
 8003fb4:	2253      	movs	r2, #83	; 0x53
 8003fb6:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 8003fb8:	4620      	mov	r0, r4
 8003fba:	f7ff ff93 	bl	8003ee4 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8003fbe:	b128      	cbz	r0, 8003fcc <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003fc0:	4b1a      	ldr	r3, [pc, #104]	; (800402c <HAL_RTC_Init+0xb0>)
 8003fc2:	22ff      	movs	r2, #255	; 0xff
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d1eb      	bne.n	8003fa2 <HAL_RTC_Init+0x26>
 8003fca:	e7e7      	b.n	8003f9c <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8003fcc:	4b17      	ldr	r3, [pc, #92]	; (800402c <HAL_RTC_Init+0xb0>)
 8003fce:	699a      	ldr	r2, [r3, #24]
 8003fd0:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8003fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fd8:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8003fda:	6999      	ldr	r1, [r3, #24]
 8003fdc:	6862      	ldr	r2, [r4, #4]
 8003fde:	6920      	ldr	r0, [r4, #16]
 8003fe0:	4302      	orrs	r2, r0
 8003fe2:	69a0      	ldr	r0, [r4, #24]
 8003fe4:	4302      	orrs	r2, r0
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8003fea:	68e2      	ldr	r2, [r4, #12]
 8003fec:	68a1      	ldr	r1, [r4, #8]
 8003fee:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003ff2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8003ff4:	68da      	ldr	r2, [r3, #12]
 8003ff6:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 8003ffa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ffc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003ffe:	4301      	orrs	r1, r0
 8004000:	430a      	orrs	r2, r1
 8004002:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 8004004:	4620      	mov	r0, r4
 8004006:	f7ff ff93 	bl	8003f30 <RTC_ExitInitMode>
        if (status == HAL_OK)
 800400a:	2800      	cmp	r0, #0
 800400c:	d1d8      	bne.n	8003fc0 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 800400e:	4907      	ldr	r1, [pc, #28]	; (800402c <HAL_RTC_Init+0xb0>)
 8004010:	698b      	ldr	r3, [r1, #24]
 8004012:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004016:	6a22      	ldr	r2, [r4, #32]
 8004018:	69e5      	ldr	r5, [r4, #28]
 800401a:	432a      	orrs	r2, r5
 800401c:	6965      	ldr	r5, [r4, #20]
 800401e:	432a      	orrs	r2, r5
 8004020:	4313      	orrs	r3, r2
 8004022:	618b      	str	r3, [r1, #24]
 8004024:	e7cc      	b.n	8003fc0 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 8004026:	2001      	movs	r0, #1
}
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40002800 	.word	0x40002800

08004030 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 8004030:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 8004032:	e002      	b.n	800403a <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 8004034:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 8004036:	380a      	subs	r0, #10
 8004038:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 800403a:	2809      	cmp	r0, #9
 800403c:	d8fa      	bhi.n	8004034 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 800403e:	011b      	lsls	r3, r3, #4
 8004040:	b2db      	uxtb	r3, r3
}
 8004042:	4318      	orrs	r0, r3
 8004044:	4770      	bx	lr
	...

08004048 <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 8004048:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 800404c:	2b01      	cmp	r3, #1
 800404e:	f000 80b0 	beq.w	80041b2 <HAL_RTC_SetAlarm_IT+0x16a>
{
 8004052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004056:	4605      	mov	r5, r0
 8004058:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 800405a:	2301      	movs	r3, #1
 800405c:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8004060:	2302      	movs	r3, #2
 8004062:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 8004066:	4b54      	ldr	r3, [pc, #336]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8004068:	68de      	ldr	r6, [r3, #12]
 800406a:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 800406e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004072:	d043      	beq.n	80040fc <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8004074:	bb12      	cbnz	r2, 80040bc <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	f013 0f40 	tst.w	r3, #64	; 0x40
 800407c:	d101      	bne.n	8004082 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 800407e:	2300      	movs	r3, #0
 8004080:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8004082:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004086:	7820      	ldrb	r0, [r4, #0]
 8004088:	f7ff ffd2 	bl	8004030 <RTC_ByteToBcd2>
 800408c:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800408e:	7860      	ldrb	r0, [r4, #1]
 8004090:	f7ff ffce 	bl	8004030 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8004094:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8004098:	78a0      	ldrb	r0, [r4, #2]
 800409a:	f7ff ffc9 	bl	8004030 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800409e:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80040a0:	78e3      	ldrb	r3, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80040a2:	ea47 5783 	orr.w	r7, r7, r3, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040a6:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 80040aa:	f7ff ffc1 	bl	8004030 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80040ae:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80040b2:	6a23      	ldr	r3, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040b4:	4318      	orrs	r0, r3
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040b6:	ea48 0000 	orr.w	r0, r8, r0
 80040ba:	e020      	b.n	80040fe <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 80040bc:	6948      	ldr	r0, [r1, #20]
 80040be:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 80040c2:	d009      	beq.n	80040d8 <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80040c4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80040c8:	d006      	beq.n	80040d8 <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80040ca:	4b3b      	ldr	r3, [pc, #236]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f013 0f40 	tst.w	r3, #64	; 0x40
 80040d2:	d101      	bne.n	80040d8 <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80040d4:	2300      	movs	r3, #0
 80040d6:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040d8:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80040da:	7863      	ldrb	r3, [r4, #1]
 80040dc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040de:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80040e2:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80040e4:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80040e6:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80040e8:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040ec:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80040f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80040f4:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80040f6:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80040f8:	4318      	orrs	r0, r3
 80040fa:	e000      	b.n	80040fe <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80040fc:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040fe:	4b2e      	ldr	r3, [pc, #184]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8004100:	22ca      	movs	r2, #202	; 0xca
 8004102:	625a      	str	r2, [r3, #36]	; 0x24
 8004104:	2253      	movs	r2, #83	; 0x53
 8004106:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 8004108:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800410a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410e:	d02a      	beq.n	8004166 <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8004110:	4b29      	ldr	r3, [pc, #164]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8004112:	699a      	ldr	r2, [r3, #24]
 8004114:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 8004118:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800411a:	2202      	movs	r2, #2
 800411c:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 800411e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004122:	d040      	beq.n	80041a6 <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8004124:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8004126:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8004128:	69a2      	ldr	r2, [r4, #24]
 800412a:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800412c:	6862      	ldr	r2, [r4, #4]
 800412e:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8004130:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8004132:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004134:	f042 0202 	orr.w	r2, r2, #2
 8004138:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 800413a:	699a      	ldr	r2, [r3, #24]
 800413c:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 8004140:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8004142:	4a1e      	ldr	r2, [pc, #120]	; (80041bc <HAL_RTC_SetAlarm_IT+0x174>)
 8004144:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8004148:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800414c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004150:	4b19      	ldr	r3, [pc, #100]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8004152:	22ff      	movs	r2, #255	; 0xff
 8004154:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 8004156:	2301      	movs	r3, #1
 8004158:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 800415c:	2000      	movs	r0, #0
 800415e:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8004162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004166:	4b14      	ldr	r3, [pc, #80]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 800416e:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8004170:	2201      	movs	r2, #1
 8004172:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8004174:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8004178:	d00f      	beq.n	800419a <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800417a:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 800417c:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800417e:	69a2      	ldr	r2, [r4, #24]
 8004180:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8004182:	6862      	ldr	r2, [r4, #4]
 8004184:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 8004186:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 8004188:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 8004196:	619a      	str	r2, [r3, #24]
 8004198:	e7d3      	b.n	8004142 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800419a:	69a3      	ldr	r3, [r4, #24]
 800419c:	69e2      	ldr	r2, [r4, #28]
 800419e:	4313      	orrs	r3, r2
 80041a0:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 80041a2:	6453      	str	r3, [r2, #68]	; 0x44
 80041a4:	e7ed      	b.n	8004182 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 80041a6:	69a3      	ldr	r3, [r4, #24]
 80041a8:	69e2      	ldr	r2, [r4, #28]
 80041aa:	4313      	orrs	r3, r2
 80041ac:	4a02      	ldr	r2, [pc, #8]	; (80041b8 <HAL_RTC_SetAlarm_IT+0x170>)
 80041ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80041b0:	e7bc      	b.n	800412c <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 80041b2:	2002      	movs	r0, #2
}
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40002800 	.word	0x40002800
 80041bc:	58000800 	.word	0x58000800

080041c0 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80041c0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d017      	beq.n	80041f8 <HAL_RTCEx_EnableBypassShadow+0x38>
 80041c8:	2101      	movs	r1, #1
 80041ca:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80041ce:	2302      	movs	r3, #2
 80041d0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041d4:	4b09      	ldr	r3, [pc, #36]	; (80041fc <HAL_RTCEx_EnableBypassShadow+0x3c>)
 80041d6:	22ca      	movs	r2, #202	; 0xca
 80041d8:	625a      	str	r2, [r3, #36]	; 0x24
 80041da:	2253      	movs	r2, #83	; 0x53
 80041dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	f042 0220 	orr.w	r2, r2, #32
 80041e4:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041e6:	22ff      	movs	r2, #255	; 0xff
 80041e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80041ea:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80041ee:	2300      	movs	r3, #0
 80041f0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80041f4:	4618      	mov	r0, r3
 80041f6:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80041f8:	2002      	movs	r0, #2
}
 80041fa:	4770      	bx	lr
 80041fc:	40002800 	.word	0x40002800

08004200 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004200:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8004204:	2b01      	cmp	r3, #1
 8004206:	d020      	beq.n	800424a <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 8004208:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 800420a:	2101      	movs	r1, #1
 800420c:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004210:	2302      	movs	r3, #2
 8004212:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004216:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <HAL_RTCEx_SetSSRU_IT+0x50>)
 8004218:	22ca      	movs	r2, #202	; 0xca
 800421a:	625a      	str	r2, [r3, #36]	; 0x24
 800421c:	2253      	movs	r2, #83	; 0x53
 800421e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8004220:	699a      	ldr	r2, [r3, #24]
 8004222:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004226:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8004228:	4c0a      	ldr	r4, [pc, #40]	; (8004254 <HAL_RTCEx_SetSSRU_IT+0x54>)
 800422a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800422e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004232:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004236:	22ff      	movs	r2, #255	; 0xff
 8004238:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 800423a:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800423e:	2300      	movs	r3, #0
 8004240:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8004244:	4618      	mov	r0, r3
}
 8004246:	bc10      	pop	{r4}
 8004248:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800424a:	2002      	movs	r0, #2
}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	40002800 	.word	0x40002800
 8004254:	58000800 	.word	0x58000800

08004258 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8004258:	b510      	push	{r4, lr}
 800425a:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 800425c:	4b07      	ldr	r3, [pc, #28]	; (800427c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 800425e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004260:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004264:	d103      	bne.n	800426e <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8004266:	2301      	movs	r3, #1
 8004268:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800426c:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 800426e:	4b03      	ldr	r3, [pc, #12]	; (800427c <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8004270:	2240      	movs	r2, #64	; 0x40
 8004272:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8004274:	f7fd fb62 	bl	800193c <HAL_RTCEx_SSRUEventCallback>
 8004278:	e7f5      	b.n	8004266 <HAL_RTCEx_SSRUIRQHandler+0xe>
 800427a:	bf00      	nop
 800427c:	40002800 	.word	0x40002800

08004280 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8004280:	4770      	bx	lr

08004282 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8004282:	0089      	lsls	r1, r1, #2
 8004284:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004288:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 800428c:	600a      	str	r2, [r1, #0]
}
 800428e:	4770      	bx	lr

08004290 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8004290:	0089      	lsls	r1, r1, #2
 8004292:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004296:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800429a:	6808      	ldr	r0, [r1, #0]
}
 800429c:	4770      	bx	lr
	...

080042a0 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80042a0:	4b07      	ldr	r3, [pc, #28]	; (80042c0 <SUBGHZSPI_Init+0x20>)
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042a8:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 80042aa:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 80042ae:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 80042b0:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 80042b4:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	4770      	bx	lr
 80042c0:	58010000 	.word	0x58010000

080042c4 <HAL_SUBGHZ_Init>:
{
 80042c4:	b530      	push	{r4, r5, lr}
 80042c6:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 80042c8:	2800      	cmp	r0, #0
 80042ca:	d058      	beq.n	800437e <HAL_SUBGHZ_Init+0xba>
 80042cc:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 80042ce:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 80042d0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 80042d4:	b10b      	cbz	r3, 80042da <HAL_SUBGHZ_Init+0x16>
 80042d6:	2d03      	cmp	r5, #3
 80042d8:	d10b      	bne.n	80042f2 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 80042da:	2300      	movs	r3, #0
 80042dc:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 80042de:	4620      	mov	r0, r4
 80042e0:	f7fd f8ce 	bl	8001480 <HAL_SUBGHZ_MspInit>
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR2, ExtiLine);
 80042e4:	4a27      	ldr	r2, [pc, #156]	; (8004384 <HAL_SUBGHZ_Init+0xc0>)
 80042e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80042ea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80042ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 80042f2:	b185      	cbz	r5, 8004316 <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 80042f4:	4b24      	ldr	r3, [pc, #144]	; (8004388 <HAL_SUBGHZ_Init+0xc4>)
 80042f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042fa:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 80042fc:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80042fe:	6820      	ldr	r0, [r4, #0]
 8004300:	f7ff ffce 	bl	80042a0 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8004304:	2301      	movs	r3, #1
 8004306:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8004308:	2300      	movs	r3, #0
 800430a:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800430c:	2301      	movs	r3, #1
 800430e:	71a3      	strb	r3, [r4, #6]
}
 8004310:	4628      	mov	r0, r5
 8004312:	b003      	add	sp, #12
 8004314:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004316:	2302      	movs	r3, #2
 8004318:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 800431a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800431e:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 8004322:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004326:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800432a:	4b18      	ldr	r3, [pc, #96]	; (800438c <HAL_SUBGHZ_Init+0xc8>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004332:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004336:	2264      	movs	r2, #100	; 0x64
 8004338:	fb02 f303 	mul.w	r3, r2, r3
 800433c:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 800433e:	9b01      	ldr	r3, [sp, #4]
 8004340:	b1d3      	cbz	r3, 8004378 <HAL_SUBGHZ_Init+0xb4>
      count--;
 8004342:	9b01      	ldr	r3, [sp, #4]
 8004344:	3b01      	subs	r3, #1
 8004346:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8004348:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800434c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004350:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8004354:	d1f3      	bne.n	800433e <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_SUBGHZ_Init+0xc4>)
 8004358:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800435c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004360:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8004364:	689a      	ldr	r2, [r3, #8]
 8004366:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800436a:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 800436c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004370:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8004372:	2d00      	cmp	r5, #0
 8004374:	d1ca      	bne.n	800430c <HAL_SUBGHZ_Init+0x48>
 8004376:	e7c2      	b.n	80042fe <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004378:	2501      	movs	r5, #1
 800437a:	60a5      	str	r5, [r4, #8]
        break;
 800437c:	e7eb      	b.n	8004356 <HAL_SUBGHZ_Init+0x92>
    return status;
 800437e:	2501      	movs	r5, #1
 8004380:	e7c6      	b.n	8004310 <HAL_SUBGHZ_Init+0x4c>
 8004382:	bf00      	nop
 8004384:	58000800 	.word	0x58000800
 8004388:	58000400 	.word	0x58000400
 800438c:	20000004 	.word	0x20000004

08004390 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8004390:	b082      	sub	sp, #8
 8004392:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004394:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <SUBGHZSPI_Transmit+0x70>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800439c:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80043a0:	2064      	movs	r0, #100	; 0x64
 80043a2:	fb00 f303 	mul.w	r3, r0, r3
 80043a6:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80043a8:	9b01      	ldr	r3, [sp, #4]
 80043aa:	b14b      	cbz	r3, 80043c0 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80043ac:	9b01      	ldr	r3, [sp, #4]
 80043ae:	3b01      	subs	r3, #1
 80043b0:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80043b2:	4b14      	ldr	r3, [pc, #80]	; (8004404 <SUBGHZSPI_Transmit+0x74>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f013 0f02 	tst.w	r3, #2
 80043ba:	d0f5      	beq.n	80043a8 <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80043bc:	2000      	movs	r0, #0
 80043be:	e001      	b.n	80043c4 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80043c0:	2001      	movs	r0, #1
 80043c2:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 80043c4:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <SUBGHZSPI_Transmit+0x74>)
 80043c6:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <SUBGHZSPI_Transmit+0x70>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80043d0:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80043d4:	2164      	movs	r1, #100	; 0x64
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80043dc:	9b01      	ldr	r3, [sp, #4]
 80043de:	b143      	cbz	r3, 80043f2 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80043e0:	9b01      	ldr	r3, [sp, #4]
 80043e2:	3b01      	subs	r3, #1
 80043e4:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80043e6:	4b07      	ldr	r3, [pc, #28]	; (8004404 <SUBGHZSPI_Transmit+0x74>)
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	f013 0f01 	tst.w	r3, #1
 80043ee:	d0f5      	beq.n	80043dc <SUBGHZSPI_Transmit+0x4c>
 80043f0:	e001      	b.n	80043f6 <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80043f2:	2001      	movs	r0, #1
 80043f4:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80043f6:	4b03      	ldr	r3, [pc, #12]	; (8004404 <SUBGHZSPI_Transmit+0x74>)
 80043f8:	68db      	ldr	r3, [r3, #12]

  return status;
}
 80043fa:	b002      	add	sp, #8
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	20000004 	.word	0x20000004
 8004404:	58010000 	.word	0x58010000

08004408 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 8004408:	b082      	sub	sp, #8
 800440a:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800440c:	4b1c      	ldr	r3, [pc, #112]	; (8004480 <SUBGHZSPI_Receive+0x78>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8004414:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004418:	2064      	movs	r0, #100	; 0x64
 800441a:	fb00 f303 	mul.w	r3, r0, r3
 800441e:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004420:	9b01      	ldr	r3, [sp, #4]
 8004422:	b14b      	cbz	r3, 8004438 <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004424:	9b01      	ldr	r3, [sp, #4]
 8004426:	3b01      	subs	r3, #1
 8004428:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800442a:	4b16      	ldr	r3, [pc, #88]	; (8004484 <SUBGHZSPI_Receive+0x7c>)
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f013 0f02 	tst.w	r3, #2
 8004432:	d0f5      	beq.n	8004420 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8004434:	2000      	movs	r0, #0
 8004436:	e001      	b.n	800443c <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004438:	2001      	movs	r0, #1
 800443a:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 800443c:	4b11      	ldr	r3, [pc, #68]	; (8004484 <SUBGHZSPI_Receive+0x7c>)
 800443e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8004442:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8004446:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <SUBGHZSPI_Receive+0x78>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800444e:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8004452:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8004456:	fb0c f303 	mul.w	r3, ip, r3
 800445a:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 800445c:	9b01      	ldr	r3, [sp, #4]
 800445e:	b143      	cbz	r3, 8004472 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8004460:	9b01      	ldr	r3, [sp, #4]
 8004462:	3b01      	subs	r3, #1
 8004464:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8004466:	4b07      	ldr	r3, [pc, #28]	; (8004484 <SUBGHZSPI_Receive+0x7c>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f013 0f01 	tst.w	r3, #1
 800446e:	d0f5      	beq.n	800445c <SUBGHZSPI_Receive+0x54>
 8004470:	e001      	b.n	8004476 <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8004472:	2001      	movs	r0, #1
 8004474:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8004476:	4b03      	ldr	r3, [pc, #12]	; (8004484 <SUBGHZSPI_Receive+0x7c>)
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	700b      	strb	r3, [r1, #0]

  return status;
}
 800447c:	b002      	add	sp, #8
 800447e:	4770      	bx	lr
 8004480:	20000004 	.word	0x20000004
 8004484:	58010000 	.word	0x58010000

08004488 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 8004488:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800448a:	4b13      	ldr	r3, [pc, #76]	; (80044d8 <SUBGHZ_WaitOnBusy+0x50>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004492:	f3c3 434b 	ubfx	r3, r3, #17, #12
 8004496:	2264      	movs	r2, #100	; 0x64
 8004498:	fb02 f303 	mul.w	r3, r2, r3
 800449c:	9301      	str	r3, [sp, #4]
 800449e:	e006      	b.n	80044ae <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 80044a0:	2302      	movs	r3, #2
 80044a2:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 80044a4:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 80044a6:	b002      	add	sp, #8
 80044a8:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 80044aa:	4213      	tst	r3, r2
 80044ac:	d012      	beq.n	80044d4 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 80044ae:	4b0b      	ldr	r3, [pc, #44]	; (80044dc <SUBGHZ_WaitOnBusy+0x54>)
 80044b0:	695b      	ldr	r3, [r3, #20]
 80044b2:	f013 0304 	ands.w	r3, r3, #4
 80044b6:	d000      	beq.n	80044ba <SUBGHZ_WaitOnBusy+0x32>
 80044b8:	2301      	movs	r3, #1
    if (count == 0U)
 80044ba:	9a01      	ldr	r2, [sp, #4]
 80044bc:	2a00      	cmp	r2, #0
 80044be:	d0ef      	beq.n	80044a0 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 80044c0:	9a01      	ldr	r2, [sp, #4]
 80044c2:	3a01      	subs	r2, #1
 80044c4:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 80044c6:	4a05      	ldr	r2, [pc, #20]	; (80044dc <SUBGHZ_WaitOnBusy+0x54>)
 80044c8:	6952      	ldr	r2, [r2, #20]
 80044ca:	f012 0202 	ands.w	r2, r2, #2
 80044ce:	d0ec      	beq.n	80044aa <SUBGHZ_WaitOnBusy+0x22>
 80044d0:	2201      	movs	r2, #1
 80044d2:	e7ea      	b.n	80044aa <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 80044d4:	2000      	movs	r0, #0
 80044d6:	e7e6      	b.n	80044a6 <SUBGHZ_WaitOnBusy+0x1e>
 80044d8:	20000004 	.word	0x20000004
 80044dc:	58000400 	.word	0x58000400

080044e0 <SUBGHZ_CheckDeviceReady>:
{
 80044e0:	b500      	push	{lr}
 80044e2:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80044e4:	7903      	ldrb	r3, [r0, #4]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d004      	beq.n	80044f4 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80044ea:	f7ff ffcd 	bl	8004488 <SUBGHZ_WaitOnBusy>
}
 80044ee:	b003      	add	sp, #12
 80044f0:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 80044f4:	4b0d      	ldr	r3, [pc, #52]	; (800452c <SUBGHZ_CheckDeviceReady+0x4c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80044fc:	f3c3 334f 	ubfx	r3, r3, #13, #16
 8004500:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004502:	4a0b      	ldr	r2, [pc, #44]	; (8004530 <SUBGHZ_CheckDeviceReady+0x50>)
 8004504:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004508:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 8004510:	9b01      	ldr	r3, [sp, #4]
 8004512:	3b01      	subs	r3, #1
 8004514:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 8004516:	9b01      	ldr	r3, [sp, #4]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1f9      	bne.n	8004510 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800451c:	4a04      	ldr	r2, [pc, #16]	; (8004530 <SUBGHZ_CheckDeviceReady+0x50>)
 800451e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004526:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800452a:	e7de      	b.n	80044ea <SUBGHZ_CheckDeviceReady+0xa>
 800452c:	20000004 	.word	0x20000004
 8004530:	58000400 	.word	0x58000400

08004534 <HAL_SUBGHZ_WriteRegisters>:
{
 8004534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004538:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800453a:	7980      	ldrb	r0, [r0, #6]
 800453c:	fa5f f880 	uxtb.w	r8, r0
 8004540:	f1b8 0f01 	cmp.w	r8, #1
 8004544:	d13e      	bne.n	80045c4 <HAL_SUBGHZ_WriteRegisters+0x90>
 8004546:	460c      	mov	r4, r1
 8004548:	4617      	mov	r7, r2
 800454a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 800454c:	796b      	ldrb	r3, [r5, #5]
 800454e:	2b01      	cmp	r3, #1
 8004550:	d03b      	beq.n	80045ca <HAL_SUBGHZ_WriteRegisters+0x96>
 8004552:	2301      	movs	r3, #1
 8004554:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8004556:	2302      	movs	r3, #2
 8004558:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800455a:	4628      	mov	r0, r5
 800455c:	f7ff ffc0 	bl	80044e0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004560:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8004562:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004566:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800456a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 800456e:	210d      	movs	r1, #13
 8004570:	4628      	mov	r0, r5
 8004572:	f7ff ff0d 	bl	8004390 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004576:	0a21      	lsrs	r1, r4, #8
 8004578:	4628      	mov	r0, r5
 800457a:	f7ff ff09 	bl	8004390 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800457e:	b2e1      	uxtb	r1, r4
 8004580:	4628      	mov	r0, r5
 8004582:	f7ff ff05 	bl	8004390 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004586:	2400      	movs	r4, #0
 8004588:	e005      	b.n	8004596 <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800458a:	5d39      	ldrb	r1, [r7, r4]
 800458c:	4628      	mov	r0, r5
 800458e:	f7ff feff 	bl	8004390 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004592:	3401      	adds	r4, #1
 8004594:	b2a4      	uxth	r4, r4
 8004596:	42b4      	cmp	r4, r6
 8004598:	d3f7      	bcc.n	800458a <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800459a:	4a0d      	ldr	r2, [pc, #52]	; (80045d0 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 800459c:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80045a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80045a8:	4628      	mov	r0, r5
 80045aa:	f7ff ff6d 	bl	8004488 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80045ae:	68ab      	ldr	r3, [r5, #8]
 80045b0:	b90b      	cbnz	r3, 80045b6 <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 80045b2:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80045b6:	2301      	movs	r3, #1
 80045b8:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80045ba:	2300      	movs	r3, #0
 80045bc:	716b      	strb	r3, [r5, #5]
}
 80045be:	4640      	mov	r0, r8
 80045c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80045c4:	f04f 0802 	mov.w	r8, #2
 80045c8:	e7f9      	b.n	80045be <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 80045ca:	f04f 0802 	mov.w	r8, #2
 80045ce:	e7f6      	b.n	80045be <HAL_SUBGHZ_WriteRegisters+0x8a>
 80045d0:	58000400 	.word	0x58000400

080045d4 <HAL_SUBGHZ_ReadRegisters>:
{
 80045d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045d8:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80045da:	7980      	ldrb	r0, [r0, #6]
 80045dc:	fa5f f880 	uxtb.w	r8, r0
 80045e0:	f1b8 0f01 	cmp.w	r8, #1
 80045e4:	d141      	bne.n	800466a <HAL_SUBGHZ_ReadRegisters+0x96>
 80045e6:	460c      	mov	r4, r1
 80045e8:	4615      	mov	r5, r2
 80045ea:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80045ec:	7973      	ldrb	r3, [r6, #5]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d03e      	beq.n	8004670 <HAL_SUBGHZ_ReadRegisters+0x9c>
 80045f2:	2301      	movs	r3, #1
 80045f4:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80045f6:	4630      	mov	r0, r6
 80045f8:	f7ff ff72 	bl	80044e0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80045fc:	4a1e      	ldr	r2, [pc, #120]	; (8004678 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80045fe:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004602:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004606:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 800460a:	211d      	movs	r1, #29
 800460c:	4630      	mov	r0, r6
 800460e:	f7ff febf 	bl	8004390 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8004612:	0a21      	lsrs	r1, r4, #8
 8004614:	4630      	mov	r0, r6
 8004616:	f7ff febb 	bl	8004390 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 800461a:	b2e1      	uxtb	r1, r4
 800461c:	4630      	mov	r0, r6
 800461e:	f7ff feb7 	bl	8004390 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8004622:	2100      	movs	r1, #0
 8004624:	4630      	mov	r0, r6
 8004626:	f7ff feb3 	bl	8004390 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800462a:	2400      	movs	r4, #0
 800462c:	e006      	b.n	800463c <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 800462e:	4629      	mov	r1, r5
 8004630:	4630      	mov	r0, r6
 8004632:	f7ff fee9 	bl	8004408 <SUBGHZSPI_Receive>
      pData++;
 8004636:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004638:	3401      	adds	r4, #1
 800463a:	b2a4      	uxth	r4, r4
 800463c:	42bc      	cmp	r4, r7
 800463e:	d3f6      	bcc.n	800462e <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004640:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <HAL_SUBGHZ_ReadRegisters+0xa4>)
 8004642:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004646:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800464e:	4630      	mov	r0, r6
 8004650:	f7ff ff1a 	bl	8004488 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004654:	68b3      	ldr	r3, [r6, #8]
 8004656:	b90b      	cbnz	r3, 800465c <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 8004658:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800465c:	2301      	movs	r3, #1
 800465e:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8004660:	2300      	movs	r3, #0
 8004662:	7173      	strb	r3, [r6, #5]
}
 8004664:	4640      	mov	r0, r8
 8004666:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800466a:	f04f 0802 	mov.w	r8, #2
 800466e:	e7f9      	b.n	8004664 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8004670:	f04f 0802 	mov.w	r8, #2
 8004674:	e7f6      	b.n	8004664 <HAL_SUBGHZ_ReadRegisters+0x90>
 8004676:	bf00      	nop
 8004678:	58000400 	.word	0x58000400

0800467c <HAL_SUBGHZ_ExecSetCmd>:
{
 800467c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004680:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004682:	7980      	ldrb	r0, [r0, #6]
 8004684:	fa5f f980 	uxtb.w	r9, r0
 8004688:	f1b9 0f01 	cmp.w	r9, #1
 800468c:	d143      	bne.n	8004716 <HAL_SUBGHZ_ExecSetCmd+0x9a>
 800468e:	4688      	mov	r8, r1
 8004690:	4617      	mov	r7, r2
 8004692:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8004694:	796b      	ldrb	r3, [r5, #5]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d040      	beq.n	800471c <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800469a:	2301      	movs	r3, #1
 800469c:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800469e:	4628      	mov	r0, r5
 80046a0:	f7ff ff1e 	bl	80044e0 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 80046a4:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80046a8:	d005      	beq.n	80046b6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
 80046aa:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 80046ae:	d002      	beq.n	80046b6 <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80046b0:	2300      	movs	r3, #0
 80046b2:	712b      	strb	r3, [r5, #4]
 80046b4:	e001      	b.n	80046ba <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80046b6:	2301      	movs	r3, #1
 80046b8:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80046ba:	4a1a      	ldr	r2, [pc, #104]	; (8004724 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80046bc:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046c0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80046c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80046c8:	4641      	mov	r1, r8
 80046ca:	4628      	mov	r0, r5
 80046cc:	f7ff fe60 	bl	8004390 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80046d0:	2400      	movs	r4, #0
 80046d2:	e005      	b.n	80046e0 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80046d4:	5d39      	ldrb	r1, [r7, r4]
 80046d6:	4628      	mov	r0, r5
 80046d8:	f7ff fe5a 	bl	8004390 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80046dc:	3401      	adds	r4, #1
 80046de:	b2a4      	uxth	r4, r4
 80046e0:	42b4      	cmp	r4, r6
 80046e2:	d3f7      	bcc.n	80046d4 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80046e4:	4a0f      	ldr	r2, [pc, #60]	; (8004724 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 80046e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80046ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 80046f2:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 80046f6:	d10a      	bne.n	800470e <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80046f8:	68ab      	ldr	r3, [r5, #8]
 80046fa:	b90b      	cbnz	r3, 8004700 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80046fc:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004700:	2301      	movs	r3, #1
 8004702:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8004704:	2300      	movs	r3, #0
 8004706:	716b      	strb	r3, [r5, #5]
}
 8004708:	4648      	mov	r0, r9
 800470a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 800470e:	4628      	mov	r0, r5
 8004710:	f7ff feba 	bl	8004488 <SUBGHZ_WaitOnBusy>
 8004714:	e7f0      	b.n	80046f8 <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 8004716:	f04f 0902 	mov.w	r9, #2
 800471a:	e7f5      	b.n	8004708 <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 800471c:	f04f 0902 	mov.w	r9, #2
 8004720:	e7f2      	b.n	8004708 <HAL_SUBGHZ_ExecSetCmd+0x8c>
 8004722:	bf00      	nop
 8004724:	58000400 	.word	0x58000400

08004728 <HAL_SUBGHZ_ExecGetCmd>:
{
 8004728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800472e:	7980      	ldrb	r0, [r0, #6]
 8004730:	fa5f f880 	uxtb.w	r8, r0
 8004734:	f1b8 0f01 	cmp.w	r8, #1
 8004738:	d139      	bne.n	80047ae <HAL_SUBGHZ_ExecGetCmd+0x86>
 800473a:	460c      	mov	r4, r1
 800473c:	4615      	mov	r5, r2
 800473e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8004740:	7973      	ldrb	r3, [r6, #5]
 8004742:	2b01      	cmp	r3, #1
 8004744:	d036      	beq.n	80047b4 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 8004746:	2301      	movs	r3, #1
 8004748:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800474a:	4630      	mov	r0, r6
 800474c:	f7ff fec8 	bl	80044e0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004750:	4a1a      	ldr	r2, [pc, #104]	; (80047bc <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8004752:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004756:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800475a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800475e:	4621      	mov	r1, r4
 8004760:	4630      	mov	r0, r6
 8004762:	f7ff fe15 	bl	8004390 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8004766:	2100      	movs	r1, #0
 8004768:	4630      	mov	r0, r6
 800476a:	f7ff fe11 	bl	8004390 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800476e:	2400      	movs	r4, #0
 8004770:	e006      	b.n	8004780 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004772:	4629      	mov	r1, r5
 8004774:	4630      	mov	r0, r6
 8004776:	f7ff fe47 	bl	8004408 <SUBGHZSPI_Receive>
      pData++;
 800477a:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 800477c:	3401      	adds	r4, #1
 800477e:	b2a4      	uxth	r4, r4
 8004780:	42bc      	cmp	r4, r7
 8004782:	d3f6      	bcc.n	8004772 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004784:	4a0d      	ldr	r2, [pc, #52]	; (80047bc <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8004786:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800478a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800478e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004792:	4630      	mov	r0, r6
 8004794:	f7ff fe78 	bl	8004488 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8004798:	68b3      	ldr	r3, [r6, #8]
 800479a:	b90b      	cbnz	r3, 80047a0 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 800479c:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80047a0:	2301      	movs	r3, #1
 80047a2:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80047a4:	2300      	movs	r3, #0
 80047a6:	7173      	strb	r3, [r6, #5]
}
 80047a8:	4640      	mov	r0, r8
 80047aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80047ae:	f04f 0802 	mov.w	r8, #2
 80047b2:	e7f9      	b.n	80047a8 <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 80047b4:	f04f 0802 	mov.w	r8, #2
 80047b8:	e7f6      	b.n	80047a8 <HAL_SUBGHZ_ExecGetCmd+0x80>
 80047ba:	bf00      	nop
 80047bc:	58000400 	.word	0x58000400

080047c0 <HAL_SUBGHZ_IRQHandler>:
{
 80047c0:	b530      	push	{r4, r5, lr}
 80047c2:	b083      	sub	sp, #12
 80047c4:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 80047c6:	2300      	movs	r3, #0
 80047c8:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 80047cc:	2302      	movs	r3, #2
 80047ce:	aa01      	add	r2, sp, #4
 80047d0:	2112      	movs	r1, #18
 80047d2:	f7ff ffa9 	bl	8004728 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 80047d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 80047da:	f89d 4005 	ldrb.w	r4, [sp, #5]
 80047de:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 80047e2:	2302      	movs	r3, #2
 80047e4:	aa01      	add	r2, sp, #4
 80047e6:	4619      	mov	r1, r3
 80047e8:	4628      	mov	r0, r5
 80047ea:	f7ff ff47 	bl	800467c <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 80047ee:	f014 0f01 	tst.w	r4, #1
 80047f2:	d123      	bne.n	800483c <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 80047f4:	f014 0f02 	tst.w	r4, #2
 80047f8:	d124      	bne.n	8004844 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 80047fa:	f014 0f04 	tst.w	r4, #4
 80047fe:	d125      	bne.n	800484c <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8004800:	f014 0f08 	tst.w	r4, #8
 8004804:	d126      	bne.n	8004854 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8004806:	f014 0f10 	tst.w	r4, #16
 800480a:	d127      	bne.n	800485c <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800480c:	f014 0f20 	tst.w	r4, #32
 8004810:	d128      	bne.n	8004864 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8004812:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004816:	d129      	bne.n	800486c <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8004818:	f014 0f80 	tst.w	r4, #128	; 0x80
 800481c:	d006      	beq.n	800482c <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 800481e:	f414 7f80 	tst.w	r4, #256	; 0x100
 8004822:	d027      	beq.n	8004874 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8004824:	2101      	movs	r1, #1
 8004826:	4628      	mov	r0, r5
 8004828:	f003 fb84 	bl	8007f34 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 800482c:	f414 7f00 	tst.w	r4, #512	; 0x200
 8004830:	d125      	bne.n	800487e <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8004832:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8004836:	d126      	bne.n	8004886 <HAL_SUBGHZ_IRQHandler+0xc6>
}
 8004838:	b003      	add	sp, #12
 800483a:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 800483c:	4628      	mov	r0, r5
 800483e:	f003 fb61 	bl	8007f04 <HAL_SUBGHZ_TxCpltCallback>
 8004842:	e7d7      	b.n	80047f4 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8004844:	4628      	mov	r0, r5
 8004846:	f003 fb65 	bl	8007f14 <HAL_SUBGHZ_RxCpltCallback>
 800484a:	e7d6      	b.n	80047fa <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 800484c:	4628      	mov	r0, r5
 800484e:	f003 fb95 	bl	8007f7c <HAL_SUBGHZ_PreambleDetectedCallback>
 8004852:	e7d5      	b.n	8004800 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8004854:	4628      	mov	r0, r5
 8004856:	f003 fb99 	bl	8007f8c <HAL_SUBGHZ_SyncWordValidCallback>
 800485a:	e7d4      	b.n	8004806 <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 800485c:	4628      	mov	r0, r5
 800485e:	f003 fb9d 	bl	8007f9c <HAL_SUBGHZ_HeaderValidCallback>
 8004862:	e7d3      	b.n	800480c <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8004864:	4628      	mov	r0, r5
 8004866:	f003 fb81 	bl	8007f6c <HAL_SUBGHZ_HeaderErrorCallback>
 800486a:	e7d2      	b.n	8004812 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 800486c:	4628      	mov	r0, r5
 800486e:	f003 fb59 	bl	8007f24 <HAL_SUBGHZ_CRCErrorCallback>
 8004872:	e7d1      	b.n	8004818 <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8004874:	2100      	movs	r1, #0
 8004876:	4628      	mov	r0, r5
 8004878:	f003 fb5c 	bl	8007f34 <HAL_SUBGHZ_CADStatusCallback>
 800487c:	e7d6      	b.n	800482c <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 800487e:	4628      	mov	r0, r5
 8004880:	f003 fb6a 	bl	8007f58 <HAL_SUBGHZ_RxTxTimeoutCallback>
 8004884:	e7d5      	b.n	8004832 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8004886:	4628      	mov	r0, r5
 8004888:	f003 fb90 	bl	8007fac <HAL_SUBGHZ_LrFhssHopCallback>
}
 800488c:	e7d4      	b.n	8004838 <HAL_SUBGHZ_IRQHandler+0x78>
	...

08004890 <HAL_SUBGHZ_WriteBuffer>:
{
 8004890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004894:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8004896:	7980      	ldrb	r0, [r0, #6]
 8004898:	fa5f f880 	uxtb.w	r8, r0
 800489c:	f1b8 0f01 	cmp.w	r8, #1
 80048a0:	d138      	bne.n	8004914 <HAL_SUBGHZ_WriteBuffer+0x84>
 80048a2:	460c      	mov	r4, r1
 80048a4:	4617      	mov	r7, r2
 80048a6:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80048a8:	796b      	ldrb	r3, [r5, #5]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d035      	beq.n	800491a <HAL_SUBGHZ_WriteBuffer+0x8a>
 80048ae:	2301      	movs	r3, #1
 80048b0:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80048b2:	4628      	mov	r0, r5
 80048b4:	f7ff fe14 	bl	80044e0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80048b8:	4a19      	ldr	r2, [pc, #100]	; (8004920 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80048ba:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048be:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80048c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 80048c6:	210e      	movs	r1, #14
 80048c8:	4628      	mov	r0, r5
 80048ca:	f7ff fd61 	bl	8004390 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80048ce:	4621      	mov	r1, r4
 80048d0:	4628      	mov	r0, r5
 80048d2:	f7ff fd5d 	bl	8004390 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80048d6:	2400      	movs	r4, #0
 80048d8:	e005      	b.n	80048e6 <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80048da:	5d39      	ldrb	r1, [r7, r4]
 80048dc:	4628      	mov	r0, r5
 80048de:	f7ff fd57 	bl	8004390 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80048e2:	3401      	adds	r4, #1
 80048e4:	b2a4      	uxth	r4, r4
 80048e6:	42b4      	cmp	r4, r6
 80048e8:	d3f7      	bcc.n	80048da <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80048ea:	4a0d      	ldr	r2, [pc, #52]	; (8004920 <HAL_SUBGHZ_WriteBuffer+0x90>)
 80048ec:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80048f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80048f8:	4628      	mov	r0, r5
 80048fa:	f7ff fdc5 	bl	8004488 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80048fe:	68ab      	ldr	r3, [r5, #8]
 8004900:	b90b      	cbnz	r3, 8004906 <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8004902:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8004906:	2301      	movs	r3, #1
 8004908:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800490a:	2300      	movs	r3, #0
 800490c:	716b      	strb	r3, [r5, #5]
}
 800490e:	4640      	mov	r0, r8
 8004910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8004914:	f04f 0802 	mov.w	r8, #2
 8004918:	e7f9      	b.n	800490e <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 800491a:	f04f 0802 	mov.w	r8, #2
 800491e:	e7f6      	b.n	800490e <HAL_SUBGHZ_WriteBuffer+0x7e>
 8004920:	58000400 	.word	0x58000400

08004924 <HAL_SUBGHZ_ReadBuffer>:
{
 8004924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004928:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800492a:	7980      	ldrb	r0, [r0, #6]
 800492c:	fa5f f880 	uxtb.w	r8, r0
 8004930:	f1b8 0f01 	cmp.w	r8, #1
 8004934:	d13d      	bne.n	80049b2 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8004936:	460c      	mov	r4, r1
 8004938:	4615      	mov	r5, r2
 800493a:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 800493c:	7973      	ldrb	r3, [r6, #5]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d03a      	beq.n	80049b8 <HAL_SUBGHZ_ReadBuffer+0x94>
 8004942:	2301      	movs	r3, #1
 8004944:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8004946:	4630      	mov	r0, r6
 8004948:	f7ff fdca 	bl	80044e0 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800494c:	4a1c      	ldr	r2, [pc, #112]	; (80049c0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800494e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004952:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004956:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 800495a:	211e      	movs	r1, #30
 800495c:	4630      	mov	r0, r6
 800495e:	f7ff fd17 	bl	8004390 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8004962:	4621      	mov	r1, r4
 8004964:	4630      	mov	r0, r6
 8004966:	f7ff fd13 	bl	8004390 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800496a:	2100      	movs	r1, #0
 800496c:	4630      	mov	r0, r6
 800496e:	f7ff fd0f 	bl	8004390 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8004972:	2400      	movs	r4, #0
 8004974:	e006      	b.n	8004984 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8004976:	4629      	mov	r1, r5
 8004978:	4630      	mov	r0, r6
 800497a:	f7ff fd45 	bl	8004408 <SUBGHZSPI_Receive>
      pData++;
 800497e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8004980:	3401      	adds	r4, #1
 8004982:	b2a4      	uxth	r4, r4
 8004984:	42bc      	cmp	r4, r7
 8004986:	d3f6      	bcc.n	8004976 <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8004988:	4a0d      	ldr	r2, [pc, #52]	; (80049c0 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 800498a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800498e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8004996:	4630      	mov	r0, r6
 8004998:	f7ff fd76 	bl	8004488 <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800499c:	68b3      	ldr	r3, [r6, #8]
 800499e:	b90b      	cbnz	r3, 80049a4 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 80049a0:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80049a4:	2301      	movs	r3, #1
 80049a6:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 80049a8:	2300      	movs	r3, #0
 80049aa:	7173      	strb	r3, [r6, #5]
}
 80049ac:	4640      	mov	r0, r8
 80049ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80049b2:	f04f 0802 	mov.w	r8, #2
 80049b6:	e7f9      	b.n	80049ac <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 80049b8:	f04f 0802 	mov.w	r8, #2
 80049bc:	e7f6      	b.n	80049ac <HAL_SUBGHZ_ReadBuffer+0x88>
 80049be:	bf00      	nop
 80049c0:	58000400 	.word	0x58000400

080049c4 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80049c4:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	e852 3f00 	ldrex	r3, [r2]
 80049ca:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	e842 3100 	strex	r1, r3, [r2]
 80049d2:	2900      	cmp	r1, #0
 80049d4:	d1f6      	bne.n	80049c4 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80049d6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d8:	f102 0308 	add.w	r3, r2, #8
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e4:	3208      	adds	r2, #8
 80049e6:	e842 3100 	strex	r1, r3, [r2]
 80049ea:	2900      	cmp	r1, #0
 80049ec:	d1f3      	bne.n	80049d6 <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80049ee:	2320      	movs	r3, #32
 80049f0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 80049f4:	4770      	bx	lr

080049f6 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80049f6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f8:	e852 3f00 	ldrex	r3, [r2]
 80049fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a00:	e842 3100 	strex	r1, r3, [r2]
 8004a04:	2900      	cmp	r1, #0
 8004a06:	d1f6      	bne.n	80049f6 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a08:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0a:	f102 0308 	add.w	r3, r2, #8
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a16:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	3208      	adds	r2, #8
 8004a1c:	e842 3100 	strex	r1, r3, [r2]
 8004a20:	2900      	cmp	r1, #0
 8004a22:	d1f1      	bne.n	8004a08 <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a24:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d006      	beq.n	8004a38 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a2a:	2320      	movs	r3, #32
 8004a2c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a30:	2300      	movs	r3, #0
 8004a32:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a34:	6743      	str	r3, [r0, #116]	; 0x74
}
 8004a36:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a38:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3a:	e852 3f00 	ldrex	r3, [r2]
 8004a3e:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a42:	e842 3100 	strex	r1, r3, [r2]
 8004a46:	2900      	cmp	r1, #0
 8004a48:	d1f6      	bne.n	8004a38 <UART_EndRxTransfer+0x42>
 8004a4a:	e7ee      	b.n	8004a2a <UART_EndRxTransfer+0x34>

08004a4c <HAL_UART_Transmit_DMA>:
{
 8004a4c:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8004a4e:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8004a52:	2a20      	cmp	r2, #32
 8004a54:	d13d      	bne.n	8004ad2 <HAL_UART_Transmit_DMA+0x86>
{
 8004a56:	b510      	push	{r4, lr}
 8004a58:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8004a5a:	2900      	cmp	r1, #0
 8004a5c:	d03b      	beq.n	8004ad6 <HAL_UART_Transmit_DMA+0x8a>
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d03b      	beq.n	8004ada <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8004a62:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004a64:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8004a68:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a72:	2221      	movs	r2, #33	; 0x21
 8004a74:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8004a78:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004a7a:	b1ca      	cbz	r2, 8004ab0 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004a7c:	4918      	ldr	r1, [pc, #96]	; (8004ae0 <HAL_UART_Transmit_DMA+0x94>)
 8004a7e:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004a80:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004a82:	4918      	ldr	r1, [pc, #96]	; (8004ae4 <HAL_UART_Transmit_DMA+0x98>)
 8004a84:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004a86:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004a88:	4917      	ldr	r1, [pc, #92]	; (8004ae8 <HAL_UART_Transmit_DMA+0x9c>)
 8004a8a:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8004a8c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8004a8e:	2100      	movs	r1, #0
 8004a90:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004a92:	6802      	ldr	r2, [r0, #0]
 8004a94:	3228      	adds	r2, #40	; 0x28
 8004a96:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8004a98:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8004a9a:	f7fd fee9 	bl	8002870 <HAL_DMA_Start_IT>
 8004a9e:	b138      	cbz	r0, 8004ab0 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004aa0:	2310      	movs	r3, #16
 8004aa2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8004aa6:	2320      	movs	r3, #32
 8004aa8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 8004aac:	2001      	movs	r0, #1
 8004aae:	e00f      	b.n	8004ad0 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004ab0:	6823      	ldr	r3, [r4, #0]
 8004ab2:	2240      	movs	r2, #64	; 0x40
 8004ab4:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004ab6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab8:	f102 0308 	add.w	r3, r2, #8
 8004abc:	e853 3f00 	ldrex	r3, [r3]
 8004ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	3208      	adds	r2, #8
 8004ac6:	e842 3100 	strex	r1, r3, [r2]
 8004aca:	2900      	cmp	r1, #0
 8004acc:	d1f3      	bne.n	8004ab6 <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8004ace:	2000      	movs	r0, #0
}
 8004ad0:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8004ad2:	2002      	movs	r0, #2
}
 8004ad4:	4770      	bx	lr
      return HAL_ERROR;
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	e7fa      	b.n	8004ad0 <HAL_UART_Transmit_DMA+0x84>
 8004ada:	2001      	movs	r0, #1
 8004adc:	e7f8      	b.n	8004ad0 <HAL_UART_Transmit_DMA+0x84>
 8004ade:	bf00      	nop
 8004ae0:	08004aed 	.word	0x08004aed
 8004ae4:	08004b5b 	.word	0x08004b5b
 8004ae8:	08004b67 	.word	0x08004b67

08004aec <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004aec:	b508      	push	{r3, lr}
 8004aee:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004af0:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f013 0f20 	tst.w	r3, #32
 8004afa:	d118      	bne.n	8004b2e <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b02:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b04:	f102 0308 	add.w	r3, r2, #8
 8004b08:	e853 3f00 	ldrex	r3, [r3]
 8004b0c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b10:	3208      	adds	r2, #8
 8004b12:	e842 3100 	strex	r1, r3, [r2]
 8004b16:	2900      	cmp	r1, #0
 8004b18:	d1f3      	bne.n	8004b02 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b1a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b1c:	e852 3f00 	ldrex	r3, [r2]
 8004b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b24:	e842 3100 	strex	r1, r3, [r2]
 8004b28:	2900      	cmp	r1, #0
 8004b2a:	d1f6      	bne.n	8004b1a <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b2c:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8004b2e:	f7fd f845 	bl	8001bbc <HAL_UART_TxCpltCallback>
}
 8004b32:	e7fb      	b.n	8004b2c <UART_DMATransmitCplt+0x40>

08004b34 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b34:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b36:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b38:	e852 3f00 	ldrex	r3, [r2]
 8004b3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b40:	e842 3100 	strex	r1, r3, [r2]
 8004b44:	2900      	cmp	r1, #0
 8004b46:	d1f6      	bne.n	8004b36 <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b48:	2320      	movs	r3, #32
 8004b4a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b52:	f7fd f833 	bl	8001bbc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b56:	bd08      	pop	{r3, pc}

08004b58 <HAL_UART_TxHalfCpltCallback>:
}
 8004b58:	4770      	bx	lr

08004b5a <UART_DMATxHalfCplt>:
{
 8004b5a:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8004b5c:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8004b5e:	f7ff fffb 	bl	8004b58 <HAL_UART_TxHalfCpltCallback>
}
 8004b62:	bd08      	pop	{r3, pc}

08004b64 <HAL_UART_ErrorCallback>:
}
 8004b64:	4770      	bx	lr

08004b66 <UART_DMAError>:
{
 8004b66:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b68:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004b6a:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004b6e:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004b7a:	d001      	beq.n	8004b80 <UART_DMAError+0x1a>
 8004b7c:	2a21      	cmp	r2, #33	; 0x21
 8004b7e:	d010      	beq.n	8004ba2 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004b88:	d001      	beq.n	8004b8e <UART_DMAError+0x28>
 8004b8a:	2d22      	cmp	r5, #34	; 0x22
 8004b8c:	d010      	beq.n	8004bb0 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004b8e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8004b92:	f043 0310 	orr.w	r3, r3, #16
 8004b96:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7ff ffe2 	bl	8004b64 <HAL_UART_ErrorCallback>
}
 8004ba0:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7ff ff0b 	bl	80049c4 <UART_EndTxTransfer>
 8004bae:	e7e7      	b.n	8004b80 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7ff ff1d 	bl	80049f6 <UART_EndRxTransfer>
 8004bbc:	e7e7      	b.n	8004b8e <UART_DMAError+0x28>

08004bbe <UART_DMAAbortOnError>:
{
 8004bbe:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bc0:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004bc8:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8004bcc:	f7ff ffca 	bl	8004b64 <HAL_UART_ErrorCallback>
}
 8004bd0:	bd08      	pop	{r3, pc}

08004bd2 <HAL_UARTEx_RxEventCallback>:
}
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_UART_IRQHandler>:
{
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004bd8:	6801      	ldr	r1, [r0, #0]
 8004bda:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bdc:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bde:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004be0:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8004be4:	401a      	ands	r2, r3
 8004be6:	d108      	bne.n	8004bfa <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004be8:	f013 0f20 	tst.w	r3, #32
 8004bec:	d005      	beq.n	8004bfa <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004bee:	f010 0f20 	tst.w	r0, #32
 8004bf2:	d134      	bne.n	8004c5e <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004bf4:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8004bf8:	d131      	bne.n	8004c5e <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8004bfa:	b12a      	cbz	r2, 8004c08 <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004bfc:	4a99      	ldr	r2, [pc, #612]	; (8004e64 <HAL_UART_IRQHandler+0x290>)
 8004bfe:	402a      	ands	r2, r5
 8004c00:	d133      	bne.n	8004c6a <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004c02:	4e99      	ldr	r6, [pc, #612]	; (8004e68 <HAL_UART_IRQHandler+0x294>)
 8004c04:	4230      	tst	r0, r6
 8004c06:	d130      	bne.n	8004c6a <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8004c0a:	2a01      	cmp	r2, #1
 8004c0c:	f000 80c6 	beq.w	8004d9c <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004c10:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004c14:	d003      	beq.n	8004c1e <HAL_UART_IRQHandler+0x4a>
 8004c16:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8004c1a:	f040 8165 	bne.w	8004ee8 <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c1e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004c22:	d007      	beq.n	8004c34 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c24:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004c28:	f040 8165 	bne.w	8004ef6 <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c2c:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8004c30:	f040 8161 	bne.w	8004ef6 <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c34:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004c38:	d003      	beq.n	8004c42 <HAL_UART_IRQHandler+0x6e>
 8004c3a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c3e:	f040 8161 	bne.w	8004f04 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c42:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004c46:	d003      	beq.n	8004c50 <HAL_UART_IRQHandler+0x7c>
 8004c48:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004c4c:	f040 815e 	bne.w	8004f0c <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c50:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8004c54:	d002      	beq.n	8004c5c <HAL_UART_IRQHandler+0x88>
 8004c56:	2800      	cmp	r0, #0
 8004c58:	f2c0 815c 	blt.w	8004f14 <HAL_UART_IRQHandler+0x340>
}
 8004c5c:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8004c5e:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0fb      	beq.n	8004c5c <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8004c64:	4620      	mov	r0, r4
 8004c66:	4798      	blx	r3
      return;
 8004c68:	e7f8      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c6a:	f013 0f01 	tst.w	r3, #1
 8004c6e:	d009      	beq.n	8004c84 <HAL_UART_IRQHandler+0xb0>
 8004c70:	f410 7f80 	tst.w	r0, #256	; 0x100
 8004c74:	d006      	beq.n	8004c84 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c76:	2601      	movs	r6, #1
 8004c78:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c7a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004c7e:	4331      	orrs	r1, r6
 8004c80:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c84:	f013 0f02 	tst.w	r3, #2
 8004c88:	d00b      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xce>
 8004c8a:	f015 0f01 	tst.w	r5, #1
 8004c8e:	d008      	beq.n	8004ca2 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c90:	6821      	ldr	r1, [r4, #0]
 8004c92:	2602      	movs	r6, #2
 8004c94:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c96:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004c9a:	f041 0104 	orr.w	r1, r1, #4
 8004c9e:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004ca2:	f013 0f04 	tst.w	r3, #4
 8004ca6:	d00b      	beq.n	8004cc0 <HAL_UART_IRQHandler+0xec>
 8004ca8:	f015 0f01 	tst.w	r5, #1
 8004cac:	d008      	beq.n	8004cc0 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004cae:	6821      	ldr	r1, [r4, #0]
 8004cb0:	2604      	movs	r6, #4
 8004cb2:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cb4:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8004cb8:	f041 0102 	orr.w	r1, r1, #2
 8004cbc:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cc0:	f013 0f08 	tst.w	r3, #8
 8004cc4:	d00b      	beq.n	8004cde <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004cc6:	f010 0f20 	tst.w	r0, #32
 8004cca:	d100      	bne.n	8004cce <HAL_UART_IRQHandler+0xfa>
 8004ccc:	b13a      	cbz	r2, 8004cde <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004cce:	6822      	ldr	r2, [r4, #0]
 8004cd0:	2108      	movs	r1, #8
 8004cd2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cd4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cde:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8004ce2:	d00c      	beq.n	8004cfe <HAL_UART_IRQHandler+0x12a>
 8004ce4:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8004ce8:	d009      	beq.n	8004cfe <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004cea:	6822      	ldr	r2, [r4, #0]
 8004cec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004cf0:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004cf2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004cf6:	f042 0220 	orr.w	r2, r2, #32
 8004cfa:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004cfe:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8004d02:	2a00      	cmp	r2, #0
 8004d04:	d0aa      	beq.n	8004c5c <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d06:	f013 0f20 	tst.w	r3, #32
 8004d0a:	d009      	beq.n	8004d20 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d0c:	f010 0f20 	tst.w	r0, #32
 8004d10:	d102      	bne.n	8004d18 <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d12:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8004d16:	d003      	beq.n	8004d20 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8004d18:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8004d1a:	b10b      	cbz	r3, 8004d20 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8004d20:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d2c:	d102      	bne.n	8004d34 <HAL_UART_IRQHandler+0x160>
 8004d2e:	f012 0f28 	tst.w	r2, #40	; 0x28
 8004d32:	d02c      	beq.n	8004d8e <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7ff fe5e 	bl	80049f6 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d42:	d020      	beq.n	8004d86 <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d44:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	f102 0308 	add.w	r3, r2, #8
 8004d4a:	e853 3f00 	ldrex	r3, [r3]
 8004d4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	3208      	adds	r2, #8
 8004d54:	e842 3100 	strex	r1, r3, [r2]
 8004d58:	2900      	cmp	r1, #0
 8004d5a:	d1f3      	bne.n	8004d44 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8004d5c:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8004d60:	b16b      	cbz	r3, 8004d7e <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004d62:	4a42      	ldr	r2, [pc, #264]	; (8004e6c <HAL_UART_IRQHandler+0x298>)
 8004d64:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004d66:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004d6a:	f7fd fe07 	bl	800297c <HAL_DMA_Abort_IT>
 8004d6e:	2800      	cmp	r0, #0
 8004d70:	f43f af74 	beq.w	8004c5c <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d74:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004d78:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004d7a:	4798      	blx	r3
 8004d7c:	e76e      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8004d7e:	4620      	mov	r0, r4
 8004d80:	f7ff fef0 	bl	8004b64 <HAL_UART_ErrorCallback>
 8004d84:	e76a      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 8004d86:	4620      	mov	r0, r4
 8004d88:	f7ff feec 	bl	8004b64 <HAL_UART_ErrorCallback>
 8004d8c:	e766      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8004d8e:	4620      	mov	r0, r4
 8004d90:	f7ff fee8 	bl	8004b64 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 8004d9a:	e75f      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004d9c:	f013 0f10 	tst.w	r3, #16
 8004da0:	f43f af36 	beq.w	8004c10 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004da4:	f010 0f10 	tst.w	r0, #16
 8004da8:	f43f af32 	beq.w	8004c10 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004dac:	2310      	movs	r3, #16
 8004dae:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004db0:	6823      	ldr	r3, [r4, #0]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004db8:	d05a      	beq.n	8004e70 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004dba:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8004dbe:	6813      	ldr	r3, [r2, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f43f af49 	beq.w	8004c5c <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004dca:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004dce:	4299      	cmp	r1, r3
 8004dd0:	f67f af44 	bls.w	8004c5c <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8004dd4:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004dd8:	6813      	ldr	r3, [r2, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f013 0f20 	tst.w	r3, #32
 8004de0:	d132      	bne.n	8004e48 <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004de2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	e852 3f00 	ldrex	r3, [r2]
 8004de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dec:	e842 3100 	strex	r1, r3, [r2]
 8004df0:	2900      	cmp	r1, #0
 8004df2:	d1f6      	bne.n	8004de2 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	f102 0308 	add.w	r3, r2, #8
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e02:	3208      	adds	r2, #8
 8004e04:	e842 3100 	strex	r1, r3, [r2]
 8004e08:	2900      	cmp	r1, #0
 8004e0a:	d1f3      	bne.n	8004df4 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e0c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	f102 0308 	add.w	r3, r2, #8
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e1a:	3208      	adds	r2, #8
 8004e1c:	e842 3100 	strex	r1, r3, [r2]
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d1f3      	bne.n	8004e0c <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 8004e24:	2320      	movs	r3, #32
 8004e26:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	e852 3f00 	ldrex	r3, [r2]
 8004e34:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	e842 3100 	strex	r1, r3, [r2]
 8004e3c:	2900      	cmp	r1, #0
 8004e3e:	d1f6      	bne.n	8004e2e <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e40:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8004e44:	f7fd fd60 	bl	8002908 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e48:	2302      	movs	r3, #2
 8004e4a:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e4c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004e50:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	1ac9      	subs	r1, r1, r3
 8004e58:	b289      	uxth	r1, r1
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f7ff feb9 	bl	8004bd2 <HAL_UARTEx_RxEventCallback>
      return;
 8004e60:	e6fc      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
 8004e62:	bf00      	nop
 8004e64:	10000001 	.word	0x10000001
 8004e68:	04000120 	.word	0x04000120
 8004e6c:	08004bbf 	.word	0x08004bbf
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e70:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8004e74:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	1ac9      	subs	r1, r1, r3
 8004e7c:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8004e7e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f43f aee9 	beq.w	8004c5c <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	f43f aee6 	beq.w	8004c5c <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e90:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	e852 3f00 	ldrex	r3, [r2]
 8004e96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9a:	e842 3000 	strex	r0, r3, [r2]
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d1f6      	bne.n	8004e90 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004ea2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	f102 0308 	add.w	r3, r2, #8
 8004ea8:	e853 3f00 	ldrex	r3, [r3]
 8004eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004eb0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb4:	3208      	adds	r2, #8
 8004eb6:	e842 3000 	strex	r0, r3, [r2]
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	d1f1      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 8004ebe:	2320      	movs	r3, #32
 8004ec0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 8004ec8:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ecc:	e852 3f00 	ldrex	r3, [r2]
 8004ed0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	e842 3000 	strex	r0, r3, [r2]
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	d1f6      	bne.n	8004eca <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004edc:	2302      	movs	r3, #2
 8004ede:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f7ff fe76 	bl	8004bd2 <HAL_UARTEx_RxEventCallback>
      return;
 8004ee6:	e6b9      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004ee8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004eec:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f000 fe60 	bl	8005bb4 <HAL_UARTEx_WakeupCallback>
    return;
 8004ef4:	e6b2      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 8004ef6:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f43f aeaf 	beq.w	8004c5c <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 8004efe:	4620      	mov	r0, r4
 8004f00:	4798      	blx	r3
    return;
 8004f02:	e6ab      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 8004f04:	4620      	mov	r0, r4
 8004f06:	f7ff fe15 	bl	8004b34 <UART_EndTransmit_IT>
    return;
 8004f0a:	e6a7      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	f000 fe53 	bl	8005bb8 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8004f12:	e6a3      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004f14:	4620      	mov	r0, r4
 8004f16:	f000 fe4e 	bl	8005bb6 <HAL_UARTEx_RxFifoFullCallback>
    return;
 8004f1a:	e69f      	b.n	8004c5c <HAL_UART_IRQHandler+0x88>

08004f1c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004f1c:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 8004f1e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f22:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8004f26:	2a22      	cmp	r2, #34	; 0x22
 8004f28:	d005      	beq.n	8004f36 <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f2a:	6802      	ldr	r2, [r0, #0]
 8004f2c:	6993      	ldr	r3, [r2, #24]
 8004f2e:	f043 0308 	orr.w	r3, r3, #8
 8004f32:	6193      	str	r3, [r2, #24]
  }
}
 8004f34:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f36:	6802      	ldr	r2, [r0, #0]
 8004f38:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	6d82      	ldr	r2, [r0, #88]	; 0x58
 8004f3e:	400b      	ands	r3, r1
 8004f40:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 8004f42:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004f44:	3301      	adds	r3, #1
 8004f46:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8004f48:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	3b01      	subs	r3, #1
 8004f50:	b29b      	uxth	r3, r3
 8004f52:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8004f56:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d1e9      	bne.n	8004f34 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f60:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	e852 3f00 	ldrex	r3, [r2]
 8004f66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	e842 3100 	strex	r1, r3, [r2]
 8004f6e:	2900      	cmp	r1, #0
 8004f70:	d1f6      	bne.n	8004f60 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f72:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f74:	f102 0308 	add.w	r3, r2, #8
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	3208      	adds	r2, #8
 8004f82:	e842 3100 	strex	r1, r3, [r2]
 8004f86:	2900      	cmp	r1, #0
 8004f88:	d1f3      	bne.n	8004f72 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 8004f8a:	2320      	movs	r3, #32
 8004f8c:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8004f90:	2300      	movs	r3, #0
 8004f92:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f94:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f96:	6803      	ldr	r3, [r0, #0]
 8004f98:	4a16      	ldr	r2, [pc, #88]	; (8004ff4 <UART_RxISR_8BIT+0xd8>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00c      	beq.n	8004fb8 <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8004fa4:	d008      	beq.n	8004fb8 <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004fa6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa8:	e852 3f00 	ldrex	r3, [r2]
 8004fac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	e842 3100 	strex	r1, r3, [r2]
 8004fb4:	2900      	cmp	r1, #0
 8004fb6:	d1f6      	bne.n	8004fa6 <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d116      	bne.n	8004fec <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc4:	e852 3f00 	ldrex	r3, [r2]
 8004fc8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	e842 3100 	strex	r1, r3, [r2]
 8004fd0:	2900      	cmp	r1, #0
 8004fd2:	d1f6      	bne.n	8004fc2 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fd4:	6803      	ldr	r3, [r0, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	f012 0f10 	tst.w	r2, #16
 8004fdc:	d001      	beq.n	8004fe2 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fde:	2210      	movs	r2, #16
 8004fe0:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fe2:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8004fe6:	f7ff fdf4 	bl	8004bd2 <HAL_UARTEx_RxEventCallback>
 8004fea:	e7a3      	b.n	8004f34 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8004fec:	f7fc fdf6 	bl	8001bdc <HAL_UART_RxCpltCallback>
 8004ff0:	e7a0      	b.n	8004f34 <UART_RxISR_8BIT+0x18>
 8004ff2:	bf00      	nop
 8004ff4:	40008000 	.word	0x40008000

08004ff8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ff8:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004ffa:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ffe:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8005002:	2b22      	cmp	r3, #34	; 0x22
 8005004:	d005      	beq.n	8005012 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005006:	6802      	ldr	r2, [r0, #0]
 8005008:	6993      	ldr	r3, [r2, #24]
 800500a:	f043 0308 	orr.w	r3, r3, #8
 800500e:	6193      	str	r3, [r2, #24]
  }
}
 8005010:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005012:	6803      	ldr	r3, [r0, #0]
 8005014:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005016:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 8005018:	4013      	ands	r3, r2
 800501a:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 800501c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800501e:	3302      	adds	r3, #2
 8005020:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 8005022:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005026:	b29b      	uxth	r3, r3
 8005028:	3b01      	subs	r3, #1
 800502a:	b29b      	uxth	r3, r3
 800502c:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 8005030:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 8005034:	b29b      	uxth	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d1ea      	bne.n	8005010 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800503a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800503c:	e852 3f00 	ldrex	r3, [r2]
 8005040:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	e842 3100 	strex	r1, r3, [r2]
 8005048:	2900      	cmp	r1, #0
 800504a:	d1f6      	bne.n	800503a <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	f102 0308 	add.w	r3, r2, #8
 8005052:	e853 3f00 	ldrex	r3, [r3]
 8005056:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800505a:	3208      	adds	r2, #8
 800505c:	e842 3100 	strex	r1, r3, [r2]
 8005060:	2900      	cmp	r1, #0
 8005062:	d1f3      	bne.n	800504c <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8005064:	2320      	movs	r3, #32
 8005066:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800506e:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005070:	6803      	ldr	r3, [r0, #0]
 8005072:	4a16      	ldr	r2, [pc, #88]	; (80050cc <UART_RxISR_16BIT+0xd4>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00c      	beq.n	8005092 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800507e:	d008      	beq.n	8005092 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005080:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005082:	e852 3f00 	ldrex	r3, [r2]
 8005086:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508a:	e842 3100 	strex	r1, r3, [r2]
 800508e:	2900      	cmp	r1, #0
 8005090:	d1f6      	bne.n	8005080 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005092:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8005094:	2b01      	cmp	r3, #1
 8005096:	d116      	bne.n	80050c6 <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005098:	2300      	movs	r3, #0
 800509a:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800509c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509e:	e852 3f00 	ldrex	r3, [r2]
 80050a2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a6:	e842 3100 	strex	r1, r3, [r2]
 80050aa:	2900      	cmp	r1, #0
 80050ac:	d1f6      	bne.n	800509c <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050ae:	6803      	ldr	r3, [r0, #0]
 80050b0:	69da      	ldr	r2, [r3, #28]
 80050b2:	f012 0f10 	tst.w	r2, #16
 80050b6:	d001      	beq.n	80050bc <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80050b8:	2210      	movs	r2, #16
 80050ba:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80050bc:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80050c0:	f7ff fd87 	bl	8004bd2 <HAL_UARTEx_RxEventCallback>
 80050c4:	e7a4      	b.n	8005010 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 80050c6:	f7fc fd89 	bl	8001bdc <HAL_UART_RxCpltCallback>
 80050ca:	e7a1      	b.n	8005010 <UART_RxISR_16BIT+0x18>
 80050cc:	40008000 	.word	0x40008000

080050d0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80050d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 80050d4:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80050d8:	6803      	ldr	r3, [r0, #0]
 80050da:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80050dc:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80050e0:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050e4:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80050e8:	2a22      	cmp	r2, #34	; 0x22
 80050ea:	d005      	beq.n	80050f8 <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80050ec:	699a      	ldr	r2, [r3, #24]
 80050ee:	f042 0208 	orr.w	r2, r2, #8
 80050f2:	619a      	str	r2, [r3, #24]
  }
}
 80050f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050f8:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80050fa:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80050fe:	e008      	b.n	8005112 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005100:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005104:	2b00      	cmp	r3, #0
 8005106:	d14c      	bne.n	80051a2 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 8005108:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d04e      	beq.n	80051b0 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005112:	2f00      	cmp	r7, #0
 8005114:	f000 809a 	beq.w	800524c <UART_RxISR_8BIT_FIFOEN+0x17c>
 8005118:	f015 0f20 	tst.w	r5, #32
 800511c:	f000 8096 	beq.w	800524c <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005120:	6823      	ldr	r3, [r4, #0]
 8005122:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005124:	b2f3      	uxtb	r3, r6
 8005126:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8005128:	400b      	ands	r3, r1
 800512a:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 800512c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800512e:	3301      	adds	r3, #1
 8005130:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 8005132:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005136:	b29b      	uxth	r3, r3
 8005138:	3b01      	subs	r3, #1
 800513a:	b29b      	uxth	r3, r3
 800513c:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005144:	f015 0f07 	tst.w	r5, #7
 8005148:	d0de      	beq.n	8005108 <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800514a:	f015 0f01 	tst.w	r5, #1
 800514e:	d009      	beq.n	8005164 <UART_RxISR_8BIT_FIFOEN+0x94>
 8005150:	f419 7f80 	tst.w	r9, #256	; 0x100
 8005154:	d006      	beq.n	8005164 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005156:	2201      	movs	r2, #1
 8005158:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800515a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005164:	f015 0f02 	tst.w	r5, #2
 8005168:	d00b      	beq.n	8005182 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800516a:	f018 0f01 	tst.w	r8, #1
 800516e:	d008      	beq.n	8005182 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	2202      	movs	r2, #2
 8005174:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005176:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800517a:	f043 0304 	orr.w	r3, r3, #4
 800517e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005182:	f015 0f04 	tst.w	r5, #4
 8005186:	d0bb      	beq.n	8005100 <UART_RxISR_8BIT_FIFOEN+0x30>
 8005188:	f018 0f01 	tst.w	r8, #1
 800518c:	d0b8      	beq.n	8005100 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	2204      	movs	r2, #4
 8005192:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005194:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005198:	f043 0302 	orr.w	r3, r3, #2
 800519c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80051a0:	e7ae      	b.n	8005100 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 80051a2:	4620      	mov	r0, r4
 80051a4:	f7ff fcde 	bl	8004b64 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051a8:	2300      	movs	r3, #0
 80051aa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80051ae:	e7ab      	b.n	8005108 <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b2:	e852 3f00 	ldrex	r3, [r2]
 80051b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ba:	e842 3100 	strex	r1, r3, [r2]
 80051be:	2900      	cmp	r1, #0
 80051c0:	d1f6      	bne.n	80051b0 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80051c2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	f102 0308 	add.w	r3, r2, #8
 80051c8:	e853 3f00 	ldrex	r3, [r3]
 80051cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051d0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d4:	3208      	adds	r2, #8
 80051d6:	e842 3100 	strex	r1, r3, [r2]
 80051da:	2900      	cmp	r1, #0
 80051dc:	d1f1      	bne.n	80051c2 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 80051de:	2320      	movs	r3, #32
 80051e0:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80051e4:	2300      	movs	r3, #0
 80051e6:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051e8:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051ea:	6823      	ldr	r3, [r4, #0]
 80051ec:	4a29      	ldr	r2, [pc, #164]	; (8005294 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d003      	beq.n	80051fa <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80051f8:	d106      	bne.n	8005208 <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051fa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80051fc:	2b01      	cmp	r3, #1
 80051fe:	d00d      	beq.n	800521c <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 8005200:	4620      	mov	r0, r4
 8005202:	f7fc fceb 	bl	8001bdc <HAL_UART_RxCpltCallback>
 8005206:	e784      	b.n	8005112 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005208:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520a:	e852 3f00 	ldrex	r3, [r2]
 800520e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005212:	e842 3100 	strex	r1, r3, [r2]
 8005216:	2900      	cmp	r1, #0
 8005218:	d1f6      	bne.n	8005208 <UART_RxISR_8BIT_FIFOEN+0x138>
 800521a:	e7ee      	b.n	80051fa <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800521c:	2300      	movs	r3, #0
 800521e:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005220:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	e852 3f00 	ldrex	r3, [r2]
 8005226:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	e842 3100 	strex	r1, r3, [r2]
 800522e:	2900      	cmp	r1, #0
 8005230:	d1f6      	bne.n	8005220 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	69da      	ldr	r2, [r3, #28]
 8005236:	f012 0f10 	tst.w	r2, #16
 800523a:	d001      	beq.n	8005240 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800523c:	2210      	movs	r2, #16
 800523e:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005240:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8005244:	4620      	mov	r0, r4
 8005246:	f7ff fcc4 	bl	8004bd2 <HAL_UARTEx_RxEventCallback>
 800524a:	e762      	b.n	8005112 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 800524c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005250:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005252:	2b00      	cmp	r3, #0
 8005254:	f43f af4e 	beq.w	80050f4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8005258:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 800525c:	429a      	cmp	r2, r3
 800525e:	f67f af49 	bls.w	80050f4 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005262:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005264:	f102 0308 	add.w	r3, r2, #8
 8005268:	e853 3f00 	ldrex	r3, [r3]
 800526c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005270:	3208      	adds	r2, #8
 8005272:	e842 3100 	strex	r1, r3, [r2]
 8005276:	2900      	cmp	r1, #0
 8005278:	d1f3      	bne.n	8005262 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 800527c:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800527e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005280:	e852 3f00 	ldrex	r3, [r2]
 8005284:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005288:	e842 3100 	strex	r1, r3, [r2]
 800528c:	2900      	cmp	r1, #0
 800528e:	d1f6      	bne.n	800527e <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8005290:	e730      	b.n	80050f4 <UART_RxISR_8BIT_FIFOEN+0x24>
 8005292:	bf00      	nop
 8005294:	40008000 	.word	0x40008000
 8005298:	08004f1d 	.word	0x08004f1d

0800529c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800529c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80052a0:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80052a4:	6803      	ldr	r3, [r0, #0]
 80052a6:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80052a8:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80052ac:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052b0:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80052b4:	2a22      	cmp	r2, #34	; 0x22
 80052b6:	d005      	beq.n	80052c4 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052b8:	699a      	ldr	r2, [r3, #24]
 80052ba:	f042 0208 	orr.w	r2, r2, #8
 80052be:	619a      	str	r2, [r3, #24]
  }
}
 80052c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052c4:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 80052c6:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052ca:	e008      	b.n	80052de <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052cc:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d14b      	bne.n	800536c <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 80052d4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80052d8:	b29b      	uxth	r3, r3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d04d      	beq.n	800537a <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80052de:	2f00      	cmp	r7, #0
 80052e0:	f000 8099 	beq.w	8005416 <UART_RxISR_16BIT_FIFOEN+0x17a>
 80052e4:	f015 0f20 	tst.w	r5, #32
 80052e8:	f000 8095 	beq.w	8005416 <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80052f0:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 80052f2:	4033      	ands	r3, r6
 80052f4:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 80052f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052f8:	3302      	adds	r3, #2
 80052fa:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80052fc:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29b      	uxth	r3, r3
 8005306:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800530a:	6823      	ldr	r3, [r4, #0]
 800530c:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800530e:	f015 0f07 	tst.w	r5, #7
 8005312:	d0df      	beq.n	80052d4 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005314:	f015 0f01 	tst.w	r5, #1
 8005318:	d009      	beq.n	800532e <UART_RxISR_16BIT_FIFOEN+0x92>
 800531a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800531e:	d006      	beq.n	800532e <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005320:	2201      	movs	r2, #1
 8005322:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005324:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005328:	4313      	orrs	r3, r2
 800532a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800532e:	f015 0f02 	tst.w	r5, #2
 8005332:	d00b      	beq.n	800534c <UART_RxISR_16BIT_FIFOEN+0xb0>
 8005334:	f018 0f01 	tst.w	r8, #1
 8005338:	d008      	beq.n	800534c <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800533a:	6823      	ldr	r3, [r4, #0]
 800533c:	2202      	movs	r2, #2
 800533e:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005340:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005344:	f043 0304 	orr.w	r3, r3, #4
 8005348:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800534c:	f015 0f04 	tst.w	r5, #4
 8005350:	d0bc      	beq.n	80052cc <UART_RxISR_16BIT_FIFOEN+0x30>
 8005352:	f018 0f01 	tst.w	r8, #1
 8005356:	d0b9      	beq.n	80052cc <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005358:	6823      	ldr	r3, [r4, #0]
 800535a:	2204      	movs	r2, #4
 800535c:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800535e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800536a:	e7af      	b.n	80052cc <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 800536c:	4620      	mov	r0, r4
 800536e:	f7ff fbf9 	bl	8004b64 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005372:	2300      	movs	r3, #0
 8005374:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8005378:	e7ac      	b.n	80052d4 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800537a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537c:	e852 3f00 	ldrex	r3, [r2]
 8005380:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005384:	e842 3100 	strex	r1, r3, [r2]
 8005388:	2900      	cmp	r1, #0
 800538a:	d1f6      	bne.n	800537a <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800538c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538e:	f102 0308 	add.w	r3, r2, #8
 8005392:	e853 3f00 	ldrex	r3, [r3]
 8005396:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800539a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	3208      	adds	r2, #8
 80053a0:	e842 3100 	strex	r1, r3, [r2]
 80053a4:	2900      	cmp	r1, #0
 80053a6:	d1f1      	bne.n	800538c <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 80053a8:	2320      	movs	r3, #32
 80053aa:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053b2:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053b4:	6823      	ldr	r3, [r4, #0]
 80053b6:	4a29      	ldr	r2, [pc, #164]	; (800545c <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d003      	beq.n	80053c4 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80053c2:	d106      	bne.n	80053d2 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d00d      	beq.n	80053e6 <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 80053ca:	4620      	mov	r0, r4
 80053cc:	f7fc fc06 	bl	8001bdc <HAL_UART_RxCpltCallback>
 80053d0:	e785      	b.n	80052de <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d4:	e852 3f00 	ldrex	r3, [r2]
 80053d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053dc:	e842 3100 	strex	r1, r3, [r2]
 80053e0:	2900      	cmp	r1, #0
 80053e2:	d1f6      	bne.n	80053d2 <UART_RxISR_16BIT_FIFOEN+0x136>
 80053e4:	e7ee      	b.n	80053c4 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e6:	2300      	movs	r3, #0
 80053e8:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053ea:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	e852 3f00 	ldrex	r3, [r2]
 80053f0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	e842 3100 	strex	r1, r3, [r2]
 80053f8:	2900      	cmp	r1, #0
 80053fa:	d1f6      	bne.n	80053ea <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	f012 0f10 	tst.w	r2, #16
 8005404:	d001      	beq.n	800540a <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005406:	2210      	movs	r2, #16
 8005408:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800540a:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 800540e:	4620      	mov	r0, r4
 8005410:	f7ff fbdf 	bl	8004bd2 <HAL_UARTEx_RxEventCallback>
 8005414:	e763      	b.n	80052de <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 8005416:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800541a:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800541c:	2b00      	cmp	r3, #0
 800541e:	f43f af4f 	beq.w	80052c0 <UART_RxISR_16BIT_FIFOEN+0x24>
 8005422:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8005426:	429a      	cmp	r2, r3
 8005428:	f67f af4a 	bls.w	80052c0 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800542c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800542e:	f102 0308 	add.w	r3, r2, #8
 8005432:	e853 3f00 	ldrex	r3, [r3]
 8005436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	3208      	adds	r2, #8
 800543c:	e842 3100 	strex	r1, r3, [r2]
 8005440:	2900      	cmp	r1, #0
 8005442:	d1f3      	bne.n	800542c <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 8005444:	4b06      	ldr	r3, [pc, #24]	; (8005460 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 8005446:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005448:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544a:	e852 3f00 	ldrex	r3, [r2]
 800544e:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005452:	e842 3100 	strex	r1, r3, [r2]
 8005456:	2900      	cmp	r1, #0
 8005458:	d1f6      	bne.n	8005448 <UART_RxISR_16BIT_FIFOEN+0x1ac>
 800545a:	e731      	b.n	80052c0 <UART_RxISR_16BIT_FIFOEN+0x24>
 800545c:	40008000 	.word	0x40008000
 8005460:	08004ff9 	.word	0x08004ff9

08005464 <UART_SetConfig>:
{
 8005464:	b570      	push	{r4, r5, r6, lr}
 8005466:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 8005468:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800546a:	6883      	ldr	r3, [r0, #8]
 800546c:	6902      	ldr	r2, [r0, #16]
 800546e:	4313      	orrs	r3, r2
 8005470:	6942      	ldr	r2, [r0, #20]
 8005472:	4313      	orrs	r3, r2
 8005474:	69c2      	ldr	r2, [r0, #28]
 8005476:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005478:	6808      	ldr	r0, [r1, #0]
 800547a:	4a9d      	ldr	r2, [pc, #628]	; (80056f0 <UART_SetConfig+0x28c>)
 800547c:	4002      	ands	r2, r0
 800547e:	431a      	orrs	r2, r3
 8005480:	600a      	str	r2, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005482:	6822      	ldr	r2, [r4, #0]
 8005484:	6853      	ldr	r3, [r2, #4]
 8005486:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800548a:	68e1      	ldr	r1, [r4, #12]
 800548c:	430b      	orrs	r3, r1
 800548e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005490:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005492:	6822      	ldr	r2, [r4, #0]
 8005494:	4b97      	ldr	r3, [pc, #604]	; (80056f4 <UART_SetConfig+0x290>)
 8005496:	429a      	cmp	r2, r3
 8005498:	d001      	beq.n	800549e <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800549a:	6a23      	ldr	r3, [r4, #32]
 800549c:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800549e:	6893      	ldr	r3, [r2, #8]
 80054a0:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80054a4:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80054a8:	430b      	orrs	r3, r1
 80054aa:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80054ac:	6822      	ldr	r2, [r4, #0]
 80054ae:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80054b0:	f023 030f 	bic.w	r3, r3, #15
 80054b4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054b6:	430b      	orrs	r3, r1
 80054b8:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80054ba:	6823      	ldr	r3, [r4, #0]
 80054bc:	4a8e      	ldr	r2, [pc, #568]	; (80056f8 <UART_SetConfig+0x294>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d01c      	beq.n	80054fc <UART_SetConfig+0x98>
 80054c2:	4a8e      	ldr	r2, [pc, #568]	; (80056fc <UART_SetConfig+0x298>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d031      	beq.n	800552c <UART_SetConfig+0xc8>
 80054c8:	4a8a      	ldr	r2, [pc, #552]	; (80056f4 <UART_SetConfig+0x290>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d04b      	beq.n	8005566 <UART_SetConfig+0x102>
 80054ce:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d0:	4988      	ldr	r1, [pc, #544]	; (80056f4 <UART_SetConfig+0x290>)
 80054d2:	428b      	cmp	r3, r1
 80054d4:	d068      	beq.n	80055a8 <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054d6:	69e0      	ldr	r0, [r4, #28]
 80054d8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80054dc:	f000 80a5 	beq.w	800562a <UART_SetConfig+0x1c6>
    switch (clocksource)
 80054e0:	2a08      	cmp	r2, #8
 80054e2:	f200 811f 	bhi.w	8005724 <UART_SetConfig+0x2c0>
 80054e6:	e8df f012 	tbh	[pc, r2, lsl #1]
 80054ea:	00d3      	.short	0x00d3
 80054ec:	00d100f5 	.word	0x00d100f5
 80054f0:	00f8011d 	.word	0x00f8011d
 80054f4:	011d011d 	.word	0x011d011d
 80054f8:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80054fc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005500:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005504:	f002 0203 	and.w	r2, r2, #3
 8005508:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 800550c:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 8005510:	2a03      	cmp	r2, #3
 8005512:	d809      	bhi.n	8005528 <UART_SetConfig+0xc4>
 8005514:	e8df f002 	tbb	[pc, r2]
 8005518:	063c0402 	.word	0x063c0402
 800551c:	2201      	movs	r2, #1
 800551e:	e7d7      	b.n	80054d0 <UART_SetConfig+0x6c>
 8005520:	2204      	movs	r2, #4
 8005522:	e7d5      	b.n	80054d0 <UART_SetConfig+0x6c>
 8005524:	2208      	movs	r2, #8
 8005526:	e7d3      	b.n	80054d0 <UART_SetConfig+0x6c>
 8005528:	2210      	movs	r2, #16
 800552a:	e7d1      	b.n	80054d0 <UART_SetConfig+0x6c>
 800552c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005530:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005534:	f002 020c 	and.w	r2, r2, #12
 8005538:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 800553c:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 8005540:	2a0c      	cmp	r2, #12
 8005542:	d80e      	bhi.n	8005562 <UART_SetConfig+0xfe>
 8005544:	e8df f002 	tbb	[pc, r2]
 8005548:	0d0d0d07 	.word	0x0d0d0d07
 800554c:	0d0d0d09 	.word	0x0d0d0d09
 8005550:	0d0d0d26 	.word	0x0d0d0d26
 8005554:	0b          	.byte	0x0b
 8005555:	00          	.byte	0x00
 8005556:	2200      	movs	r2, #0
 8005558:	e7ba      	b.n	80054d0 <UART_SetConfig+0x6c>
 800555a:	2204      	movs	r2, #4
 800555c:	e7b8      	b.n	80054d0 <UART_SetConfig+0x6c>
 800555e:	2208      	movs	r2, #8
 8005560:	e7b6      	b.n	80054d0 <UART_SetConfig+0x6c>
 8005562:	2210      	movs	r2, #16
 8005564:	e7b4      	b.n	80054d0 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8005566:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800556a:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 800556e:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8005572:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8005576:	d00f      	beq.n	8005598 <UART_SetConfig+0x134>
 8005578:	d805      	bhi.n	8005586 <UART_SetConfig+0x122>
 800557a:	b17a      	cbz	r2, 800559c <UART_SetConfig+0x138>
 800557c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8005580:	d10e      	bne.n	80055a0 <UART_SetConfig+0x13c>
 8005582:	2204      	movs	r2, #4
 8005584:	e7a4      	b.n	80054d0 <UART_SetConfig+0x6c>
 8005586:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800558a:	d10b      	bne.n	80055a4 <UART_SetConfig+0x140>
 800558c:	2208      	movs	r2, #8
 800558e:	e79f      	b.n	80054d0 <UART_SetConfig+0x6c>
 8005590:	2202      	movs	r2, #2
 8005592:	e79d      	b.n	80054d0 <UART_SetConfig+0x6c>
 8005594:	2202      	movs	r2, #2
 8005596:	e79b      	b.n	80054d0 <UART_SetConfig+0x6c>
 8005598:	2202      	movs	r2, #2
 800559a:	e799      	b.n	80054d0 <UART_SetConfig+0x6c>
 800559c:	2200      	movs	r2, #0
 800559e:	e797      	b.n	80054d0 <UART_SetConfig+0x6c>
 80055a0:	2210      	movs	r2, #16
 80055a2:	e795      	b.n	80054d0 <UART_SetConfig+0x6c>
 80055a4:	2210      	movs	r2, #16
 80055a6:	e793      	b.n	80054d0 <UART_SetConfig+0x6c>
    switch (clocksource)
 80055a8:	2a08      	cmp	r2, #8
 80055aa:	f200 809c 	bhi.w	80056e6 <UART_SetConfig+0x282>
 80055ae:	e8df f002 	tbb	[pc, r2]
 80055b2:	9a08      	.short	0x9a08
 80055b4:	9a379a3a 	.word	0x9a379a3a
 80055b8:	9a9a      	.short	0x9a9a
 80055ba:	05          	.byte	0x05
 80055bb:	00          	.byte	0x00
 80055bc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80055c0:	e004      	b.n	80055cc <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 80055c2:	f7fe faab 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80055c6:	2800      	cmp	r0, #0
 80055c8:	f000 808f 	beq.w	80056ea <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055cc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80055ce:	4b4c      	ldr	r3, [pc, #304]	; (8005700 <UART_SetConfig+0x29c>)
 80055d0:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 80055d4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055d8:	6865      	ldr	r5, [r4, #4]
 80055da:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 80055de:	4299      	cmp	r1, r3
 80055e0:	f200 8094 	bhi.w	800570c <UART_SetConfig+0x2a8>
 80055e4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 80055e8:	f200 8092 	bhi.w	8005710 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055ec:	2600      	movs	r6, #0
 80055ee:	4633      	mov	r3, r6
 80055f0:	4631      	mov	r1, r6
 80055f2:	f7fb fb21 	bl	8000c38 <__aeabi_uldivmod>
 80055f6:	0209      	lsls	r1, r1, #8
 80055f8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80055fc:	0200      	lsls	r0, r0, #8
 80055fe:	086b      	lsrs	r3, r5, #1
 8005600:	18c0      	adds	r0, r0, r3
 8005602:	462a      	mov	r2, r5
 8005604:	4633      	mov	r3, r6
 8005606:	f141 0100 	adc.w	r1, r1, #0
 800560a:	f7fb fb15 	bl	8000c38 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800560e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8005612:	4b3c      	ldr	r3, [pc, #240]	; (8005704 <UART_SetConfig+0x2a0>)
 8005614:	429a      	cmp	r2, r3
 8005616:	d87d      	bhi.n	8005714 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 8005618:	6823      	ldr	r3, [r4, #0]
 800561a:	60d8      	str	r0, [r3, #12]
 800561c:	4630      	mov	r0, r6
 800561e:	e050      	b.n	80056c2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 8005620:	f7fd fd7e 	bl	8003120 <HAL_RCC_GetSysClockFreq>
        break;
 8005624:	e7cf      	b.n	80055c6 <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 8005626:	4838      	ldr	r0, [pc, #224]	; (8005708 <UART_SetConfig+0x2a4>)
 8005628:	e7d0      	b.n	80055cc <UART_SetConfig+0x168>
    switch (clocksource)
 800562a:	2a08      	cmp	r2, #8
 800562c:	d874      	bhi.n	8005718 <UART_SetConfig+0x2b4>
 800562e:	e8df f002 	tbb	[pc, r2]
 8005632:	2707      	.short	0x2707
 8005634:	732a7305 	.word	0x732a7305
 8005638:	7373      	.short	0x7373
 800563a:	0b          	.byte	0x0b
 800563b:	00          	.byte	0x00
 800563c:	4832      	ldr	r0, [pc, #200]	; (8005708 <UART_SetConfig+0x2a4>)
 800563e:	e003      	b.n	8005648 <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005640:	f7fe fa6c 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005644:	2800      	cmp	r0, #0
 8005646:	d069      	beq.n	800571c <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005648:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800564a:	4b2d      	ldr	r3, [pc, #180]	; (8005700 <UART_SetConfig+0x29c>)
 800564c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8005650:	fbb0 f0f3 	udiv	r0, r0, r3
 8005654:	6862      	ldr	r2, [r4, #4]
 8005656:	0853      	lsrs	r3, r2, #1
 8005658:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800565c:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005660:	f1a3 0110 	sub.w	r1, r3, #16
 8005664:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8005668:	4291      	cmp	r1, r2
 800566a:	d859      	bhi.n	8005720 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800566c:	b29a      	uxth	r2, r3
 800566e:	f022 020f 	bic.w	r2, r2, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005672:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8005676:	4313      	orrs	r3, r2
        huart->Instance->BRR = brrtemp;
 8005678:	6822      	ldr	r2, [r4, #0]
 800567a:	60d3      	str	r3, [r2, #12]
 800567c:	2000      	movs	r0, #0
 800567e:	e020      	b.n	80056c2 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8005680:	f7fe fa5c 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
        break;
 8005684:	e7de      	b.n	8005644 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 8005686:	f7fd fd4b 	bl	8003120 <HAL_RCC_GetSysClockFreq>
        break;
 800568a:	e7db      	b.n	8005644 <UART_SetConfig+0x1e0>
    switch (clocksource)
 800568c:	481e      	ldr	r0, [pc, #120]	; (8005708 <UART_SetConfig+0x2a4>)
 800568e:	e003      	b.n	8005698 <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005690:	f7fe fa44 	bl	8003b1c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005694:	2800      	cmp	r0, #0
 8005696:	d047      	beq.n	8005728 <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005698:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800569a:	4b19      	ldr	r3, [pc, #100]	; (8005700 <UART_SetConfig+0x29c>)
 800569c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80056a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80056a4:	6863      	ldr	r3, [r4, #4]
 80056a6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80056aa:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ae:	f1a0 0210 	sub.w	r2, r0, #16
 80056b2:	f64f 73ef 	movw	r3, #65519	; 0xffef
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d838      	bhi.n	800572c <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	b280      	uxth	r0, r0
 80056be:	60d8      	str	r0, [r3, #12]
 80056c0:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 80056c2:	2301      	movs	r3, #1
 80056c4:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80056c8:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 80056cc:	2300      	movs	r3, #0
 80056ce:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 80056d0:	67a3      	str	r3, [r4, #120]	; 0x78
}
 80056d2:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 80056d4:	f7fe fa32 	bl	8003b3c <HAL_RCC_GetPCLK2Freq>
        break;
 80056d8:	e7dc      	b.n	8005694 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 80056da:	f7fd fd21 	bl	8003120 <HAL_RCC_GetSysClockFreq>
        break;
 80056de:	e7d9      	b.n	8005694 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 80056e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80056e4:	e7d8      	b.n	8005698 <UART_SetConfig+0x234>
    switch (clocksource)
 80056e6:	2001      	movs	r0, #1
 80056e8:	e7eb      	b.n	80056c2 <UART_SetConfig+0x25e>
 80056ea:	2000      	movs	r0, #0
 80056ec:	e7e9      	b.n	80056c2 <UART_SetConfig+0x25e>
 80056ee:	bf00      	nop
 80056f0:	cfff69f3 	.word	0xcfff69f3
 80056f4:	40008000 	.word	0x40008000
 80056f8:	40013800 	.word	0x40013800
 80056fc:	40004400 	.word	0x40004400
 8005700:	0800d834 	.word	0x0800d834
 8005704:	000ffcff 	.word	0x000ffcff
 8005708:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 800570c:	2001      	movs	r0, #1
 800570e:	e7d8      	b.n	80056c2 <UART_SetConfig+0x25e>
 8005710:	2001      	movs	r0, #1
 8005712:	e7d6      	b.n	80056c2 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 8005714:	2001      	movs	r0, #1
 8005716:	e7d4      	b.n	80056c2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8005718:	2001      	movs	r0, #1
 800571a:	e7d2      	b.n	80056c2 <UART_SetConfig+0x25e>
 800571c:	2000      	movs	r0, #0
 800571e:	e7d0      	b.n	80056c2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 8005720:	2001      	movs	r0, #1
 8005722:	e7ce      	b.n	80056c2 <UART_SetConfig+0x25e>
    switch (clocksource)
 8005724:	2001      	movs	r0, #1
 8005726:	e7cc      	b.n	80056c2 <UART_SetConfig+0x25e>
 8005728:	2000      	movs	r0, #0
 800572a:	e7ca      	b.n	80056c2 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 800572c:	2001      	movs	r0, #1
 800572e:	e7c8      	b.n	80056c2 <UART_SetConfig+0x25e>

08005730 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005730:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005732:	f013 0f01 	tst.w	r3, #1
 8005736:	d006      	beq.n	8005746 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005738:	6802      	ldr	r2, [r0, #0]
 800573a:	6853      	ldr	r3, [r2, #4]
 800573c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005740:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8005742:	430b      	orrs	r3, r1
 8005744:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005746:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005748:	f013 0f02 	tst.w	r3, #2
 800574c:	d006      	beq.n	800575c <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800574e:	6802      	ldr	r2, [r0, #0]
 8005750:	6853      	ldr	r3, [r2, #4]
 8005752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005756:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8005758:	430b      	orrs	r3, r1
 800575a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800575c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800575e:	f013 0f04 	tst.w	r3, #4
 8005762:	d006      	beq.n	8005772 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005764:	6802      	ldr	r2, [r0, #0]
 8005766:	6853      	ldr	r3, [r2, #4]
 8005768:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800576c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800576e:	430b      	orrs	r3, r1
 8005770:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005772:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005774:	f013 0f08 	tst.w	r3, #8
 8005778:	d006      	beq.n	8005788 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800577a:	6802      	ldr	r2, [r0, #0]
 800577c:	6853      	ldr	r3, [r2, #4]
 800577e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005782:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8005784:	430b      	orrs	r3, r1
 8005786:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005788:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800578a:	f013 0f10 	tst.w	r3, #16
 800578e:	d006      	beq.n	800579e <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005790:	6802      	ldr	r2, [r0, #0]
 8005792:	6893      	ldr	r3, [r2, #8]
 8005794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005798:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800579a:	430b      	orrs	r3, r1
 800579c:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800579e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80057a0:	f013 0f20 	tst.w	r3, #32
 80057a4:	d006      	beq.n	80057b4 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80057a6:	6802      	ldr	r2, [r0, #0]
 80057a8:	6893      	ldr	r3, [r2, #8]
 80057aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80057ae:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80057b0:	430b      	orrs	r3, r1
 80057b2:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80057b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80057b6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80057ba:	d00a      	beq.n	80057d2 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80057bc:	6802      	ldr	r2, [r0, #0]
 80057be:	6853      	ldr	r3, [r2, #4]
 80057c0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80057c4:	6c41      	ldr	r1, [r0, #68]	; 0x44
 80057c6:	430b      	orrs	r3, r1
 80057c8:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80057ca:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80057cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057d0:	d00b      	beq.n	80057ea <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80057d2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80057d4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80057d8:	d006      	beq.n	80057e8 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057da:	6802      	ldr	r2, [r0, #0]
 80057dc:	6853      	ldr	r3, [r2, #4]
 80057de:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80057e2:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80057e4:	430b      	orrs	r3, r1
 80057e6:	6053      	str	r3, [r2, #4]
}
 80057e8:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80057ea:	6802      	ldr	r2, [r0, #0]
 80057ec:	6853      	ldr	r3, [r2, #4]
 80057ee:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80057f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80057f4:	430b      	orrs	r3, r1
 80057f6:	6053      	str	r3, [r2, #4]
 80057f8:	e7eb      	b.n	80057d2 <UART_AdvFeatureConfig+0xa2>

080057fa <UART_WaitOnFlagUntilTimeout>:
{
 80057fa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057fe:	4605      	mov	r5, r0
 8005800:	460f      	mov	r7, r1
 8005802:	4616      	mov	r6, r2
 8005804:	4699      	mov	r9, r3
 8005806:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800580a:	682b      	ldr	r3, [r5, #0]
 800580c:	69dc      	ldr	r4, [r3, #28]
 800580e:	ea37 0404 	bics.w	r4, r7, r4
 8005812:	bf0c      	ite	eq
 8005814:	2401      	moveq	r4, #1
 8005816:	2400      	movne	r4, #0
 8005818:	42b4      	cmp	r4, r6
 800581a:	d157      	bne.n	80058cc <UART_WaitOnFlagUntilTimeout+0xd2>
    if (Timeout != HAL_MAX_DELAY)
 800581c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8005820:	d0f3      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005822:	f7fb fe9f 	bl	8001564 <HAL_GetTick>
 8005826:	eba0 0009 	sub.w	r0, r0, r9
 800582a:	4540      	cmp	r0, r8
 800582c:	d82f      	bhi.n	800588e <UART_WaitOnFlagUntilTimeout+0x94>
 800582e:	f1b8 0f00 	cmp.w	r8, #0
 8005832:	d02c      	beq.n	800588e <UART_WaitOnFlagUntilTimeout+0x94>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005834:	682b      	ldr	r3, [r5, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	f012 0f04 	tst.w	r2, #4
 800583c:	d0e5      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800583e:	69da      	ldr	r2, [r3, #28]
 8005840:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8005844:	d0e1      	beq.n	800580a <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005846:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800584a:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800584c:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	e852 3f00 	ldrex	r3, [r2]
 8005852:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	e842 3100 	strex	r1, r3, [r2]
 800585a:	2900      	cmp	r1, #0
 800585c:	d1f6      	bne.n	800584c <UART_WaitOnFlagUntilTimeout+0x52>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	f102 0308 	add.w	r3, r2, #8
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	3208      	adds	r2, #8
 800586e:	e842 3100 	strex	r1, r3, [r2]
 8005872:	2900      	cmp	r1, #0
 8005874:	d1f3      	bne.n	800585e <UART_WaitOnFlagUntilTimeout+0x64>
          huart->gState = HAL_UART_STATE_READY;
 8005876:	2320      	movs	r3, #32
 8005878:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 800587c:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005880:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8005884:	2300      	movs	r3, #0
 8005886:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 800588a:	2003      	movs	r0, #3
 800588c:	e01f      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xd4>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800588e:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005890:	e852 3f00 	ldrex	r3, [r2]
 8005894:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	e842 3100 	strex	r1, r3, [r2]
 800589c:	2900      	cmp	r1, #0
 800589e:	d1f6      	bne.n	800588e <UART_WaitOnFlagUntilTimeout+0x94>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a0:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a2:	f102 0308 	add.w	r3, r2, #8
 80058a6:	e853 3f00 	ldrex	r3, [r3]
 80058aa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ae:	3208      	adds	r2, #8
 80058b0:	e842 3100 	strex	r1, r3, [r2]
 80058b4:	2900      	cmp	r1, #0
 80058b6:	d1f3      	bne.n	80058a0 <UART_WaitOnFlagUntilTimeout+0xa6>
        huart->gState = HAL_UART_STATE_READY;
 80058b8:	2320      	movs	r3, #32
 80058ba:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80058be:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 80058c2:	2300      	movs	r3, #0
 80058c4:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 80058c8:	2003      	movs	r0, #3
 80058ca:	e000      	b.n	80058ce <UART_WaitOnFlagUntilTimeout+0xd4>
  return HAL_OK;
 80058cc:	2000      	movs	r0, #0
}
 80058ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080058d2 <UART_CheckIdleState>:
{
 80058d2:	b530      	push	{r4, r5, lr}
 80058d4:	b083      	sub	sp, #12
 80058d6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d8:	2300      	movs	r3, #0
 80058da:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 80058de:	f7fb fe41 	bl	8001564 <HAL_GetTick>
 80058e2:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80058e4:	6822      	ldr	r2, [r4, #0]
 80058e6:	6812      	ldr	r2, [r2, #0]
 80058e8:	f012 0f08 	tst.w	r2, #8
 80058ec:	d110      	bne.n	8005910 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80058ee:	6823      	ldr	r3, [r4, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f013 0f04 	tst.w	r3, #4
 80058f6:	d119      	bne.n	800592c <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 80058f8:	2320      	movs	r3, #32
 80058fa:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80058fe:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005902:	2000      	movs	r0, #0
 8005904:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005906:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8005908:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 800590c:	b003      	add	sp, #12
 800590e:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005910:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	4603      	mov	r3, r0
 8005918:	2200      	movs	r2, #0
 800591a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800591e:	4620      	mov	r0, r4
 8005920:	f7ff ff6b 	bl	80057fa <UART_WaitOnFlagUntilTimeout>
 8005924:	2800      	cmp	r0, #0
 8005926:	d0e2      	beq.n	80058ee <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8005928:	2003      	movs	r0, #3
 800592a:	e7ef      	b.n	800590c <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800592c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	462b      	mov	r3, r5
 8005934:	2200      	movs	r2, #0
 8005936:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800593a:	4620      	mov	r0, r4
 800593c:	f7ff ff5d 	bl	80057fa <UART_WaitOnFlagUntilTimeout>
 8005940:	2800      	cmp	r0, #0
 8005942:	d0d9      	beq.n	80058f8 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8005944:	2003      	movs	r0, #3
 8005946:	e7e1      	b.n	800590c <UART_CheckIdleState+0x3a>

08005948 <HAL_UART_Init>:
  if (huart == NULL)
 8005948:	b378      	cbz	r0, 80059aa <HAL_UART_Init+0x62>
{
 800594a:	b510      	push	{r4, lr}
 800594c:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800594e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8005952:	b30b      	cbz	r3, 8005998 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8005954:	2324      	movs	r3, #36	; 0x24
 8005956:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800595a:	6822      	ldr	r2, [r4, #0]
 800595c:	6813      	ldr	r3, [r2, #0]
 800595e:	f023 0301 	bic.w	r3, r3, #1
 8005962:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005964:	4620      	mov	r0, r4
 8005966:	f7ff fd7d 	bl	8005464 <UART_SetConfig>
 800596a:	2801      	cmp	r0, #1
 800596c:	d013      	beq.n	8005996 <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800596e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005970:	b9bb      	cbnz	r3, 80059a2 <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005972:	6822      	ldr	r2, [r4, #0]
 8005974:	6853      	ldr	r3, [r2, #4]
 8005976:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800597a:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800597c:	6822      	ldr	r2, [r4, #0]
 800597e:	6893      	ldr	r3, [r2, #8]
 8005980:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8005984:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8005986:	6822      	ldr	r2, [r4, #0]
 8005988:	6813      	ldr	r3, [r2, #0]
 800598a:	f043 0301 	orr.w	r3, r3, #1
 800598e:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8005990:	4620      	mov	r0, r4
 8005992:	f7ff ff9e 	bl	80058d2 <UART_CheckIdleState>
}
 8005996:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8005998:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 800599c:	f7fc f80a 	bl	80019b4 <HAL_UART_MspInit>
 80059a0:	e7d8      	b.n	8005954 <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 80059a2:	4620      	mov	r0, r4
 80059a4:	f7ff fec4 	bl	8005730 <UART_AdvFeatureConfig>
 80059a8:	e7e3      	b.n	8005972 <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 80059aa:	2001      	movs	r0, #1
}
 80059ac:	4770      	bx	lr
	...

080059b0 <UART_Start_Receive_IT>:
{
 80059b0:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 80059b2:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 80059b4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 80059b8:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 80059bc:	2300      	movs	r3, #0
 80059be:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 80059c0:	6883      	ldr	r3, [r0, #8]
 80059c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059c6:	d006      	beq.n	80059d6 <UART_Start_Receive_IT+0x26>
 80059c8:	b9a3      	cbnz	r3, 80059f4 <UART_Start_Receive_IT+0x44>
 80059ca:	6903      	ldr	r3, [r0, #16]
 80059cc:	b973      	cbnz	r3, 80059ec <UART_Start_Receive_IT+0x3c>
 80059ce:	23ff      	movs	r3, #255	; 0xff
 80059d0:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80059d4:	e014      	b.n	8005a00 <UART_Start_Receive_IT+0x50>
 80059d6:	6903      	ldr	r3, [r0, #16]
 80059d8:	b923      	cbnz	r3, 80059e4 <UART_Start_Receive_IT+0x34>
 80059da:	f240 13ff 	movw	r3, #511	; 0x1ff
 80059de:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80059e2:	e00d      	b.n	8005a00 <UART_Start_Receive_IT+0x50>
 80059e4:	23ff      	movs	r3, #255	; 0xff
 80059e6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80059ea:	e009      	b.n	8005a00 <UART_Start_Receive_IT+0x50>
 80059ec:	237f      	movs	r3, #127	; 0x7f
 80059ee:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 80059f2:	e005      	b.n	8005a00 <UART_Start_Receive_IT+0x50>
 80059f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059f8:	d02d      	beq.n	8005a56 <UART_Start_Receive_IT+0xa6>
 80059fa:	2300      	movs	r3, #0
 80059fc:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a00:	2300      	movs	r3, #0
 8005a02:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a06:	2322      	movs	r3, #34	; 0x22
 8005a08:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0c:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0e:	f101 0308 	add.w	r3, r1, #8
 8005a12:	e853 3f00 	ldrex	r3, [r3]
 8005a16:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a1a:	3108      	adds	r1, #8
 8005a1c:	e841 3400 	strex	r4, r3, [r1]
 8005a20:	2c00      	cmp	r4, #0
 8005a22:	d1f3      	bne.n	8005a0c <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005a24:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005a26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a2a:	d01e      	beq.n	8005a6a <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a2c:	6883      	ldr	r3, [r0, #8]
 8005a2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a32:	d042      	beq.n	8005aba <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8005a34:	4b29      	ldr	r3, [pc, #164]	; (8005adc <UART_Start_Receive_IT+0x12c>)
 8005a36:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a38:	6903      	ldr	r3, [r0, #16]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d043      	beq.n	8005ac6 <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005a3e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	e852 3f00 	ldrex	r3, [r2]
 8005a44:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	e842 3100 	strex	r1, r3, [r2]
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d1f6      	bne.n	8005a3e <UART_Start_Receive_IT+0x8e>
}
 8005a50:	2000      	movs	r0, #0
 8005a52:	bc10      	pop	{r4}
 8005a54:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8005a56:	6903      	ldr	r3, [r0, #16]
 8005a58:	b91b      	cbnz	r3, 8005a62 <UART_Start_Receive_IT+0xb2>
 8005a5a:	237f      	movs	r3, #127	; 0x7f
 8005a5c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005a60:	e7ce      	b.n	8005a00 <UART_Start_Receive_IT+0x50>
 8005a62:	233f      	movs	r3, #63	; 0x3f
 8005a64:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8005a68:	e7ca      	b.n	8005a00 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005a6a:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d8dc      	bhi.n	8005a2c <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a72:	6883      	ldr	r3, [r0, #8]
 8005a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a78:	d019      	beq.n	8005aae <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005a7a:	4b19      	ldr	r3, [pc, #100]	; (8005ae0 <UART_Start_Receive_IT+0x130>)
 8005a7c:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005a7e:	6903      	ldr	r3, [r0, #16]
 8005a80:	b143      	cbz	r3, 8005a94 <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a82:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	e852 3f00 	ldrex	r3, [r2]
 8005a88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	e842 3100 	strex	r1, r3, [r2]
 8005a90:	2900      	cmp	r1, #0
 8005a92:	d1f6      	bne.n	8005a82 <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005a94:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	f102 0308 	add.w	r3, r2, #8
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa2:	3208      	adds	r2, #8
 8005aa4:	e842 3100 	strex	r1, r3, [r2]
 8005aa8:	2900      	cmp	r1, #0
 8005aaa:	d1f3      	bne.n	8005a94 <UART_Start_Receive_IT+0xe4>
 8005aac:	e7d0      	b.n	8005a50 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aae:	6903      	ldr	r3, [r0, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e2      	bne.n	8005a7a <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005ab4:	4b0b      	ldr	r3, [pc, #44]	; (8005ae4 <UART_Start_Receive_IT+0x134>)
 8005ab6:	6743      	str	r3, [r0, #116]	; 0x74
 8005ab8:	e7e1      	b.n	8005a7e <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005aba:	6903      	ldr	r3, [r0, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1b9      	bne.n	8005a34 <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8005ac0:	4b09      	ldr	r3, [pc, #36]	; (8005ae8 <UART_Start_Receive_IT+0x138>)
 8005ac2:	6743      	str	r3, [r0, #116]	; 0x74
 8005ac4:	e7b8      	b.n	8005a38 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ac6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac8:	e852 3f00 	ldrex	r3, [r2]
 8005acc:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	e842 3100 	strex	r1, r3, [r2]
 8005ad4:	2900      	cmp	r1, #0
 8005ad6:	d1f6      	bne.n	8005ac6 <UART_Start_Receive_IT+0x116>
 8005ad8:	e7ba      	b.n	8005a50 <UART_Start_Receive_IT+0xa0>
 8005ada:	bf00      	nop
 8005adc:	08004f1d 	.word	0x08004f1d
 8005ae0:	080050d1 	.word	0x080050d1
 8005ae4:	0800529d 	.word	0x0800529d
 8005ae8:	08004ff9 	.word	0x08004ff9

08005aec <HAL_UART_Receive_IT>:
{
 8005aec:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005aee:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8005af2:	2b20      	cmp	r3, #32
 8005af4:	d117      	bne.n	8005b26 <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8005af6:	b1c1      	cbz	r1, 8005b2a <HAL_UART_Receive_IT+0x3e>
 8005af8:	b1ca      	cbz	r2, 8005b2e <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	2300      	movs	r3, #0
 8005afc:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005afe:	6803      	ldr	r3, [r0, #0]
 8005b00:	4c0c      	ldr	r4, [pc, #48]	; (8005b34 <HAL_UART_Receive_IT+0x48>)
 8005b02:	42a3      	cmp	r3, r4
 8005b04:	d00c      	beq.n	8005b20 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005b0c:	d008      	beq.n	8005b20 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005b0e:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	e854 3f00 	ldrex	r3, [r4]
 8005b14:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	e844 3500 	strex	r5, r3, [r4]
 8005b1c:	2d00      	cmp	r5, #0
 8005b1e:	d1f6      	bne.n	8005b0e <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8005b20:	f7ff ff46 	bl	80059b0 <UART_Start_Receive_IT>
 8005b24:	e000      	b.n	8005b28 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8005b26:	2002      	movs	r0, #2
}
 8005b28:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	e7fc      	b.n	8005b28 <HAL_UART_Receive_IT+0x3c>
 8005b2e:	2001      	movs	r0, #1
 8005b30:	e7fa      	b.n	8005b28 <HAL_UART_Receive_IT+0x3c>
 8005b32:	bf00      	nop
 8005b34:	40008000 	.word	0x40008000

08005b38 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8005b38:	b082      	sub	sp, #8
 8005b3a:	ab02      	add	r3, sp, #8
 8005b3c:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8005b40:	6802      	ldr	r2, [r0, #0]
 8005b42:	6853      	ldr	r3, [r2, #4]
 8005b44:	f023 0310 	bic.w	r3, r3, #16
 8005b48:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005b4c:	430b      	orrs	r3, r1
 8005b4e:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8005b50:	6802      	ldr	r2, [r0, #0]
 8005b52:	6853      	ldr	r3, [r2, #4]
 8005b54:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005b58:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8005b5c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005b60:	6053      	str	r3, [r2, #4]
}
 8005b62:	b002      	add	sp, #8
 8005b64:	4770      	bx	lr
	...

08005b68 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b68:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8005b6a:	b92b      	cbnz	r3, 8005b78 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b72:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8005b76:	4770      	bx	lr
{
 8005b78:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b7a:	6803      	ldr	r3, [r0, #0]
 8005b7c:	689a      	ldr	r2, [r3, #8]
 8005b7e:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b82:	6899      	ldr	r1, [r3, #8]
 8005b84:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b86:	4d09      	ldr	r5, [pc, #36]	; (8005bac <UARTEx_SetNbDataToProcess+0x44>)
 8005b88:	5c6b      	ldrb	r3, [r5, r1]
 8005b8a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b8c:	4c08      	ldr	r4, [pc, #32]	; (8005bb0 <UARTEx_SetNbDataToProcess+0x48>)
 8005b8e:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b90:	fb93 f3f1 	sdiv	r3, r3, r1
 8005b94:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b98:	5cab      	ldrb	r3, [r5, r2]
 8005b9a:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005b9c:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005b9e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ba2:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8005ba6:	bc30      	pop	{r4, r5}
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	0800d854 	.word	0x0800d854
 8005bb0:	0800d84c 	.word	0x0800d84c

08005bb4 <HAL_UARTEx_WakeupCallback>:
}
 8005bb4:	4770      	bx	lr

08005bb6 <HAL_UARTEx_RxFifoFullCallback>:
}
 8005bb6:	4770      	bx	lr

08005bb8 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8005bb8:	4770      	bx	lr

08005bba <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8005bba:	b510      	push	{r4, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	ab04      	add	r3, sp, #16
 8005bc0:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8005bc4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d035      	beq.n	8005c38 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8005bcc:	4604      	mov	r4, r0
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005bd4:	2324      	movs	r3, #36	; 0x24
 8005bd6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8005bda:	6802      	ldr	r2, [r0, #0]
 8005bdc:	6813      	ldr	r3, [r2, #0]
 8005bde:	f023 0301 	bic.w	r3, r3, #1
 8005be2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8005be4:	6801      	ldr	r1, [r0, #0]
 8005be6:	688b      	ldr	r3, [r1, #8]
 8005be8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005bec:	9a02      	ldr	r2, [sp, #8]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8005bf2:	b1aa      	cbz	r2, 8005c20 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	6813      	ldr	r3, [r2, #0]
 8005bf8:	f043 0301 	orr.w	r3, r3, #1
 8005bfc:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8005bfe:	f7fb fcb1 	bl	8001564 <HAL_GetTick>
 8005c02:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005c04:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8005c08:	9200      	str	r2, [sp, #0]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005c10:	4620      	mov	r0, r4
 8005c12:	f7ff fdf2 	bl	80057fa <UART_WaitOnFlagUntilTimeout>
 8005c16:	b948      	cbnz	r0, 8005c2c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8005c18:	2320      	movs	r3, #32
 8005c1a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8005c1e:	e006      	b.n	8005c2e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8005c20:	ab04      	add	r3, sp, #16
 8005c22:	e913 0006 	ldmdb	r3, {r1, r2}
 8005c26:	f7ff ff87 	bl	8005b38 <UARTEx_Wakeup_AddressConfig>
 8005c2a:	e7e3      	b.n	8005bf4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8005c2c:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8005c2e:	2300      	movs	r3, #0
 8005c30:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8005c34:	b004      	add	sp, #16
 8005c36:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8005c38:	2002      	movs	r0, #2
 8005c3a:	e7fb      	b.n	8005c34 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08005c3c <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8005c3c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d010      	beq.n	8005c66 <HAL_UARTEx_EnableStopMode+0x2a>
 8005c44:	2301      	movs	r3, #1
 8005c46:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8005c4a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	e852 3f00 	ldrex	r3, [r2]
 8005c50:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	e842 3100 	strex	r1, r3, [r2]
 8005c58:	2900      	cmp	r1, #0
 8005c5a:	d1f6      	bne.n	8005c4a <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8005c62:	4618      	mov	r0, r3
 8005c64:	4770      	bx	lr
  __HAL_LOCK(huart);
 8005c66:	2002      	movs	r0, #2
}
 8005c68:	4770      	bx	lr

08005c6a <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8005c6a:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d01d      	beq.n	8005cae <HAL_UARTEx_EnableFifoMode+0x44>
{
 8005c72:	b510      	push	{r4, lr}
 8005c74:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8005c76:	2301      	movs	r3, #1
 8005c78:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005c7c:	2324      	movs	r3, #36	; 0x24
 8005c7e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c82:	6802      	ldr	r2, [r0, #0]
 8005c84:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8005c86:	6811      	ldr	r1, [r2, #0]
 8005c88:	f021 0101 	bic.w	r1, r1, #1
 8005c8c:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005c8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005c92:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005c96:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c98:	6802      	ldr	r2, [r0, #0]
 8005c9a:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8005c9c:	f7ff ff64 	bl	8005b68 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8005ca0:	2320      	movs	r3, #32
 8005ca2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8005cac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8005cae:	2002      	movs	r0, #2
}
 8005cb0:	4770      	bx	lr

08005cb2 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8005cb2:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005cb4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d01d      	beq.n	8005cf8 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8005cbc:	4604      	mov	r4, r0
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005cc4:	2324      	movs	r3, #36	; 0x24
 8005cc6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005cca:	6803      	ldr	r3, [r0, #0]
 8005ccc:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	f022 0201 	bic.w	r2, r2, #1
 8005cd4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005cd6:	6802      	ldr	r2, [r0, #0]
 8005cd8:	6893      	ldr	r3, [r2, #8]
 8005cda:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8005cde:	4319      	orrs	r1, r3
 8005ce0:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005ce2:	f7ff ff41 	bl	8005b68 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ce6:	6823      	ldr	r3, [r4, #0]
 8005ce8:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005cea:	2320      	movs	r3, #32
 8005cec:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8005cf0:	2000      	movs	r0, #0
 8005cf2:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8005cf6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005cf8:	2002      	movs	r0, #2
 8005cfa:	e7fc      	b.n	8005cf6 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08005cfc <HAL_UARTEx_SetRxFifoThreshold>:
{
 8005cfc:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8005cfe:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d01d      	beq.n	8005d42 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8005d06:	4604      	mov	r4, r0
 8005d08:	2301      	movs	r3, #1
 8005d0a:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8005d0e:	2324      	movs	r3, #36	; 0x24
 8005d10:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d14:	6803      	ldr	r3, [r0, #0]
 8005d16:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8005d18:	681a      	ldr	r2, [r3, #0]
 8005d1a:	f022 0201 	bic.w	r2, r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d20:	6802      	ldr	r2, [r0, #0]
 8005d22:	6893      	ldr	r3, [r2, #8]
 8005d24:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005d28:	4319      	orrs	r1, r3
 8005d2a:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8005d2c:	f7ff ff1c 	bl	8005b68 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d30:	6823      	ldr	r3, [r4, #0]
 8005d32:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8005d34:	2320      	movs	r3, #32
 8005d36:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8005d3a:	2000      	movs	r0, #0
 8005d3c:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8005d40:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8005d42:	2002      	movs	r0, #2
 8005d44:	e7fc      	b.n	8005d40 <HAL_UARTEx_SetRxFifoThreshold+0x44>

08005d46 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8005d46:	2001      	movs	r0, #1
 8005d48:	4770      	bx	lr
	...

08005d4c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8005d4c:	280a      	cmp	r0, #10
 8005d4e:	d807      	bhi.n	8005d60 <RadioGetLoRaBandwidthInHz+0x14>
 8005d50:	e8df f000 	tbb	[pc, r0]
 8005d54:	17110b20 	.word	0x17110b20
 8005d58:	061e1c1a 	.word	0x061e1c1a
 8005d5c:	0e08      	.short	0x0e08
 8005d5e:	14          	.byte	0x14
 8005d5f:	00          	.byte	0x00
 8005d60:	2000      	movs	r0, #0
 8005d62:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 8005d64:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 8005d68:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8005d6a:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 8005d6e:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 8005d70:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 8005d74:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 8005d76:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 8005d7a:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 8005d7c:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 8005d80:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 8005d82:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 8005d86:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 8005d88:	4804      	ldr	r0, [pc, #16]	; (8005d9c <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 8005d8a:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 8005d8c:	4804      	ldr	r0, [pc, #16]	; (8005da0 <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 8005d8e:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 8005d90:	4804      	ldr	r0, [pc, #16]	; (8005da4 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 8005d92:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 8005d94:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	0001e848 	.word	0x0001e848
 8005da0:	0003d090 	.word	0x0003d090
 8005da4:	0007a120 	.word	0x0007a120

08005da8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005da8:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 8005dac:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005dae:	b953      	cbnz	r3, 8005dc6 <RadioGetGfskTimeOnAirNumerator+0x1e>
 8005db0:	2308      	movs	r3, #8
    return ( preambleLen << 3 ) +
 8005db2:	441a      	add	r2, r3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005db4:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005db6:	b141      	cbz	r1, 8005dca <RadioGetGfskTimeOnAirNumerator+0x22>
 8005db8:	2302      	movs	r3, #2
 8005dba:	f89d 0000 	ldrb.w	r0, [sp]
 8005dbe:	4418      	add	r0, r3
}
 8005dc0:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8005dc4:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	e7f3      	b.n	8005db2 <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8005dca:	2300      	movs	r3, #0
 8005dcc:	e7f5      	b.n	8005dba <RadioGetGfskTimeOnAirNumerator+0x12>

08005dce <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 8005dce:	b570      	push	{r4, r5, r6, lr}
 8005dd0:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8005dd4:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8005dd8:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8005dda:	f1a1 0c05 	sub.w	ip, r1, #5
 8005dde:	f1bc 0f01 	cmp.w	ip, #1
 8005de2:	d931      	bls.n	8005e48 <RadioGetLoRaTimeOnAirNumerator+0x7a>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8005de4:	b918      	cbnz	r0, 8005dee <RadioGetLoRaTimeOnAirNumerator+0x20>
 8005de6:	f1a1 060b 	sub.w	r6, r1, #11
 8005dea:	2e01      	cmp	r6, #1
 8005dec:	d934      	bls.n	8005e58 <RadioGetLoRaTimeOnAirNumerator+0x8a>
 8005dee:	2801      	cmp	r0, #1
 8005df0:	d02e      	beq.n	8005e50 <RadioGetLoRaTimeOnAirNumerator+0x82>
    bool    lowDatareOptimize = false;
 8005df2:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005df4:	f89d c014 	ldrb.w	ip, [sp, #20]
 8005df8:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8005dfc:	b385      	cbz	r5, 8005e60 <RadioGetLoRaTimeOnAirNumerator+0x92>
 8005dfe:	2010      	movs	r0, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8005e00:	4484      	add	ip, r0
                            ( 4 * datarate ) +
 8005e02:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8005e04:	ebac 0c81 	sub.w	ip, ip, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8005e08:	b364      	cbz	r4, 8005e64 <RadioGetLoRaTimeOnAirNumerator+0x96>
 8005e0a:	f04f 0e00 	mov.w	lr, #0
                            ( 4 * datarate ) +
 8005e0e:	44f4      	add	ip, lr

    if( datarate <= 6 )
 8005e10:	2906      	cmp	r1, #6
 8005e12:	d904      	bls.n	8005e1e <RadioGetLoRaTimeOnAirNumerator+0x50>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8005e14:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8005e18:	b10e      	cbz	r6, 8005e1e <RadioGetLoRaTimeOnAirNumerator+0x50>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8005e1a:	1e88      	subs	r0, r1, #2
 8005e1c:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 8005e1e:	f1bc 0f00 	cmp.w	ip, #0
 8005e22:	db22      	blt.n	8005e6a <RadioGetLoRaTimeOnAirNumerator+0x9c>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8005e24:	4484      	add	ip, r0
 8005e26:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005e2a:	fb9c fcf0 	sdiv	ip, ip, r0
 8005e2e:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8005e32:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8005e36:	2906      	cmp	r1, #6
 8005e38:	d801      	bhi.n	8005e3e <RadioGetLoRaTimeOnAirNumerator+0x70>
    {
        intermediate += 2;
 8005e3a:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8005e3e:	0080      	lsls	r0, r0, #2
 8005e40:	3001      	adds	r0, #1
 8005e42:	3902      	subs	r1, #2
}
 8005e44:	4088      	lsls	r0, r1
 8005e46:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8005e48:	2b0b      	cmp	r3, #11
 8005e4a:	d8cb      	bhi.n	8005de4 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 8005e4c:	230c      	movs	r3, #12
 8005e4e:	e7c9      	b.n	8005de4 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8005e50:	290c      	cmp	r1, #12
 8005e52:	d003      	beq.n	8005e5c <RadioGetLoRaTimeOnAirNumerator+0x8e>
    bool    lowDatareOptimize = false;
 8005e54:	2600      	movs	r6, #0
 8005e56:	e7cd      	b.n	8005df4 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8005e58:	2601      	movs	r6, #1
 8005e5a:	e7cb      	b.n	8005df4 <RadioGetLoRaTimeOnAirNumerator+0x26>
 8005e5c:	2601      	movs	r6, #1
 8005e5e:	e7c9      	b.n	8005df4 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 8005e60:	2000      	movs	r0, #0
 8005e62:	e7cd      	b.n	8005e00 <RadioGetLoRaTimeOnAirNumerator+0x32>
                            ( fixLen ? 0 : 20 );
 8005e64:	f04f 0e14 	mov.w	lr, #20
 8005e68:	e7d1      	b.n	8005e0e <RadioGetLoRaTimeOnAirNumerator+0x40>
        ceilNumerator = 0;
 8005e6a:	f04f 0c00 	mov.w	ip, #0
 8005e6e:	e7d9      	b.n	8005e24 <RadioGetLoRaTimeOnAirNumerator+0x56>

08005e70 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8005e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e72:	b085      	sub	sp, #20
 8005e74:	460e      	mov	r6, r1
 8005e76:	4615      	mov	r5, r2
 8005e78:	4619      	mov	r1, r3
 8005e7a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8005e7e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8005e82:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8005e86:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 8005e8a:	b148      	cbz	r0, 8005ea0 <RadioTimeOnAir+0x30>
 8005e8c:	2801      	cmp	r0, #1
 8005e8e:	d012      	beq.n	8005eb6 <RadioTimeOnAir+0x46>
 8005e90:	2501      	movs	r5, #1
 8005e92:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 8005e94:	442c      	add	r4, r5
 8005e96:	1e60      	subs	r0, r4, #1
}
 8005e98:	fbb0 f0f5 	udiv	r0, r0, r5
 8005e9c:	b005      	add	sp, #20
 8005e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8005ea0:	f8cd c004 	str.w	ip, [sp, #4]
 8005ea4:	9700      	str	r7, [sp, #0]
 8005ea6:	4628      	mov	r0, r5
 8005ea8:	f7ff ff7e 	bl	8005da8 <RadioGetGfskTimeOnAirNumerator>
 8005eac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eb0:	fb03 f400 	mul.w	r4, r3, r0
        break;
 8005eb4:	e7ee      	b.n	8005e94 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8005eb6:	f8cd c008 	str.w	ip, [sp, #8]
 8005eba:	9701      	str	r7, [sp, #4]
 8005ebc:	9300      	str	r3, [sp, #0]
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	460a      	mov	r2, r1
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	4630      	mov	r0, r6
 8005ec6:	f7ff ff82 	bl	8005dce <RadioGetLoRaTimeOnAirNumerator>
 8005eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005ece:	fb03 f400 	mul.w	r4, r3, r0
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8005ed2:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <RadioTimeOnAir+0x70>)
 8005ed4:	5d98      	ldrb	r0, [r3, r6]
 8005ed6:	f7ff ff39 	bl	8005d4c <RadioGetLoRaBandwidthInHz>
 8005eda:	4605      	mov	r5, r0
        break;
 8005edc:	e7da      	b.n	8005e94 <RadioTimeOnAir+0x24>
 8005ede:	bf00      	nop
 8005ee0:	0800d8c8 	.word	0x0800d8c8

08005ee4 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8005ee4:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8005ee6:	4b05      	ldr	r3, [pc, #20]	; (8005efc <RadioOnTxTimeoutProcess+0x18>)
 8005ee8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8005eee:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <RadioOnTxTimeoutProcess+0x1c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	b113      	cbz	r3, 8005efa <RadioOnTxTimeoutProcess+0x16>
 8005ef4:	685b      	ldr	r3, [r3, #4]
 8005ef6:	b103      	cbz	r3, 8005efa <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8005ef8:	4798      	blx	r3
    }
}
 8005efa:	bd08      	pop	{r3, pc}
 8005efc:	48000400 	.word	0x48000400
 8005f00:	200005a8 	.word	0x200005a8

08005f04 <RadioOnTxTimeoutIrq>:
{
 8005f04:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8005f06:	f7ff ffed 	bl	8005ee4 <RadioOnTxTimeoutProcess>
}
 8005f0a:	bd08      	pop	{r3, pc}

08005f0c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8005f0c:	b508      	push	{r3, lr}
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <RadioOnRxTimeoutProcess+0x18>)
 8005f10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005f14:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8005f16:	4b04      	ldr	r3, [pc, #16]	; (8005f28 <RadioOnRxTimeoutProcess+0x1c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	b113      	cbz	r3, 8005f22 <RadioOnRxTimeoutProcess+0x16>
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	b103      	cbz	r3, 8005f22 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8005f20:	4798      	blx	r3
    }
}
 8005f22:	bd08      	pop	{r3, pc}
 8005f24:	48000400 	.word	0x48000400
 8005f28:	200005a8 	.word	0x200005a8

08005f2c <RadioOnRxTimeoutIrq>:
{
 8005f2c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 8005f2e:	f7ff ffed 	bl	8005f0c <RadioOnRxTimeoutProcess>
}
 8005f32:	bd08      	pop	{r3, pc}

08005f34 <payload_integration>:
    SUBGRF_SetTxContinuousWave( );
}

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 8005f34:	b570      	push	{r4, r5, r6, lr}
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;

    for( i = 0; i < size; i++ )
 8005f36:	2300      	movs	r3, #0
 8005f38:	e005      	b.n	8005f46 <payload_integration+0x12>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 8005f3a:	5ccc      	ldrb	r4, [r1, r3]
 8005f3c:	43e4      	mvns	r4, r4
 8005f3e:	54cc      	strb	r4, [r1, r3]
        /* init outBuffer */
        outBuffer[i] = 0;
 8005f40:	2400      	movs	r4, #0
 8005f42:	54c4      	strb	r4, [r0, r3]
    for( i = 0; i < size; i++ )
 8005f44:	3301      	adds	r3, #1
 8005f46:	429a      	cmp	r2, r3
 8005f48:	dcf7      	bgt.n	8005f3a <payload_integration+0x6>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 8005f4a:	2300      	movs	r3, #0
    uint8_t prevInt = 0;
 8005f4c:	461c      	mov	r4, r3
 8005f4e:	e011      	b.n	8005f74 <payload_integration+0x40>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
        index_byte = i / 8;
 8005f50:	f103 0c07 	add.w	ip, r3, #7
 8005f54:	e022      	b.n	8005f9c <payload_integration+0x68>
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
        index_byte_out = ( i + 1 ) / 8;
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8005f56:	b2ed      	uxtb	r5, r5
 8005f58:	5d4d      	ldrb	r5, [r1, r5]
 8005f5a:	fa45 f50e 	asr.w	r5, r5, lr
 8005f5e:	f005 0501 	and.w	r5, r5, #1
        /* integration */
        prevInt ^= currBit;
 8005f62:	406c      	eors	r4, r5
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8005f64:	f3c6 05c7 	ubfx	r5, r6, #3, #8
 8005f68:	fa04 fc0c 	lsl.w	ip, r4, ip
 8005f6c:	5d46      	ldrb	r6, [r0, r5]
 8005f6e:	ea46 060c 	orr.w	r6, r6, ip
 8005f72:	5546      	strb	r6, [r0, r5]
    for( i = 0; i < ( size * 8 ); i++ )
 8005f74:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 8005f78:	da26      	bge.n	8005fc8 <payload_integration+0x94>
        index_bit = 7 - ( i % 8 );
 8005f7a:	425d      	negs	r5, r3
 8005f7c:	f003 0c07 	and.w	ip, r3, #7
 8005f80:	f005 0507 	and.w	r5, r5, #7
 8005f84:	bf58      	it	pl
 8005f86:	f1c5 0c00 	rsbpl	ip, r5, #0
 8005f8a:	fa5f fe8c 	uxtb.w	lr, ip
 8005f8e:	f1ce 0e07 	rsb	lr, lr, #7
 8005f92:	fa5f fe8e 	uxtb.w	lr, lr
        index_byte = i / 8;
 8005f96:	469c      	mov	ip, r3
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	dbd9      	blt.n	8005f50 <payload_integration+0x1c>
 8005f9c:	ea4f 05ec 	mov.w	r5, ip, asr #3
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8005fa0:	3301      	adds	r3, #1
 8005fa2:	425e      	negs	r6, r3
 8005fa4:	f003 0c07 	and.w	ip, r3, #7
 8005fa8:	f006 0607 	and.w	r6, r6, #7
 8005fac:	bf58      	it	pl
 8005fae:	f1c6 0c00 	rsbpl	ip, r6, #0
 8005fb2:	fa5f fc8c 	uxtb.w	ip, ip
 8005fb6:	f1cc 0c07 	rsb	ip, ip, #7
 8005fba:	fa5f fc8c 	uxtb.w	ip, ip
        index_byte_out = ( i + 1 ) / 8;
 8005fbe:	461e      	mov	r6, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	dac8      	bge.n	8005f56 <payload_integration+0x22>
 8005fc4:	1dde      	adds	r6, r3, #7
 8005fc6:	e7c6      	b.n	8005f56 <payload_integration+0x22>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8005fc8:	01a3      	lsls	r3, r4, #6
 8005fca:	ea43 13c4 	orr.w	r3, r3, r4, lsl #7
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	b91c      	cbnz	r4, 8005fda <payload_integration+0xa6>
 8005fd2:	2120      	movs	r1, #32
 8005fd4:	430b      	orrs	r3, r1
 8005fd6:	5483      	strb	r3, [r0, r2]
}
 8005fd8:	bd70      	pop	{r4, r5, r6, pc}
    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8005fda:	2100      	movs	r1, #0
 8005fdc:	e7fa      	b.n	8005fd4 <payload_integration+0xa0>

08005fde <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8005fde:	2001      	movs	r0, #1
 8005fe0:	4770      	bx	lr

08005fe2 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8005fe2:	2001      	movs	r0, #1
 8005fe4:	4770      	bx	lr
	...

08005fe8 <RadioSetMaxPayloadLength>:
{
 8005fe8:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8005fea:	2801      	cmp	r0, #1
 8005fec:	d004      	beq.n	8005ff8 <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8005fee:	4b0a      	ldr	r3, [pc, #40]	; (8006018 <RadioSetMaxPayloadLength+0x30>)
 8005ff0:	7d5b      	ldrb	r3, [r3, #21]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d008      	beq.n	8006008 <RadioSetMaxPayloadLength+0x20>
}
 8005ff6:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8005ff8:	4b08      	ldr	r3, [pc, #32]	; (800601c <RadioSetMaxPayloadLength+0x34>)
 8005ffa:	7019      	strb	r1, [r3, #0]
 8005ffc:	4806      	ldr	r0, [pc, #24]	; (8006018 <RadioSetMaxPayloadLength+0x30>)
 8005ffe:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006000:	300e      	adds	r0, #14
 8006002:	f001 fe3b 	bl	8007c7c <SUBGRF_SetPacketParams>
 8006006:	e7f6      	b.n	8005ff6 <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8006008:	4b04      	ldr	r3, [pc, #16]	; (800601c <RadioSetMaxPayloadLength+0x34>)
 800600a:	7019      	strb	r1, [r3, #0]
 800600c:	4802      	ldr	r0, [pc, #8]	; (8006018 <RadioSetMaxPayloadLength+0x30>)
 800600e:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006010:	300e      	adds	r0, #14
 8006012:	f001 fe33 	bl	8007c7c <SUBGRF_SetPacketParams>
}
 8006016:	e7ee      	b.n	8005ff6 <RadioSetMaxPayloadLength+0xe>
 8006018:	200005c4 	.word	0x200005c4
 800601c:	2000000c 	.word	0x2000000c

08006020 <RadioRead>:
{
 8006020:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 8006022:	f001 f9c9 	bl	80073b8 <SUBGRF_ReadRegister>
}
 8006026:	bd08      	pop	{r3, pc}

08006028 <RadioWrite>:
{
 8006028:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 800602a:	f001 f9b5 	bl	8007398 <SUBGRF_WriteRegister>
}
 800602e:	bd08      	pop	{r3, pc}

08006030 <RadioTxCw>:
{
 8006030:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8006032:	f001 ff4d 	bl	8007ed0 <SUBGRF_SetRfTxPower>
 8006036:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006038:	210e      	movs	r1, #14
 800603a:	f640 101f 	movw	r0, #2335	; 0x91f
 800603e:	f001 f9ab 	bl	8007398 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8006042:	2101      	movs	r1, #1
 8006044:	4620      	mov	r0, r4
 8006046:	f001 ff2f 	bl	8007ea8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 800604a:	f001 fb75 	bl	8007738 <SUBGRF_SetTxContinuousWave>
}
 800604e:	bd10      	pop	{r4, pc}

08006050 <RadioTxPrbs>:
{
 8006050:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8006052:	2101      	movs	r1, #1
 8006054:	4b07      	ldr	r3, [pc, #28]	; (8006074 <RadioTxPrbs+0x24>)
 8006056:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 800605a:	f001 ff25 	bl	8007ea8 <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 800605e:	212d      	movs	r1, #45	; 0x2d
 8006060:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8006064:	f7ff ffe0 	bl	8006028 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 8006068:	f001 fb6d 	bl	8007746 <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 800606c:	4802      	ldr	r0, [pc, #8]	; (8006078 <RadioTxPrbs+0x28>)
 800606e:	f001 faa3 	bl	80075b8 <SUBGRF_SetTx>
}
 8006072:	bd08      	pop	{r3, pc}
 8006074:	200005c4 	.word	0x200005c4
 8006078:	000fffff 	.word	0x000fffff

0800607c <RadioSetRxDutyCycle>:
{
 800607c:	b570      	push	{r4, r5, r6, lr}
 800607e:	4604      	mov	r4, r0
 8006080:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8006082:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 8006086:	4e09      	ldr	r6, [pc, #36]	; (80060ac <RadioSetRxDutyCycle+0x30>)
 8006088:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800608a:	2300      	movs	r3, #0
 800608c:	461a      	mov	r2, r3
 800608e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006092:	4608      	mov	r0, r1
 8006094:	f001 fc23 	bl	80078de <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8006098:	2100      	movs	r1, #0
 800609a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 800609e:	f001 ff03 	bl	8007ea8 <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 80060a2:	4629      	mov	r1, r5
 80060a4:	4620      	mov	r0, r4
 80060a6:	f001 fb17 	bl	80076d8 <SUBGRF_SetRxDutyCycle>
}
 80060aa:	bd70      	pop	{r4, r5, r6, pc}
 80060ac:	200005c4 	.word	0x200005c4

080060b0 <RadioRxBoosted>:
{
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 80060b4:	f001 ffea 	bl	800808c <RFW_Is_Init>
 80060b8:	2801      	cmp	r0, #1
 80060ba:	d019      	beq.n	80060f0 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80060bc:	2300      	movs	r3, #0
 80060be:	461a      	mov	r2, r3
 80060c0:	f240 2162 	movw	r1, #610	; 0x262
 80060c4:	4608      	mov	r0, r1
 80060c6:	f001 fc0a 	bl	80078de <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 80060ca:	b9a4      	cbnz	r4, 80060f6 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80060cc:	4c11      	ldr	r4, [pc, #68]	; (8006114 <RadioRxBoosted+0x64>)
 80060ce:	2100      	movs	r1, #0
 80060d0:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 80060d2:	4b11      	ldr	r3, [pc, #68]	; (8006118 <RadioRxBoosted+0x68>)
 80060d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80060d8:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80060da:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 80060de:	f001 fee3 	bl	8007ea8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 80060e2:	7863      	ldrb	r3, [r4, #1]
 80060e4:	b183      	cbz	r3, 8006108 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80060e6:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80060ea:	f001 fad7 	bl	800769c <SUBGRF_SetRxBoosted>
}
 80060ee:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 80060f0:	f001 ffd4 	bl	800809c <RFW_ReceiveInit>
 80060f4:	e7e9      	b.n	80060ca <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 80060f6:	4d09      	ldr	r5, [pc, #36]	; (800611c <RadioRxBoosted+0x6c>)
 80060f8:	4621      	mov	r1, r4
 80060fa:	4628      	mov	r0, r5
 80060fc:	f002 fc70 	bl	80089e0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006100:	4628      	mov	r0, r5
 8006102:	f002 fc27 	bl	8008954 <UTIL_TIMER_Start>
 8006106:	e7e1      	b.n	80060cc <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8006108:	4b02      	ldr	r3, [pc, #8]	; (8006114 <RadioRxBoosted+0x64>)
 800610a:	6898      	ldr	r0, [r3, #8]
 800610c:	0180      	lsls	r0, r0, #6
 800610e:	f001 fac5 	bl	800769c <SUBGRF_SetRxBoosted>
}
 8006112:	e7ec      	b.n	80060ee <RadioRxBoosted+0x3e>
 8006114:	200005c4 	.word	0x200005c4
 8006118:	48000400 	.word	0x48000400
 800611c:	200005ac 	.word	0x200005ac

08006120 <RadioStandby>:
{
 8006120:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8006122:	2000      	movs	r0, #0
 8006124:	f001 fa2e 	bl	8007584 <SUBGRF_SetStandby>
}
 8006128:	bd08      	pop	{r3, pc}

0800612a <RadioGetStatus>:
{
 800612a:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 800612c:	f001 f928 	bl	8007380 <SUBGRF_GetOperatingMode>
 8006130:	2805      	cmp	r0, #5
 8006132:	d007      	beq.n	8006144 <RadioGetStatus+0x1a>
 8006134:	2807      	cmp	r0, #7
 8006136:	d007      	beq.n	8006148 <RadioGetStatus+0x1e>
 8006138:	2804      	cmp	r0, #4
 800613a:	d001      	beq.n	8006140 <RadioGetStatus+0x16>
            return RF_IDLE;
 800613c:	2000      	movs	r0, #0
}
 800613e:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 8006140:	2002      	movs	r0, #2
 8006142:	e7fc      	b.n	800613e <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 8006144:	2001      	movs	r0, #1
 8006146:	e7fa      	b.n	800613e <RadioGetStatus+0x14>
            return RF_CAD;
 8006148:	2003      	movs	r0, #3
 800614a:	e7f8      	b.n	800613e <RadioGetStatus+0x14>

0800614c <RadioIrqProcess>:
{
 800614c:	b530      	push	{r4, r5, lr}
 800614e:	b083      	sub	sp, #12
    uint8_t size = 0;
 8006150:	2300      	movs	r3, #0
 8006152:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 8006156:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 8006158:	4ba5      	ldr	r3, [pc, #660]	; (80063f0 <RadioIrqProcess+0x2a4>)
 800615a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800615e:	2b20      	cmp	r3, #32
 8006160:	d829      	bhi.n	80061b6 <RadioIrqProcess+0x6a>
 8006162:	b21a      	sxth	r2, r3
 8006164:	2a00      	cmp	r2, #0
 8006166:	f000 8140 	beq.w	80063ea <RadioIrqProcess+0x29e>
 800616a:	3b01      	subs	r3, #1
 800616c:	2b1f      	cmp	r3, #31
 800616e:	f200 813c 	bhi.w	80063ea <RadioIrqProcess+0x29e>
 8006172:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006176:	0063      	.short	0x0063
 8006178:	013a007f 	.word	0x013a007f
 800617c:	013a00f7 	.word	0x013a00f7
 8006180:	013a013a 	.word	0x013a013a
 8006184:	013a0127 	.word	0x013a0127
 8006188:	013a013a 	.word	0x013a013a
 800618c:	013a013a 	.word	0x013a013a
 8006190:	013a013a 	.word	0x013a013a
 8006194:	013a0134 	.word	0x013a0134
 8006198:	013a013a 	.word	0x013a013a
 800619c:	013a013a 	.word	0x013a013a
 80061a0:	013a013a 	.word	0x013a013a
 80061a4:	013a013a 	.word	0x013a013a
 80061a8:	013a013a 	.word	0x013a013a
 80061ac:	013a013a 	.word	0x013a013a
 80061b0:	013a013a 	.word	0x013a013a
 80061b4:	0155      	.short	0x0155
 80061b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061ba:	f000 80b3 	beq.w	8006324 <RadioIrqProcess+0x1d8>
 80061be:	d928      	bls.n	8006212 <RadioIrqProcess+0xc6>
 80061c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c4:	f040 8111 	bne.w	80063ea <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 80061c8:	4b8a      	ldr	r3, [pc, #552]	; (80063f4 <RadioIrqProcess+0x2a8>)
 80061ca:	2201      	movs	r2, #1
 80061cc:	2100      	movs	r1, #0
 80061ce:	2002      	movs	r0, #2
 80061d0:	f002 f8b6 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 80061d4:	f001 f8d4 	bl	8007380 <SUBGRF_GetOperatingMode>
 80061d8:	2804      	cmp	r0, #4
 80061da:	f000 80b0 	beq.w	800633e <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 80061de:	f001 f8cf 	bl	8007380 <SUBGRF_GetOperatingMode>
 80061e2:	2805      	cmp	r0, #5
 80061e4:	f040 8101 	bne.w	80063ea <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 80061e8:	4b83      	ldr	r3, [pc, #524]	; (80063f8 <RadioIrqProcess+0x2ac>)
 80061ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80061ee:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 80061f0:	4882      	ldr	r0, [pc, #520]	; (80063fc <RadioIrqProcess+0x2b0>)
 80061f2:	f002 fb55 	bl	80088a0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 80061f6:	2000      	movs	r0, #0
 80061f8:	f001 f9c4 	bl	8007584 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 80061fc:	4b80      	ldr	r3, [pc, #512]	; (8006400 <RadioIrqProcess+0x2b4>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f000 80f2 	beq.w	80063ea <RadioIrqProcess+0x29e>
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 80ee 	beq.w	80063ea <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 800620e:	4798      	blx	r3
 8006210:	e0eb      	b.n	80063ea <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 8006212:	2b40      	cmp	r3, #64	; 0x40
 8006214:	f000 811d 	beq.w	8006452 <RadioIrqProcess+0x306>
 8006218:	2b80      	cmp	r3, #128	; 0x80
 800621a:	f040 80e6 	bne.w	80063ea <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 800621e:	2000      	movs	r0, #0
 8006220:	f001 f9b0 	bl	8007584 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8006224:	4b76      	ldr	r3, [pc, #472]	; (8006400 <RadioIrqProcess+0x2b4>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2b00      	cmp	r3, #0
 800622a:	f000 80de 	beq.w	80063ea <RadioIrqProcess+0x29e>
 800622e:	699b      	ldr	r3, [r3, #24]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f000 80da 	beq.w	80063ea <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 8006236:	2000      	movs	r0, #0
 8006238:	4798      	blx	r3
 800623a:	e0d6      	b.n	80063ea <RadioIrqProcess+0x29e>
 800623c:	4b6e      	ldr	r3, [pc, #440]	; (80063f8 <RadioIrqProcess+0x2ac>)
 800623e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006242:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 8006244:	486f      	ldr	r0, [pc, #444]	; (8006404 <RadioIrqProcess+0x2b8>)
 8006246:	f002 fb2b 	bl	80088a0 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 800624a:	2000      	movs	r0, #0
 800624c:	f001 f99a 	bl	8007584 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8006250:	f001 ff1e 	bl	8008090 <RFW_Is_LongPacketModeEnabled>
 8006254:	2801      	cmp	r0, #1
 8006256:	d00a      	beq.n	800626e <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8006258:	4b69      	ldr	r3, [pc, #420]	; (8006400 <RadioIrqProcess+0x2b4>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80c4 	beq.w	80063ea <RadioIrqProcess+0x29e>
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	f000 80c0 	beq.w	80063ea <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 800626a:	4798      	blx	r3
 800626c:	e0bd      	b.n	80063ea <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 800626e:	f001 ff18 	bl	80080a2 <RFW_DeInit_TxLongPacket>
 8006272:	e7f1      	b.n	8006258 <RadioIrqProcess+0x10c>
 8006274:	4b60      	ldr	r3, [pc, #384]	; (80063f8 <RadioIrqProcess+0x2ac>)
 8006276:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800627a:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 800627c:	485f      	ldr	r0, [pc, #380]	; (80063fc <RadioIrqProcess+0x2b0>)
 800627e:	f002 fb0f 	bl	80088a0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8006282:	4b5b      	ldr	r3, [pc, #364]	; (80063f0 <RadioIrqProcess+0x2a4>)
 8006284:	785b      	ldrb	r3, [r3, #1]
 8006286:	b303      	cbz	r3, 80062ca <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8006288:	22ff      	movs	r2, #255	; 0xff
 800628a:	f10d 0107 	add.w	r1, sp, #7
 800628e:	485e      	ldr	r0, [pc, #376]	; (8006408 <RadioIrqProcess+0x2bc>)
 8006290:	f001 fdb4 	bl	8007dfc <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8006294:	485d      	ldr	r0, [pc, #372]	; (800640c <RadioIrqProcess+0x2c0>)
 8006296:	f001 fdcb 	bl	8007e30 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 800629a:	4b59      	ldr	r3, [pc, #356]	; (8006400 <RadioIrqProcess+0x2b4>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 80a3 	beq.w	80063ea <RadioIrqProcess+0x29e>
 80062a4:	689c      	ldr	r4, [r3, #8]
 80062a6:	2c00      	cmp	r4, #0
 80062a8:	f000 809f 	beq.w	80063ea <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 80062ac:	4b50      	ldr	r3, [pc, #320]	; (80063f0 <RadioIrqProcess+0x2a4>)
 80062ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d11d      	bne.n	80062f2 <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 80062b6:	4a4e      	ldr	r2, [pc, #312]	; (80063f0 <RadioIrqProcess+0x2a4>)
 80062b8:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 80062bc:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 80062c0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80062c4:	4850      	ldr	r0, [pc, #320]	; (8006408 <RadioIrqProcess+0x2bc>)
 80062c6:	47a0      	blx	r4
                break;
 80062c8:	e08f      	b.n	80063ea <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 80062ca:	2000      	movs	r0, #0
 80062cc:	f001 f95a 	bl	8007584 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 80062d0:	2100      	movs	r1, #0
 80062d2:	f640 1002 	movw	r0, #2306	; 0x902
 80062d6:	f001 f85f 	bl	8007398 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 80062da:	f640 1044 	movw	r0, #2372	; 0x944
 80062de:	f001 f86b 	bl	80073b8 <SUBGRF_ReadRegister>
 80062e2:	f040 0102 	orr.w	r1, r0, #2
 80062e6:	b2c9      	uxtb	r1, r1
 80062e8:	f640 1044 	movw	r0, #2372	; 0x944
 80062ec:	f001 f854 	bl	8007398 <SUBGRF_WriteRegister>
 80062f0:	e7ca      	b.n	8006288 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 80062f2:	4c3f      	ldr	r4, [pc, #252]	; (80063f0 <RadioIrqProcess+0x2a4>)
 80062f4:	4669      	mov	r1, sp
 80062f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80062f8:	f001 fe7a 	bl	8007ff0 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 80062fc:	4b40      	ldr	r3, [pc, #256]	; (8006400 <RadioIrqProcess+0x2b4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	689d      	ldr	r5, [r3, #8]
 8006302:	9b00      	ldr	r3, [sp, #0]
 8006304:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8006308:	4a41      	ldr	r2, [pc, #260]	; (8006410 <RadioIrqProcess+0x2c4>)
 800630a:	fb82 1203 	smull	r1, r2, r2, r3
 800630e:	17db      	asrs	r3, r3, #31
 8006310:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8006314:	b25b      	sxtb	r3, r3
 8006316:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 800631a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800631e:	483a      	ldr	r0, [pc, #232]	; (8006408 <RadioIrqProcess+0x2bc>)
 8006320:	47a8      	blx	r5
                break;
 8006322:	e062      	b.n	80063ea <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8006324:	2000      	movs	r0, #0
 8006326:	f001 f92d 	bl	8007584 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 800632a:	4b35      	ldr	r3, [pc, #212]	; (8006400 <RadioIrqProcess+0x2b4>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d05b      	beq.n	80063ea <RadioIrqProcess+0x29e>
 8006332:	699b      	ldr	r3, [r3, #24]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d058      	beq.n	80063ea <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8006338:	2001      	movs	r0, #1
 800633a:	4798      	blx	r3
 800633c:	e055      	b.n	80063ea <RadioIrqProcess+0x29e>
 800633e:	4b2e      	ldr	r3, [pc, #184]	; (80063f8 <RadioIrqProcess+0x2ac>)
 8006340:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006344:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8006346:	482f      	ldr	r0, [pc, #188]	; (8006404 <RadioIrqProcess+0x2b8>)
 8006348:	f002 faaa 	bl	80088a0 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 800634c:	2000      	movs	r0, #0
 800634e:	f001 f919 	bl	8007584 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8006352:	4b2b      	ldr	r3, [pc, #172]	; (8006400 <RadioIrqProcess+0x2b4>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d047      	beq.n	80063ea <RadioIrqProcess+0x29e>
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d044      	beq.n	80063ea <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8006360:	4798      	blx	r3
 8006362:	e042      	b.n	80063ea <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8006364:	4b2b      	ldr	r3, [pc, #172]	; (8006414 <RadioIrqProcess+0x2c8>)
 8006366:	2201      	movs	r2, #1
 8006368:	2100      	movs	r1, #0
 800636a:	2002      	movs	r0, #2
 800636c:	f001 ffe8 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8006370:	4b1f      	ldr	r3, [pc, #124]	; (80063f0 <RadioIrqProcess+0x2a4>)
 8006372:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8006374:	b3c9      	cbz	r1, 80063ea <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8006376:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800637a:	f640 1003 	movw	r0, #2307	; 0x903
 800637e:	f7ff fe53 	bl	8006028 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8006382:	4c1b      	ldr	r4, [pc, #108]	; (80063f0 <RadioIrqProcess+0x2a4>)
 8006384:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8006388:	f640 1004 	movw	r0, #2308	; 0x904
 800638c:	f7ff fe4c 	bl	8006028 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8006390:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8006394:	f640 1005 	movw	r0, #2309	; 0x905
 8006398:	f7ff fe46 	bl	8006028 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 800639c:	f640 1002 	movw	r0, #2306	; 0x902
 80063a0:	f7ff fe3e 	bl	8006020 <RadioRead>
 80063a4:	f040 0101 	orr.w	r1, r0, #1
 80063a8:	b2c9      	uxtb	r1, r1
 80063aa:	f640 1002 	movw	r0, #2306	; 0x902
 80063ae:	f7ff fe3b 	bl	8006028 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 80063b2:	2200      	movs	r2, #0
 80063b4:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80063b6:	4613      	mov	r3, r2
 80063b8:	f240 2162 	movw	r1, #610	; 0x262
 80063bc:	4608      	mov	r0, r1
 80063be:	f001 fa8e 	bl	80078de <SUBGRF_SetDioIrqParams>
 80063c2:	e012      	b.n	80063ea <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 80063c4:	4b14      	ldr	r3, [pc, #80]	; (8006418 <RadioIrqProcess+0x2cc>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	2100      	movs	r1, #0
 80063ca:	2002      	movs	r0, #2
 80063cc:	f001 ffb8 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 80063d0:	f001 fe5c 	bl	800808c <RFW_Is_Init>
 80063d4:	2801      	cmp	r0, #1
 80063d6:	d108      	bne.n	80063ea <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 80063d8:	f001 fe64 	bl	80080a4 <RFW_ReceivePayload>
 80063dc:	e005      	b.n	80063ea <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 80063de:	4b0f      	ldr	r3, [pc, #60]	; (800641c <RadioIrqProcess+0x2d0>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	2100      	movs	r1, #0
 80063e4:	2002      	movs	r0, #2
 80063e6:	f001 ffab 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
}
 80063ea:	b003      	add	sp, #12
 80063ec:	bd30      	pop	{r4, r5, pc}
 80063ee:	bf00      	nop
 80063f0:	200005c4 	.word	0x200005c4
 80063f4:	0800d85c 	.word	0x0800d85c
 80063f8:	48000400 	.word	0x48000400
 80063fc:	200005ac 	.word	0x200005ac
 8006400:	200005a8 	.word	0x200005a8
 8006404:	20000620 	.word	0x20000620
 8006408:	200004a8 	.word	0x200004a8
 800640c:	200005e8 	.word	0x200005e8
 8006410:	10624dd3 	.word	0x10624dd3
 8006414:	0800d870 	.word	0x0800d870
 8006418:	0800d87c 	.word	0x0800d87c
 800641c:	0800d888 	.word	0x0800d888
        TimerStop( &RxTimeoutTimer );
 8006420:	4817      	ldr	r0, [pc, #92]	; (8006480 <RadioIrqProcess+0x334>)
 8006422:	f002 fa3d 	bl	80088a0 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8006426:	4b17      	ldr	r3, [pc, #92]	; (8006484 <RadioIrqProcess+0x338>)
 8006428:	785b      	ldrb	r3, [r3, #1]
 800642a:	b173      	cbz	r3, 800644a <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 800642c:	4b16      	ldr	r3, [pc, #88]	; (8006488 <RadioIrqProcess+0x33c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d0da      	beq.n	80063ea <RadioIrqProcess+0x29e>
 8006434:	68db      	ldr	r3, [r3, #12]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d0d7      	beq.n	80063ea <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 800643a:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 800643c:	4b13      	ldr	r3, [pc, #76]	; (800648c <RadioIrqProcess+0x340>)
 800643e:	2201      	movs	r2, #1
 8006440:	2100      	movs	r1, #0
 8006442:	2002      	movs	r0, #2
 8006444:	f001 ff7c 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
 8006448:	e7cf      	b.n	80063ea <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 800644a:	2000      	movs	r0, #0
 800644c:	f001 f89a 	bl	8007584 <SUBGRF_SetStandby>
 8006450:	e7ec      	b.n	800642c <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8006452:	4b0f      	ldr	r3, [pc, #60]	; (8006490 <RadioIrqProcess+0x344>)
 8006454:	2201      	movs	r2, #1
 8006456:	2100      	movs	r1, #0
 8006458:	2002      	movs	r0, #2
 800645a:	f001 ff71 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 800645e:	4b09      	ldr	r3, [pc, #36]	; (8006484 <RadioIrqProcess+0x338>)
 8006460:	785b      	ldrb	r3, [r3, #1]
 8006462:	b143      	cbz	r3, 8006476 <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8006464:	4b08      	ldr	r3, [pc, #32]	; (8006488 <RadioIrqProcess+0x33c>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d0be      	beq.n	80063ea <RadioIrqProcess+0x29e>
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d0bb      	beq.n	80063ea <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8006472:	4798      	blx	r3
}
 8006474:	e7b9      	b.n	80063ea <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8006476:	2000      	movs	r0, #0
 8006478:	f001 f884 	bl	8007584 <SUBGRF_SetStandby>
 800647c:	e7f2      	b.n	8006464 <RadioIrqProcess+0x318>
 800647e:	bf00      	nop
 8006480:	200005ac 	.word	0x200005ac
 8006484:	200005c4 	.word	0x200005c4
 8006488:	200005a8 	.word	0x200005a8
 800648c:	0800d894 	.word	0x0800d894
 8006490:	0800d8a0 	.word	0x0800d8a0

08006494 <RadioOnDioIrq>:
{
 8006494:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8006496:	4b03      	ldr	r3, [pc, #12]	; (80064a4 <RadioOnDioIrq+0x10>)
 8006498:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 800649c:	f7ff fe56 	bl	800614c <RadioIrqProcess>
}
 80064a0:	bd08      	pop	{r3, pc}
 80064a2:	bf00      	nop
 80064a4:	200005c4 	.word	0x200005c4

080064a8 <RadioGetWakeupTime>:
{
 80064a8:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 80064aa:	f001 fd28 	bl	8007efe <SUBGRF_GetRadioWakeUpTime>
}
 80064ae:	3003      	adds	r0, #3
 80064b0:	bd08      	pop	{r3, pc}

080064b2 <RadioReadRegisters>:
{
 80064b2:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 80064b4:	f000 fffe 	bl	80074b4 <SUBGRF_ReadRegisters>
}
 80064b8:	bd08      	pop	{r3, pc}

080064ba <RadioWriteRegisters>:
{
 80064ba:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 80064bc:	f000 ffb8 	bl	8007430 <SUBGRF_WriteRegisters>
}
 80064c0:	bd08      	pop	{r3, pc}

080064c2 <RadioRssi>:
{
 80064c2:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 80064c4:	f001 fc6a 	bl	8007d9c <SUBGRF_GetRssiInst>
}
 80064c8:	b200      	sxth	r0, r0
 80064ca:	bd08      	pop	{r3, pc}

080064cc <RadioSetTxContinuousWave>:
{
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 80064d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80064d4:	fb03 f402 	mul.w	r4, r3, r2
    SUBGRF_SetRfFrequency( freq );
 80064d8:	f001 fa74 	bl	80079c4 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 80064dc:	4628      	mov	r0, r5
 80064de:	f001 fcf7 	bl	8007ed0 <SUBGRF_SetRfTxPower>
 80064e2:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80064e4:	210e      	movs	r1, #14
 80064e6:	f640 101f 	movw	r0, #2335	; 0x91f
 80064ea:	f000 ff55 	bl	8007398 <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 80064ee:	2101      	movs	r1, #1
 80064f0:	4628      	mov	r0, r5
 80064f2:	f001 fcd9 	bl	8007ea8 <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80064f6:	f001 f91f 	bl	8007738 <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 80064fa:	4d04      	ldr	r5, [pc, #16]	; (800650c <RadioSetTxContinuousWave+0x40>)
 80064fc:	4621      	mov	r1, r4
 80064fe:	4628      	mov	r0, r5
 8006500:	f002 fa6e 	bl	80089e0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8006504:	4628      	mov	r0, r5
 8006506:	f002 fa25 	bl	8008954 <UTIL_TIMER_Start>
}
 800650a:	bd38      	pop	{r3, r4, r5, pc}
 800650c:	20000620 	.word	0x20000620

08006510 <RadioSetChannel>:
{
 8006510:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8006512:	f001 fa57 	bl	80079c4 <SUBGRF_SetRfFrequency>
}
 8006516:	bd08      	pop	{r3, pc}

08006518 <RadioStartCad>:
{
 8006518:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800651a:	2100      	movs	r1, #0
 800651c:	4b07      	ldr	r3, [pc, #28]	; (800653c <RadioStartCad+0x24>)
 800651e:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8006522:	f001 fcc1 	bl	8007ea8 <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8006526:	2300      	movs	r3, #0
 8006528:	461a      	mov	r2, r3
 800652a:	f44f 71c0 	mov.w	r1, #384	; 0x180
 800652e:	4608      	mov	r0, r1
 8006530:	f001 f9d5 	bl	80078de <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8006534:	f001 f8f4 	bl	8007720 <SUBGRF_SetCad>
}
 8006538:	bd08      	pop	{r3, pc}
 800653a:	bf00      	nop
 800653c:	200005c4 	.word	0x200005c4

08006540 <RadioRx>:
{
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8006544:	f001 fda2 	bl	800808c <RFW_Is_Init>
 8006548:	2801      	cmp	r0, #1
 800654a:	d019      	beq.n	8006580 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 800654c:	2300      	movs	r3, #0
 800654e:	461a      	mov	r2, r3
 8006550:	f240 2162 	movw	r1, #610	; 0x262
 8006554:	4608      	mov	r0, r1
 8006556:	f001 f9c2 	bl	80078de <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 800655a:	b9a4      	cbnz	r4, 8006586 <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 800655c:	4c11      	ldr	r4, [pc, #68]	; (80065a4 <RadioRx+0x64>)
 800655e:	2100      	movs	r1, #0
 8006560:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006562:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <RadioRx+0x68>)
 8006564:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006568:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 800656a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 800656e:	f001 fc9b 	bl	8007ea8 <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8006572:	7863      	ldrb	r3, [r4, #1]
 8006574:	b183      	cbz	r3, 8006598 <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8006576:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 800657a:	f001 f83f 	bl	80075fc <SUBGRF_SetRx>
}
 800657e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8006580:	f001 fd8c 	bl	800809c <RFW_ReceiveInit>
 8006584:	e7e9      	b.n	800655a <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8006586:	4d09      	ldr	r5, [pc, #36]	; (80065ac <RadioRx+0x6c>)
 8006588:	4621      	mov	r1, r4
 800658a:	4628      	mov	r0, r5
 800658c:	f002 fa28 	bl	80089e0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8006590:	4628      	mov	r0, r5
 8006592:	f002 f9df 	bl	8008954 <UTIL_TIMER_Start>
 8006596:	e7e1      	b.n	800655c <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8006598:	4b02      	ldr	r3, [pc, #8]	; (80065a4 <RadioRx+0x64>)
 800659a:	6898      	ldr	r0, [r3, #8]
 800659c:	0180      	lsls	r0, r0, #6
 800659e:	f001 f82d 	bl	80075fc <SUBGRF_SetRx>
}
 80065a2:	e7ec      	b.n	800657e <RadioRx+0x3e>
 80065a4:	200005c4 	.word	0x200005c4
 80065a8:	48000400 	.word	0x48000400
 80065ac:	200005ac 	.word	0x200005ac

080065b0 <RadioSleep>:
{
 80065b0:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 80065b2:	f04f 0004 	mov.w	r0, #4
 80065b6:	f000 ffc5 	bl	8007544 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 80065ba:	2002      	movs	r0, #2
 80065bc:	f7fa ffde 	bl	800157c <HAL_Delay>
}
 80065c0:	bd08      	pop	{r3, pc}
	...

080065c4 <RadioSend>:
{
 80065c4:	b570      	push	{r4, r5, r6, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	4605      	mov	r5, r0
 80065ca:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80065cc:	2300      	movs	r3, #0
 80065ce:	461a      	mov	r2, r3
 80065d0:	f240 2101 	movw	r1, #513	; 0x201
 80065d4:	4608      	mov	r0, r1
 80065d6:	f001 f982 	bl	80078de <SUBGRF_SetDioIrqParams>
 80065da:	4b5e      	ldr	r3, [pc, #376]	; (8006754 <RadioSend+0x190>)
 80065dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80065e0:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80065e2:	4e5d      	ldr	r6, [pc, #372]	; (8006758 <RadioSend+0x194>)
 80065e4:	2101      	movs	r1, #1
 80065e6:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80065ea:	f001 fc5d 	bl	8007ea8 <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 80065ee:	7833      	ldrb	r3, [r6, #0]
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d103      	bne.n	80065fc <RadioSend+0x38>
 80065f4:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 80065f8:	2b06      	cmp	r3, #6
 80065fa:	d013      	beq.n	8006624 <RadioSend+0x60>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 80065fc:	f640 0089 	movw	r0, #2185	; 0x889
 8006600:	f000 feda 	bl	80073b8 <SUBGRF_ReadRegister>
 8006604:	f040 0104 	orr.w	r1, r0, #4
 8006608:	b2c9      	uxtb	r1, r1
 800660a:	f640 0089 	movw	r0, #2185	; 0x889
 800660e:	f000 fec3 	bl	8007398 <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8006612:	4b51      	ldr	r3, [pc, #324]	; (8006758 <RadioSend+0x194>)
 8006614:	781b      	ldrb	r3, [r3, #0]
 8006616:	2b04      	cmp	r3, #4
 8006618:	d819      	bhi.n	800664e <RadioSend+0x8a>
 800661a:	e8df f003 	tbb	[pc, r3]
 800661e:	0e24      	.short	0x0e24
 8006620:	5024      	.short	0x5024
 8006622:	5d          	.byte	0x5d
 8006623:	00          	.byte	0x00
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8006624:	f640 0089 	movw	r0, #2185	; 0x889
 8006628:	f000 fec6 	bl	80073b8 <SUBGRF_ReadRegister>
 800662c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8006630:	f640 0089 	movw	r0, #2185	; 0x889
 8006634:	f000 feb0 	bl	8007398 <SUBGRF_WriteRegister>
 8006638:	e7eb      	b.n	8006612 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 800663a:	4847      	ldr	r0, [pc, #284]	; (8006758 <RadioSend+0x194>)
 800663c:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800663e:	300e      	adds	r0, #14
 8006640:	f001 fb1c 	bl	8007c7c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8006644:	2200      	movs	r2, #0
 8006646:	4621      	mov	r1, r4
 8006648:	4628      	mov	r0, r5
 800664a:	f000 ffcf 	bl	80075ec <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 800664e:	4c43      	ldr	r4, [pc, #268]	; (800675c <RadioSend+0x198>)
 8006650:	4b41      	ldr	r3, [pc, #260]	; (8006758 <RadioSend+0x194>)
 8006652:	6859      	ldr	r1, [r3, #4]
 8006654:	4620      	mov	r0, r4
 8006656:	f002 f9c3 	bl	80089e0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 800665a:	4620      	mov	r0, r4
 800665c:	f002 f97a 	bl	8008954 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8006660:	2000      	movs	r0, #0
}
 8006662:	b002      	add	sp, #8
 8006664:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8006666:	f001 fd11 	bl	800808c <RFW_Is_Init>
 800666a:	2801      	cmp	r0, #1
 800666c:	d00a      	beq.n	8006684 <RadioSend+0xc0>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 800666e:	483a      	ldr	r0, [pc, #232]	; (8006758 <RadioSend+0x194>)
 8006670:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006672:	300e      	adds	r0, #14
 8006674:	f001 fb02 	bl	8007c7c <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8006678:	2200      	movs	r2, #0
 800667a:	4621      	mov	r1, r4
 800667c:	4628      	mov	r0, r5
 800667e:	f000 ffb5 	bl	80075ec <SUBGRF_SendPayload>
 8006682:	e7e4      	b.n	800664e <RadioSend+0x8a>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8006684:	f10d 0207 	add.w	r2, sp, #7
 8006688:	4621      	mov	r1, r4
 800668a:	4628      	mov	r0, r5
 800668c:	f001 fd03 	bl	8008096 <RFW_TransmitInit>
 8006690:	b968      	cbnz	r0, 80066ae <RadioSend+0xea>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8006692:	4831      	ldr	r0, [pc, #196]	; (8006758 <RadioSend+0x194>)
 8006694:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006698:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 800669a:	300e      	adds	r0, #14
 800669c:	f001 faee 	bl	8007c7c <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 80066a0:	2200      	movs	r2, #0
 80066a2:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80066a6:	4628      	mov	r0, r5
 80066a8:	f000 ffa0 	bl	80075ec <SUBGRF_SendPayload>
 80066ac:	e7cf      	b.n	800664e <RadioSend+0x8a>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 80066ae:	4b2c      	ldr	r3, [pc, #176]	; (8006760 <RadioSend+0x19c>)
 80066b0:	2201      	movs	r2, #1
 80066b2:	2100      	movs	r1, #0
 80066b4:	2002      	movs	r0, #2
 80066b6:	f001 fe43 	bl	8008340 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 80066ba:	2003      	movs	r0, #3
 80066bc:	e7d1      	b.n	8006662 <RadioSend+0x9e>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80066be:	4826      	ldr	r0, [pc, #152]	; (8006758 <RadioSend+0x194>)
 80066c0:	2302      	movs	r3, #2
 80066c2:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 80066c4:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80066c6:	300e      	adds	r0, #14
 80066c8:	f001 fad8 	bl	8007c7c <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 80066cc:	2200      	movs	r2, #0
 80066ce:	4621      	mov	r1, r4
 80066d0:	4628      	mov	r0, r5
 80066d2:	f000 ff8b 	bl	80075ec <SUBGRF_SendPayload>
            break;
 80066d6:	e7ba      	b.n	800664e <RadioSend+0x8a>
            payload_integration( RadioBuffer, buffer, size );
 80066d8:	4622      	mov	r2, r4
 80066da:	4629      	mov	r1, r5
 80066dc:	4821      	ldr	r0, [pc, #132]	; (8006764 <RadioSend+0x1a0>)
 80066de:	f7ff fc29 	bl	8005f34 <payload_integration>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 80066e2:	4e1d      	ldr	r6, [pc, #116]	; (8006758 <RadioSend+0x194>)
 80066e4:	2302      	movs	r3, #2
 80066e6:	73b3      	strb	r3, [r6, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 80066e8:	1c65      	adds	r5, r4, #1
 80066ea:	b2ed      	uxtb	r5, r5
 80066ec:	76b5      	strb	r5, [r6, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80066ee:	f106 000e 	add.w	r0, r6, #14
 80066f2:	f001 fac3 	bl	8007c7c <SUBGRF_SetPacketParams>
            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 80066f6:	2100      	movs	r1, #0
 80066f8:	20f1      	movs	r0, #241	; 0xf1
 80066fa:	f7ff fc95 	bl	8006028 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 80066fe:	2100      	movs	r1, #0
 8006700:	20f0      	movs	r0, #240	; 0xf0
 8006702:	f7ff fc91 	bl	8006028 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8006706:	6cb3      	ldr	r3, [r6, #72]	; 0x48
 8006708:	2b64      	cmp	r3, #100	; 0x64
 800670a:	d019      	beq.n	8006740 <RadioSend+0x17c>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 800670c:	21e1      	movs	r1, #225	; 0xe1
 800670e:	20f3      	movs	r0, #243	; 0xf3
 8006710:	f7ff fc8a 	bl	8006028 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8006714:	2104      	movs	r1, #4
 8006716:	20f2      	movs	r0, #242	; 0xf2
 8006718:	f7ff fc86 	bl	8006028 <RadioWrite>
            uint16_t bitNum = ( size * 8 ) + 2;
 800671c:	00e1      	lsls	r1, r4, #3
 800671e:	1c8c      	adds	r4, r1, #2
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 8006720:	0a09      	lsrs	r1, r1, #8
 8006722:	20f4      	movs	r0, #244	; 0xf4
 8006724:	f7ff fc80 	bl	8006028 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 8006728:	f004 01fe 	and.w	r1, r4, #254	; 0xfe
 800672c:	20f5      	movs	r0, #245	; 0xf5
 800672e:	f7ff fc7b 	bl	8006028 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size + 1, 0xFFFFFF );
 8006732:	f06f 427f 	mvn.w	r2, #4278190080	; 0xff000000
 8006736:	4629      	mov	r1, r5
 8006738:	480a      	ldr	r0, [pc, #40]	; (8006764 <RadioSend+0x1a0>)
 800673a:	f000 ff57 	bl	80075ec <SUBGRF_SendPayload>
            break;
 800673e:	e786      	b.n	800664e <RadioSend+0x8a>
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 8006740:	2170      	movs	r1, #112	; 0x70
 8006742:	20f3      	movs	r0, #243	; 0xf3
 8006744:	f7ff fc70 	bl	8006028 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8006748:	211d      	movs	r1, #29
 800674a:	20f2      	movs	r0, #242	; 0xf2
 800674c:	f7ff fc6c 	bl	8006028 <RadioWrite>
 8006750:	e7e4      	b.n	800671c <RadioSend+0x158>
 8006752:	bf00      	nop
 8006754:	48000400 	.word	0x48000400
 8006758:	200005c4 	.word	0x200005c4
 800675c:	20000620 	.word	0x20000620
 8006760:	0800d8b0 	.word	0x0800d8b0
 8006764:	200004a8 	.word	0x200004a8

08006768 <RadioRandom>:
{
 8006768:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800676a:	2300      	movs	r3, #0
 800676c:	461a      	mov	r2, r3
 800676e:	4619      	mov	r1, r3
 8006770:	4618      	mov	r0, r3
 8006772:	f001 f8b4 	bl	80078de <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8006776:	f000 ff5b 	bl	8007630 <SUBGRF_GetRandom>
}
 800677a:	bd08      	pop	{r3, pc}

0800677c <RadioSetModem>:
{
 800677c:	b510      	push	{r4, lr}
 800677e:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8006780:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <RadioSetModem+0x78>)
 8006782:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8006784:	f001 fc8f 	bl	80080a6 <RFW_SetRadioModem>
    switch( modem )
 8006788:	2c05      	cmp	r4, #5
 800678a:	d804      	bhi.n	8006796 <RadioSetModem+0x1a>
 800678c:	e8df f004 	tbb	[pc, r4]
 8006790:	1d03110a 	.word	0x1d03110a
 8006794:	2b24      	.short	0x2b24
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8006796:	2003      	movs	r0, #3
 8006798:	f001 f940 	bl	8007a1c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 800679c:	4b15      	ldr	r3, [pc, #84]	; (80067f4 <RadioSetModem+0x78>)
 800679e:	2200      	movs	r2, #0
 80067a0:	735a      	strb	r2, [r3, #13]
}
 80067a2:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80067a4:	2000      	movs	r0, #0
 80067a6:	f001 f939 	bl	8007a1c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80067aa:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <RadioSetModem+0x78>)
 80067ac:	2200      	movs	r2, #0
 80067ae:	735a      	strb	r2, [r3, #13]
        break;
 80067b0:	e7f7      	b.n	80067a2 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 80067b2:	2001      	movs	r0, #1
 80067b4:	f001 f932 	bl	8007a1c <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 80067b8:	4b0e      	ldr	r3, [pc, #56]	; (80067f4 <RadioSetModem+0x78>)
 80067ba:	7b5a      	ldrb	r2, [r3, #13]
 80067bc:	7b18      	ldrb	r0, [r3, #12]
 80067be:	4282      	cmp	r2, r0
 80067c0:	d0ef      	beq.n	80067a2 <RadioSetModem+0x26>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 80067c2:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 80067c4:	f000 fade 	bl	8006d84 <RadioSetPublicNetwork>
 80067c8:	e7eb      	b.n	80067a2 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80067ca:	2002      	movs	r0, #2
 80067cc:	f001 f926 	bl	8007a1c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80067d0:	4b08      	ldr	r3, [pc, #32]	; (80067f4 <RadioSetModem+0x78>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	735a      	strb	r2, [r3, #13]
        break;
 80067d6:	e7e4      	b.n	80067a2 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 80067d8:	2002      	movs	r0, #2
 80067da:	f001 f91f 	bl	8007a1c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80067de:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <RadioSetModem+0x78>)
 80067e0:	2200      	movs	r2, #0
 80067e2:	735a      	strb	r2, [r3, #13]
        break;
 80067e4:	e7dd      	b.n	80067a2 <RadioSetModem+0x26>
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 80067e6:	2000      	movs	r0, #0
 80067e8:	f001 f918 	bl	8007a1c <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 80067ec:	4b01      	ldr	r3, [pc, #4]	; (80067f4 <RadioSetModem+0x78>)
 80067ee:	2200      	movs	r2, #0
 80067f0:	735a      	strb	r2, [r3, #13]
}
 80067f2:	e7d6      	b.n	80067a2 <RadioSetModem+0x26>
 80067f4:	200005c4 	.word	0x200005c4

080067f8 <RadioSetTxGenericConfig>:
{
 80067f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067fc:	b086      	sub	sp, #24
 80067fe:	4605      	mov	r5, r0
 8006800:	460c      	mov	r4, r1
 8006802:	4617      	mov	r7, r2
 8006804:	461e      	mov	r6, r3
    uint8_t syncword[8] = {0};
 8006806:	2100      	movs	r1, #0
 8006808:	9104      	str	r1, [sp, #16]
 800680a:	9105      	str	r1, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 800680c:	f001 fc3d 	bl	800808a <RFW_DeInit>
    switch( modem )
 8006810:	2d03      	cmp	r5, #3
 8006812:	f200 8156 	bhi.w	8006ac2 <RadioSetTxGenericConfig+0x2ca>
 8006816:	e8df f015 	tbh	[pc, r5, lsl #1]
 800681a:	007a      	.short	0x007a
 800681c:	014000dd 	.word	0x014000dd
 8006820:	0004      	.short	0x0004
        if( config->msk.SyncWordLength > 8 )
 8006822:	7ca2      	ldrb	r2, [r4, #18]
 8006824:	2a08      	cmp	r2, #8
 8006826:	f200 8159 	bhi.w	8006adc <RadioSetTxGenericConfig+0x2e4>
            RADIO_MEMCPY8( syncword, config->msk.SyncWord, config->msk.SyncWordLength );
 800682a:	68a1      	ldr	r1, [r4, #8]
 800682c:	a804      	add	r0, sp, #16
 800682e:	f001 fe9d 	bl	800856c <UTIL_MEM_cpy_8>
        if( ( config->msk.BitRate == 0 ) )
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	f000 8154 	beq.w	8006ae2 <RadioSetTxGenericConfig+0x2ea>
        else if( config->msk.BitRate <= 10000 )
 800683a:	f242 7210 	movw	r2, #10000	; 0x2710
 800683e:	4293      	cmp	r3, r2
 8006840:	d823      	bhi.n	800688a <RadioSetTxGenericConfig+0x92>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 8006842:	4bae      	ldr	r3, [pc, #696]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 8006844:	2203      	movs	r2, #3
 8006846:	739a      	strb	r2, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 8006848:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 800684c:	6822      	ldr	r2, [r4, #0]
 800684e:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8006850:	7ce2      	ldrb	r2, [r4, #19]
 8006852:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            radio_modem = MODEM_MSK;
 8006856:	2502      	movs	r5, #2
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8006858:	6863      	ldr	r3, [r4, #4]
 800685a:	00da      	lsls	r2, r3, #3
 800685c:	4ba7      	ldr	r3, [pc, #668]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 800685e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006860:	2204      	movs	r2, #4
 8006862:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8006864:	7ca2      	ldrb	r2, [r4, #18]
 8006866:	00d2      	lsls	r2, r2, #3
 8006868:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800686a:	2200      	movs	r2, #0
 800686c:	751a      	strb	r2, [r3, #20]
        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 800686e:	7da3      	ldrb	r3, [r4, #22]
 8006870:	2b02      	cmp	r3, #2
 8006872:	d018      	beq.n	80068a6 <RadioSetTxGenericConfig+0xae>
            || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006874:	7d23      	ldrb	r3, [r4, #20]
 8006876:	2b02      	cmp	r3, #2
 8006878:	d015      	beq.n	80068a6 <RadioSetTxGenericConfig+0xae>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 800687a:	7d62      	ldrb	r2, [r4, #21]
 800687c:	4b9f      	ldr	r3, [pc, #636]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 800687e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 8006880:	7da2      	ldrb	r2, [r4, #22]
 8006882:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 8006884:	7d22      	ldrb	r2, [r4, #20]
 8006886:	755a      	strb	r2, [r3, #21]
 8006888:	e026      	b.n	80068d8 <RadioSetTxGenericConfig+0xe0>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800688a:	4b9c      	ldr	r3, [pc, #624]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 800688c:	2500      	movs	r5, #0
 800688e:	739d      	strb	r5, [r3, #14]
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006890:	f883 5038 	strb.w	r5, [r3, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8006894:	6822      	ldr	r2, [r4, #0]
 8006896:	63da      	str	r2, [r3, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 8006898:	7ce2      	ldrb	r2, [r4, #19]
 800689a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate / 4;
 800689e:	6822      	ldr	r2, [r4, #0]
 80068a0:	0892      	lsrs	r2, r2, #2
 80068a2:	641a      	str	r2, [r3, #64]	; 0x40
 80068a4:	e7d8      	b.n	8006858 <RadioSetTxGenericConfig+0x60>
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 80068a6:	7d62      	ldrb	r2, [r4, #21]
 80068a8:	f102 030f 	add.w	r3, r2, #15
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d901      	bls.n	80068b6 <RadioSetTxGenericConfig+0xbe>
                && ( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 80068b2:	2a01      	cmp	r2, #1
 80068b4:	d128      	bne.n	8006908 <RadioSetTxGenericConfig+0x110>
            ConfigGeneric.TxConfig = config;
 80068b6:	9401      	str	r4, [sp, #4]
            ConfigGeneric.rtx = CONFIG_TX;
 80068b8:	2301      	movs	r3, #1
 80068ba:	f88d 300c 	strb.w	r3, [sp, #12]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80068be:	4a90      	ldr	r2, [pc, #576]	; (8006b00 <RadioSetTxGenericConfig+0x308>)
 80068c0:	4b90      	ldr	r3, [pc, #576]	; (8006b04 <RadioSetTxGenericConfig+0x30c>)
 80068c2:	6819      	ldr	r1, [r3, #0]
 80068c4:	a801      	add	r0, sp, #4
 80068c6:	f001 fbdd 	bl	8008084 <RFW_Init>
 80068ca:	b9e8      	cbnz	r0, 8006908 <RadioSetTxGenericConfig+0x110>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80068cc:	4b8b      	ldr	r3, [pc, #556]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 80068ce:	2200      	movs	r2, #0
 80068d0:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 80068d2:	2101      	movs	r1, #1
 80068d4:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80068d6:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 80068d8:	f7ff fc22 	bl	8006120 <RadioStandby>
        RadioSetModem( radio_modem );
 80068dc:	4628      	mov	r0, r5
 80068de:	f7ff ff4d 	bl	800677c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80068e2:	4d86      	ldr	r5, [pc, #536]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 80068e4:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80068e8:	f001 f940 	bl	8007b6c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80068ec:	f105 000e 	add.w	r0, r5, #14
 80068f0:	f001 f9c4 	bl	8007c7c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80068f4:	a804      	add	r0, sp, #16
 80068f6:	f000 fdab 	bl	8007450 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80068fa:	8a20      	ldrh	r0, [r4, #16]
 80068fc:	f000 fd7f 	bl	80073fe <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->msk.CrcPolynomial );
 8006900:	89a0      	ldrh	r0, [r4, #12]
 8006902:	f000 fdc2 	bl	800748a <SUBGRF_SetCrcPolynomial>
        break;
 8006906:	e0dc      	b.n	8006ac2 <RadioSetTxGenericConfig+0x2ca>
                return -1;
 8006908:	f04f 30ff 	mov.w	r0, #4294967295
 800690c:	e0e3      	b.n	8006ad6 <RadioSetTxGenericConfig+0x2de>
        if( config->fsk.BitRate == 0 )
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80e9 	beq.w	8006ae8 <RadioSetTxGenericConfig+0x2f0>
        if( config->fsk.SyncWordLength > 8 )
 8006916:	7ca2      	ldrb	r2, [r4, #18]
 8006918:	2a08      	cmp	r2, #8
 800691a:	f200 80e8 	bhi.w	8006aee <RadioSetTxGenericConfig+0x2f6>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 800691e:	68a1      	ldr	r1, [r4, #8]
 8006920:	a804      	add	r0, sp, #16
 8006922:	f001 fe23 	bl	800856c <UTIL_MEM_cpy_8>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006926:	4b75      	ldr	r3, [pc, #468]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 8006928:	2200      	movs	r2, #0
 800692a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 800692e:	6821      	ldr	r1, [r4, #0]
 8006930:	63d9      	str	r1, [r3, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006932:	7ce1      	ldrb	r1, [r4, #19]
 8006934:	f883 1044 	strb.w	r1, [r3, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 8006938:	69a1      	ldr	r1, [r4, #24]
 800693a:	6419      	str	r1, [r3, #64]	; 0x40
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 800693c:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 800693e:	6861      	ldr	r1, [r4, #4]
 8006940:	00c9      	lsls	r1, r1, #3
 8006942:	8219      	strh	r1, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8006944:	2104      	movs	r1, #4
 8006946:	7499      	strb	r1, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006948:	7ca1      	ldrb	r1, [r4, #18]
 800694a:	00c9      	lsls	r1, r1, #3
 800694c:	74d9      	strb	r1, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 800694e:	751a      	strb	r2, [r3, #20]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8006950:	7da3      	ldrb	r3, [r4, #22]
 8006952:	2b02      	cmp	r3, #2
 8006954:	d00a      	beq.n	800696c <RadioSetTxGenericConfig+0x174>
            || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006956:	7d23      	ldrb	r3, [r4, #20]
 8006958:	2b02      	cmp	r3, #2
 800695a:	d007      	beq.n	800696c <RadioSetTxGenericConfig+0x174>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 800695c:	7d62      	ldrb	r2, [r4, #21]
 800695e:	4b67      	ldr	r3, [pc, #412]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 8006960:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006962:	7da2      	ldrb	r2, [r4, #22]
 8006964:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 8006966:	7d22      	ldrb	r2, [r4, #20]
 8006968:	755a      	strb	r2, [r3, #21]
 800696a:	e018      	b.n	800699e <RadioSetTxGenericConfig+0x1a6>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 800696c:	7d62      	ldrb	r2, [r4, #21]
 800696e:	f102 030f 	add.w	r3, r2, #15
 8006972:	b2db      	uxtb	r3, r3
 8006974:	2b01      	cmp	r3, #1
 8006976:	d901      	bls.n	800697c <RadioSetTxGenericConfig+0x184>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006978:	2a01      	cmp	r2, #1
 800697a:	d128      	bne.n	80069ce <RadioSetTxGenericConfig+0x1d6>
            ConfigGeneric.rtx = CONFIG_TX;
 800697c:	2301      	movs	r3, #1
 800697e:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.TxConfig = config;
 8006982:	9401      	str	r4, [sp, #4]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 8006984:	4a5e      	ldr	r2, [pc, #376]	; (8006b00 <RadioSetTxGenericConfig+0x308>)
 8006986:	4b5f      	ldr	r3, [pc, #380]	; (8006b04 <RadioSetTxGenericConfig+0x30c>)
 8006988:	6819      	ldr	r1, [r3, #0]
 800698a:	a801      	add	r0, sp, #4
 800698c:	f001 fb7a 	bl	8008084 <RFW_Init>
 8006990:	b9e8      	cbnz	r0, 80069ce <RadioSetTxGenericConfig+0x1d6>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006992:	4b5a      	ldr	r3, [pc, #360]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 8006994:	2200      	movs	r2, #0
 8006996:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006998:	2101      	movs	r1, #1
 800699a:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 800699c:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 800699e:	f7ff fbbf 	bl	8006120 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 80069a2:	2000      	movs	r0, #0
 80069a4:	f7ff feea 	bl	800677c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80069a8:	4d54      	ldr	r5, [pc, #336]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 80069aa:	f105 0038 	add.w	r0, r5, #56	; 0x38
 80069ae:	f001 f8dd 	bl	8007b6c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80069b2:	f105 000e 	add.w	r0, r5, #14
 80069b6:	f001 f961 	bl	8007c7c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80069ba:	a804      	add	r0, sp, #16
 80069bc:	f000 fd48 	bl	8007450 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 80069c0:	8a20      	ldrh	r0, [r4, #16]
 80069c2:	f000 fd1c 	bl	80073fe <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80069c6:	89a0      	ldrh	r0, [r4, #12]
 80069c8:	f000 fd5f 	bl	800748a <SUBGRF_SetCrcPolynomial>
        break;
 80069cc:	e079      	b.n	8006ac2 <RadioSetTxGenericConfig+0x2ca>
                return -1;
 80069ce:	f04f 30ff 	mov.w	r0, #4294967295
 80069d2:	e080      	b.n	8006ad6 <RadioSetTxGenericConfig+0x2de>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80069d4:	4b49      	ldr	r3, [pc, #292]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 80069d6:	2201      	movs	r2, #1
 80069d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 80069dc:	7822      	ldrb	r2, [r4, #0]
 80069de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 80069e2:	7862      	ldrb	r2, [r4, #1]
 80069e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 80069e8:	78a2      	ldrb	r2, [r4, #2]
 80069ea:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 80069ee:	78e3      	ldrb	r3, [r4, #3]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d033      	beq.n	8006a5c <RadioSetTxGenericConfig+0x264>
 80069f4:	2b02      	cmp	r3, #2
 80069f6:	d036      	beq.n	8006a66 <RadioSetTxGenericConfig+0x26e>
 80069f8:	b35b      	cbz	r3, 8006a52 <RadioSetTxGenericConfig+0x25a>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80069fa:	4d40      	ldr	r5, [pc, #256]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 80069fc:	f04f 0801 	mov.w	r8, #1
 8006a00:	f885 800e 	strb.w	r8, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006a04:	88a3      	ldrh	r3, [r4, #4]
 8006a06:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006a08:	79a3      	ldrb	r3, [r4, #6]
 8006a0a:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006a0c:	79e3      	ldrb	r3, [r4, #7]
 8006a0e:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006a12:	7a23      	ldrb	r3, [r4, #8]
 8006a14:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8006a18:	f7ff fb82 	bl	8006120 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006a1c:	4640      	mov	r0, r8
 8006a1e:	f7ff fead 	bl	800677c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006a22:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8006a26:	f001 f8a1 	bl	8007b6c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006a2a:	f105 000e 	add.w	r0, r5, #14
 8006a2e:	f001 f925 	bl	8007c7c <SUBGRF_SetPacketParams>
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 8006a32:	f895 3051 	ldrb.w	r3, [r5, #81]	; 0x51
 8006a36:	2b06      	cmp	r3, #6
 8006a38:	d024      	beq.n	8006a84 <RadioSetTxGenericConfig+0x28c>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8006a3a:	f640 0089 	movw	r0, #2185	; 0x889
 8006a3e:	f000 fcbb 	bl	80073b8 <SUBGRF_ReadRegister>
 8006a42:	f040 0104 	orr.w	r1, r0, #4
 8006a46:	b2c9      	uxtb	r1, r1
 8006a48:	f640 0089 	movw	r0, #2185	; 0x889
 8006a4c:	f000 fca4 	bl	8007398 <SUBGRF_WriteRegister>
 8006a50:	e037      	b.n	8006ac2 <RadioSetTxGenericConfig+0x2ca>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006a52:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 8006a54:	2200      	movs	r2, #0
 8006a56:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a5a:	e7ce      	b.n	80069fa <RadioSetTxGenericConfig+0x202>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006a5c:	4b27      	ldr	r3, [pc, #156]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 8006a5e:	2201      	movs	r2, #1
 8006a60:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006a64:	e7c9      	b.n	80069fa <RadioSetTxGenericConfig+0x202>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006a66:	7823      	ldrb	r3, [r4, #0]
 8006a68:	3b0b      	subs	r3, #11
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d904      	bls.n	8006a7a <RadioSetTxGenericConfig+0x282>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006a70:	4b22      	ldr	r3, [pc, #136]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006a78:	e7bf      	b.n	80069fa <RadioSetTxGenericConfig+0x202>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006a7a:	4b20      	ldr	r3, [pc, #128]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006a82:	e7ba      	b.n	80069fa <RadioSetTxGenericConfig+0x202>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8006a84:	f640 0089 	movw	r0, #2185	; 0x889
 8006a88:	f000 fc96 	bl	80073b8 <SUBGRF_ReadRegister>
 8006a8c:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8006a90:	f640 0089 	movw	r0, #2185	; 0x889
 8006a94:	f000 fc80 	bl	8007398 <SUBGRF_WriteRegister>
 8006a98:	e013      	b.n	8006ac2 <RadioSetTxGenericConfig+0x2ca>
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8006a9a:	6823      	ldr	r3, [r4, #0]
 8006a9c:	3b01      	subs	r3, #1
 8006a9e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006aa2:	d227      	bcs.n	8006af4 <RadioSetTxGenericConfig+0x2fc>
        RadioSetModem( MODEM_BPSK );
 8006aa4:	2003      	movs	r0, #3
 8006aa6:	f7ff fe69 	bl	800677c <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006aaa:	4814      	ldr	r0, [pc, #80]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 8006aac:	2302      	movs	r3, #2
 8006aae:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	6483      	str	r3, [r0, #72]	; 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006ab6:	2316      	movs	r3, #22
 8006ab8:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006abc:	3038      	adds	r0, #56	; 0x38
 8006abe:	f001 f855 	bl	8007b6c <SUBGRF_SetModulationParams>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	f001 fa04 	bl	8007ed0 <SUBGRF_SetRfTxPower>
 8006ac8:	4c0c      	ldr	r4, [pc, #48]	; (8006afc <RadioSetTxGenericConfig+0x304>)
 8006aca:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006ace:	f001 fae1 	bl	8008094 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006ad2:	6066      	str	r6, [r4, #4]
    return 0;
 8006ad4:	2000      	movs	r0, #0
}
 8006ad6:	b006      	add	sp, #24
 8006ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            return -1;
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae0:	e7f9      	b.n	8006ad6 <RadioSetTxGenericConfig+0x2de>
            return -1;
 8006ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae6:	e7f6      	b.n	8006ad6 <RadioSetTxGenericConfig+0x2de>
            return -1;
 8006ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8006aec:	e7f3      	b.n	8006ad6 <RadioSetTxGenericConfig+0x2de>
            return -1;
 8006aee:	f04f 30ff 	mov.w	r0, #4294967295
 8006af2:	e7f0      	b.n	8006ad6 <RadioSetTxGenericConfig+0x2de>
            return -1;
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e7ed      	b.n	8006ad6 <RadioSetTxGenericConfig+0x2de>
 8006afa:	bf00      	nop
 8006afc:	200005c4 	.word	0x200005c4
 8006b00:	20000620 	.word	0x20000620
 8006b04:	200005a8 	.word	0x200005a8

08006b08 <RadioSetRxGenericConfig>:
{
 8006b08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0c:	b086      	sub	sp, #24
 8006b0e:	4606      	mov	r6, r0
 8006b10:	460c      	mov	r4, r1
 8006b12:	4615      	mov	r5, r2
 8006b14:	461f      	mov	r7, r3
    uint8_t syncword[8] = {0};
 8006b16:	2300      	movs	r3, #0
 8006b18:	9304      	str	r3, [sp, #16]
 8006b1a:	9305      	str	r3, [sp, #20]
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 8006b1c:	f001 fab5 	bl	800808a <RFW_DeInit>
    if( rxContinuous != 0 )
 8006b20:	b105      	cbz	r5, 8006b24 <RadioSetRxGenericConfig+0x1c>
        symbTimeout = 0;
 8006b22:	2700      	movs	r7, #0
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 8006b24:	3d00      	subs	r5, #0
 8006b26:	bf18      	it	ne
 8006b28:	2501      	movne	r5, #1
 8006b2a:	4b93      	ldr	r3, [pc, #588]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006b2c:	705d      	strb	r5, [r3, #1]
    switch( modem )
 8006b2e:	b136      	cbz	r6, 8006b3e <RadioSetRxGenericConfig+0x36>
 8006b30:	2e01      	cmp	r6, #1
 8006b32:	f000 808f 	beq.w	8006c54 <RadioSetRxGenericConfig+0x14c>
 8006b36:	2000      	movs	r0, #0
}
 8006b38:	b006      	add	sp, #24
 8006b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8006b3e:	68a3      	ldr	r3, [r4, #8]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 810d 	beq.w	8006d60 <RadioSetRxGenericConfig+0x258>
 8006b46:	68e3      	ldr	r3, [r4, #12]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	f000 810c 	beq.w	8006d66 <RadioSetRxGenericConfig+0x25e>
        if( config->fsk.SyncWordLength > 8 )
 8006b4e:	7fa2      	ldrb	r2, [r4, #30]
 8006b50:	2a08      	cmp	r2, #8
 8006b52:	f200 810b 	bhi.w	8006d6c <RadioSetRxGenericConfig+0x264>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8006b56:	6921      	ldr	r1, [r4, #16]
 8006b58:	a804      	add	r0, sp, #16
 8006b5a:	f001 fd07 	bl	800856c <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006b5e:	6820      	ldr	r0, [r4, #0]
 8006b60:	3800      	subs	r0, #0
 8006b62:	bf18      	it	ne
 8006b64:	2001      	movne	r0, #1
 8006b66:	f000 fdf5 	bl	8007754 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006b6a:	4d83      	ldr	r5, [pc, #524]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006b6c:	2600      	movs	r6, #0
 8006b6e:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8006b72:	68a3      	ldr	r3, [r4, #8]
 8006b74:	63eb      	str	r3, [r5, #60]	; 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8006b76:	f894 3020 	ldrb.w	r3, [r4, #32]
 8006b7a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8006b7e:	6860      	ldr	r0, [r4, #4]
 8006b80:	f001 fa1e 	bl	8007fc0 <SUBGRF_GetFskBandwidthRegValue>
 8006b84:	f885 0045 	strb.w	r0, [r5, #69]	; 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006b88:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8006b8a:	68e3      	ldr	r3, [r4, #12]
 8006b8c:	00db      	lsls	r3, r3, #3
 8006b8e:	822b      	strh	r3, [r5, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 8006b90:	7fe3      	ldrb	r3, [r4, #31]
 8006b92:	74ab      	strb	r3, [r5, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 8006b94:	7fa3      	ldrb	r3, [r4, #30]
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	74eb      	strb	r3, [r5, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 8006b9a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8006b9e:	752b      	strb	r3, [r5, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 8006ba0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8006ba4:	b973      	cbnz	r3, 8006bc4 <RadioSetRxGenericConfig+0xbc>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 8006ba6:	6961      	ldr	r1, [r4, #20]
 8006ba8:	75a9      	strb	r1, [r5, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING )
 8006baa:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
 8006bae:	2a02      	cmp	r2, #2
 8006bb0:	d012      	beq.n	8006bd8 <RadioSetRxGenericConfig+0xd0>
            || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d010      	beq.n	8006bd8 <RadioSetRxGenericConfig+0xd0>
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 8006bb6:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
 8006bba:	496f      	ldr	r1, [pc, #444]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006bbc:	75c8      	strb	r0, [r1, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8006bbe:	760a      	strb	r2, [r1, #24]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8006bc0:	754b      	strb	r3, [r1, #21]
 8006bc2:	e023      	b.n	8006c0c <RadioSetRxGenericConfig+0x104>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 8006bc4:	2b02      	cmp	r3, #2
 8006bc6:	d003      	beq.n	8006bd0 <RadioSetRxGenericConfig+0xc8>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006bc8:	4a6b      	ldr	r2, [pc, #428]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006bca:	21ff      	movs	r1, #255	; 0xff
 8006bcc:	7591      	strb	r1, [r2, #22]
 8006bce:	e7ec      	b.n	8006baa <RadioSetRxGenericConfig+0xa2>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 8006bd0:	4a69      	ldr	r2, [pc, #420]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006bd2:	21ff      	movs	r1, #255	; 0xff
 8006bd4:	7591      	strb	r1, [r2, #22]
 8006bd6:	e7e8      	b.n	8006baa <RadioSetRxGenericConfig+0xa2>
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT )
 8006bd8:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8006bdc:	f102 030f 	add.w	r3, r2, #15
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d901      	bls.n	8006bea <RadioSetRxGenericConfig+0xe2>
                && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8006be6:	2a01      	cmp	r2, #1
 8006be8:	d131      	bne.n	8006c4e <RadioSetRxGenericConfig+0x146>
            ConfigGeneric.rtx = CONFIG_RX;
 8006bea:	2300      	movs	r3, #0
 8006bec:	f88d 300c 	strb.w	r3, [sp, #12]
            ConfigGeneric.RxConfig = config;
 8006bf0:	9402      	str	r4, [sp, #8]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 8006bf2:	4a62      	ldr	r2, [pc, #392]	; (8006d7c <RadioSetRxGenericConfig+0x274>)
 8006bf4:	4b62      	ldr	r3, [pc, #392]	; (8006d80 <RadioSetRxGenericConfig+0x278>)
 8006bf6:	6819      	ldr	r1, [r3, #0]
 8006bf8:	a801      	add	r0, sp, #4
 8006bfa:	f001 fa43 	bl	8008084 <RFW_Init>
 8006bfe:	bb30      	cbnz	r0, 8006c4e <RadioSetRxGenericConfig+0x146>
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8006c00:	4b5d      	ldr	r3, [pc, #372]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006c02:	2200      	movs	r2, #0
 8006c04:	761a      	strb	r2, [r3, #24]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 8006c06:	2101      	movs	r1, #1
 8006c08:	75d9      	strb	r1, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8006c0a:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 8006c0c:	f7ff fa88 	bl	8006120 <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8006c10:	2000      	movs	r0, #0
 8006c12:	f7ff fdb3 	bl	800677c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006c16:	4d58      	ldr	r5, [pc, #352]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006c18:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8006c1c:	f000 ffa6 	bl	8007b6c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006c20:	f105 000e 	add.w	r0, r5, #14
 8006c24:	f001 f82a 	bl	8007c7c <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8006c28:	a804      	add	r0, sp, #16
 8006c2a:	f000 fc11 	bl	8007450 <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 8006c2e:	8ba0      	ldrh	r0, [r4, #28]
 8006c30:	f000 fbe5 	bl	80073fe <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 8006c34:	8b20      	ldrh	r0, [r4, #24]
 8006c36:	f000 fc28 	bl	800748a <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 8006c3a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8006c3e:	fb07 f303 	mul.w	r3, r7, r3
 8006c42:	68a2      	ldr	r2, [r4, #8]
 8006c44:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c48:	60ab      	str	r3, [r5, #8]
    return status;
 8006c4a:	2000      	movs	r0, #0
        break;
 8006c4c:	e774      	b.n	8006b38 <RadioSetRxGenericConfig+0x30>
                return -1;
 8006c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c52:	e771      	b.n	8006b38 <RadioSetRxGenericConfig+0x30>
        if( config->lora.PreambleLen == 0 )
 8006c54:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	f000 808b 	beq.w	8006d72 <RadioSetRxGenericConfig+0x26a>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 8006c5c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d055      	beq.n	8006d10 <RadioSetRxGenericConfig+0x208>
            MaxPayloadLength = 0xFF;
 8006c64:	f04f 08ff 	mov.w	r8, #255	; 0xff
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8006c68:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006c6a:	3800      	subs	r0, #0
 8006c6c:	bf18      	it	ne
 8006c6e:	2001      	movne	r0, #1
 8006c70:	f000 fd70 	bl	8007754 <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8006c74:	b2f8      	uxtb	r0, r7
 8006c76:	f000 fd7a 	bl	800776e <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006c7a:	4b3f      	ldr	r3, [pc, #252]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8006c82:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8006c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8006c8a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8006c8e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8006c92:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8006c96:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        switch( config->lora.LowDatarateOptimize )
 8006c9a:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d03e      	beq.n	8006d20 <RadioSetRxGenericConfig+0x218>
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d041      	beq.n	8006d2a <RadioSetRxGenericConfig+0x222>
 8006ca6:	b3b3      	cbz	r3, 8006d16 <RadioSetRxGenericConfig+0x20e>
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006ca8:	4d33      	ldr	r5, [pc, #204]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006caa:	2601      	movs	r6, #1
 8006cac:	73ae      	strb	r6, [r5, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 8006cae:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8006cb0:	83ab      	strh	r3, [r5, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 8006cb2:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
 8006cb6:	77ab      	strb	r3, [r5, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006cb8:	f885 801f 	strb.w	r8, [r5, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 8006cbc:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8006cc0:	f885 3020 	strb.w	r3, [r5, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 8006cc4:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8006cc8:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
        RadioStandby( );
 8006ccc:	f7ff fa28 	bl	8006120 <RadioStandby>
        RadioSetModem( MODEM_LORA );
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f7ff fd53 	bl	800677c <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006cd6:	f105 0038 	add.w	r0, r5, #56	; 0x38
 8006cda:	f000 ff47 	bl	8007b6c <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006cde:	f105 000e 	add.w	r0, r5, #14
 8006ce2:	f000 ffcb 	bl	8007c7c <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 8006ce6:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8006cea:	42b3      	cmp	r3, r6
 8006cec:	d02d      	beq.n	8006d4a <RadioSetRxGenericConfig+0x242>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8006cee:	f240 7036 	movw	r0, #1846	; 0x736
 8006cf2:	f000 fb61 	bl	80073b8 <SUBGRF_ReadRegister>
 8006cf6:	f040 0104 	orr.w	r1, r0, #4
 8006cfa:	b2c9      	uxtb	r1, r1
 8006cfc:	f240 7036 	movw	r0, #1846	; 0x736
 8006d00:	f000 fb4a 	bl	8007398 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8006d04:	4b1c      	ldr	r3, [pc, #112]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006d0a:	609a      	str	r2, [r3, #8]
    return status;
 8006d0c:	2000      	movs	r0, #0
        break;
 8006d0e:	e713      	b.n	8006b38 <RadioSetRxGenericConfig+0x30>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 8006d10:	f894 8014 	ldrb.w	r8, [r4, #20]
 8006d14:	e7a8      	b.n	8006c68 <RadioSetRxGenericConfig+0x160>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006d16:	4b18      	ldr	r3, [pc, #96]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006d1e:	e7c3      	b.n	8006ca8 <RadioSetRxGenericConfig+0x1a0>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006d20:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006d22:	2201      	movs	r2, #1
 8006d24:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
            break;
 8006d28:	e7be      	b.n	8006ca8 <RadioSetRxGenericConfig+0x1a0>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8006d2a:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8006d2e:	3b0b      	subs	r3, #11
 8006d30:	b2db      	uxtb	r3, r3
 8006d32:	2b01      	cmp	r3, #1
 8006d34:	d904      	bls.n	8006d40 <RadioSetRxGenericConfig+0x238>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8006d36:	4b10      	ldr	r3, [pc, #64]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006d3e:	e7b3      	b.n	8006ca8 <RadioSetRxGenericConfig+0x1a0>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <RadioSetRxGenericConfig+0x270>)
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 2053 	strb.w	r2, [r3, #83]	; 0x53
 8006d48:	e7ae      	b.n	8006ca8 <RadioSetRxGenericConfig+0x1a0>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8006d4a:	f240 7036 	movw	r0, #1846	; 0x736
 8006d4e:	f000 fb33 	bl	80073b8 <SUBGRF_ReadRegister>
 8006d52:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8006d56:	f240 7036 	movw	r0, #1846	; 0x736
 8006d5a:	f000 fb1d 	bl	8007398 <SUBGRF_WriteRegister>
 8006d5e:	e7d1      	b.n	8006d04 <RadioSetRxGenericConfig+0x1fc>
            return -1;
 8006d60:	f04f 30ff 	mov.w	r0, #4294967295
 8006d64:	e6e8      	b.n	8006b38 <RadioSetRxGenericConfig+0x30>
 8006d66:	f04f 30ff 	mov.w	r0, #4294967295
 8006d6a:	e6e5      	b.n	8006b38 <RadioSetRxGenericConfig+0x30>
            return -1;
 8006d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d70:	e6e2      	b.n	8006b38 <RadioSetRxGenericConfig+0x30>
            return -1;
 8006d72:	f04f 30ff 	mov.w	r0, #4294967295
 8006d76:	e6df      	b.n	8006b38 <RadioSetRxGenericConfig+0x30>
 8006d78:	200005c4 	.word	0x200005c4
 8006d7c:	200005ac 	.word	0x200005ac
 8006d80:	200005a8 	.word	0x200005a8

08006d84 <RadioSetPublicNetwork>:
{
 8006d84:	b510      	push	{r4, lr}
 8006d86:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8006d88:	4b0e      	ldr	r3, [pc, #56]	; (8006dc4 <RadioSetPublicNetwork+0x40>)
 8006d8a:	7318      	strb	r0, [r3, #12]
 8006d8c:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8006d8e:	2001      	movs	r0, #1
 8006d90:	f7ff fcf4 	bl	800677c <RadioSetModem>
    if( enable == true )
 8006d94:	b154      	cbz	r4, 8006dac <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8006d96:	2134      	movs	r1, #52	; 0x34
 8006d98:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006d9c:	f000 fafc 	bl	8007398 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8006da0:	2144      	movs	r1, #68	; 0x44
 8006da2:	f240 7041 	movw	r0, #1857	; 0x741
 8006da6:	f000 faf7 	bl	8007398 <SUBGRF_WriteRegister>
}
 8006daa:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8006dac:	2114      	movs	r1, #20
 8006dae:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8006db2:	f000 faf1 	bl	8007398 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8006db6:	2124      	movs	r1, #36	; 0x24
 8006db8:	f240 7041 	movw	r0, #1857	; 0x741
 8006dbc:	f000 faec 	bl	8007398 <SUBGRF_WriteRegister>
}
 8006dc0:	e7f3      	b.n	8006daa <RadioSetPublicNetwork+0x26>
 8006dc2:	bf00      	nop
 8006dc4:	200005c4 	.word	0x200005c4

08006dc8 <RadioSetTxConfig>:
{
 8006dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dcc:	b083      	sub	sp, #12
 8006dce:	4604      	mov	r4, r0
 8006dd0:	460d      	mov	r5, r1
 8006dd2:	4691      	mov	r9, r2
 8006dd4:	461f      	mov	r7, r3
 8006dd6:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 8006dda:	f89d 803c 	ldrb.w	r8, [sp, #60]	; 0x3c
 8006dde:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8006de2:	f001 f952 	bl	800808a <RFW_DeInit>
    switch( modem )
 8006de6:	2c01      	cmp	r4, #1
 8006de8:	d05d      	beq.n	8006ea6 <RadioSetTxConfig+0xde>
 8006dea:	2c04      	cmp	r4, #4
 8006dec:	f000 80aa 	beq.w	8006f44 <RadioSetTxConfig+0x17c>
 8006df0:	b19c      	cbz	r4, 8006e1a <RadioSetTxConfig+0x52>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8006df2:	4628      	mov	r0, r5
 8006df4:	f001 f86c 	bl	8007ed0 <SUBGRF_SetRfTxPower>
 8006df8:	4c5a      	ldr	r4, [pc, #360]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006dfa:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8006dfe:	210e      	movs	r1, #14
 8006e00:	f640 101f 	movw	r0, #2335	; 0x91f
 8006e04:	f000 fac8 	bl	8007398 <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8006e08:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8006e0c:	f001 f942 	bl	8008094 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8006e10:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006e12:	6063      	str	r3, [r4, #4]
}
 8006e14:	b003      	add	sp, #12
 8006e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006e1a:	4c52      	ldr	r4, [pc, #328]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006e1c:	f04f 0b00 	mov.w	fp, #0
 8006e20:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e26:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8006e28:	230b      	movs	r3, #11
 8006e2a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006e2e:	4638      	mov	r0, r7
 8006e30:	f001 f8c6 	bl	8007fc0 <SUBGRF_GetFskBandwidthRegValue>
 8006e34:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8006e38:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006e3c:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006e40:	00f6      	lsls	r6, r6, #3
 8006e42:	8226      	strh	r6, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8006e44:	2304      	movs	r3, #4
 8006e46:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8006e48:	2318      	movs	r3, #24
 8006e4a:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8006e4c:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8006e50:	f088 0801 	eor.w	r8, r8, #1
 8006e54:	f884 8015 	strb.w	r8, [r4, #21]
            if( crcOn == true )
 8006e58:	f1ba 0f00 	cmp.w	sl, #0
 8006e5c:	d01f      	beq.n	8006e9e <RadioSetTxConfig+0xd6>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8006e5e:	22f2      	movs	r2, #242	; 0xf2
 8006e60:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8006e62:	4c40      	ldr	r4, [pc, #256]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006e64:	2301      	movs	r3, #1
 8006e66:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8006e68:	f7ff f95a 	bl	8006120 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	f7ff fc85 	bl	800677c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006e72:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006e76:	f000 fe79 	bl	8007b6c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006e7a:	f104 000e 	add.w	r0, r4, #14
 8006e7e:	f000 fefd 	bl	8007c7c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8006e82:	4a39      	ldr	r2, [pc, #228]	; (8006f68 <RadioSetTxConfig+0x1a0>)
 8006e84:	466b      	mov	r3, sp
 8006e86:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006e8a:	e883 0003 	stmia.w	r3, {r0, r1}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fade 	bl	8007450 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8006e94:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e98:	f000 fab1 	bl	80073fe <SUBGRF_SetWhiteningSeed>
            break;
 8006e9c:	e7a9      	b.n	8006df2 <RadioSetTxConfig+0x2a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8006e9e:	4b31      	ldr	r3, [pc, #196]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	75da      	strb	r2, [r3, #23]
 8006ea4:	e7dd      	b.n	8006e62 <RadioSetTxConfig+0x9a>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8006ea6:	4a2f      	ldr	r2, [pc, #188]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8006eae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8006eb6:	492d      	ldr	r1, [pc, #180]	; (8006f6c <RadioSetTxConfig+0x1a4>)
 8006eb8:	5dc9      	ldrb	r1, [r1, r7]
 8006eba:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8006ebe:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8006ec2:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8006ec6:	b91f      	cbnz	r7, 8006ed0 <RadioSetTxConfig+0x108>
 8006ec8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eca:	3a0b      	subs	r2, #11
 8006ecc:	2a01      	cmp	r2, #1
 8006ece:	d92b      	bls.n	8006f28 <RadioSetTxConfig+0x160>
 8006ed0:	2f01      	cmp	r7, #1
 8006ed2:	d026      	beq.n	8006f22 <RadioSetTxConfig+0x15a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8006ed4:	4a23      	ldr	r2, [pc, #140]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8006edc:	4a21      	ldr	r2, [pc, #132]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006ede:	2101      	movs	r1, #1
 8006ee0:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8006ee2:	3b05      	subs	r3, #5
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	428b      	cmp	r3, r1
 8006ee8:	d923      	bls.n	8006f32 <RadioSetTxConfig+0x16a>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006eea:	4b1e      	ldr	r3, [pc, #120]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006eec:	839e      	strh	r6, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8006eee:	4c1d      	ldr	r4, [pc, #116]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006ef0:	f884 801e 	strb.w	r8, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8006ef4:	4b1e      	ldr	r3, [pc, #120]	; (8006f70 <RadioSetTxConfig+0x1a8>)
 8006ef6:	781b      	ldrb	r3, [r3, #0]
 8006ef8:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8006efa:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8006efe:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8006f02:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8006f06:	f7ff f90b 	bl	8006120 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8006f0a:	2001      	movs	r0, #1
 8006f0c:	f7ff fc36 	bl	800677c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006f10:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8006f14:	f000 fe2a 	bl	8007b6c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8006f18:	f104 000e 	add.w	r0, r4, #14
 8006f1c:	f000 feae 	bl	8007c7c <SUBGRF_SetPacketParams>
            break;
 8006f20:	e767      	b.n	8006df2 <RadioSetTxConfig+0x2a>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8006f22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006f24:	2a0c      	cmp	r2, #12
 8006f26:	d1d5      	bne.n	8006ed4 <RadioSetTxConfig+0x10c>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8006f28:	4a0e      	ldr	r2, [pc, #56]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8006f30:	e7d4      	b.n	8006edc <RadioSetTxConfig+0x114>
                if( preambleLen < 12 )
 8006f32:	2e0b      	cmp	r6, #11
 8006f34:	d803      	bhi.n	8006f3e <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8006f36:	4613      	mov	r3, r2
 8006f38:	220c      	movs	r2, #12
 8006f3a:	839a      	strh	r2, [r3, #28]
 8006f3c:	e7d7      	b.n	8006eee <RadioSetTxConfig+0x126>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8006f3e:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006f40:	839e      	strh	r6, [r3, #28]
 8006f42:	e7d4      	b.n	8006eee <RadioSetTxConfig+0x126>
            RadioSetModem(MODEM_SIGFOX_TX);
 8006f44:	2004      	movs	r0, #4
 8006f46:	f7ff fc19 	bl	800677c <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8006f4a:	4806      	ldr	r0, [pc, #24]	; (8006f64 <RadioSetTxConfig+0x19c>)
 8006f4c:	2302      	movs	r3, #2
 8006f4e:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 8006f52:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006f54:	6483      	str	r3, [r0, #72]	; 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8006f56:	2316      	movs	r3, #22
 8006f58:	f880 304c 	strb.w	r3, [r0, #76]	; 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8006f5c:	3038      	adds	r0, #56	; 0x38
 8006f5e:	f000 fe05 	bl	8007b6c <SUBGRF_SetModulationParams>
            break;
 8006f62:	e746      	b.n	8006df2 <RadioSetTxConfig+0x2a>
 8006f64:	200005c4 	.word	0x200005c4
 8006f68:	0800d594 	.word	0x0800d594
 8006f6c:	0800d8c8 	.word	0x0800d8c8
 8006f70:	2000000c 	.word	0x2000000c

08006f74 <RadioSetRxConfig>:
{
 8006f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	b087      	sub	sp, #28
 8006f7a:	4604      	mov	r4, r0
 8006f7c:	460e      	mov	r6, r1
 8006f7e:	4615      	mov	r5, r2
 8006f80:	9301      	str	r3, [sp, #4]
 8006f82:	f8bd 9044 	ldrh.w	r9, [sp, #68]	; 0x44
 8006f86:	f8bd a048 	ldrh.w	sl, [sp, #72]	; 0x48
 8006f8a:	f89d 704c 	ldrb.w	r7, [sp, #76]	; 0x4c
 8006f8e:	f89d b054 	ldrb.w	fp, [sp, #84]	; 0x54
 8006f92:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    SubgRf.RxContinuous = rxContinuous;
 8006f96:	4bb0      	ldr	r3, [pc, #704]	; (8007258 <RadioSetRxConfig+0x2e4>)
 8006f98:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 8006f9c:	f001 f875 	bl	800808a <RFW_DeInit>
    if( rxContinuous == true )
 8006fa0:	f1b8 0f00 	cmp.w	r8, #0
 8006fa4:	d001      	beq.n	8006faa <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8006fa6:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8006faa:	b16f      	cbz	r7, 8006fc8 <RadioSetRxConfig+0x54>
        MaxPayloadLength = payloadLen;
 8006fac:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 8006fb0:	4baa      	ldr	r3, [pc, #680]	; (800725c <RadioSetRxConfig+0x2e8>)
 8006fb2:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8006fb4:	2c01      	cmp	r4, #1
 8006fb6:	f000 80d2 	beq.w	800715e <RadioSetRxConfig+0x1ea>
 8006fba:	2c05      	cmp	r4, #5
 8006fbc:	d008      	beq.n	8006fd0 <RadioSetRxConfig+0x5c>
 8006fbe:	2c00      	cmp	r4, #0
 8006fc0:	d07c      	beq.n	80070bc <RadioSetRxConfig+0x148>
}
 8006fc2:	b007      	add	sp, #28
 8006fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 8006fc8:	4ba4      	ldr	r3, [pc, #656]	; (800725c <RadioSetRxConfig+0x2e8>)
 8006fca:	22ff      	movs	r2, #255	; 0xff
 8006fcc:	701a      	strb	r2, [r3, #0]
 8006fce:	e7f1      	b.n	8006fb4 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8006fd0:	2001      	movs	r0, #1
 8006fd2:	f000 fbbf 	bl	8007754 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8006fd6:	4ca0      	ldr	r4, [pc, #640]	; (8007258 <RadioSetRxConfig+0x2e4>)
 8006fd8:	2700      	movs	r7, #0
 8006fda:	f884 7038 	strb.w	r7, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8006fde:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8006fe0:	2309      	movs	r3, #9
 8006fe2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8006fe6:	f44f 7348 	mov.w	r3, #800	; 0x320
 8006fea:	6423      	str	r3, [r4, #64]	; 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8006fec:	4630      	mov	r0, r6
 8006fee:	f000 ffe7 	bl	8007fc0 <SUBGRF_GetFskBandwidthRegValue>
 8006ff2:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8006ff6:	73a7      	strb	r7, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8006ff8:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8006ffc:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8007000:	74a7      	strb	r7, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8007002:	2310      	movs	r3, #16
 8007004:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8007006:	7527      	strb	r7, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8007008:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 800700a:	4b94      	ldr	r3, [pc, #592]	; (800725c <RadioSetRxConfig+0x2e8>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	75a3      	strb	r3, [r4, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007010:	2301      	movs	r3, #1
 8007012:	75e3      	strb	r3, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8007014:	7627      	strb	r7, [r4, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8007016:	2005      	movs	r0, #5
 8007018:	f7ff fbb0 	bl	800677c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800701c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8007020:	f000 fda4 	bl	8007b6c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007024:	f104 000e 	add.w	r0, r4, #14
 8007028:	f000 fe28 	bl	8007c7c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800702c:	ab02      	add	r3, sp, #8
 800702e:	4a8c      	ldr	r2, [pc, #560]	; (8007260 <RadioSetRxConfig+0x2ec>)
 8007030:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007034:	e883 0003 	stmia.w	r3, {r0, r1}
 8007038:	4618      	mov	r0, r3
 800703a:	f000 fa09 	bl	8007450 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800703e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007042:	f000 f9dc 	bl	80073fe <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8007046:	f640 00b8 	movw	r0, #2232	; 0x8b8
 800704a:	f7fe ffe9 	bl	8006020 <RadioRead>
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 800704e:	f000 01ef 	and.w	r1, r0, #239	; 0xef
 8007052:	f640 00b8 	movw	r0, #2232	; 0x8b8
 8007056:	f7fe ffe7 	bl	8006028 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 800705a:	2104      	movs	r1, #4
 800705c:	f640 00b9 	movw	r0, #2233	; 0x8b9
 8007060:	f7fe ffe2 	bl	8006028 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8007064:	f640 009b 	movw	r0, #2203	; 0x89b
 8007068:	f7fe ffda 	bl	8006020 <RadioRead>
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 800706c:	f000 01e3 	and.w	r1, r0, #227	; 0xe3
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8007070:	f041 0108 	orr.w	r1, r1, #8
 8007074:	f640 009b 	movw	r0, #2203	; 0x89b
 8007078:	f7fe ffd6 	bl	8006028 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 800707c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007080:	f7fe ffce 	bl	8006020 <RadioRead>
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8007084:	f000 01e7 	and.w	r1, r0, #231	; 0xe7
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8007088:	f041 0118 	orr.w	r1, r1, #24
 800708c:	f240 60d1 	movw	r0, #1745	; 0x6d1
 8007090:	f7fe ffca 	bl	8006028 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8007094:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007098:	f7fe ffc2 	bl	8006020 <RadioRead>
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 800709c:	f000 018f 	and.w	r1, r0, #143	; 0x8f
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 80070a0:	f041 0150 	orr.w	r1, r1, #80	; 0x50
 80070a4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 80070a8:	f7fe ffbe 	bl	8006028 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80070ac:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 80070b0:	fb03 f30a 	mul.w	r3, r3, sl
 80070b4:	fbb3 f3f5 	udiv	r3, r3, r5
 80070b8:	60a3      	str	r3, [r4, #8]
            break;
 80070ba:	e782      	b.n	8006fc2 <RadioSetRxConfig+0x4e>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80070bc:	2000      	movs	r0, #0
 80070be:	f000 fb49 	bl	8007754 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80070c2:	4c65      	ldr	r4, [pc, #404]	; (8007258 <RadioSetRxConfig+0x2e4>)
 80070c4:	f04f 0800 	mov.w	r8, #0
 80070c8:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 80070cc:	63e5      	str	r5, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 80070ce:	230b      	movs	r3, #11
 80070d0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 80070d4:	4630      	mov	r0, r6
 80070d6:	f000 ff73 	bl	8007fc0 <SUBGRF_GetFskBandwidthRegValue>
 80070da:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80070de:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 80070e2:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80070e6:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 80070ea:	2304      	movs	r3, #4
 80070ec:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 80070ee:	2318      	movs	r3, #24
 80070f0:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 80070f2:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 80070f6:	f087 0701 	eor.w	r7, r7, #1
 80070fa:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 80070fc:	4b57      	ldr	r3, [pc, #348]	; (800725c <RadioSetRxConfig+0x2e8>)
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 8007102:	f1bb 0f00 	cmp.w	fp, #0
 8007106:	d026      	beq.n	8007156 <RadioSetRxConfig+0x1e2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8007108:	22f2      	movs	r2, #242	; 0xf2
 800710a:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 800710c:	4c52      	ldr	r4, [pc, #328]	; (8007258 <RadioSetRxConfig+0x2e4>)
 800710e:	2301      	movs	r3, #1
 8007110:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8007112:	f7ff f805 	bl	8006120 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 8007116:	2000      	movs	r0, #0
 8007118:	f7ff fb30 	bl	800677c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 800711c:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8007120:	f000 fd24 	bl	8007b6c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8007124:	f104 000e 	add.w	r0, r4, #14
 8007128:	f000 fda8 	bl	8007c7c <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 800712c:	4a4d      	ldr	r2, [pc, #308]	; (8007264 <RadioSetRxConfig+0x2f0>)
 800712e:	ab04      	add	r3, sp, #16
 8007130:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007134:	e883 0003 	stmia.w	r3, {r0, r1}
 8007138:	4618      	mov	r0, r3
 800713a:	f000 f989 	bl	8007450 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 800713e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007142:	f000 f95c 	bl	80073fe <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8007146:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800714a:	fb03 f30a 	mul.w	r3, r3, sl
 800714e:	fbb3 f3f5 	udiv	r3, r3, r5
 8007152:	60a3      	str	r3, [r4, #8]
            break;
 8007154:	e735      	b.n	8006fc2 <RadioSetRxConfig+0x4e>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8007156:	4b40      	ldr	r3, [pc, #256]	; (8007258 <RadioSetRxConfig+0x2e4>)
 8007158:	2201      	movs	r2, #1
 800715a:	75da      	strb	r2, [r3, #23]
 800715c:	e7d6      	b.n	800710c <RadioSetRxConfig+0x198>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 800715e:	2000      	movs	r0, #0
 8007160:	f000 faf8 	bl	8007754 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8007164:	4a3c      	ldr	r2, [pc, #240]	; (8007258 <RadioSetRxConfig+0x2e4>)
 8007166:	2301      	movs	r3, #1
 8007168:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 800716c:	b2eb      	uxtb	r3, r5
 800716e:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 8007172:	493d      	ldr	r1, [pc, #244]	; (8007268 <RadioSetRxConfig+0x2f4>)
 8007174:	5d89      	ldrb	r1, [r1, r6]
 8007176:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 800717a:	9901      	ldr	r1, [sp, #4]
 800717c:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8007180:	b91e      	cbnz	r6, 800718a <RadioSetRxConfig+0x216>
 8007182:	f1a5 020b 	sub.w	r2, r5, #11
 8007186:	2a01      	cmp	r2, #1
 8007188:	d94b      	bls.n	8007222 <RadioSetRxConfig+0x2ae>
 800718a:	2e01      	cmp	r6, #1
 800718c:	d047      	beq.n	800721e <RadioSetRxConfig+0x2aa>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 800718e:	4a32      	ldr	r2, [pc, #200]	; (8007258 <RadioSetRxConfig+0x2e4>)
 8007190:	2100      	movs	r1, #0
 8007192:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8007196:	4a30      	ldr	r2, [pc, #192]	; (8007258 <RadioSetRxConfig+0x2e4>)
 8007198:	2101      	movs	r1, #1
 800719a:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 800719c:	3b05      	subs	r3, #5
 800719e:	b2db      	uxtb	r3, r3
 80071a0:	428b      	cmp	r3, r1
 80071a2:	d943      	bls.n	800722c <RadioSetRxConfig+0x2b8>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80071a4:	4b2c      	ldr	r3, [pc, #176]	; (8007258 <RadioSetRxConfig+0x2e4>)
 80071a6:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 80071aa:	4c2b      	ldr	r4, [pc, #172]	; (8007258 <RadioSetRxConfig+0x2e4>)
 80071ac:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80071ae:	4b2b      	ldr	r3, [pc, #172]	; (800725c <RadioSetRxConfig+0x2e8>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 80071b4:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 80071b8:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80071bc:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 80071c0:	f7fe ffae 	bl	8006120 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80071c4:	2001      	movs	r0, #1
 80071c6:	f7ff fad9 	bl	800677c <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80071ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80071ce:	f000 fccd 	bl	8007b6c <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80071d2:	f104 000e 	add.w	r0, r4, #14
 80071d6:	f000 fd51 	bl	8007c7c <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80071da:	fa5f f08a 	uxtb.w	r0, sl
 80071de:	f000 fac6 	bl	800776e <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 80071e2:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80071e6:	f000 f8e7 	bl	80073b8 <SUBGRF_ReadRegister>
 80071ea:	f000 0101 	and.w	r1, r0, #1
 80071ee:	f640 00a3 	movw	r0, #2211	; 0x8a3
 80071f2:	f000 f8d1 	bl	8007398 <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80071f6:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d021      	beq.n	8007242 <RadioSetRxConfig+0x2ce>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80071fe:	f240 7036 	movw	r0, #1846	; 0x736
 8007202:	f000 f8d9 	bl	80073b8 <SUBGRF_ReadRegister>
 8007206:	f040 0104 	orr.w	r1, r0, #4
 800720a:	b2c9      	uxtb	r1, r1
 800720c:	f240 7036 	movw	r0, #1846	; 0x736
 8007210:	f000 f8c2 	bl	8007398 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 8007214:	4b10      	ldr	r3, [pc, #64]	; (8007258 <RadioSetRxConfig+0x2e4>)
 8007216:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800721a:	609a      	str	r2, [r3, #8]
}
 800721c:	e6d1      	b.n	8006fc2 <RadioSetRxConfig+0x4e>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 800721e:	2d0c      	cmp	r5, #12
 8007220:	d1b5      	bne.n	800718e <RadioSetRxConfig+0x21a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8007222:	4a0d      	ldr	r2, [pc, #52]	; (8007258 <RadioSetRxConfig+0x2e4>)
 8007224:	2101      	movs	r1, #1
 8007226:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 800722a:	e7b4      	b.n	8007196 <RadioSetRxConfig+0x222>
                if( preambleLen < 12 )
 800722c:	f1b9 0f0b 	cmp.w	r9, #11
 8007230:	d803      	bhi.n	800723a <RadioSetRxConfig+0x2c6>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8007232:	4613      	mov	r3, r2
 8007234:	220c      	movs	r2, #12
 8007236:	839a      	strh	r2, [r3, #28]
 8007238:	e7b7      	b.n	80071aa <RadioSetRxConfig+0x236>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 800723a:	4b07      	ldr	r3, [pc, #28]	; (8007258 <RadioSetRxConfig+0x2e4>)
 800723c:	f8a3 901c 	strh.w	r9, [r3, #28]
 8007240:	e7b3      	b.n	80071aa <RadioSetRxConfig+0x236>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 8007242:	f240 7036 	movw	r0, #1846	; 0x736
 8007246:	f000 f8b7 	bl	80073b8 <SUBGRF_ReadRegister>
 800724a:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 800724e:	f240 7036 	movw	r0, #1846	; 0x736
 8007252:	f000 f8a1 	bl	8007398 <SUBGRF_WriteRegister>
 8007256:	e7dd      	b.n	8007214 <RadioSetRxConfig+0x2a0>
 8007258:	200005c4 	.word	0x200005c4
 800725c:	2000000c 	.word	0x2000000c
 8007260:	0800d59c 	.word	0x0800d59c
 8007264:	0800d594 	.word	0x0800d594
 8007268:	0800d8c8 	.word	0x0800d8c8

0800726c <RadioIsChannelFree>:
{
 800726c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800726e:	b08b      	sub	sp, #44	; 0x2c
 8007270:	4604      	mov	r4, r0
 8007272:	460f      	mov	r7, r1
 8007274:	4616      	mov	r6, r2
 8007276:	461d      	mov	r5, r3
    RadioStandby( );
 8007278:	f7fe ff52 	bl	8006120 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 800727c:	2000      	movs	r0, #0
 800727e:	f7ff fa7d 	bl	800677c <RadioSetModem>
    RadioSetChannel( freq );
 8007282:	4620      	mov	r0, r4
 8007284:	f7ff f944 	bl	8006510 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8007288:	2301      	movs	r3, #1
 800728a:	9309      	str	r3, [sp, #36]	; 0x24
 800728c:	2400      	movs	r4, #0
 800728e:	9408      	str	r4, [sp, #32]
 8007290:	9407      	str	r4, [sp, #28]
 8007292:	9406      	str	r4, [sp, #24]
 8007294:	9405      	str	r4, [sp, #20]
 8007296:	9404      	str	r4, [sp, #16]
 8007298:	9403      	str	r4, [sp, #12]
 800729a:	9402      	str	r4, [sp, #8]
 800729c:	2303      	movs	r3, #3
 800729e:	9301      	str	r3, [sp, #4]
 80072a0:	9700      	str	r7, [sp, #0]
 80072a2:	4623      	mov	r3, r4
 80072a4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80072a8:	4639      	mov	r1, r7
 80072aa:	4620      	mov	r0, r4
 80072ac:	f7ff fe62 	bl	8006f74 <RadioSetRxConfig>
    RadioRx( 0 );
 80072b0:	4620      	mov	r0, r4
 80072b2:	f7ff f945 	bl	8006540 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 80072b6:	f7ff f8f7 	bl	80064a8 <RadioGetWakeupTime>
 80072ba:	f7fa f95f 	bl	800157c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 80072be:	f001 faaf 	bl	8008820 <UTIL_TIMER_GetCurrentTime>
 80072c2:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 80072c4:	4620      	mov	r0, r4
 80072c6:	f001 fab5 	bl	8008834 <UTIL_TIMER_GetElapsedTime>
 80072ca:	42a8      	cmp	r0, r5
 80072cc:	d206      	bcs.n	80072dc <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 80072ce:	2000      	movs	r0, #0
 80072d0:	f7ff f8f7 	bl	80064c2 <RadioRssi>
        if( rssi > rssiThresh )
 80072d4:	42b0      	cmp	r0, r6
 80072d6:	ddf5      	ble.n	80072c4 <RadioIsChannelFree+0x58>
            status = false;
 80072d8:	2400      	movs	r4, #0
 80072da:	e000      	b.n	80072de <RadioIsChannelFree+0x72>
    bool status = true;
 80072dc:	2401      	movs	r4, #1
    RadioStandby( );
 80072de:	f7fe ff1f 	bl	8006120 <RadioStandby>
}
 80072e2:	4620      	mov	r0, r4
 80072e4:	b00b      	add	sp, #44	; 0x2c
 80072e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080072e8 <RadioInit>:
{
 80072e8:	b570      	push	{r4, r5, r6, lr}
 80072ea:	b082      	sub	sp, #8
    RadioEvents = events;
 80072ec:	4b1d      	ldr	r3, [pc, #116]	; (8007364 <RadioInit+0x7c>)
 80072ee:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 80072f0:	4d1d      	ldr	r5, [pc, #116]	; (8007368 <RadioInit+0x80>)
 80072f2:	2400      	movs	r4, #0
 80072f4:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 80072f6:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 80072f8:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80072fa:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 80072fc:	481b      	ldr	r0, [pc, #108]	; (800736c <RadioInit+0x84>)
 80072fe:	f000 fb27 	bl	8007950 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8007302:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8007304:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 8007306:	f000 fa53 	bl	80077b0 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 800730a:	4621      	mov	r1, r4
 800730c:	4620      	mov	r0, r4
 800730e:	f000 fd27 	bl	8007d60 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8007312:	2204      	movs	r2, #4
 8007314:	4621      	mov	r1, r4
 8007316:	2001      	movs	r0, #1
 8007318:	f000 fb9a 	bl	8007a50 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 800731c:	4623      	mov	r3, r4
 800731e:	4622      	mov	r2, r4
 8007320:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8007324:	4608      	mov	r0, r1
 8007326:	f000 fada 	bl	80078de <SUBGRF_SetDioIrqParams>
    RadioSleep();
 800732a:	f7ff f941 	bl	80065b0 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 800732e:	4e10      	ldr	r6, [pc, #64]	; (8007370 <RadioInit+0x88>)
 8007330:	9400      	str	r4, [sp, #0]
 8007332:	4b10      	ldr	r3, [pc, #64]	; (8007374 <RadioInit+0x8c>)
 8007334:	4622      	mov	r2, r4
 8007336:	f04f 31ff 	mov.w	r1, #4294967295
 800733a:	4630      	mov	r0, r6
 800733c:	f001 fa52 	bl	80087e4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8007340:	4d0d      	ldr	r5, [pc, #52]	; (8007378 <RadioInit+0x90>)
 8007342:	9400      	str	r4, [sp, #0]
 8007344:	4b0d      	ldr	r3, [pc, #52]	; (800737c <RadioInit+0x94>)
 8007346:	4622      	mov	r2, r4
 8007348:	f04f 31ff 	mov.w	r1, #4294967295
 800734c:	4628      	mov	r0, r5
 800734e:	f001 fa49 	bl	80087e4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8007352:	4630      	mov	r0, r6
 8007354:	f001 faa4 	bl	80088a0 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8007358:	4628      	mov	r0, r5
 800735a:	f001 faa1 	bl	80088a0 <UTIL_TIMER_Stop>
}
 800735e:	b002      	add	sp, #8
 8007360:	bd70      	pop	{r4, r5, r6, pc}
 8007362:	bf00      	nop
 8007364:	200005a8 	.word	0x200005a8
 8007368:	200005c4 	.word	0x200005c4
 800736c:	08006495 	.word	0x08006495
 8007370:	20000620 	.word	0x20000620
 8007374:	08005f05 	.word	0x08005f05
 8007378:	200005ac 	.word	0x200005ac
 800737c:	08005f2d 	.word	0x08005f2d

08007380 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 8007380:	4b01      	ldr	r3, [pc, #4]	; (8007388 <SUBGRF_GetOperatingMode+0x8>)
 8007382:	7818      	ldrb	r0, [r3, #0]
 8007384:	4770      	bx	lr
 8007386:	bf00      	nop
 8007388:	2000063e 	.word	0x2000063e

0800738c <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 800738c:	4b01      	ldr	r3, [pc, #4]	; (8007394 <SUBGRF_GetPacketType+0x8>)
 800738e:	7818      	ldrb	r0, [r3, #0]
 8007390:	4770      	bx	lr
 8007392:	bf00      	nop
 8007394:	2000063f 	.word	0x2000063f

08007398 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 8007398:	b500      	push	{lr}
 800739a:	b083      	sub	sp, #12
 800739c:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80073a0:	2301      	movs	r3, #1
 80073a2:	f10d 0207 	add.w	r2, sp, #7
 80073a6:	4601      	mov	r1, r0
 80073a8:	4802      	ldr	r0, [pc, #8]	; (80073b4 <SUBGRF_WriteRegister+0x1c>)
 80073aa:	f7fd f8c3 	bl	8004534 <HAL_SUBGHZ_WriteRegisters>
}
 80073ae:	b003      	add	sp, #12
 80073b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80073b4:	20000288 	.word	0x20000288

080073b8 <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80073b8:	b500      	push	{lr}
 80073ba:	b083      	sub	sp, #12
 80073bc:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 80073be:	2301      	movs	r3, #1
 80073c0:	f10d 0207 	add.w	r2, sp, #7
 80073c4:	4803      	ldr	r0, [pc, #12]	; (80073d4 <SUBGRF_ReadRegister+0x1c>)
 80073c6:	f7fd f905 	bl	80045d4 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 80073ca:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80073ce:	b003      	add	sp, #12
 80073d0:	f85d fb04 	ldr.w	pc, [sp], #4
 80073d4:	20000288 	.word	0x20000288

080073d8 <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 80073d8:	b510      	push	{r4, lr}
 80073da:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 80073dc:	f7fa ffc0 	bl	8002360 <RBI_IsDCDC>
 80073e0:	2801      	cmp	r0, #1
 80073e2:	d000      	beq.n	80073e6 <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 80073e4:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 80073e6:	f640 1023 	movw	r0, #2339	; 0x923
 80073ea:	f7ff ffe5 	bl	80073b8 <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 80073ee:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 80073f2:	4321      	orrs	r1, r4
 80073f4:	f640 1023 	movw	r0, #2339	; 0x923
 80073f8:	f7ff ffce 	bl	8007398 <SUBGRF_WriteRegister>
}
 80073fc:	e7f2      	b.n	80073e4 <Radio_SMPS_Set+0xc>

080073fe <SUBGRF_SetWhiteningSeed>:
{
 80073fe:	b510      	push	{r4, lr}
 8007400:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8007402:	f7ff ffc3 	bl	800738c <SUBGRF_GetPacketType>
 8007406:	b100      	cbz	r0, 800740a <SUBGRF_SetWhiteningSeed+0xc>
}
 8007408:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 800740a:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 800740e:	f7ff ffd3 	bl	80073b8 <SUBGRF_ReadRegister>
 8007412:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8007416:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 800741a:	4301      	orrs	r1, r0
 800741c:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8007420:	f7ff ffba 	bl	8007398 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8007424:	b2e1      	uxtb	r1, r4
 8007426:	f240 60b9 	movw	r0, #1721	; 0x6b9
 800742a:	f7ff ffb5 	bl	8007398 <SUBGRF_WriteRegister>
}
 800742e:	e7eb      	b.n	8007408 <SUBGRF_SetWhiteningSeed+0xa>

08007430 <SUBGRF_WriteRegisters>:
{
 8007430:	b510      	push	{r4, lr}
 8007432:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007434:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007438:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 800743a:	460a      	mov	r2, r1
 800743c:	4601      	mov	r1, r0
 800743e:	4803      	ldr	r0, [pc, #12]	; (800744c <SUBGRF_WriteRegisters+0x1c>)
 8007440:	f7fd f878 	bl	8004534 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007444:	f384 8810 	msr	PRIMASK, r4
}
 8007448:	bd10      	pop	{r4, pc}
 800744a:	bf00      	nop
 800744c:	20000288 	.word	0x20000288

08007450 <SUBGRF_SetSyncWord>:
{
 8007450:	b508      	push	{r3, lr}
 8007452:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8007454:	2208      	movs	r2, #8
 8007456:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 800745a:	f7ff ffe9 	bl	8007430 <SUBGRF_WriteRegisters>
}
 800745e:	2000      	movs	r0, #0
 8007460:	bd08      	pop	{r3, pc}

08007462 <SUBGRF_SetCrcSeed>:
{
 8007462:	b500      	push	{lr}
 8007464:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8007466:	0a03      	lsrs	r3, r0, #8
 8007468:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 800746c:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8007470:	f7ff ff8c 	bl	800738c <SUBGRF_GetPacketType>
 8007474:	b110      	cbz	r0, 800747c <SUBGRF_SetCrcSeed+0x1a>
}
 8007476:	b003      	add	sp, #12
 8007478:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 800747c:	2202      	movs	r2, #2
 800747e:	a901      	add	r1, sp, #4
 8007480:	f240 60bc 	movw	r0, #1724	; 0x6bc
 8007484:	f7ff ffd4 	bl	8007430 <SUBGRF_WriteRegisters>
}
 8007488:	e7f5      	b.n	8007476 <SUBGRF_SetCrcSeed+0x14>

0800748a <SUBGRF_SetCrcPolynomial>:
{
 800748a:	b500      	push	{lr}
 800748c:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 800748e:	0a03      	lsrs	r3, r0, #8
 8007490:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8007494:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 8007498:	f7ff ff78 	bl	800738c <SUBGRF_GetPacketType>
 800749c:	b110      	cbz	r0, 80074a4 <SUBGRF_SetCrcPolynomial+0x1a>
}
 800749e:	b003      	add	sp, #12
 80074a0:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 80074a4:	2202      	movs	r2, #2
 80074a6:	a901      	add	r1, sp, #4
 80074a8:	f240 60be 	movw	r0, #1726	; 0x6be
 80074ac:	f7ff ffc0 	bl	8007430 <SUBGRF_WriteRegisters>
}
 80074b0:	e7f5      	b.n	800749e <SUBGRF_SetCrcPolynomial+0x14>
	...

080074b4 <SUBGRF_ReadRegisters>:
{
 80074b4:	b510      	push	{r4, lr}
 80074b6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80074bc:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 80074be:	460a      	mov	r2, r1
 80074c0:	4601      	mov	r1, r0
 80074c2:	4803      	ldr	r0, [pc, #12]	; (80074d0 <SUBGRF_ReadRegisters+0x1c>)
 80074c4:	f7fd f886 	bl	80045d4 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074c8:	f384 8810 	msr	PRIMASK, r4
}
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	bf00      	nop
 80074d0:	20000288 	.word	0x20000288

080074d4 <SUBGRF_WriteBuffer>:
{
 80074d4:	b510      	push	{r4, lr}
 80074d6:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074d8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80074dc:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80074de:	460a      	mov	r2, r1
 80074e0:	4601      	mov	r1, r0
 80074e2:	4803      	ldr	r0, [pc, #12]	; (80074f0 <SUBGRF_WriteBuffer+0x1c>)
 80074e4:	f7fd f9d4 	bl	8004890 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074e8:	f384 8810 	msr	PRIMASK, r4
}
 80074ec:	bd10      	pop	{r4, pc}
 80074ee:	bf00      	nop
 80074f0:	20000288 	.word	0x20000288

080074f4 <SUBGRF_SetPayload>:
{
 80074f4:	b508      	push	{r3, lr}
 80074f6:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 80074f8:	4601      	mov	r1, r0
 80074fa:	2000      	movs	r0, #0
 80074fc:	f7ff ffea 	bl	80074d4 <SUBGRF_WriteBuffer>
}
 8007500:	bd08      	pop	{r3, pc}
	...

08007504 <SUBGRF_ReadBuffer>:
{
 8007504:	b510      	push	{r4, lr}
 8007506:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007508:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800750c:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 800750e:	460a      	mov	r2, r1
 8007510:	4601      	mov	r1, r0
 8007512:	4803      	ldr	r0, [pc, #12]	; (8007520 <SUBGRF_ReadBuffer+0x1c>)
 8007514:	f7fd fa06 	bl	8004924 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007518:	f384 8810 	msr	PRIMASK, r4
}
 800751c:	bd10      	pop	{r4, pc}
 800751e:	bf00      	nop
 8007520:	20000288 	.word	0x20000288

08007524 <SUBGRF_WriteCommand>:
{
 8007524:	b510      	push	{r4, lr}
 8007526:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007528:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800752c:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 800752e:	460a      	mov	r2, r1
 8007530:	4601      	mov	r1, r0
 8007532:	4803      	ldr	r0, [pc, #12]	; (8007540 <SUBGRF_WriteCommand+0x1c>)
 8007534:	f7fd f8a2 	bl	800467c <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007538:	f384 8810 	msr	PRIMASK, r4
}
 800753c:	bd10      	pop	{r4, pc}
 800753e:	bf00      	nop
 8007540:	20000288 	.word	0x20000288

08007544 <SUBGRF_SetSleep>:
{
 8007544:	b510      	push	{r4, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 800754a:	2000      	movs	r0, #0
 800754c:	f7fa fefc 	bl	8002348 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8007550:	2002      	movs	r0, #2
 8007552:	f7ff ff41 	bl	80073d8 <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007556:	f004 0304 	and.w	r3, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 800755a:	f004 0202 	and.w	r2, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 800755e:	4313      	orrs	r3, r2
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8007560:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8007564:	4323      	orrs	r3, r4
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8007566:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 800756a:	2201      	movs	r2, #1
 800756c:	f10d 0107 	add.w	r1, sp, #7
 8007570:	2084      	movs	r0, #132	; 0x84
 8007572:	f7ff ffd7 	bl	8007524 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8007576:	4b02      	ldr	r3, [pc, #8]	; (8007580 <SUBGRF_SetSleep+0x3c>)
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
}
 800757c:	b002      	add	sp, #8
 800757e:	bd10      	pop	{r4, pc}
 8007580:	2000063e 	.word	0x2000063e

08007584 <SUBGRF_SetStandby>:
{
 8007584:	b500      	push	{lr}
 8007586:	b083      	sub	sp, #12
 8007588:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 800758c:	2201      	movs	r2, #1
 800758e:	f10d 0107 	add.w	r1, sp, #7
 8007592:	2080      	movs	r0, #128	; 0x80
 8007594:	f7ff ffc6 	bl	8007524 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8007598:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800759c:	b92b      	cbnz	r3, 80075aa <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 800759e:	4b05      	ldr	r3, [pc, #20]	; (80075b4 <SUBGRF_SetStandby+0x30>)
 80075a0:	2201      	movs	r2, #1
 80075a2:	701a      	strb	r2, [r3, #0]
}
 80075a4:	b003      	add	sp, #12
 80075a6:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 80075aa:	4b02      	ldr	r3, [pc, #8]	; (80075b4 <SUBGRF_SetStandby+0x30>)
 80075ac:	2202      	movs	r2, #2
 80075ae:	701a      	strb	r2, [r3, #0]
}
 80075b0:	e7f8      	b.n	80075a4 <SUBGRF_SetStandby+0x20>
 80075b2:	bf00      	nop
 80075b4:	2000063e 	.word	0x2000063e

080075b8 <SUBGRF_SetTx>:
{
 80075b8:	b500      	push	{lr}
 80075ba:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 80075bc:	4b0a      	ldr	r3, [pc, #40]	; (80075e8 <SUBGRF_SetTx+0x30>)
 80075be:	2204      	movs	r2, #4
 80075c0:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80075c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80075c6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80075ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80075ce:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80075d2:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 80075d6:	2203      	movs	r2, #3
 80075d8:	a901      	add	r1, sp, #4
 80075da:	2083      	movs	r0, #131	; 0x83
 80075dc:	f7ff ffa2 	bl	8007524 <SUBGRF_WriteCommand>
}
 80075e0:	b003      	add	sp, #12
 80075e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80075e6:	bf00      	nop
 80075e8:	2000063e 	.word	0x2000063e

080075ec <SUBGRF_SendPayload>:
{
 80075ec:	b510      	push	{r4, lr}
 80075ee:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 80075f0:	f7ff ff80 	bl	80074f4 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 80075f4:	4620      	mov	r0, r4
 80075f6:	f7ff ffdf 	bl	80075b8 <SUBGRF_SetTx>
}
 80075fa:	bd10      	pop	{r4, pc}

080075fc <SUBGRF_SetRx>:
{
 80075fc:	b500      	push	{lr}
 80075fe:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8007600:	4b0a      	ldr	r3, [pc, #40]	; (800762c <SUBGRF_SetRx+0x30>)
 8007602:	2205      	movs	r2, #5
 8007604:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007606:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800760a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 800760e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8007612:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8007616:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 800761a:	2203      	movs	r2, #3
 800761c:	a901      	add	r1, sp, #4
 800761e:	2082      	movs	r0, #130	; 0x82
 8007620:	f7ff ff80 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007624:	b003      	add	sp, #12
 8007626:	f85d fb04 	ldr.w	pc, [sp], #4
 800762a:	bf00      	nop
 800762c:	2000063e 	.word	0x2000063e

08007630 <SUBGRF_GetRandom>:
{
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	b082      	sub	sp, #8
    uint32_t number = 0;
 8007634:	2600      	movs	r6, #0
 8007636:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8007638:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800763c:	f7ff febc 	bl	80073b8 <SUBGRF_ReadRegister>
 8007640:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8007642:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 8007646:	f640 00e2 	movw	r0, #2274	; 0x8e2
 800764a:	f7ff fea5 	bl	8007398 <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 800764e:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007652:	f7ff feb1 	bl	80073b8 <SUBGRF_ReadRegister>
 8007656:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8007658:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 800765c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007660:	f7ff fe9a 	bl	8007398 <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8007664:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8007668:	f7ff ffc8 	bl	80075fc <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 800766c:	2204      	movs	r2, #4
 800766e:	eb0d 0102 	add.w	r1, sp, r2
 8007672:	f640 0019 	movw	r0, #2073	; 0x819
 8007676:	f7ff ff1d 	bl	80074b4 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 800767a:	4630      	mov	r0, r6
 800767c:	f7ff ff82 	bl	8007584 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8007680:	4629      	mov	r1, r5
 8007682:	f640 00e2 	movw	r0, #2274	; 0x8e2
 8007686:	f7ff fe87 	bl	8007398 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 800768a:	4621      	mov	r1, r4
 800768c:	f640 00e5 	movw	r0, #2277	; 0x8e5
 8007690:	f7ff fe82 	bl	8007398 <SUBGRF_WriteRegister>
}
 8007694:	9801      	ldr	r0, [sp, #4]
 8007696:	b002      	add	sp, #8
 8007698:	bd70      	pop	{r4, r5, r6, pc}
	...

0800769c <SUBGRF_SetRxBoosted>:
{
 800769c:	b510      	push	{r4, lr}
 800769e:	b082      	sub	sp, #8
 80076a0:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 80076a2:	4b0c      	ldr	r3, [pc, #48]	; (80076d4 <SUBGRF_SetRxBoosted+0x38>)
 80076a4:	2205      	movs	r2, #5
 80076a6:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 80076a8:	2197      	movs	r1, #151	; 0x97
 80076aa:	f640 00ac 	movw	r0, #2220	; 0x8ac
 80076ae:	f7ff fe73 	bl	8007398 <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80076b2:	f3c4 4307 	ubfx	r3, r4, #16, #8
 80076b6:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 80076ba:	f3c4 2307 	ubfx	r3, r4, #8, #8
 80076be:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 80076c2:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 80076c6:	2203      	movs	r2, #3
 80076c8:	a901      	add	r1, sp, #4
 80076ca:	2082      	movs	r0, #130	; 0x82
 80076cc:	f7ff ff2a 	bl	8007524 <SUBGRF_WriteCommand>
}
 80076d0:	b002      	add	sp, #8
 80076d2:	bd10      	pop	{r4, pc}
 80076d4:	2000063e 	.word	0x2000063e

080076d8 <SUBGRF_SetRxDutyCycle>:
{
 80076d8:	b500      	push	{lr}
 80076da:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 80076dc:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80076e0:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 80076e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80076e8:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 80076ec:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 80076f0:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80076f4:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 80076f8:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80076fc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8007700:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8007704:	2206      	movs	r2, #6
 8007706:	4669      	mov	r1, sp
 8007708:	2094      	movs	r0, #148	; 0x94
 800770a:	f7ff ff0b 	bl	8007524 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 800770e:	4b03      	ldr	r3, [pc, #12]	; (800771c <SUBGRF_SetRxDutyCycle+0x44>)
 8007710:	2206      	movs	r2, #6
 8007712:	701a      	strb	r2, [r3, #0]
}
 8007714:	b003      	add	sp, #12
 8007716:	f85d fb04 	ldr.w	pc, [sp], #4
 800771a:	bf00      	nop
 800771c:	2000063e 	.word	0x2000063e

08007720 <SUBGRF_SetCad>:
{
 8007720:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8007722:	2200      	movs	r2, #0
 8007724:	4611      	mov	r1, r2
 8007726:	20c5      	movs	r0, #197	; 0xc5
 8007728:	f7ff fefc 	bl	8007524 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 800772c:	4b01      	ldr	r3, [pc, #4]	; (8007734 <SUBGRF_SetCad+0x14>)
 800772e:	2207      	movs	r2, #7
 8007730:	701a      	strb	r2, [r3, #0]
}
 8007732:	bd08      	pop	{r3, pc}
 8007734:	2000063e 	.word	0x2000063e

08007738 <SUBGRF_SetTxContinuousWave>:
{
 8007738:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 800773a:	2200      	movs	r2, #0
 800773c:	4611      	mov	r1, r2
 800773e:	20d1      	movs	r0, #209	; 0xd1
 8007740:	f7ff fef0 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007744:	bd08      	pop	{r3, pc}

08007746 <SUBGRF_SetTxInfinitePreamble>:
{
 8007746:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8007748:	2200      	movs	r2, #0
 800774a:	4611      	mov	r1, r2
 800774c:	20d2      	movs	r0, #210	; 0xd2
 800774e:	f7ff fee9 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007752:	bd08      	pop	{r3, pc}

08007754 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 8007754:	b500      	push	{lr}
 8007756:	b083      	sub	sp, #12
 8007758:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 800775c:	2201      	movs	r2, #1
 800775e:	f10d 0107 	add.w	r1, sp, #7
 8007762:	209f      	movs	r0, #159	; 0x9f
 8007764:	f7ff fede 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007768:	b003      	add	sp, #12
 800776a:	f85d fb04 	ldr.w	pc, [sp], #4

0800776e <SUBGRF_SetLoRaSymbNumTimeout>:
{
 800776e:	b500      	push	{lr}
 8007770:	b083      	sub	sp, #12
 8007772:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8007776:	2201      	movs	r2, #1
 8007778:	f10d 0107 	add.w	r1, sp, #7
 800777c:	20a0      	movs	r0, #160	; 0xa0
 800777e:	f7ff fed1 	bl	8007524 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 8007782:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007786:	2b3f      	cmp	r3, #63	; 0x3f
 8007788:	d90f      	bls.n	80077aa <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 800778a:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 800778c:	2200      	movs	r2, #0
        while( mant > 31 )
 800778e:	e002      	b.n	8007796 <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 8007790:	089b      	lsrs	r3, r3, #2
            exp++;
 8007792:	3201      	adds	r2, #1
 8007794:	b2d2      	uxtb	r2, r2
        while( mant > 31 )
 8007796:	2b1f      	cmp	r3, #31
 8007798:	d8fa      	bhi.n	8007790 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 800779a:	00d9      	lsls	r1, r3, #3
 800779c:	b2c9      	uxtb	r1, r1
 800779e:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 80077a0:	b2c9      	uxtb	r1, r1
 80077a2:	f240 7006 	movw	r0, #1798	; 0x706
 80077a6:	f7ff fdf7 	bl	8007398 <SUBGRF_WriteRegister>
}
 80077aa:	b003      	add	sp, #12
 80077ac:	f85d fb04 	ldr.w	pc, [sp], #4

080077b0 <SUBGRF_SetRegulatorMode>:
{
 80077b0:	b500      	push	{lr}
 80077b2:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 80077b4:	f7fa fdd4 	bl	8002360 <RBI_IsDCDC>
 80077b8:	2801      	cmp	r0, #1
 80077ba:	d00b      	beq.n	80077d4 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 80077bc:	2300      	movs	r3, #0
 80077be:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 80077c2:	2201      	movs	r2, #1
 80077c4:	f10d 0107 	add.w	r1, sp, #7
 80077c8:	2096      	movs	r0, #150	; 0x96
 80077ca:	f7ff feab 	bl	8007524 <SUBGRF_WriteCommand>
}
 80077ce:	b003      	add	sp, #12
 80077d0:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 80077d4:	2301      	movs	r3, #1
 80077d6:	f88d 3007 	strb.w	r3, [sp, #7]
 80077da:	e7f2      	b.n	80077c2 <SUBGRF_SetRegulatorMode+0x12>

080077dc <SUBGRF_Calibrate>:
{
 80077dc:	b500      	push	{lr}
 80077de:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80077e0:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80077e4:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 80077e8:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80077ea:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 80077ee:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80077f0:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 80077f4:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 80077f6:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 80077fa:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 80077fc:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8007800:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8007802:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8007806:	4303      	orrs	r3, r0
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8007808:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 800780c:	2201      	movs	r2, #1
 800780e:	f10d 0107 	add.w	r1, sp, #7
 8007812:	2089      	movs	r0, #137	; 0x89
 8007814:	f7ff fe86 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007818:	b003      	add	sp, #12
 800781a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007820 <SUBGRF_CalibrateImage>:
{
 8007820:	b500      	push	{lr}
 8007822:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8007824:	4b1f      	ldr	r3, [pc, #124]	; (80078a4 <SUBGRF_CalibrateImage+0x84>)
 8007826:	4298      	cmp	r0, r3
 8007828:	d90d      	bls.n	8007846 <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 800782a:	23e1      	movs	r3, #225	; 0xe1
 800782c:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8007830:	23e9      	movs	r3, #233	; 0xe9
 8007832:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8007836:	2202      	movs	r2, #2
 8007838:	a901      	add	r1, sp, #4
 800783a:	2098      	movs	r0, #152	; 0x98
 800783c:	f7ff fe72 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007840:	b003      	add	sp, #12
 8007842:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 8007846:	4b18      	ldr	r3, [pc, #96]	; (80078a8 <SUBGRF_CalibrateImage+0x88>)
 8007848:	4298      	cmp	r0, r3
 800784a:	d906      	bls.n	800785a <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 800784c:	23d7      	movs	r3, #215	; 0xd7
 800784e:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 8007852:	23db      	movs	r3, #219	; 0xdb
 8007854:	f88d 3005 	strb.w	r3, [sp, #5]
 8007858:	e7ed      	b.n	8007836 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 800785a:	4b14      	ldr	r3, [pc, #80]	; (80078ac <SUBGRF_CalibrateImage+0x8c>)
 800785c:	4298      	cmp	r0, r3
 800785e:	d906      	bls.n	800786e <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 8007860:	23c1      	movs	r3, #193	; 0xc1
 8007862:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 8007866:	23c5      	movs	r3, #197	; 0xc5
 8007868:	f88d 3005 	strb.w	r3, [sp, #5]
 800786c:	e7e3      	b.n	8007836 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 800786e:	4b10      	ldr	r3, [pc, #64]	; (80078b0 <SUBGRF_CalibrateImage+0x90>)
 8007870:	4298      	cmp	r0, r3
 8007872:	d906      	bls.n	8007882 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 8007874:	2375      	movs	r3, #117	; 0x75
 8007876:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 800787a:	2381      	movs	r3, #129	; 0x81
 800787c:	f88d 3005 	strb.w	r3, [sp, #5]
 8007880:	e7d9      	b.n	8007836 <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 8007882:	4b0c      	ldr	r3, [pc, #48]	; (80078b4 <SUBGRF_CalibrateImage+0x94>)
 8007884:	4298      	cmp	r0, r3
 8007886:	d906      	bls.n	8007896 <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 8007888:	236b      	movs	r3, #107	; 0x6b
 800788a:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 800788e:	236f      	movs	r3, #111	; 0x6f
 8007890:	f88d 3005 	strb.w	r3, [sp, #5]
 8007894:	e7cf      	b.n	8007836 <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 8007896:	2329      	movs	r3, #41	; 0x29
 8007898:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 800789c:	232b      	movs	r3, #43	; 0x2b
 800789e:	f88d 3005 	strb.w	r3, [sp, #5]
 80078a2:	e7c8      	b.n	8007836 <SUBGRF_CalibrateImage+0x16>
 80078a4:	35a4e900 	.word	0x35a4e900
 80078a8:	32a9f880 	.word	0x32a9f880
 80078ac:	2de54480 	.word	0x2de54480
 80078b0:	1b6b0b00 	.word	0x1b6b0b00
 80078b4:	1954fc40 	.word	0x1954fc40

080078b8 <SUBGRF_SetPaConfig>:
{
 80078b8:	b500      	push	{lr}
 80078ba:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 80078bc:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 80078c0:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 80078c4:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 80078c8:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 80078cc:	2204      	movs	r2, #4
 80078ce:	eb0d 0102 	add.w	r1, sp, r2
 80078d2:	2095      	movs	r0, #149	; 0x95
 80078d4:	f7ff fe26 	bl	8007524 <SUBGRF_WriteCommand>
}
 80078d8:	b003      	add	sp, #12
 80078da:	f85d fb04 	ldr.w	pc, [sp], #4

080078de <SUBGRF_SetDioIrqParams>:
{
 80078de:	b500      	push	{lr}
 80078e0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 80078e2:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 80078e6:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 80078ea:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80078ee:	0a08      	lsrs	r0, r1, #8
 80078f0:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80078f4:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80078f8:	0a11      	lsrs	r1, r2, #8
 80078fa:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80078fe:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8007902:	0a1a      	lsrs	r2, r3, #8
 8007904:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 8007908:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 800790c:	2208      	movs	r2, #8
 800790e:	4669      	mov	r1, sp
 8007910:	4610      	mov	r0, r2
 8007912:	f7ff fe07 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007916:	b003      	add	sp, #12
 8007918:	f85d fb04 	ldr.w	pc, [sp], #4

0800791c <SUBGRF_SetTcxoMode>:
{
 800791c:	b500      	push	{lr}
 800791e:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8007920:	f000 0007 	and.w	r0, r0, #7
 8007924:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8007928:	f3c1 4307 	ubfx	r3, r1, #16, #8
 800792c:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8007930:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007934:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 8007938:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 800793c:	2204      	movs	r2, #4
 800793e:	eb0d 0102 	add.w	r1, sp, r2
 8007942:	2097      	movs	r0, #151	; 0x97
 8007944:	f7ff fdee 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007948:	b003      	add	sp, #12
 800794a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08007950 <SUBGRF_Init>:
{
 8007950:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 8007952:	b108      	cbz	r0, 8007958 <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 8007954:	4a18      	ldr	r2, [pc, #96]	; (80079b8 <SUBGRF_Init+0x68>)
 8007956:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 8007958:	f7f9 fd84 	bl	8001464 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 800795c:	2002      	movs	r0, #2
 800795e:	f7ff fd3b 	bl	80073d8 <Radio_SMPS_Set>
    ImageCalibrated = false;
 8007962:	2000      	movs	r0, #0
 8007964:	4b15      	ldr	r3, [pc, #84]	; (80079bc <SUBGRF_Init+0x6c>)
 8007966:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 8007968:	f7ff fe0c 	bl	8007584 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 800796c:	f7fa fcf4 	bl	8002358 <RBI_IsTCXO>
 8007970:	2801      	cmp	r0, #1
 8007972:	d014      	beq.n	800799e <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8007974:	2120      	movs	r1, #32
 8007976:	f640 1011 	movw	r0, #2321	; 0x911
 800797a:	f7ff fd0d 	bl	8007398 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 800797e:	2120      	movs	r1, #32
 8007980:	f640 1012 	movw	r0, #2322	; 0x912
 8007984:	f7ff fd08 	bl	8007398 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8007988:	210e      	movs	r1, #14
 800798a:	f640 101f 	movw	r0, #2335	; 0x91f
 800798e:	f7ff fd03 	bl	8007398 <SUBGRF_WriteRegister>
    RBI_Init();
 8007992:	f7fa fcd5 	bl	8002340 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 8007996:	4b0a      	ldr	r3, [pc, #40]	; (80079c0 <SUBGRF_Init+0x70>)
 8007998:	2201      	movs	r2, #1
 800799a:	701a      	strb	r2, [r3, #0]
}
 800799c:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 800799e:	2140      	movs	r1, #64	; 0x40
 80079a0:	f7ff ffbc 	bl	800791c <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 80079a4:	2100      	movs	r1, #0
 80079a6:	f640 1011 	movw	r0, #2321	; 0x911
 80079aa:	f7ff fcf5 	bl	8007398 <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 80079ae:	f04f 007f 	mov.w	r0, #127	; 0x7f
 80079b2:	f7ff ff13 	bl	80077dc <SUBGRF_Calibrate>
 80079b6:	e7e7      	b.n	8007988 <SUBGRF_Init+0x38>
 80079b8:	20000640 	.word	0x20000640
 80079bc:	2000063c 	.word	0x2000063c
 80079c0:	2000063e 	.word	0x2000063e

080079c4 <SUBGRF_SetRfFrequency>:
{
 80079c4:	b510      	push	{r4, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 80079ca:	4b12      	ldr	r3, [pc, #72]	; (8007a14 <SUBGRF_SetRfFrequency+0x50>)
 80079cc:	781b      	ldrb	r3, [r3, #0]
 80079ce:	b1d3      	cbz	r3, 8007a06 <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 80079d0:	4a11      	ldr	r2, [pc, #68]	; (8007a18 <SUBGRF_SetRfFrequency+0x54>)
 80079d2:	2300      	movs	r3, #0
 80079d4:	0660      	lsls	r0, r4, #25
 80079d6:	09e1      	lsrs	r1, r4, #7
 80079d8:	f7f9 f92e 	bl	8000c38 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 80079dc:	0e03      	lsrs	r3, r0, #24
 80079de:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 80079e2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80079e6:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 80079ea:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80079ee:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 80079f2:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 80079f6:	2204      	movs	r2, #4
 80079f8:	eb0d 0102 	add.w	r1, sp, r2
 80079fc:	2086      	movs	r0, #134	; 0x86
 80079fe:	f7ff fd91 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007a02:	b002      	add	sp, #8
 8007a04:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8007a06:	f7ff ff0b 	bl	8007820 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8007a0a:	4b02      	ldr	r3, [pc, #8]	; (8007a14 <SUBGRF_SetRfFrequency+0x50>)
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	701a      	strb	r2, [r3, #0]
 8007a10:	e7de      	b.n	80079d0 <SUBGRF_SetRfFrequency+0xc>
 8007a12:	bf00      	nop
 8007a14:	2000063c 	.word	0x2000063c
 8007a18:	01e84800 	.word	0x01e84800

08007a1c <SUBGRF_SetPacketType>:
{
 8007a1c:	b500      	push	{lr}
 8007a1e:	b083      	sub	sp, #12
 8007a20:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8007a24:	b2c3      	uxtb	r3, r0
 8007a26:	4a09      	ldr	r2, [pc, #36]	; (8007a4c <SUBGRF_SetPacketType+0x30>)
 8007a28:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8007a2a:	b143      	cbz	r3, 8007a3e <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f10d 0107 	add.w	r1, sp, #7
 8007a32:	208a      	movs	r0, #138	; 0x8a
 8007a34:	f7ff fd76 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007a38:	b003      	add	sp, #12
 8007a3a:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8007a3e:	2100      	movs	r1, #0
 8007a40:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8007a44:	f7ff fca8 	bl	8007398 <SUBGRF_WriteRegister>
 8007a48:	e7f0      	b.n	8007a2c <SUBGRF_SetPacketType+0x10>
 8007a4a:	bf00      	nop
 8007a4c:	2000063f 	.word	0x2000063f

08007a50 <SUBGRF_SetTxParams>:
{
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	b082      	sub	sp, #8
 8007a54:	460c      	mov	r4, r1
 8007a56:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8007a58:	2801      	cmp	r0, #1
 8007a5a:	d035      	beq.n	8007ac8 <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8007a5c:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007a60:	f7ff fcaa 	bl	80073b8 <SUBGRF_ReadRegister>
 8007a64:	f040 011e 	orr.w	r1, r0, #30
 8007a68:	b2c9      	uxtb	r1, r1
 8007a6a:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8007a6e:	f7ff fc93 	bl	8007398 <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8007a72:	2001      	movs	r0, #1
 8007a74:	f7fa fc78 	bl	8002368 <RBI_GetRFOMaxPowerConfig>
 8007a78:	4605      	mov	r5, r0
        if (power > max_power)
 8007a7a:	4284      	cmp	r4, r0
 8007a7c:	dd00      	ble.n	8007a80 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8007a7e:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8007a80:	2d14      	cmp	r5, #20
 8007a82:	d054      	beq.n	8007b2e <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8007a84:	2d11      	cmp	r5, #17
 8007a86:	d05c      	beq.n	8007b42 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8007a88:	2d0e      	cmp	r5, #14
 8007a8a:	d064      	beq.n	8007b56 <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8007a8c:	2301      	movs	r3, #1
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2107      	movs	r1, #7
 8007a92:	2004      	movs	r0, #4
 8007a94:	f7ff ff10 	bl	80078b8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8007a98:	1b64      	subs	r4, r4, r5
 8007a9a:	3416      	adds	r4, #22
 8007a9c:	b265      	sxtb	r5, r4
        if (power < -9)
 8007a9e:	f115 0f09 	cmn.w	r5, #9
 8007aa2:	da01      	bge.n	8007aa8 <SUBGRF_SetTxParams+0x58>
            power = -9;
 8007aa4:	f06f 0508 	mvn.w	r5, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8007aa8:	2138      	movs	r1, #56	; 0x38
 8007aaa:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007aae:	f7ff fc73 	bl	8007398 <SUBGRF_WriteRegister>
    buf[0] = power;
 8007ab2:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8007ab6:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8007aba:	2202      	movs	r2, #2
 8007abc:	a901      	add	r1, sp, #4
 8007abe:	208e      	movs	r0, #142	; 0x8e
 8007ac0:	f7ff fd30 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007ac4:	b002      	add	sp, #8
 8007ac6:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8007ac8:	2000      	movs	r0, #0
 8007aca:	f7fa fc4d 	bl	8002368 <RBI_GetRFOMaxPowerConfig>
 8007ace:	4605      	mov	r5, r0
        if (power >  max_power)
 8007ad0:	4284      	cmp	r4, r0
 8007ad2:	dd00      	ble.n	8007ad6 <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8007ad4:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8007ad6:	2d0e      	cmp	r5, #14
 8007ad8:	d015      	beq.n	8007b06 <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8007ada:	2d0a      	cmp	r5, #10
 8007adc:	d01d      	beq.n	8007b1a <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8007ade:	2301      	movs	r3, #1
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2100      	movs	r1, #0
 8007ae4:	2007      	movs	r0, #7
 8007ae6:	f7ff fee7 	bl	80078b8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007aea:	1b65      	subs	r5, r4, r5
 8007aec:	350e      	adds	r5, #14
 8007aee:	b26d      	sxtb	r5, r5
        if (power < -17)
 8007af0:	f115 0f11 	cmn.w	r5, #17
 8007af4:	da01      	bge.n	8007afa <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8007af6:	f06f 0510 	mvn.w	r5, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8007afa:	2118      	movs	r1, #24
 8007afc:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8007b00:	f7ff fc4a 	bl	8007398 <SUBGRF_WriteRegister>
 8007b04:	e7d5      	b.n	8007ab2 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8007b06:	2301      	movs	r3, #1
 8007b08:	461a      	mov	r2, r3
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	2004      	movs	r0, #4
 8007b0e:	f7ff fed3 	bl	80078b8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007b12:	1b65      	subs	r5, r4, r5
 8007b14:	350e      	adds	r5, #14
 8007b16:	b26d      	sxtb	r5, r5
 8007b18:	e7ea      	b.n	8007af0 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	2100      	movs	r1, #0
 8007b20:	4618      	mov	r0, r3
 8007b22:	f7ff fec9 	bl	80078b8 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8007b26:	1b65      	subs	r5, r4, r5
 8007b28:	350d      	adds	r5, #13
 8007b2a:	b26d      	sxtb	r5, r5
 8007b2c:	e7e0      	b.n	8007af0 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8007b2e:	2301      	movs	r3, #1
 8007b30:	2200      	movs	r2, #0
 8007b32:	2105      	movs	r1, #5
 8007b34:	2003      	movs	r0, #3
 8007b36:	f7ff febf 	bl	80078b8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8007b3a:	1b65      	subs	r5, r4, r5
 8007b3c:	3516      	adds	r5, #22
 8007b3e:	b26d      	sxtb	r5, r5
 8007b40:	e7ad      	b.n	8007a9e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8007b42:	2301      	movs	r3, #1
 8007b44:	2200      	movs	r2, #0
 8007b46:	2103      	movs	r1, #3
 8007b48:	2002      	movs	r0, #2
 8007b4a:	f7ff feb5 	bl	80078b8 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8007b4e:	1b65      	subs	r5, r4, r5
 8007b50:	3516      	adds	r5, #22
 8007b52:	b26d      	sxtb	r5, r5
 8007b54:	e7a3      	b.n	8007a9e <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8007b56:	2301      	movs	r3, #1
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2102      	movs	r1, #2
 8007b5c:	4608      	mov	r0, r1
 8007b5e:	f7ff feab 	bl	80078b8 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8007b62:	1b65      	subs	r5, r4, r5
 8007b64:	350e      	adds	r5, #14
 8007b66:	b26d      	sxtb	r5, r5
 8007b68:	e799      	b.n	8007a9e <SUBGRF_SetTxParams+0x4e>
	...

08007b6c <SUBGRF_SetModulationParams>:
{
 8007b6c:	b510      	push	{r4, lr}
 8007b6e:	b082      	sub	sp, #8
 8007b70:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007b72:	4b3e      	ldr	r3, [pc, #248]	; (8007c6c <SUBGRF_SetModulationParams+0x100>)
 8007b74:	e893 0003 	ldmia.w	r3, {r0, r1}
 8007b78:	ab02      	add	r3, sp, #8
 8007b7a:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8007b7e:	7820      	ldrb	r0, [r4, #0]
 8007b80:	4b3b      	ldr	r3, [pc, #236]	; (8007c70 <SUBGRF_SetModulationParams+0x104>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	4298      	cmp	r0, r3
 8007b86:	d106      	bne.n	8007b96 <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8007b88:	7823      	ldrb	r3, [r4, #0]
 8007b8a:	2b03      	cmp	r3, #3
 8007b8c:	d82c      	bhi.n	8007be8 <SUBGRF_SetModulationParams+0x7c>
 8007b8e:	e8df f003 	tbb	[pc, r3]
 8007b92:	4205      	.short	0x4205
 8007b94:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8007b96:	f7ff ff41 	bl	8007a1c <SUBGRF_SetPacketType>
 8007b9a:	e7f5      	b.n	8007b88 <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8007b9c:	6862      	ldr	r2, [r4, #4]
 8007b9e:	4b35      	ldr	r3, [pc, #212]	; (8007c74 <SUBGRF_SetModulationParams+0x108>)
 8007ba0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007ba4:	0c1a      	lsrs	r2, r3, #16
 8007ba6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007baa:	0a1a      	lsrs	r2, r3, #8
 8007bac:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8007bb0:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007bb4:	7b23      	ldrb	r3, [r4, #12]
 8007bb6:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007bba:	7b63      	ldrb	r3, [r4, #13]
 8007bbc:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8007bc0:	68a1      	ldr	r1, [r4, #8]
 8007bc2:	4a2d      	ldr	r2, [pc, #180]	; (8007c78 <SUBGRF_SetModulationParams+0x10c>)
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	0648      	lsls	r0, r1, #25
 8007bc8:	09c9      	lsrs	r1, r1, #7
 8007bca:	f7f9 f835 	bl	8000c38 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8007bce:	0c03      	lsrs	r3, r0, #16
 8007bd0:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8007bd4:	0a03      	lsrs	r3, r0, #8
 8007bd6:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8007bda:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007bde:	2208      	movs	r2, #8
 8007be0:	4669      	mov	r1, sp
 8007be2:	208b      	movs	r0, #139	; 0x8b
 8007be4:	f7ff fc9e 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007be8:	b002      	add	sp, #8
 8007bea:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8007bec:	6922      	ldr	r2, [r4, #16]
 8007bee:	4b21      	ldr	r3, [pc, #132]	; (8007c74 <SUBGRF_SetModulationParams+0x108>)
 8007bf0:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007bf4:	0c1a      	lsrs	r2, r3, #16
 8007bf6:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007bfa:	0a1a      	lsrs	r2, r3, #8
 8007bfc:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8007c00:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8007c04:	7d23      	ldrb	r3, [r4, #20]
 8007c06:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007c0a:	2204      	movs	r2, #4
 8007c0c:	4669      	mov	r1, sp
 8007c0e:	208b      	movs	r0, #139	; 0x8b
 8007c10:	f7ff fc88 	bl	8007524 <SUBGRF_WriteCommand>
        break;
 8007c14:	e7e8      	b.n	8007be8 <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8007c16:	7e23      	ldrb	r3, [r4, #24]
 8007c18:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8007c1c:	7e63      	ldrb	r3, [r4, #25]
 8007c1e:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8007c22:	7ea3      	ldrb	r3, [r4, #26]
 8007c24:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8007c28:	7ee3      	ldrb	r3, [r4, #27]
 8007c2a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007c2e:	2204      	movs	r2, #4
 8007c30:	4669      	mov	r1, sp
 8007c32:	208b      	movs	r0, #139	; 0x8b
 8007c34:	f7ff fc76 	bl	8007524 <SUBGRF_WriteCommand>
        break;
 8007c38:	e7d6      	b.n	8007be8 <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8007c3a:	6862      	ldr	r2, [r4, #4]
 8007c3c:	4b0d      	ldr	r3, [pc, #52]	; (8007c74 <SUBGRF_SetModulationParams+0x108>)
 8007c3e:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8007c42:	0c1a      	lsrs	r2, r3, #16
 8007c44:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8007c48:	0a1a      	lsrs	r2, r3, #8
 8007c4a:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8007c4e:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8007c52:	7b23      	ldrb	r3, [r4, #12]
 8007c54:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8007c58:	7b63      	ldrb	r3, [r4, #13]
 8007c5a:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8007c5e:	2205      	movs	r2, #5
 8007c60:	4669      	mov	r1, sp
 8007c62:	208b      	movs	r0, #139	; 0x8b
 8007c64:	f7ff fc5e 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007c68:	e7be      	b.n	8007be8 <SUBGRF_SetModulationParams+0x7c>
 8007c6a:	bf00      	nop
 8007c6c:	0800d5a4 	.word	0x0800d5a4
 8007c70:	2000063f 	.word	0x2000063f
 8007c74:	3d090000 	.word	0x3d090000
 8007c78:	01e84800 	.word	0x01e84800

08007c7c <SUBGRF_SetPacketParams>:
{
 8007c7c:	b510      	push	{r4, lr}
 8007c7e:	b084      	sub	sp, #16
 8007c80:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8007c82:	ab01      	add	r3, sp, #4
 8007c84:	4a33      	ldr	r2, [pc, #204]	; (8007d54 <SUBGRF_SetPacketParams+0xd8>)
 8007c86:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c88:	c303      	stmia	r3!, {r0, r1}
 8007c8a:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8007c8c:	7820      	ldrb	r0, [r4, #0]
 8007c8e:	4b32      	ldr	r3, [pc, #200]	; (8007d58 <SUBGRF_SetPacketParams+0xdc>)
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	4298      	cmp	r0, r3
 8007c94:	d106      	bne.n	8007ca4 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8007c96:	7823      	ldrb	r3, [r4, #0]
 8007c98:	2b03      	cmp	r3, #3
 8007c9a:	d82a      	bhi.n	8007cf2 <SUBGRF_SetPacketParams+0x76>
 8007c9c:	e8df f003 	tbb	[pc, r3]
 8007ca0:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8007ca4:	f7ff feba 	bl	8007a1c <SUBGRF_SetPacketType>
 8007ca8:	e7f5      	b.n	8007c96 <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8007caa:	7a63      	ldrb	r3, [r4, #9]
 8007cac:	2bf1      	cmp	r3, #241	; 0xf1
 8007cae:	d022      	beq.n	8007cf6 <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8007cb0:	2bf2      	cmp	r3, #242	; 0xf2
 8007cb2:	d02a      	beq.n	8007d0a <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8007cb4:	8862      	ldrh	r2, [r4, #2]
 8007cb6:	0a11      	lsrs	r1, r2, #8
 8007cb8:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8007cbc:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8007cc0:	7922      	ldrb	r2, [r4, #4]
 8007cc2:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8007cc6:	7962      	ldrb	r2, [r4, #5]
 8007cc8:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8007ccc:	79a2      	ldrb	r2, [r4, #6]
 8007cce:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8007cd2:	79e2      	ldrb	r2, [r4, #7]
 8007cd4:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8007cd8:	7a22      	ldrb	r2, [r4, #8]
 8007cda:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8007cde:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8007ce2:	7aa3      	ldrb	r3, [r4, #10]
 8007ce4:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8007ce8:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8007cea:	a901      	add	r1, sp, #4
 8007cec:	208c      	movs	r0, #140	; 0x8c
 8007cee:	f7ff fc19 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007cf2:	b004      	add	sp, #16
 8007cf4:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8007cf6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8007cfa:	f7ff fbb2 	bl	8007462 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8007cfe:	f248 0005 	movw	r0, #32773	; 0x8005
 8007d02:	f7ff fbc2 	bl	800748a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8007d06:	2302      	movs	r3, #2
 8007d08:	e7d4      	b.n	8007cb4 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8007d0a:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8007d0e:	f7ff fba8 	bl	8007462 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8007d12:	f241 0021 	movw	r0, #4129	; 0x1021
 8007d16:	f7ff fbb8 	bl	800748a <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8007d1a:	2306      	movs	r3, #6
 8007d1c:	e7ca      	b.n	8007cb4 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8007d1e:	7b23      	ldrb	r3, [r4, #12]
 8007d20:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8007d24:	2201      	movs	r2, #1
        break;
 8007d26:	e7e0      	b.n	8007cea <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8007d28:	89e3      	ldrh	r3, [r4, #14]
 8007d2a:	0a1a      	lsrs	r2, r3, #8
 8007d2c:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8007d30:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8007d34:	7c23      	ldrb	r3, [r4, #16]
 8007d36:	4a09      	ldr	r2, [pc, #36]	; (8007d5c <SUBGRF_SetPacketParams+0xe0>)
 8007d38:	7013      	strb	r3, [r2, #0]
 8007d3a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8007d3e:	7c63      	ldrb	r3, [r4, #17]
 8007d40:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8007d44:	7ca3      	ldrb	r3, [r4, #18]
 8007d46:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8007d4a:	7ce3      	ldrb	r3, [r4, #19]
 8007d4c:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8007d50:	2206      	movs	r2, #6
        break;
 8007d52:	e7ca      	b.n	8007cea <SUBGRF_SetPacketParams+0x6e>
 8007d54:	0800d5ac 	.word	0x0800d5ac
 8007d58:	2000063f 	.word	0x2000063f
 8007d5c:	2000063d 	.word	0x2000063d

08007d60 <SUBGRF_SetBufferBaseAddress>:
{
 8007d60:	b500      	push	{lr}
 8007d62:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8007d64:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8007d68:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8007d6c:	2202      	movs	r2, #2
 8007d6e:	a901      	add	r1, sp, #4
 8007d70:	208f      	movs	r0, #143	; 0x8f
 8007d72:	f7ff fbd7 	bl	8007524 <SUBGRF_WriteCommand>
}
 8007d76:	b003      	add	sp, #12
 8007d78:	f85d fb04 	ldr.w	pc, [sp], #4

08007d7c <SUBGRF_ReadCommand>:
{
 8007d7c:	b510      	push	{r4, lr}
 8007d7e:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d80:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8007d84:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8007d86:	460a      	mov	r2, r1
 8007d88:	4601      	mov	r1, r0
 8007d8a:	4803      	ldr	r0, [pc, #12]	; (8007d98 <SUBGRF_ReadCommand+0x1c>)
 8007d8c:	f7fc fccc 	bl	8004728 <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d90:	f384 8810 	msr	PRIMASK, r4
}
 8007d94:	bd10      	pop	{r4, pc}
 8007d96:	bf00      	nop
 8007d98:	20000288 	.word	0x20000288

08007d9c <SUBGRF_GetRssiInst>:
{
 8007d9c:	b500      	push	{lr}
 8007d9e:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8007da0:	2201      	movs	r2, #1
 8007da2:	a901      	add	r1, sp, #4
 8007da4:	2015      	movs	r0, #21
 8007da6:	f7ff ffe9 	bl	8007d7c <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8007daa:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8007dae:	4240      	negs	r0, r0
}
 8007db0:	1040      	asrs	r0, r0, #1
 8007db2:	b003      	add	sp, #12
 8007db4:	f85d fb04 	ldr.w	pc, [sp], #4

08007db8 <SUBGRF_GetRxBufferStatus>:
{
 8007db8:	b530      	push	{r4, r5, lr}
 8007dba:	b083      	sub	sp, #12
 8007dbc:	4605      	mov	r5, r0
 8007dbe:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8007dc0:	2202      	movs	r2, #2
 8007dc2:	a901      	add	r1, sp, #4
 8007dc4:	2013      	movs	r0, #19
 8007dc6:	f7ff ffd9 	bl	8007d7c <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007dca:	f7ff fadf 	bl	800738c <SUBGRF_GetPacketType>
 8007dce:	2801      	cmp	r0, #1
 8007dd0:	d007      	beq.n	8007de2 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8007dd2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007dd6:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8007dd8:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007ddc:	7023      	strb	r3, [r4, #0]
}
 8007dde:	b003      	add	sp, #12
 8007de0:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8007de2:	4b05      	ldr	r3, [pc, #20]	; (8007df8 <SUBGRF_GetRxBufferStatus+0x40>)
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d1f2      	bne.n	8007dd2 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8007dec:	f240 7002 	movw	r0, #1794	; 0x702
 8007df0:	f7ff fae2 	bl	80073b8 <SUBGRF_ReadRegister>
 8007df4:	7028      	strb	r0, [r5, #0]
 8007df6:	e7ef      	b.n	8007dd8 <SUBGRF_GetRxBufferStatus+0x20>
 8007df8:	2000063d 	.word	0x2000063d

08007dfc <SUBGRF_GetPayload>:
{
 8007dfc:	b570      	push	{r4, r5, r6, lr}
 8007dfe:	b082      	sub	sp, #8
 8007e00:	4606      	mov	r6, r0
 8007e02:	460c      	mov	r4, r1
 8007e04:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8007e06:	2300      	movs	r3, #0
 8007e08:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8007e0c:	f10d 0107 	add.w	r1, sp, #7
 8007e10:	4620      	mov	r0, r4
 8007e12:	f7ff ffd1 	bl	8007db8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8007e16:	7822      	ldrb	r2, [r4, #0]
 8007e18:	42aa      	cmp	r2, r5
 8007e1a:	d902      	bls.n	8007e22 <SUBGRF_GetPayload+0x26>
        return 1;
 8007e1c:	2001      	movs	r0, #1
}
 8007e1e:	b002      	add	sp, #8
 8007e20:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8007e22:	4631      	mov	r1, r6
 8007e24:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8007e28:	f7ff fb6c 	bl	8007504 <SUBGRF_ReadBuffer>
    return 0;
 8007e2c:	2000      	movs	r0, #0
 8007e2e:	e7f6      	b.n	8007e1e <SUBGRF_GetPayload+0x22>

08007e30 <SUBGRF_GetPacketStatus>:
{
 8007e30:	b510      	push	{r4, lr}
 8007e32:	b082      	sub	sp, #8
 8007e34:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8007e36:	2203      	movs	r2, #3
 8007e38:	a901      	add	r1, sp, #4
 8007e3a:	2014      	movs	r0, #20
 8007e3c:	f7ff ff9e 	bl	8007d7c <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8007e40:	f7ff faa4 	bl	800738c <SUBGRF_GetPacketType>
 8007e44:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8007e46:	b148      	cbz	r0, 8007e5c <SUBGRF_GetPacketStatus+0x2c>
 8007e48:	2801      	cmp	r0, #1
 8007e4a:	d018      	beq.n	8007e7e <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8007e4c:	2214      	movs	r2, #20
 8007e4e:	2100      	movs	r1, #0
 8007e50:	4620      	mov	r0, r4
 8007e52:	f000 fb96 	bl	8008582 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8007e56:	230f      	movs	r3, #15
 8007e58:	7023      	strb	r3, [r4, #0]
}
 8007e5a:	e00e      	b.n	8007e7a <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8007e5c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007e60:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8007e62:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8007e66:	425b      	negs	r3, r3
 8007e68:	105b      	asrs	r3, r3, #1
 8007e6a:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8007e6c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e70:	425b      	negs	r3, r3
 8007e72:	105b      	asrs	r3, r3, #1
 8007e74:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8007e76:	2300      	movs	r3, #0
 8007e78:	60a3      	str	r3, [r4, #8]
}
 8007e7a:	b002      	add	sp, #8
 8007e7c:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8007e7e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8007e82:	425b      	negs	r3, r3
 8007e84:	105b      	asrs	r3, r3, #1
 8007e86:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8007e88:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8007e8c:	3302      	adds	r3, #2
 8007e8e:	109b      	asrs	r3, r3, #2
 8007e90:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8007e92:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8007e96:	425b      	negs	r3, r3
 8007e98:	105b      	asrs	r3, r3, #1
 8007e9a:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8007e9c:	4b01      	ldr	r3, [pc, #4]	; (8007ea4 <SUBGRF_GetPacketStatus+0x74>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6123      	str	r3, [r4, #16]
            break;
 8007ea2:	e7ea      	b.n	8007e7a <SUBGRF_GetPacketStatus+0x4a>
 8007ea4:	20000638 	.word	0x20000638

08007ea8 <SUBGRF_SetSwitch>:
{
 8007ea8:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8007eaa:	2901      	cmp	r1, #1
 8007eac:	d003      	beq.n	8007eb6 <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8007eae:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8007eb0:	f7fa fa4a 	bl	8002348 <RBI_ConfigRFSwitch>
}
 8007eb4:	bd10      	pop	{r4, pc}
 8007eb6:	4604      	mov	r4, r0
 8007eb8:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8007eba:	2c01      	cmp	r4, #1
 8007ebc:	d003      	beq.n	8007ec6 <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8007ebe:	2c02      	cmp	r4, #2
 8007ec0:	d1f6      	bne.n	8007eb0 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8007ec2:	2003      	movs	r0, #3
 8007ec4:	e7f4      	b.n	8007eb0 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8007ec6:	2004      	movs	r0, #4
 8007ec8:	f7ff fa86 	bl	80073d8 <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8007ecc:	2002      	movs	r0, #2
 8007ece:	e7f6      	b.n	8007ebe <SUBGRF_SetSwitch+0x16>

08007ed0 <SUBGRF_SetRfTxPower>:
{
 8007ed0:	b538      	push	{r3, r4, r5, lr}
 8007ed2:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8007ed4:	f7fa fa3c 	bl	8002350 <RBI_GetTxConfig>
    switch (TxConfig)
 8007ed8:	b148      	cbz	r0, 8007eee <SUBGRF_SetRfTxPower+0x1e>
 8007eda:	2802      	cmp	r0, #2
 8007edc:	d10d      	bne.n	8007efa <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8007ede:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	4621      	mov	r1, r4
 8007ee4:	4628      	mov	r0, r5
 8007ee6:	f7ff fdb3 	bl	8007a50 <SUBGRF_SetTxParams>
}
 8007eea:	4628      	mov	r0, r5
 8007eec:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8007eee:	2c0f      	cmp	r4, #15
 8007ef0:	dc01      	bgt.n	8007ef6 <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8007ef2:	2501      	movs	r5, #1
 8007ef4:	e7f4      	b.n	8007ee0 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8007ef6:	2502      	movs	r5, #2
 8007ef8:	e7f2      	b.n	8007ee0 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8007efa:	2501      	movs	r5, #1
 8007efc:	e7f0      	b.n	8007ee0 <SUBGRF_SetRfTxPower+0x10>

08007efe <SUBGRF_GetRadioWakeUpTime>:
}
 8007efe:	2001      	movs	r0, #1
 8007f00:	4770      	bx	lr
	...

08007f04 <HAL_SUBGHZ_TxCpltCallback>:
{
 8007f04:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8007f06:	4b02      	ldr	r3, [pc, #8]	; (8007f10 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	2001      	movs	r0, #1
 8007f0c:	4798      	blx	r3
}
 8007f0e:	bd08      	pop	{r3, pc}
 8007f10:	20000640 	.word	0x20000640

08007f14 <HAL_SUBGHZ_RxCpltCallback>:
{
 8007f14:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8007f16:	4b02      	ldr	r3, [pc, #8]	; (8007f20 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2002      	movs	r0, #2
 8007f1c:	4798      	blx	r3
}
 8007f1e:	bd08      	pop	{r3, pc}
 8007f20:	20000640 	.word	0x20000640

08007f24 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8007f24:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8007f26:	4b02      	ldr	r3, [pc, #8]	; (8007f30 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2040      	movs	r0, #64	; 0x40
 8007f2c:	4798      	blx	r3
}
 8007f2e:	bd08      	pop	{r3, pc}
 8007f30:	20000640 	.word	0x20000640

08007f34 <HAL_SUBGHZ_CADStatusCallback>:
{
 8007f34:	b508      	push	{r3, lr}
    switch (cadstatus)
 8007f36:	b111      	cbz	r1, 8007f3e <HAL_SUBGHZ_CADStatusCallback+0xa>
 8007f38:	2901      	cmp	r1, #1
 8007f3a:	d005      	beq.n	8007f48 <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8007f3c:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8007f3e:	4b05      	ldr	r3, [pc, #20]	; (8007f54 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2080      	movs	r0, #128	; 0x80
 8007f44:	4798      	blx	r3
            break;
 8007f46:	e7f9      	b.n	8007f3c <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8007f48:	4b02      	ldr	r3, [pc, #8]	; (8007f54 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007f50:	4798      	blx	r3
}
 8007f52:	e7f3      	b.n	8007f3c <HAL_SUBGHZ_CADStatusCallback+0x8>
 8007f54:	20000640 	.word	0x20000640

08007f58 <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8007f58:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8007f5a:	4b03      	ldr	r3, [pc, #12]	; (8007f68 <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007f62:	4798      	blx	r3
}
 8007f64:	bd08      	pop	{r3, pc}
 8007f66:	bf00      	nop
 8007f68:	20000640 	.word	0x20000640

08007f6c <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8007f6c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8007f6e:	4b02      	ldr	r3, [pc, #8]	; (8007f78 <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	2020      	movs	r0, #32
 8007f74:	4798      	blx	r3
}
 8007f76:	bd08      	pop	{r3, pc}
 8007f78:	20000640 	.word	0x20000640

08007f7c <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8007f7c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8007f7e:	4b02      	ldr	r3, [pc, #8]	; (8007f88 <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	2004      	movs	r0, #4
 8007f84:	4798      	blx	r3
}
 8007f86:	bd08      	pop	{r3, pc}
 8007f88:	20000640 	.word	0x20000640

08007f8c <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8007f8c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8007f8e:	4b02      	ldr	r3, [pc, #8]	; (8007f98 <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2008      	movs	r0, #8
 8007f94:	4798      	blx	r3
}
 8007f96:	bd08      	pop	{r3, pc}
 8007f98:	20000640 	.word	0x20000640

08007f9c <HAL_SUBGHZ_HeaderValidCallback>:
{
 8007f9c:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8007f9e:	4b02      	ldr	r3, [pc, #8]	; (8007fa8 <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	2010      	movs	r0, #16
 8007fa4:	4798      	blx	r3
}
 8007fa6:	bd08      	pop	{r3, pc}
 8007fa8:	20000640 	.word	0x20000640

08007fac <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8007fac:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8007fae:	4b03      	ldr	r3, [pc, #12]	; (8007fbc <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007fb6:	4798      	blx	r3
}
 8007fb8:	bd08      	pop	{r3, pc}
 8007fba:	bf00      	nop
 8007fbc:	20000640 	.word	0x20000640

08007fc0 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8007fc0:	4601      	mov	r1, r0
 8007fc2:	b188      	cbz	r0, 8007fe8 <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	2b15      	cmp	r3, #21
 8007fc8:	d80d      	bhi.n	8007fe6 <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8007fca:	4618      	mov	r0, r3
 8007fcc:	4a07      	ldr	r2, [pc, #28]	; (8007fec <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8007fce:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8007fd2:	428a      	cmp	r2, r1
 8007fd4:	d802      	bhi.n	8007fdc <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	e7f4      	b.n	8007fc6 <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8007fdc:	4b03      	ldr	r3, [pc, #12]	; (8007fec <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8007fde:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
 8007fe2:	7918      	ldrb	r0, [r3, #4]
 8007fe4:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 8007fe6:	e7fe      	b.n	8007fe6 <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 8007fe8:	201f      	movs	r0, #31
}
 8007fea:	4770      	bx	lr
 8007fec:	0800d958 	.word	0x0800d958

08007ff0 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	b082      	sub	sp, #8
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <SUBGRF_GetCFO+0x80>)
 8007ffa:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8007ffc:	f640 0007 	movw	r0, #2055	; 0x807
 8008000:	f7ff f9da 	bl	80073b8 <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8008004:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 8008008:	3308      	adds	r3, #8
 800800a:	446b      	add	r3, sp
 800800c:	f813 2c04 	ldrb.w	r2, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8008010:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8008014:	3301      	adds	r3, #1
 8008016:	fa02 f303 	lsl.w	r3, r2, r3
 800801a:	4a16      	ldr	r2, [pc, #88]	; (8008074 <SUBGRF_GetCFO+0x84>)
 800801c:	fbb2 f2f3 	udiv	r2, r2, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8008020:	fbb2 f0f5 	udiv	r0, r2, r5
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8008024:	2807      	cmp	r0, #7
 8008026:	d921      	bls.n	800806c <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 8008028:	2301      	movs	r3, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 800802a:	fb03 f000 	mul.w	r0, r3, r0
 800802e:	2803      	cmp	r0, #3
 8008030:	d800      	bhi.n	8008034 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8008032:	2304      	movs	r3, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8008034:	fb02 f503 	mul.w	r5, r2, r3
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8008038:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 800803c:	f7ff f9bc 	bl	80073b8 <SUBGRF_ReadRegister>
 8008040:	0206      	lsls	r6, r0, #8
 8008042:	f406 6670 	and.w	r6, r6, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8008046:	f240 60b1 	movw	r0, #1713	; 0x6b1
 800804a:	f7ff f9b5 	bl	80073b8 <SUBGRF_ReadRegister>
 800804e:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8008050:	f410 6f00 	tst.w	r0, #2048	; 0x800
 8008054:	d003      	beq.n	800805e <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 8008056:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 800805a:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 800805e:	096b      	lsrs	r3, r5, #5
 8008060:	fb03 f000 	mul.w	r0, r3, r0
 8008064:	11c0      	asrs	r0, r0, #7
 8008066:	6020      	str	r0, [r4, #0]
}
 8008068:	b002      	add	sp, #8
 800806a:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 800806c:	2302      	movs	r3, #2
 800806e:	e7dc      	b.n	800802a <SUBGRF_GetCFO+0x3a>
 8008070:	0c0a0804 	.word	0x0c0a0804
 8008074:	01e84800 	.word	0x01e84800

08008078 <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 8008078:	f04f 30ff 	mov.w	r0, #4294967295
 800807c:	4770      	bx	lr

0800807e <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 800807e:	f04f 30ff 	mov.w	r0, #4294967295
 8008082:	4770      	bx	lr

08008084 <RFW_Init>:
    TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	4770      	bx	lr

0800808a <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 800808a:	4770      	bx	lr

0800808c <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 800808c:	2000      	movs	r0, #0
 800808e:	4770      	bx	lr

08008090 <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 8008090:	2000      	movs	r0, #0
 8008092:	4770      	bx	lr

08008094 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 8008094:	4770      	bx	lr

08008096 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 8008096:	f04f 30ff 	mov.w	r0, #4294967295
 800809a:	4770      	bx	lr

0800809c <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 800809c:	f04f 30ff 	mov.w	r0, #4294967295
 80080a0:	4770      	bx	lr

080080a2 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 80080a2:	4770      	bx	lr

080080a4 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 80080a4:	4770      	bx	lr

080080a6 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 80080a6:	4770      	bx	lr

080080a8 <CalcCRC>:
  0xC5A92679, 0xC1683BCE, 0xCC2B1D17, 0xC8EA00A0, 0xD6AD50A5, 0xD26C4D12, 0xDF2F6BCB, 0xDBEE767C, 0xE3A1CBC1, 0xE760D676, 0xEA23F0AF, 0xEEE2ED18, 0xF0A5BD1D, 0xF464A0AA, 0xF9278673, 0xFDE69BC4,
  0x89B8FD09, 0x8D79E0BE, 0x803AC667, 0x84FBDBD0, 0x9ABC8BD5, 0x9E7D9662, 0x933EB0BB, 0x97FFAD0C, 0xAFB010B1, 0xAB710D06, 0xA6322BDF, 0xA2F33668, 0xBCB4666D, 0xB8757BDA, 0xB5365D03, 0xB1F740B4,
};

uint32_t CalcCRC(uint8_t * pData, uint32_t DataLength)
{
 80080a8:	4684      	mov	ip, r0
    uint32_t Checksum = 0xFFFFFFFF;
    for(unsigned int i=0; i < DataLength; i++)
 80080aa:	2300      	movs	r3, #0
    uint32_t Checksum = 0xFFFFFFFF;
 80080ac:	f04f 30ff 	mov.w	r0, #4294967295
    for(unsigned int i=0; i < DataLength; i++)
 80080b0:	428b      	cmp	r3, r1
 80080b2:	d20e      	bcs.n	80080d2 <CalcCRC+0x2a>
{
 80080b4:	b410      	push	{r4}
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
        top ^= pData[i];
 80080b6:	f81c 2003 	ldrb.w	r2, [ip, r3]
 80080ba:	ea82 6210 	eor.w	r2, r2, r0, lsr #24
        Checksum = (Checksum << 8) ^ crc_table[top];
 80080be:	4c05      	ldr	r4, [pc, #20]	; (80080d4 <CalcCRC+0x2c>)
 80080c0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80080c4:	ea82 2000 	eor.w	r0, r2, r0, lsl #8
    for(unsigned int i=0; i < DataLength; i++)
 80080c8:	3301      	adds	r3, #1
 80080ca:	428b      	cmp	r3, r1
 80080cc:	d3f3      	bcc.n	80080b6 <CalcCRC+0xe>
    }
    return Checksum;
}
 80080ce:	bc10      	pop	{r4}
 80080d0:	4770      	bx	lr
 80080d2:	4770      	bx	lr
 80080d4:	0800da08 	.word	0x0800da08

080080d8 <SHT31_Config>:
};
uint16_t MilsPerMeasure[5] = {2005, 1005, 505, 255, 105}; // table 9 page 11 in column mps, + 5ms for correctly read
//                           0.5     1    2    4   10
uint8_t MeasureTime[3] = {13,5,3}; // table 4 page 7

void SHT31_Config(uint8_t address, I2C_HandleTypeDef* hi2c) {
 80080d8:	b538      	push	{r3, r4, r5, lr}
	sht31.address = address;
 80080da:	4c05      	ldr	r4, [pc, #20]	; (80080f0 <SHT31_Config+0x18>)
 80080dc:	7020      	strb	r0, [r4, #0]
	sht31.hi2c = hi2c;
 80080de:	6061      	str	r1, [r4, #4]

	sht31.mode = SHT31_SingleShot;
 80080e0:	2500      	movs	r5, #0
 80080e2:	7225      	strb	r5, [r4, #8]
	sht31.isCurrentlyPeriodic = 0;
 80080e4:	60e5      	str	r5, [r4, #12]

	sht31.lastMeasureTime = HAL_GetTick();
 80080e6:	f7f9 fa3d 	bl	8001564 <HAL_GetTick>
 80080ea:	6120      	str	r0, [r4, #16]
 80080ec:	6165      	str	r5, [r4, #20]
}
 80080ee:	bd38      	pop	{r3, r4, r5, pc}
 80080f0:	20000648 	.word	0x20000648

080080f4 <SYS_LED_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t SYS_LED_Init(Sys_Led_TypeDef Led)
{
 80080f4:	b570      	push	{r4, r5, r6, lr}
 80080f6:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80080f8:	2400      	movs	r4, #0
 80080fa:	9401      	str	r4, [sp, #4]
 80080fc:	9402      	str	r4, [sp, #8]
 80080fe:	9403      	str	r4, [sp, #12]
 8008100:	9404      	str	r4, [sp, #16]
 8008102:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8008104:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008108:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800810a:	f042 0202 	orr.w	r2, r2, #2
 800810e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8008110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008112:	f003 0302 	and.w	r3, r3, #2
 8008116:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8008118:	9b00      	ldr	r3, [sp, #0]
  /* Enable the GPIO_SYS_LED Clock */
  SYS_LEDx_GPIO_CLK_ENABLE(Led);

  /* Configure the GPIO_SYS_LED pin */
  gpio_init_structure.Pin = SYS_LED_PIN[Led];
 800811a:	4b0b      	ldr	r3, [pc, #44]	; (8008148 <SYS_LED_Init+0x54>)
 800811c:	f833 6010 	ldrh.w	r6, [r3, r0, lsl #1]
 8008120:	9601      	str	r6, [sp, #4]
  gpio_init_structure.Mode = GPIO_MODE_OUTPUT_PP;
 8008122:	2301      	movs	r3, #1
 8008124:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8008126:	2302      	movs	r3, #2
 8008128:	9304      	str	r3, [sp, #16]

  HAL_GPIO_Init(SYS_LED_PORT[Led], &gpio_init_structure);
 800812a:	4b08      	ldr	r3, [pc, #32]	; (800814c <SYS_LED_Init+0x58>)
 800812c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8008130:	a901      	add	r1, sp, #4
 8008132:	4628      	mov	r0, r5
 8008134:	f7fa fce4 	bl	8002b00 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(SYS_LED_PORT[Led], SYS_LED_PIN[Led], GPIO_PIN_RESET);
 8008138:	4622      	mov	r2, r4
 800813a:	4631      	mov	r1, r6
 800813c:	4628      	mov	r0, r5
 800813e:	f7fa fe2f 	bl	8002da0 <HAL_GPIO_WritePin>

  return 0;
}
 8008142:	4620      	mov	r0, r4
 8008144:	b006      	add	sp, #24
 8008146:	bd70      	pop	{r4, r5, r6, pc}
 8008148:	0800de08 	.word	0x0800de08
 800814c:	0800de10 	.word	0x0800de10

08008150 <SYS_LED_On>:

  return 0;
}

int32_t SYS_LED_On(Sys_Led_TypeDef Led)
{
 8008150:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SYS_LED_PORT[Led], SYS_LED_PIN[Led], GPIO_PIN_SET);
 8008152:	2201      	movs	r2, #1
 8008154:	4b04      	ldr	r3, [pc, #16]	; (8008168 <SYS_LED_On+0x18>)
 8008156:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800815a:	4b04      	ldr	r3, [pc, #16]	; (800816c <SYS_LED_On+0x1c>)
 800815c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008160:	f7fa fe1e 	bl	8002da0 <HAL_GPIO_WritePin>

  return 0;
}
 8008164:	2000      	movs	r0, #0
 8008166:	bd08      	pop	{r3, pc}
 8008168:	0800de08 	.word	0x0800de08
 800816c:	0800de10 	.word	0x0800de10

08008170 <SYS_LED_Off>:

int32_t SYS_LED_Off(Sys_Led_TypeDef Led)
{
 8008170:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(SYS_LED_PORT[Led], SYS_LED_PIN[Led], GPIO_PIN_RESET);
 8008172:	2200      	movs	r2, #0
 8008174:	4b04      	ldr	r3, [pc, #16]	; (8008188 <SYS_LED_Off+0x18>)
 8008176:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 800817a:	4b04      	ldr	r3, [pc, #16]	; (800818c <SYS_LED_Off+0x1c>)
 800817c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8008180:	f7fa fe0e 	bl	8002da0 <HAL_GPIO_WritePin>

  return 0;
}
 8008184:	2000      	movs	r0, #0
 8008186:	bd08      	pop	{r3, pc}
 8008188:	0800de08 	.word	0x0800de08
 800818c:	0800de10 	.word	0x0800de10

08008190 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8008190:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008192:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008196:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8008198:	4b1e      	ldr	r3, [pc, #120]	; (8008214 <TRACE_AllocateBufer+0x84>)
 800819a:	f8b3 e012 	ldrh.w	lr, [r3, #18]
 800819e:	8a1a      	ldrh	r2, [r3, #16]
 80081a0:	4596      	cmp	lr, r2
 80081a2:	d011      	beq.n	80081c8 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80081a4:	4596      	cmp	lr, r2
 80081a6:	d921      	bls.n	80081ec <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80081a8:	f5ce 7300 	rsb	r3, lr, #512	; 0x200
 80081ac:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 80081ae:	4283      	cmp	r3, r0
 80081b0:	d81f      	bhi.n	80081f2 <TRACE_AllocateBufer+0x62>
 80081b2:	4282      	cmp	r2, r0
 80081b4:	d91d      	bls.n	80081f2 <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80081b6:	4b17      	ldr	r3, [pc, #92]	; (8008214 <TRACE_AllocateBufer+0x84>)
 80081b8:	2401      	movs	r4, #1
 80081ba:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80081bc:	f8a3 e000 	strh.w	lr, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 80081c0:	2400      	movs	r4, #0
 80081c2:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80081c4:	4613      	mov	r3, r2
 80081c6:	e014      	b.n	80081f2 <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 80081c8:	f5ce 7300 	rsb	r3, lr, #512	; 0x200
 80081cc:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 80081ce:	4298      	cmp	r0, r3
 80081d0:	d30f      	bcc.n	80081f2 <TRACE_AllocateBufer+0x62>
 80081d2:	4282      	cmp	r2, r0
 80081d4:	d90d      	bls.n	80081f2 <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 80081d6:	4b0f      	ldr	r3, [pc, #60]	; (8008214 <TRACE_AllocateBufer+0x84>)
 80081d8:	2401      	movs	r4, #1
 80081da:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 80081dc:	f8a3 e000 	strh.w	lr, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 80081e0:	f04f 0e00 	mov.w	lr, #0
 80081e4:	f8a3 e012 	strh.w	lr, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 80081e8:	4613      	mov	r3, r2
 80081ea:	e002      	b.n	80081f2 <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 80081ec:	eba2 020e 	sub.w	r2, r2, lr
 80081f0:	b293      	uxth	r3, r2
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 80081f2:	4283      	cmp	r3, r0
 80081f4:	d90a      	bls.n	800820c <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 80081f6:	4a07      	ldr	r2, [pc, #28]	; (8008214 <TRACE_AllocateBufer+0x84>)
 80081f8:	8a53      	ldrh	r3, [r2, #18]
 80081fa:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 80081fc:	4403      	add	r3, r0
 80081fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008202:	8253      	strh	r3, [r2, #18]
    ret = 0;
 8008204:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008206:	f38c 8810 	msr	PRIMASK, ip
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 800820a:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 800820c:	f04f 30ff 	mov.w	r0, #4294967295
 8008210:	e7f9      	b.n	8008206 <TRACE_AllocateBufer+0x76>
 8008212:	bf00      	nop
 8008214:	20000870 	.word	0x20000870

08008218 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008218:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800821c:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 800821e:	4a03      	ldr	r2, [pc, #12]	; (800822c <TRACE_Lock+0x14>)
 8008220:	8ad3      	ldrh	r3, [r2, #22]
 8008222:	3301      	adds	r3, #1
 8008224:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008226:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 800822a:	4770      	bx	lr
 800822c:	20000870 	.word	0x20000870

08008230 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008230:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008234:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 8008236:	4a03      	ldr	r2, [pc, #12]	; (8008244 <TRACE_UnLock+0x14>)
 8008238:	8ad3      	ldrh	r3, [r2, #22]
 800823a:	3b01      	subs	r3, #1
 800823c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800823e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 8008242:	4770      	bx	lr
 8008244:	20000870 	.word	0x20000870

08008248 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 8008248:	4b02      	ldr	r3, [pc, #8]	; (8008254 <TRACE_IsLocked+0xc>)
 800824a:	8ad8      	ldrh	r0, [r3, #22]
}
 800824c:	3800      	subs	r0, #0
 800824e:	bf18      	it	ne
 8008250:	2001      	movne	r0, #1
 8008252:	4770      	bx	lr
 8008254:	20000870 	.word	0x20000870

08008258 <UTIL_ADV_TRACE_Init>:
{
 8008258:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 800825a:	2218      	movs	r2, #24
 800825c:	2100      	movs	r1, #0
 800825e:	4807      	ldr	r0, [pc, #28]	; (800827c <UTIL_ADV_TRACE_Init+0x24>)
 8008260:	f000 f98f 	bl	8008582 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 8008264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008268:	2100      	movs	r1, #0
 800826a:	4805      	ldr	r0, [pc, #20]	; (8008280 <UTIL_ADV_TRACE_Init+0x28>)
 800826c:	f000 f989 	bl	8008582 <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 8008270:	4b04      	ldr	r3, [pc, #16]	; (8008284 <UTIL_ADV_TRACE_Init+0x2c>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4804      	ldr	r0, [pc, #16]	; (8008288 <UTIL_ADV_TRACE_Init+0x30>)
 8008276:	4798      	blx	r3
}
 8008278:	bd08      	pop	{r3, pc}
 800827a:	bf00      	nop
 800827c:	20000870 	.word	0x20000870
 8008280:	20000670 	.word	0x20000670
 8008284:	0800d61c 	.word	0x0800d61c
 8008288:	08008409 	.word	0x08008409

0800828c <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 800828c:	4b01      	ldr	r3, [pc, #4]	; (8008294 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 800828e:	6058      	str	r0, [r3, #4]
}
 8008290:	4770      	bx	lr
 8008292:	bf00      	nop
 8008294:	20000870 	.word	0x20000870

08008298 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8008298:	4b01      	ldr	r3, [pc, #4]	; (80082a0 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 800829a:	7218      	strb	r0, [r3, #8]
}
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20000870 	.word	0x20000870

080082a4 <TRACE_Send>:
{
 80082a4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082a6:	f3ef 8310 	mrs	r3, PRIMASK
 80082aa:	461c      	mov	r4, r3
  __ASM volatile ("cpsid i" : : : "memory");
 80082ac:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 80082ae:	f7ff ffcb 	bl	8008248 <TRACE_IsLocked>
 80082b2:	b118      	cbz	r0, 80082bc <TRACE_Send+0x18>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b4:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80082b8:	2000      	movs	r0, #0
}
 80082ba:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 80082bc:	f7ff ffac 	bl	8008218 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 80082c0:	4b1c      	ldr	r3, [pc, #112]	; (8008334 <TRACE_Send+0x90>)
 80082c2:	8a1a      	ldrh	r2, [r3, #16]
 80082c4:	8a5b      	ldrh	r3, [r3, #18]
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d02e      	beq.n	8008328 <TRACE_Send+0x84>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80082ca:	491a      	ldr	r1, [pc, #104]	; (8008334 <TRACE_Send+0x90>)
 80082cc:	7889      	ldrb	r1, [r1, #2]
 80082ce:	2901      	cmp	r1, #1
 80082d0:	d017      	beq.n	8008302 <TRACE_Send+0x5e>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80082d2:	4a18      	ldr	r2, [pc, #96]	; (8008334 <TRACE_Send+0x90>)
 80082d4:	7892      	ldrb	r2, [r2, #2]
 80082d6:	b932      	cbnz	r2, 80082e6 <TRACE_Send+0x42>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80082d8:	4a16      	ldr	r2, [pc, #88]	; (8008334 <TRACE_Send+0x90>)
 80082da:	8a12      	ldrh	r2, [r2, #16]
 80082dc:	4293      	cmp	r3, r2
 80082de:	d91e      	bls.n	800831e <TRACE_Send+0x7a>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80082e0:	1a9b      	subs	r3, r3, r2
 80082e2:	4a14      	ldr	r2, [pc, #80]	; (8008334 <TRACE_Send+0x90>)
 80082e4:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80082e6:	4e13      	ldr	r6, [pc, #76]	; (8008334 <TRACE_Send+0x90>)
 80082e8:	8a33      	ldrh	r3, [r6, #16]
 80082ea:	4d13      	ldr	r5, [pc, #76]	; (8008338 <TRACE_Send+0x94>)
 80082ec:	441d      	add	r5, r3
 80082ee:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 80082f2:	f7f9 f929 	bl	8001548 <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80082f6:	4b11      	ldr	r3, [pc, #68]	; (800833c <TRACE_Send+0x98>)
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	8ab1      	ldrh	r1, [r6, #20]
 80082fc:	4628      	mov	r0, r5
 80082fe:	4798      	blx	r3
 8008300:	e7db      	b.n	80082ba <TRACE_Send+0x16>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8008302:	480c      	ldr	r0, [pc, #48]	; (8008334 <TRACE_Send+0x90>)
 8008304:	8801      	ldrh	r1, [r0, #0]
 8008306:	1a8a      	subs	r2, r1, r2
 8008308:	b292      	uxth	r2, r2
 800830a:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800830c:	2102      	movs	r1, #2
 800830e:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8008310:	2100      	movs	r1, #0
 8008312:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8008314:	2a00      	cmp	r2, #0
 8008316:	d1dc      	bne.n	80082d2 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8008318:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 800831a:	8201      	strh	r1, [r0, #16]
 800831c:	e7d9      	b.n	80082d2 <TRACE_Send+0x2e>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 800831e:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 8008322:	4b04      	ldr	r3, [pc, #16]	; (8008334 <TRACE_Send+0x90>)
 8008324:	829a      	strh	r2, [r3, #20]
 8008326:	e7de      	b.n	80082e6 <TRACE_Send+0x42>
      TRACE_UnLock();
 8008328:	f7ff ff82 	bl	8008230 <TRACE_UnLock>
 800832c:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 8008330:	2000      	movs	r0, #0
}
 8008332:	e7c2      	b.n	80082ba <TRACE_Send+0x16>
 8008334:	20000870 	.word	0x20000870
 8008338:	20000670 	.word	0x20000670
 800833c:	0800d61c 	.word	0x0800d61c

08008340 <UTIL_ADV_TRACE_COND_FSend>:
{
 8008340:	b408      	push	{r3}
 8008342:	b530      	push	{r4, r5, lr}
 8008344:	b086      	sub	sp, #24
 8008346:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 8008348:	2300      	movs	r3, #0
 800834a:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 800834e:	4b2b      	ldr	r3, [pc, #172]	; (80083fc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8008350:	7a1b      	ldrb	r3, [r3, #8]
 8008352:	4283      	cmp	r3, r0
 8008354:	d34c      	bcc.n	80083f0 <UTIL_ADV_TRACE_COND_FSend+0xb0>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 8008356:	4b29      	ldr	r3, [pc, #164]	; (80083fc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	4399      	bics	r1, r3
 800835c:	d14b      	bne.n	80083f6 <UTIL_ADV_TRACE_COND_FSend+0xb6>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 800835e:	4b27      	ldr	r3, [pc, #156]	; (80083fc <UTIL_ADV_TRACE_COND_FSend+0xbc>)
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	b123      	cbz	r3, 800836e <UTIL_ADV_TRACE_COND_FSend+0x2e>
 8008364:	b11a      	cbz	r2, 800836e <UTIL_ADV_TRACE_COND_FSend+0x2e>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 8008366:	f10d 0102 	add.w	r1, sp, #2
 800836a:	a801      	add	r0, sp, #4
 800836c:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 800836e:	ab0a      	add	r3, sp, #40	; 0x28
 8008370:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 8008372:	4622      	mov	r2, r4
 8008374:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008378:	4821      	ldr	r0, [pc, #132]	; (8008400 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 800837a:	f000 fc2f 	bl	8008bdc <tiny_vsnprintf_like>
 800837e:	b285      	uxth	r5, r0
  TRACE_Lock();
 8008380:	f7ff ff4a 	bl	8008218 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 8008384:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8008388:	18e8      	adds	r0, r5, r3
 800838a:	4669      	mov	r1, sp
 800838c:	b280      	uxth	r0, r0
 800838e:	f7ff feff 	bl	8008190 <TRACE_AllocateBufer>
 8008392:	f1b0 3fff 	cmp.w	r0, #4294967295
 8008396:	d026      	beq.n	80083e6 <UTIL_ADV_TRACE_COND_FSend+0xa6>
    for (idx = 0u; idx < timestamp_size; idx++)
 8008398:	2300      	movs	r3, #0
 800839a:	e00d      	b.n	80083b8 <UTIL_ADV_TRACE_COND_FSend+0x78>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 800839c:	f8bd 2000 	ldrh.w	r2, [sp]
 80083a0:	f103 0118 	add.w	r1, r3, #24
 80083a4:	4469      	add	r1, sp
 80083a6:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 80083aa:	4916      	ldr	r1, [pc, #88]	; (8008404 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80083ac:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 80083ae:	3201      	adds	r2, #1
 80083b0:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 80083b4:	3301      	adds	r3, #1
 80083b6:	b29b      	uxth	r3, r3
 80083b8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80083bc:	429a      	cmp	r2, r3
 80083be:	d8ed      	bhi.n	800839c <UTIL_ADV_TRACE_COND_FSend+0x5c>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80083c0:	f8bd 0000 	ldrh.w	r0, [sp]
 80083c4:	9b05      	ldr	r3, [sp, #20]
 80083c6:	4622      	mov	r2, r4
 80083c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80083cc:	4c0d      	ldr	r4, [pc, #52]	; (8008404 <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80083ce:	4420      	add	r0, r4
 80083d0:	f000 fc04 	bl	8008bdc <tiny_vsnprintf_like>
    TRACE_UnLock();
 80083d4:	f7ff ff2c 	bl	8008230 <TRACE_UnLock>
    return TRACE_Send();
 80083d8:	f7ff ff64 	bl	80082a4 <TRACE_Send>
}
 80083dc:	b006      	add	sp, #24
 80083de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80083e2:	b001      	add	sp, #4
 80083e4:	4770      	bx	lr
  TRACE_UnLock();
 80083e6:	f7ff ff23 	bl	8008230 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 80083ea:	f06f 0002 	mvn.w	r0, #2
 80083ee:	e7f5      	b.n	80083dc <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_GIVEUP;
 80083f0:	f06f 0004 	mvn.w	r0, #4
 80083f4:	e7f2      	b.n	80083dc <UTIL_ADV_TRACE_COND_FSend+0x9c>
    return UTIL_ADV_TRACE_REGIONMASKED;
 80083f6:	f06f 0005 	mvn.w	r0, #5
 80083fa:	e7ef      	b.n	80083dc <UTIL_ADV_TRACE_COND_FSend+0x9c>
 80083fc:	20000870 	.word	0x20000870
 8008400:	20000888 	.word	0x20000888
 8008404:	20000670 	.word	0x20000670

08008408 <TRACE_TxCpltCallback>:
{
 8008408:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800840a:	f3ef 8310 	mrs	r3, PRIMASK
 800840e:	4619      	mov	r1, r3
  __ASM volatile ("cpsid i" : : : "memory");
 8008410:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 8008412:	4b26      	ldr	r3, [pc, #152]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 8008414:	789b      	ldrb	r3, [r3, #2]
 8008416:	2b02      	cmp	r3, #2
 8008418:	d016      	beq.n	8008448 <TRACE_TxCpltCallback+0x40>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 800841a:	4a24      	ldr	r2, [pc, #144]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 800841c:	8a13      	ldrh	r3, [r2, #16]
 800841e:	8a90      	ldrh	r0, [r2, #20]
 8008420:	4403      	add	r3, r0
 8008422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008426:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 8008428:	4b20      	ldr	r3, [pc, #128]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 800842a:	8a1a      	ldrh	r2, [r3, #16]
 800842c:	8a5b      	ldrh	r3, [r3, #18]
 800842e:	429a      	cmp	r2, r3
 8008430:	d003      	beq.n	800843a <TRACE_TxCpltCallback+0x32>
 8008432:	481e      	ldr	r0, [pc, #120]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 8008434:	8ac0      	ldrh	r0, [r0, #22]
 8008436:	2801      	cmp	r0, #1
 8008438:	d00b      	beq.n	8008452 <TRACE_TxCpltCallback+0x4a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800843a:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 800843e:	f7f9 f889 	bl	8001554 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 8008442:	f7ff fef5 	bl	8008230 <TRACE_UnLock>
}
 8008446:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8008448:	4b18      	ldr	r3, [pc, #96]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 800844a:	2200      	movs	r2, #0
 800844c:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 800844e:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 8008450:	e7ea      	b.n	8008428 <TRACE_TxCpltCallback+0x20>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8008452:	4816      	ldr	r0, [pc, #88]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 8008454:	7880      	ldrb	r0, [r0, #2]
 8008456:	2801      	cmp	r0, #1
 8008458:	d014      	beq.n	8008484 <TRACE_TxCpltCallback+0x7c>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 800845a:	4a14      	ldr	r2, [pc, #80]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 800845c:	7892      	ldrb	r2, [r2, #2]
 800845e:	b932      	cbnz	r2, 800846e <TRACE_TxCpltCallback+0x66>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 8008460:	4a12      	ldr	r2, [pc, #72]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 8008462:	8a12      	ldrh	r2, [r2, #16]
 8008464:	4293      	cmp	r3, r2
 8008466:	d91b      	bls.n	80084a0 <TRACE_TxCpltCallback+0x98>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8008468:	1a9b      	subs	r3, r3, r2
 800846a:	4a10      	ldr	r2, [pc, #64]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 800846c:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 800846e:	4b0f      	ldr	r3, [pc, #60]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 8008470:	8a1a      	ldrh	r2, [r3, #16]
 8008472:	480f      	ldr	r0, [pc, #60]	; (80084b0 <TRACE_TxCpltCallback+0xa8>)
 8008474:	4410      	add	r0, r2
 8008476:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 800847a:	4a0e      	ldr	r2, [pc, #56]	; (80084b4 <TRACE_TxCpltCallback+0xac>)
 800847c:	68d2      	ldr	r2, [r2, #12]
 800847e:	8a99      	ldrh	r1, [r3, #20]
 8008480:	4790      	blx	r2
 8008482:	e7e0      	b.n	8008446 <TRACE_TxCpltCallback+0x3e>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 8008484:	4c09      	ldr	r4, [pc, #36]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 8008486:	8820      	ldrh	r0, [r4, #0]
 8008488:	1a82      	subs	r2, r0, r2
 800848a:	b292      	uxth	r2, r2
 800848c:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 800848e:	2002      	movs	r0, #2
 8008490:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 8008492:	2000      	movs	r0, #0
 8008494:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8008496:	2a00      	cmp	r2, #0
 8008498:	d1df      	bne.n	800845a <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 800849a:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 800849c:	8220      	strh	r0, [r4, #16]
 800849e:	e7dc      	b.n	800845a <TRACE_TxCpltCallback+0x52>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 80084a0:	f5c2 7200 	rsb	r2, r2, #512	; 0x200
 80084a4:	4b01      	ldr	r3, [pc, #4]	; (80084ac <TRACE_TxCpltCallback+0xa4>)
 80084a6:	829a      	strh	r2, [r3, #20]
 80084a8:	e7e1      	b.n	800846e <TRACE_TxCpltCallback+0x66>
 80084aa:	bf00      	nop
 80084ac:	20000870 	.word	0x20000870
 80084b0:	20000670 	.word	0x20000670
 80084b4:	0800d61c 	.word	0x0800d61c

080084b8 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 80084b8:	2300      	movs	r3, #0
 80084ba:	4a02      	ldr	r2, [pc, #8]	; (80084c4 <UTIL_LPM_Init+0xc>)
 80084bc:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 80084be:	4a02      	ldr	r2, [pc, #8]	; (80084c8 <UTIL_LPM_Init+0x10>)
 80084c0:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 80084c2:	4770      	bx	lr
 80084c4:	2000098c 	.word	0x2000098c
 80084c8:	20000988 	.word	0x20000988

080084cc <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084cc:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80084d0:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 80084d2:	b141      	cbz	r1, 80084e6 <UTIL_LPM_SetStopMode+0x1a>
 80084d4:	2901      	cmp	r1, #1
 80084d6:	d103      	bne.n	80084e0 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 80084d8:	4906      	ldr	r1, [pc, #24]	; (80084f4 <UTIL_LPM_SetStopMode+0x28>)
 80084da:	680a      	ldr	r2, [r1, #0]
 80084dc:	4302      	orrs	r2, r0
 80084de:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084e0:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 80084e4:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 80084e6:	4903      	ldr	r1, [pc, #12]	; (80084f4 <UTIL_LPM_SetStopMode+0x28>)
 80084e8:	680a      	ldr	r2, [r1, #0]
 80084ea:	ea22 0200 	bic.w	r2, r2, r0
 80084ee:	600a      	str	r2, [r1, #0]
      break;
 80084f0:	e7f6      	b.n	80084e0 <UTIL_LPM_SetStopMode+0x14>
 80084f2:	bf00      	nop
 80084f4:	2000098c 	.word	0x2000098c

080084f8 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084f8:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80084fc:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 80084fe:	b141      	cbz	r1, 8008512 <UTIL_LPM_SetOffMode+0x1a>
 8008500:	2901      	cmp	r1, #1
 8008502:	d103      	bne.n	800850c <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8008504:	4906      	ldr	r1, [pc, #24]	; (8008520 <UTIL_LPM_SetOffMode+0x28>)
 8008506:	680a      	ldr	r2, [r1, #0]
 8008508:	4302      	orrs	r2, r0
 800850a:	600a      	str	r2, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800850c:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8008510:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 8008512:	4903      	ldr	r1, [pc, #12]	; (8008520 <UTIL_LPM_SetOffMode+0x28>)
 8008514:	680a      	ldr	r2, [r1, #0]
 8008516:	ea22 0200 	bic.w	r2, r2, r0
 800851a:	600a      	str	r2, [r1, #0]
      break;
 800851c:	e7f6      	b.n	800850c <UTIL_LPM_SetOffMode+0x14>
 800851e:	bf00      	nop
 8008520:	20000988 	.word	0x20000988

08008524 <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8008524:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008526:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800852a:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 800852c:	4b0c      	ldr	r3, [pc, #48]	; (8008560 <UTIL_LPM_EnterLowPower+0x3c>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	b13b      	cbz	r3, 8008542 <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 8008532:	4d0c      	ldr	r5, [pc, #48]	; (8008564 <UTIL_LPM_EnterLowPower+0x40>)
 8008534:	682b      	ldr	r3, [r5, #0]
 8008536:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 8008538:	686b      	ldr	r3, [r5, #4]
 800853a:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800853c:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 8008540:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 8008542:	4b09      	ldr	r3, [pc, #36]	; (8008568 <UTIL_LPM_EnterLowPower+0x44>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	b12b      	cbz	r3, 8008554 <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 8008548:	4d06      	ldr	r5, [pc, #24]	; (8008564 <UTIL_LPM_EnterLowPower+0x40>)
 800854a:	68ab      	ldr	r3, [r5, #8]
 800854c:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 800854e:	68eb      	ldr	r3, [r5, #12]
 8008550:	4798      	blx	r3
 8008552:	e7f3      	b.n	800853c <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 8008554:	4d03      	ldr	r5, [pc, #12]	; (8008564 <UTIL_LPM_EnterLowPower+0x40>)
 8008556:	692b      	ldr	r3, [r5, #16]
 8008558:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 800855a:	696b      	ldr	r3, [r5, #20]
 800855c:	4798      	blx	r3
 800855e:	e7ed      	b.n	800853c <UTIL_LPM_EnterLowPower+0x18>
 8008560:	2000098c 	.word	0x2000098c
 8008564:	0800d5b8 	.word	0x0800d5b8
 8008568:	20000988 	.word	0x20000988

0800856c <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 800856c:	e004      	b.n	8008578 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 800856e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008572:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 8008576:	461a      	mov	r2, r3
 8008578:	1e53      	subs	r3, r2, #1
 800857a:	b29b      	uxth	r3, r3
 800857c:	2a00      	cmp	r2, #0
 800857e:	d1f6      	bne.n	800856e <UTIL_MEM_cpy_8+0x2>
    }
}
 8008580:	4770      	bx	lr

08008582 <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 8008582:	e002      	b.n	800858a <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 8008584:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8008588:	461a      	mov	r2, r3
 800858a:	1e53      	subs	r3, r2, #1
 800858c:	b29b      	uxth	r3, r3
 800858e:	2a00      	cmp	r2, #0
 8008590:	d1f8      	bne.n	8008584 <UTIL_MEM_set_8+0x2>
  }
}
 8008592:	4770      	bx	lr

08008594 <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008594:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008598:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 800859a:	4a06      	ldr	r2, [pc, #24]	; (80085b4 <UTIL_SEQ_SetTask+0x20>)
 800859c:	6813      	ldr	r3, [r2, #0]
 800859e:	4303      	orrs	r3, r0
 80085a0:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 80085a2:	4a05      	ldr	r2, [pc, #20]	; (80085b8 <UTIL_SEQ_SetTask+0x24>)
 80085a4:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 80085a8:	4303      	orrs	r3, r0
 80085aa:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80085ae:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 80085b2:	4770      	bx	lr
 80085b4:	200009ac 	.word	0x200009ac
 80085b8:	200009a4 	.word	0x200009a4

080085bc <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80085bc:	4770      	bx	lr

080085be <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 80085be:	4770      	bx	lr

080085c0 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 80085c0:	0c03      	lsrs	r3, r0, #16
 80085c2:	041b      	lsls	r3, r3, #16
 80085c4:	b9b3      	cbnz	r3, 80085f4 <SEQ_BitPosition+0x34>
 80085c6:	0400      	lsls	r0, r0, #16
 80085c8:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 80085ca:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80085ce:	d102      	bne.n	80085d6 <SEQ_BitPosition+0x16>
 80085d0:	3308      	adds	r3, #8
 80085d2:	b2db      	uxtb	r3, r3
 80085d4:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 80085d6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80085da:	d102      	bne.n	80085e2 <SEQ_BitPosition+0x22>
 80085dc:	3304      	adds	r3, #4
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 80085e2:	0f00      	lsrs	r0, r0, #28
 80085e4:	4a04      	ldr	r2, [pc, #16]	; (80085f8 <SEQ_BitPosition+0x38>)
 80085e6:	5c10      	ldrb	r0, [r2, r0]
 80085e8:	4418      	add	r0, r3
 80085ea:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 80085ec:	f1c0 001f 	rsb	r0, r0, #31
}
 80085f0:	b2c0      	uxtb	r0, r0
 80085f2:	4770      	bx	lr
uint8_t n = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	e7e8      	b.n	80085ca <SEQ_BitPosition+0xa>
 80085f8:	0800de1c 	.word	0x0800de1c

080085fc <UTIL_SEQ_Run>:
{
 80085fc:	b570      	push	{r4, r5, r6, lr}
  super_mask_backup = SuperMask;
 80085fe:	4b42      	ldr	r3, [pc, #264]	; (8008708 <UTIL_SEQ_Run+0x10c>)
 8008600:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 8008602:	4020      	ands	r0, r4
 8008604:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 8008606:	4b41      	ldr	r3, [pc, #260]	; (800870c <UTIL_SEQ_Run+0x110>)
 8008608:	681a      	ldr	r2, [r3, #0]
  local_evtset = EvtSet;
 800860a:	4b41      	ldr	r3, [pc, #260]	; (8008710 <UTIL_SEQ_Run+0x114>)
 800860c:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 800860e:	4941      	ldr	r1, [pc, #260]	; (8008714 <UTIL_SEQ_Run+0x118>)
 8008610:	6808      	ldr	r0, [r1, #0]
  local_evtwaited =  EvtWaited;
 8008612:	4941      	ldr	r1, [pc, #260]	; (8008718 <UTIL_SEQ_Run+0x11c>)
 8008614:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008616:	e02f      	b.n	8008678 <UTIL_SEQ_Run+0x7c>
      counter++;
 8008618:	3301      	adds	r3, #1
 800861a:	e034      	b.n	8008686 <UTIL_SEQ_Run+0x8a>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 800861c:	4d3f      	ldr	r5, [pc, #252]	; (800871c <UTIL_SEQ_Run+0x120>)
 800861e:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008622:	6868      	ldr	r0, [r5, #4]
 8008624:	4010      	ands	r0, r2
 8008626:	f7ff ffcb 	bl	80085c0 <SEQ_BitPosition>
 800862a:	4e3d      	ldr	r6, [pc, #244]	; (8008720 <UTIL_SEQ_Run+0x124>)
 800862c:	6030      	str	r0, [r6, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 800862e:	686a      	ldr	r2, [r5, #4]
 8008630:	2301      	movs	r3, #1
 8008632:	fa03 f000 	lsl.w	r0, r3, r0
 8008636:	ea22 0200 	bic.w	r2, r2, r0
 800863a:	606a      	str	r2, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800863c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008640:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 8008642:	6832      	ldr	r2, [r6, #0]
 8008644:	fa03 f202 	lsl.w	r2, r3, r2
 8008648:	43d6      	mvns	r6, r2
 800864a:	4d30      	ldr	r5, [pc, #192]	; (800870c <UTIL_SEQ_Run+0x110>)
 800864c:	6828      	ldr	r0, [r5, #0]
 800864e:	ea20 0202 	bic.w	r2, r0, r2
 8008652:	602a      	str	r2, [r5, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 8008654:	2b00      	cmp	r3, #0
 8008656:	d12d      	bne.n	80086b4 <UTIL_SEQ_Run+0xb8>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008658:	f381 8810 	msr	PRIMASK, r1
    TaskCb[CurrentTaskIdx]( );
 800865c:	4b30      	ldr	r3, [pc, #192]	; (8008720 <UTIL_SEQ_Run+0x124>)
 800865e:	681a      	ldr	r2, [r3, #0]
 8008660:	4b30      	ldr	r3, [pc, #192]	; (8008724 <UTIL_SEQ_Run+0x128>)
 8008662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008666:	4798      	blx	r3
    local_taskset = TaskSet;
 8008668:	4b28      	ldr	r3, [pc, #160]	; (800870c <UTIL_SEQ_Run+0x110>)
 800866a:	681a      	ldr	r2, [r3, #0]
    local_evtset = EvtSet;
 800866c:	4b28      	ldr	r3, [pc, #160]	; (8008710 <UTIL_SEQ_Run+0x114>)
 800866e:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 8008670:	4928      	ldr	r1, [pc, #160]	; (8008714 <UTIL_SEQ_Run+0x118>)
 8008672:	6808      	ldr	r0, [r1, #0]
    local_evtwaited = EvtWaited;
 8008674:	4928      	ldr	r1, [pc, #160]	; (8008718 <UTIL_SEQ_Run+0x11c>)
 8008676:	6809      	ldr	r1, [r1, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 8008678:	4002      	ands	r2, r0
 800867a:	4d23      	ldr	r5, [pc, #140]	; (8008708 <UTIL_SEQ_Run+0x10c>)
 800867c:	682d      	ldr	r5, [r5, #0]
 800867e:	422a      	tst	r2, r5
 8008680:	d020      	beq.n	80086c4 <UTIL_SEQ_Run+0xc8>
 8008682:	400b      	ands	r3, r1
 8008684:	d11e      	bne.n	80086c4 <UTIL_SEQ_Run+0xc8>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8008686:	4a25      	ldr	r2, [pc, #148]	; (800871c <UTIL_SEQ_Run+0x120>)
 8008688:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 800868c:	4002      	ands	r2, r0
 800868e:	422a      	tst	r2, r5
 8008690:	d0c2      	beq.n	8008618 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 8008692:	4922      	ldr	r1, [pc, #136]	; (800871c <UTIL_SEQ_Run+0x120>)
 8008694:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8008698:	4002      	ands	r2, r0
 800869a:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 800869c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086a0:	6849      	ldr	r1, [r1, #4]
 80086a2:	4211      	tst	r1, r2
 80086a4:	d1ba      	bne.n	800861c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 80086a6:	491d      	ldr	r1, [pc, #116]	; (800871c <UTIL_SEQ_Run+0x120>)
 80086a8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80086ac:	f04f 30ff 	mov.w	r0, #4294967295
 80086b0:	6048      	str	r0, [r1, #4]
 80086b2:	e7b3      	b.n	800861c <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 80086b4:	3b01      	subs	r3, #1
 80086b6:	4819      	ldr	r0, [pc, #100]	; (800871c <UTIL_SEQ_Run+0x120>)
 80086b8:	f850 2033 	ldr.w	r2, [r0, r3, lsl #3]
 80086bc:	4032      	ands	r2, r6
 80086be:	f840 2033 	str.w	r2, [r0, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80086c2:	e7c7      	b.n	8008654 <UTIL_SEQ_Run+0x58>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 80086c4:	4b16      	ldr	r3, [pc, #88]	; (8008720 <UTIL_SEQ_Run+0x124>)
 80086c6:	f04f 32ff 	mov.w	r2, #4294967295
 80086ca:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 80086cc:	f7ff ff76 	bl	80085bc <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086d0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80086d4:	b672      	cpsid	i
  local_taskset = TaskSet;
 80086d6:	4b0d      	ldr	r3, [pc, #52]	; (800870c <UTIL_SEQ_Run+0x110>)
 80086d8:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 80086da:	4a0d      	ldr	r2, [pc, #52]	; (8008710 <UTIL_SEQ_Run+0x114>)
 80086dc:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 80086de:	4a0d      	ldr	r2, [pc, #52]	; (8008714 <UTIL_SEQ_Run+0x118>)
 80086e0:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 80086e2:	4013      	ands	r3, r2
 80086e4:	4a08      	ldr	r2, [pc, #32]	; (8008708 <UTIL_SEQ_Run+0x10c>)
 80086e6:	6812      	ldr	r2, [r2, #0]
 80086e8:	4213      	tst	r3, r2
 80086ea:	d103      	bne.n	80086f4 <UTIL_SEQ_Run+0xf8>
    if ((local_evtset & EvtWaited)== 0U)
 80086ec:	4b0a      	ldr	r3, [pc, #40]	; (8008718 <UTIL_SEQ_Run+0x11c>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	420b      	tst	r3, r1
 80086f2:	d006      	beq.n	8008702 <UTIL_SEQ_Run+0x106>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086f4:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 80086f8:	f7ff ff61 	bl	80085be <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 80086fc:	4b02      	ldr	r3, [pc, #8]	; (8008708 <UTIL_SEQ_Run+0x10c>)
 80086fe:	601c      	str	r4, [r3, #0]
}
 8008700:	bd70      	pop	{r4, r5, r6, pc}
      UTIL_SEQ_Idle( );
 8008702:	f7f8 ff1d 	bl	8001540 <UTIL_SEQ_Idle>
 8008706:	e7f5      	b.n	80086f4 <UTIL_SEQ_Run+0xf8>
 8008708:	20000010 	.word	0x20000010
 800870c:	200009ac 	.word	0x200009ac
 8008710:	20000994 	.word	0x20000994
 8008714:	20000014 	.word	0x20000014
 8008718:	20000998 	.word	0x20000998
 800871c:	200009a4 	.word	0x200009a4
 8008720:	20000990 	.word	0x20000990
 8008724:	2000099c 	.word	0x2000099c

08008728 <UTIL_SEQ_RegTask>:
{
 8008728:	b538      	push	{r3, r4, r5, lr}
 800872a:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800872c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008730:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 8008732:	f7ff ff45 	bl	80085c0 <SEQ_BitPosition>
 8008736:	4b03      	ldr	r3, [pc, #12]	; (8008744 <UTIL_SEQ_RegTask+0x1c>)
 8008738:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800873c:	f385 8810 	msr	PRIMASK, r5
}
 8008740:	bd38      	pop	{r3, r4, r5, pc}
 8008742:	bf00      	nop
 8008744:	2000099c 	.word	0x2000099c

08008748 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 8008748:	b082      	sub	sp, #8
 800874a:	b082      	sub	sp, #8
 800874c:	f10d 0c08 	add.w	ip, sp, #8
 8008750:	e90c 0006 	stmdb	ip, {r1, r2}
 8008754:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 8008756:	2200      	movs	r2, #0
 8008758:	6002      	str	r2, [r0, #0]
 800875a:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 800875c:	440b      	add	r3, r1
 800875e:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 8008760:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8008764:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8008768:	440a      	add	r2, r1
 800876a:	b291      	uxth	r1, r2
 800876c:	b212      	sxth	r2, r2
 800876e:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 8008770:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 8008774:	db04      	blt.n	8008780 <SysTimeAdd+0x38>
  {
    c.Seconds++;
 8008776:	3301      	adds	r3, #1
 8008778:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 800877a:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 800877e:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 8008780:	b002      	add	sp, #8
 8008782:	b002      	add	sp, #8
 8008784:	4770      	bx	lr
	...

08008788 <SysTimeGet>:
  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
}

SysTime_t SysTimeGet( void )
{
 8008788:	b530      	push	{r4, r5, lr}
 800878a:	b087      	sub	sp, #28
 800878c:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 800878e:	2300      	movs	r3, #0
 8008790:	9304      	str	r3, [sp, #16]
 8008792:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8008796:	6003      	str	r3, [r0, #0]
 8008798:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 800879a:	4d0b      	ldr	r5, [pc, #44]	; (80087c8 <SysTimeGet+0x40>)
 800879c:	692b      	ldr	r3, [r5, #16]
 800879e:	a805      	add	r0, sp, #20
 80087a0:	4798      	blx	r3
 80087a2:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80087a4:	68eb      	ldr	r3, [r5, #12]
 80087a6:	4798      	blx	r3
 80087a8:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80087ac:	686b      	ldr	r3, [r5, #4]
 80087ae:	4798      	blx	r3
 80087b0:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80087b2:	9b05      	ldr	r3, [sp, #20]
 80087b4:	9300      	str	r3, [sp, #0]
 80087b6:	9b04      	ldr	r3, [sp, #16]
 80087b8:	aa02      	add	r2, sp, #8
 80087ba:	ca06      	ldmia	r2, {r1, r2}
 80087bc:	4620      	mov	r0, r4
 80087be:	f7ff ffc3 	bl	8008748 <SysTimeAdd>

  return sysTime;
}
 80087c2:	4620      	mov	r0, r4
 80087c4:	b007      	add	sp, #28
 80087c6:	bd30      	pop	{r4, r5, pc}
 80087c8:	0800d5dc 	.word	0x0800d5dc

080087cc <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 80087cc:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 80087ce:	4b03      	ldr	r3, [pc, #12]	; (80087dc <UTIL_TIMER_Init+0x10>)
 80087d0:	2200      	movs	r2, #0
 80087d2:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 80087d4:	4b02      	ldr	r3, [pc, #8]	; (80087e0 <UTIL_TIMER_Init+0x14>)
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4798      	blx	r3
}
 80087da:	bd08      	pop	{r3, pc}
 80087dc:	200009b0 	.word	0x200009b0
 80087e0:	0800d5f0 	.word	0x0800d5f0

080087e4 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80087e4:	b1a8      	cbz	r0, 8008812 <UTIL_TIMER_Create+0x2e>
{
 80087e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087e8:	4617      	mov	r7, r2
 80087ea:	461e      	mov	r6, r3
 80087ec:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80087ee:	b193      	cbz	r3, 8008816 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80087f0:	2500      	movs	r5, #0
 80087f2:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80087f4:	4b09      	ldr	r3, [pc, #36]	; (800881c <UTIL_TIMER_Create+0x38>)
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	4608      	mov	r0, r1
 80087fa:	4798      	blx	r3
 80087fc:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80087fe:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 8008800:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8008802:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 8008804:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 8008806:	9b06      	ldr	r3, [sp, #24]
 8008808:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 800880a:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 800880c:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 800880e:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 8008810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 8008812:	2001      	movs	r0, #1
}
 8008814:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 8008816:	2001      	movs	r0, #1
 8008818:	e7fa      	b.n	8008810 <UTIL_TIMER_Create+0x2c>
 800881a:	bf00      	nop
 800881c:	0800d5f0 	.word	0x0800d5f0

08008820 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 8008820:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 8008822:	4c03      	ldr	r4, [pc, #12]	; (8008830 <UTIL_TIMER_GetCurrentTime+0x10>)
 8008824:	69e3      	ldr	r3, [r4, #28]
 8008826:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 8008828:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800882a:	4798      	blx	r3
}
 800882c:	bd10      	pop	{r4, pc}
 800882e:	bf00      	nop
 8008830:	0800d5f0 	.word	0x0800d5f0

08008834 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 8008834:	b570      	push	{r4, r5, r6, lr}
 8008836:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 8008838:	4d05      	ldr	r5, [pc, #20]	; (8008850 <UTIL_TIMER_GetElapsedTime+0x1c>)
 800883a:	69eb      	ldr	r3, [r5, #28]
 800883c:	4798      	blx	r3
 800883e:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8008840:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008842:	4630      	mov	r0, r6
 8008844:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8008846:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8008848:	1a20      	subs	r0, r4, r0
 800884a:	4798      	blx	r3
}
 800884c:	bd70      	pop	{r4, r5, r6, pc}
 800884e:	bf00      	nop
 8008850:	0800d5f0 	.word	0x0800d5f0

08008854 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8008854:	4b05      	ldr	r3, [pc, #20]	; (800886c <TimerExists+0x18>)
 8008856:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8008858:	e000      	b.n	800885c <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 800885a:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 800885c:	b11b      	cbz	r3, 8008866 <TimerExists+0x12>
    if( cur == TimerObject )
 800885e:	4283      	cmp	r3, r0
 8008860:	d1fb      	bne.n	800885a <TimerExists+0x6>
      return true;
 8008862:	2001      	movs	r0, #1
  }
  return false;
}
 8008864:	4770      	bx	lr
  return false;
 8008866:	2000      	movs	r0, #0
 8008868:	4770      	bx	lr
 800886a:	bf00      	nop
 800886c:	200009b0 	.word	0x200009b0

08008870 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8008870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008872:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8008874:	4e09      	ldr	r6, [pc, #36]	; (800889c <TimerSetTimeout+0x2c>)
 8008876:	6a33      	ldr	r3, [r6, #32]
 8008878:	4798      	blx	r3
 800887a:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 800887c:	2301      	movs	r3, #1
 800887e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8008880:	6827      	ldr	r7, [r4, #0]
 8008882:	69b6      	ldr	r6, [r6, #24]
 8008884:	47b0      	blx	r6
 8008886:	4428      	add	r0, r5
 8008888:	4287      	cmp	r7, r0
 800888a:	d202      	bcs.n	8008892 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 800888c:	47b0      	blx	r6
 800888e:	4428      	add	r0, r5
 8008890:	6020      	str	r0, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8008892:	4b02      	ldr	r3, [pc, #8]	; (800889c <TimerSetTimeout+0x2c>)
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	6820      	ldr	r0, [r4, #0]
 8008898:	4798      	blx	r3
}
 800889a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800889c:	0800d5f0 	.word	0x0800d5f0

080088a0 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 80088a0:	b368      	cbz	r0, 80088fe <UTIL_TIMER_Stop+0x5e>
{
 80088a2:	b510      	push	{r4, lr}
 80088a4:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088a6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80088aa:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 80088ac:	4b15      	ldr	r3, [pc, #84]	; (8008904 <UTIL_TIMER_Stop+0x64>)
 80088ae:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 80088b0:	2301      	movs	r3, #1
 80088b2:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 80088b4:	b1e1      	cbz	r1, 80088f0 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 80088b6:	2300      	movs	r3, #0
 80088b8:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 80088ba:	4288      	cmp	r0, r1
 80088bc:	d006      	beq.n	80088cc <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 80088be:	460b      	mov	r3, r1
        while( cur != NULL )
 80088c0:	b1b3      	cbz	r3, 80088f0 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 80088c2:	4293      	cmp	r3, r2
 80088c4:	d011      	beq.n	80088ea <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 80088c6:	4619      	mov	r1, r3
            cur = cur->Next;
 80088c8:	695b      	ldr	r3, [r3, #20]
 80088ca:	e7f9      	b.n	80088c0 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 80088cc:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 80088ce:	6948      	ldr	r0, [r1, #20]
 80088d0:	b120      	cbz	r0, 80088dc <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 80088d2:	4b0c      	ldr	r3, [pc, #48]	; (8008904 <UTIL_TIMER_Stop+0x64>)
 80088d4:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 80088d6:	f7ff ffcb 	bl	8008870 <TimerSetTimeout>
 80088da:	e009      	b.n	80088f0 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 80088dc:	4b0a      	ldr	r3, [pc, #40]	; (8008908 <UTIL_TIMER_Stop+0x68>)
 80088de:	68db      	ldr	r3, [r3, #12]
 80088e0:	4798      	blx	r3
            TimerListHead = NULL;
 80088e2:	4b08      	ldr	r3, [pc, #32]	; (8008904 <UTIL_TIMER_Stop+0x64>)
 80088e4:	2200      	movs	r2, #0
 80088e6:	601a      	str	r2, [r3, #0]
 80088e8:	e002      	b.n	80088f0 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80088ea:	695b      	ldr	r3, [r3, #20]
 80088ec:	b123      	cbz	r3, 80088f8 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80088ee:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088f0:	f384 8810 	msr	PRIMASK, r4
}
 80088f4:	2000      	movs	r0, #0
}
 80088f6:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80088f8:	2300      	movs	r3, #0
 80088fa:	614b      	str	r3, [r1, #20]
 80088fc:	e7f8      	b.n	80088f0 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80088fe:	2001      	movs	r0, #1
}
 8008900:	4770      	bx	lr
 8008902:	bf00      	nop
 8008904:	200009b0 	.word	0x200009b0
 8008908:	0800d5f0 	.word	0x0800d5f0

0800890c <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800890c:	4b09      	ldr	r3, [pc, #36]	; (8008934 <TimerInsertTimer+0x28>)
 800890e:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 8008910:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 8008912:	e001      	b.n	8008918 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 8008914:	461a      	mov	r2, r3
        next = next->Next;
 8008916:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 8008918:	6951      	ldr	r1, [r2, #20]
 800891a:	b139      	cbz	r1, 800892c <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 800891c:	6819      	ldr	r1, [r3, #0]
 800891e:	f8d0 c000 	ldr.w	ip, [r0]
 8008922:	458c      	cmp	ip, r1
 8008924:	d8f6      	bhi.n	8008914 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 8008926:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 8008928:	6143      	str	r3, [r0, #20]
        return;
 800892a:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 800892c:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 800892e:	2300      	movs	r3, #0
 8008930:	6143      	str	r3, [r0, #20]
}
 8008932:	4770      	bx	lr
 8008934:	200009b0 	.word	0x200009b0

08008938 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 8008938:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 800893a:	4b05      	ldr	r3, [pc, #20]	; (8008950 <TimerInsertNewHeadTimer+0x18>)
 800893c:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 800893e:	b10b      	cbz	r3, 8008944 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8008940:	2200      	movs	r2, #0
 8008942:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8008944:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8008946:	4b02      	ldr	r3, [pc, #8]	; (8008950 <TimerInsertNewHeadTimer+0x18>)
 8008948:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 800894a:	f7ff ff91 	bl	8008870 <TimerSetTimeout>
}
 800894e:	bd08      	pop	{r3, pc}
 8008950:	200009b0 	.word	0x200009b0

08008954 <UTIL_TIMER_Start>:
{
 8008954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8008956:	2800      	cmp	r0, #0
 8008958:	d036      	beq.n	80089c8 <UTIL_TIMER_Start+0x74>
 800895a:	4604      	mov	r4, r0
 800895c:	f7ff ff7a 	bl	8008854 <TimerExists>
 8008960:	2800      	cmp	r0, #0
 8008962:	d134      	bne.n	80089ce <UTIL_TIMER_Start+0x7a>
 8008964:	7a65      	ldrb	r5, [r4, #9]
 8008966:	2d00      	cmp	r5, #0
 8008968:	d133      	bne.n	80089d2 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800896a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800896e:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8008970:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8008972:	4b19      	ldr	r3, [pc, #100]	; (80089d8 <UTIL_TIMER_Start+0x84>)
 8008974:	6a1b      	ldr	r3, [r3, #32]
 8008976:	4798      	blx	r3
    if( ticks < minValue )
 8008978:	4287      	cmp	r7, r0
 800897a:	d300      	bcc.n	800897e <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 800897c:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 800897e:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8008984:	2201      	movs	r2, #1
 8008986:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8008988:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 800898a:	4b14      	ldr	r3, [pc, #80]	; (80089dc <UTIL_TIMER_Start+0x88>)
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	b183      	cbz	r3, 80089b2 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8008990:	4b11      	ldr	r3, [pc, #68]	; (80089d8 <UTIL_TIMER_Start+0x84>)
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8008996:	6823      	ldr	r3, [r4, #0]
 8008998:	4418      	add	r0, r3
 800899a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 800899c:	4b0f      	ldr	r3, [pc, #60]	; (80089dc <UTIL_TIMER_Start+0x88>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4298      	cmp	r0, r3
 80089a4:	d20c      	bcs.n	80089c0 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 80089a6:	4620      	mov	r0, r4
 80089a8:	f7ff ffc6 	bl	8008938 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80089ac:	f386 8810 	msr	PRIMASK, r6
}
 80089b0:	e00b      	b.n	80089ca <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 80089b2:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <UTIL_TIMER_Start+0x84>)
 80089b4:	691b      	ldr	r3, [r3, #16]
 80089b6:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 80089b8:	4620      	mov	r0, r4
 80089ba:	f7ff ffbd 	bl	8008938 <TimerInsertNewHeadTimer>
 80089be:	e7f5      	b.n	80089ac <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 80089c0:	4620      	mov	r0, r4
 80089c2:	f7ff ffa3 	bl	800890c <TimerInsertTimer>
 80089c6:	e7f1      	b.n	80089ac <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 80089c8:	2501      	movs	r5, #1
}
 80089ca:	4628      	mov	r0, r5
 80089cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 80089ce:	2501      	movs	r5, #1
 80089d0:	e7fb      	b.n	80089ca <UTIL_TIMER_Start+0x76>
 80089d2:	2501      	movs	r5, #1
 80089d4:	e7f9      	b.n	80089ca <UTIL_TIMER_Start+0x76>
 80089d6:	bf00      	nop
 80089d8:	0800d5f0 	.word	0x0800d5f0
 80089dc:	200009b0 	.word	0x200009b0

080089e0 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 80089e0:	b198      	cbz	r0, 8008a0a <UTIL_TIMER_SetPeriod+0x2a>
{
 80089e2:	b510      	push	{r4, lr}
 80089e4:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 80089e6:	4b0a      	ldr	r3, [pc, #40]	; (8008a10 <UTIL_TIMER_SetPeriod+0x30>)
 80089e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089ea:	4608      	mov	r0, r1
 80089ec:	4798      	blx	r3
 80089ee:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 80089f0:	4620      	mov	r0, r4
 80089f2:	f7ff ff2f 	bl	8008854 <TimerExists>
 80089f6:	b908      	cbnz	r0, 80089fc <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 80089f8:	2000      	movs	r0, #0
}
 80089fa:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 80089fc:	4620      	mov	r0, r4
 80089fe:	f7ff ff4f 	bl	80088a0 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8008a02:	4620      	mov	r0, r4
 8008a04:	f7ff ffa6 	bl	8008954 <UTIL_TIMER_Start>
 8008a08:	e7f7      	b.n	80089fa <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8008a0a:	2001      	movs	r0, #1
}
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	0800d5f0 	.word	0x0800d5f0

08008a14 <UTIL_TIMER_IRQ_Handler>:
{
 8008a14:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a16:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8008a1a:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8008a1c:	4c1e      	ldr	r4, [pc, #120]	; (8008a98 <UTIL_TIMER_IRQ_Handler+0x84>)
 8008a1e:	6963      	ldr	r3, [r4, #20]
 8008a20:	4798      	blx	r3
 8008a22:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8008a24:	6923      	ldr	r3, [r4, #16]
 8008a26:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8008a28:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8008a2a:	4b1c      	ldr	r3, [pc, #112]	; (8008a9c <UTIL_TIMER_IRQ_Handler+0x88>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	b923      	cbnz	r3, 8008a3a <UTIL_TIMER_IRQ_Handler+0x26>
 8008a30:	e018      	b.n	8008a64 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8008a32:	2200      	movs	r2, #0
 8008a34:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8008a36:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8008a38:	b1a3      	cbz	r3, 8008a64 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	42a2      	cmp	r2, r4
 8008a3e:	d9f8      	bls.n	8008a32 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8008a40:	1a31      	subs	r1, r6, r0
 8008a42:	440a      	add	r2, r1
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	e7f6      	b.n	8008a36 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8008a48:	4b14      	ldr	r3, [pc, #80]	; (8008a9c <UTIL_TIMER_IRQ_Handler+0x88>)
 8008a4a:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8008a4c:	6962      	ldr	r2, [r4, #20]
 8008a4e:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8008a50:	2300      	movs	r3, #0
 8008a52:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8008a54:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8008a56:	68e3      	ldr	r3, [r4, #12]
 8008a58:	6920      	ldr	r0, [r4, #16]
 8008a5a:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8008a5c:	8963      	ldrh	r3, [r4, #10]
 8008a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a62:	d012      	beq.n	8008a8a <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8008a64:	4b0d      	ldr	r3, [pc, #52]	; (8008a9c <UTIL_TIMER_IRQ_Handler+0x88>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	b13b      	cbz	r3, 8008a7a <UTIL_TIMER_IRQ_Handler+0x66>
 8008a6a:	681c      	ldr	r4, [r3, #0]
 8008a6c:	2c00      	cmp	r4, #0
 8008a6e:	d0eb      	beq.n	8008a48 <UTIL_TIMER_IRQ_Handler+0x34>
 8008a70:	4b09      	ldr	r3, [pc, #36]	; (8008a98 <UTIL_TIMER_IRQ_Handler+0x84>)
 8008a72:	699b      	ldr	r3, [r3, #24]
 8008a74:	4798      	blx	r3
 8008a76:	4284      	cmp	r4, r0
 8008a78:	d3e6      	bcc.n	8008a48 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8008a7a:	4b08      	ldr	r3, [pc, #32]	; (8008a9c <UTIL_TIMER_IRQ_Handler+0x88>)
 8008a7c:	6818      	ldr	r0, [r3, #0]
 8008a7e:	b108      	cbz	r0, 8008a84 <UTIL_TIMER_IRQ_Handler+0x70>
 8008a80:	7a03      	ldrb	r3, [r0, #8]
 8008a82:	b133      	cbz	r3, 8008a92 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008a84:	f385 8810 	msr	PRIMASK, r5
}
 8008a88:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8008a8a:	4620      	mov	r0, r4
 8008a8c:	f7ff ff62 	bl	8008954 <UTIL_TIMER_Start>
 8008a90:	e7e8      	b.n	8008a64 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8008a92:	f7ff feed 	bl	8008870 <TimerSetTimeout>
 8008a96:	e7f5      	b.n	8008a84 <UTIL_TIMER_IRQ_Handler+0x70>
 8008a98:	0800d5f0 	.word	0x0800d5f0
 8008a9c:	200009b0 	.word	0x200009b0

08008aa0 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8008aa0:	4601      	mov	r1, r0
  int i = 0;
 8008aa2:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8008aa4:	e008      	b.n	8008ab8 <ee_skip_atoi+0x18>
 8008aa6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8008aaa:	1c53      	adds	r3, r2, #1
 8008aac:	600b      	str	r3, [r1, #0]
 8008aae:	7813      	ldrb	r3, [r2, #0]
 8008ab0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8008ab4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
 8008ab8:	680a      	ldr	r2, [r1, #0]
 8008aba:	7813      	ldrb	r3, [r2, #0]
 8008abc:	3b30      	subs	r3, #48	; 0x30
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b09      	cmp	r3, #9
 8008ac2:	d9f0      	bls.n	8008aa6 <ee_skip_atoi+0x6>
  return i;
}
 8008ac4:	4770      	bx	lr
	...

08008ac8 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8008ac8:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8008acc:	b093      	sub	sp, #76	; 0x4c
 8008ace:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8008ad0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8008ad2:	f016 0f40 	tst.w	r6, #64	; 0x40
 8008ad6:	d110      	bne.n	8008afa <ee_number+0x32>
  char *dig = lower_digits;
 8008ad8:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8008bd4 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8008adc:	1e9f      	subs	r7, r3, #2
 8008ade:	2f22      	cmp	r7, #34	; 0x22
 8008ae0:	d875      	bhi.n	8008bce <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8008ae2:	f016 0401 	ands.w	r4, r6, #1
 8008ae6:	d00b      	beq.n	8008b00 <ee_number+0x38>
 8008ae8:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8008aec:	f016 0f02 	tst.w	r6, #2
 8008af0:	d00f      	beq.n	8008b12 <ee_number+0x4a>
  {
    if (num < 0)
 8008af2:	2a00      	cmp	r2, #0
 8008af4:	db07      	blt.n	8008b06 <ee_number+0x3e>
  sign = 0;
 8008af6:	2700      	movs	r7, #0
 8008af8:	e00c      	b.n	8008b14 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8008afa:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8008bd8 <ee_number+0x110>
 8008afe:	e7ed      	b.n	8008adc <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8008b00:	f04f 0e20 	mov.w	lr, #32
 8008b04:	e7f2      	b.n	8008aec <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8008b06:	4252      	negs	r2, r2
      size--;
 8008b08:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8008b0a:	3e01      	subs	r6, #1
 8008b0c:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8008b0e:	272d      	movs	r7, #45	; 0x2d
 8008b10:	e000      	b.n	8008b14 <ee_number+0x4c>
  sign = 0;
 8008b12:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8008b14:	bb5a      	cbnz	r2, 8008b6e <ee_number+0xa6>
    tmp[i++] = '0';
 8008b16:	2330      	movs	r3, #48	; 0x30
 8008b18:	f88d 3004 	strb.w	r3, [sp, #4]
 8008b1c:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8008b20:	45ac      	cmp	ip, r5
 8008b22:	dd00      	ble.n	8008b26 <ee_number+0x5e>
 8008b24:	4665      	mov	r5, ip
  size -= precision;
 8008b26:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8008b28:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8008b2a:	b31c      	cbz	r4, 8008b74 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8008b2c:	b11f      	cbz	r7, 8008b36 <ee_number+0x6e>
 8008b2e:	f800 7b01 	strb.w	r7, [r0], #1
 8008b32:	3901      	subs	r1, #1
 8008b34:	d007      	beq.n	8008b46 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b3c:	dd24      	ble.n	8008b88 <ee_number+0xc0>
 8008b3e:	f800 eb01 	strb.w	lr, [r0], #1
 8008b42:	3901      	subs	r1, #1
 8008b44:	d1f7      	bne.n	8008b36 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8008b46:	b013      	add	sp, #76	; 0x4c
 8008b48:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8008b4c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008b50:	fb03 2216 	mls	r2, r3, r6, r2
 8008b54:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8008b58:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8008b5c:	446a      	add	r2, sp
 8008b5e:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8008b62:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8008b64:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8008b68:	2a00      	cmp	r2, #0
 8008b6a:	d1ef      	bne.n	8008b4c <ee_number+0x84>
 8008b6c:	e7d8      	b.n	8008b20 <ee_number+0x58>
  i = 0;
 8008b6e:	f04f 0c00 	mov.w	ip, #0
 8008b72:	e7f9      	b.n	8008b68 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	f103 33ff 	add.w	r3, r3, #4294967295
 8008b7a:	ddd7      	ble.n	8008b2c <ee_number+0x64>
 8008b7c:	2220      	movs	r2, #32
 8008b7e:	f800 2b01 	strb.w	r2, [r0], #1
 8008b82:	3901      	subs	r1, #1
 8008b84:	d1f6      	bne.n	8008b74 <ee_number+0xac>
 8008b86:	e7de      	b.n	8008b46 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8008b88:	4565      	cmp	r5, ip
 8008b8a:	f105 35ff 	add.w	r5, r5, #4294967295
 8008b8e:	dd05      	ble.n	8008b9c <ee_number+0xd4>
 8008b90:	2230      	movs	r2, #48	; 0x30
 8008b92:	f800 2b01 	strb.w	r2, [r0], #1
 8008b96:	3901      	subs	r1, #1
 8008b98:	d1f6      	bne.n	8008b88 <ee_number+0xc0>
 8008b9a:	e7d4      	b.n	8008b46 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8008b9c:	4662      	mov	r2, ip
 8008b9e:	2a00      	cmp	r2, #0
 8008ba0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008ba4:	dd09      	ble.n	8008bba <ee_number+0xf2>
 8008ba6:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8008baa:	446a      	add	r2, sp
 8008bac:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8008bb0:	f800 2b01 	strb.w	r2, [r0], #1
 8008bb4:	3901      	subs	r1, #1
 8008bb6:	d1f1      	bne.n	8008b9c <ee_number+0xd4>
 8008bb8:	e7c5      	b.n	8008b46 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bc0:	ddc1      	ble.n	8008b46 <ee_number+0x7e>
 8008bc2:	2220      	movs	r2, #32
 8008bc4:	f800 2b01 	strb.w	r2, [r0], #1
 8008bc8:	3901      	subs	r1, #1
 8008bca:	d1f6      	bne.n	8008bba <ee_number+0xf2>
 8008bcc:	e7bb      	b.n	8008b46 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8008bce:	2000      	movs	r0, #0
 8008bd0:	e7b9      	b.n	8008b46 <ee_number+0x7e>
 8008bd2:	bf00      	nop
 8008bd4:	0800de2c 	.word	0x0800de2c
 8008bd8:	0800de54 	.word	0x0800de54

08008bdc <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8008bdc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008be0:	b087      	sub	sp, #28
 8008be2:	9205      	str	r2, [sp, #20]
 8008be4:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8008be6:	1e0f      	subs	r7, r1, #0
 8008be8:	f340 80b8 	ble.w	8008d5c <tiny_vsnprintf_like+0x180>
 8008bec:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8008bee:	4604      	mov	r4, r0
 8008bf0:	e004      	b.n	8008bfc <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8008bf2:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8008bf6:	9b05      	ldr	r3, [sp, #20]
 8008bf8:	3301      	adds	r3, #1
 8008bfa:	9305      	str	r3, [sp, #20]
 8008bfc:	9905      	ldr	r1, [sp, #20]
 8008bfe:	780a      	ldrb	r2, [r1, #0]
 8008c00:	b922      	cbnz	r2, 8008c0c <tiny_vsnprintf_like+0x30>
 8008c02:	1ba3      	subs	r3, r4, r6
 8008c04:	1e78      	subs	r0, r7, #1
 8008c06:	4283      	cmp	r3, r0
 8008c08:	f2c0 80a2 	blt.w	8008d50 <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8008c0c:	1ba3      	subs	r3, r4, r6
 8008c0e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008c12:	4543      	cmp	r3, r8
 8008c14:	f280 809c 	bge.w	8008d50 <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8008c18:	2a25      	cmp	r2, #37	; 0x25
 8008c1a:	d1ea      	bne.n	8008bf2 <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8008c1c:	1c4b      	adds	r3, r1, #1
 8008c1e:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8008c20:	784b      	ldrb	r3, [r1, #1]
 8008c22:	2b30      	cmp	r3, #48	; 0x30
 8008c24:	d020      	beq.n	8008c68 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8008c26:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8008c2a:	3b30      	subs	r3, #48	; 0x30
 8008c2c:	b2db      	uxtb	r3, r3
 8008c2e:	2b09      	cmp	r3, #9
 8008c30:	d91d      	bls.n	8008c6e <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8008c32:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8008c36:	9b05      	ldr	r3, [sp, #20]
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d867      	bhi.n	8008d12 <tiny_vsnprintf_like+0x136>
 8008c42:	e8df f003 	tbb	[pc, r3]
 8008c46:	664a      	.short	0x664a
 8008c48:	66666666 	.word	0x66666666
 8008c4c:	66666666 	.word	0x66666666
 8008c50:	66621e66 	.word	0x66621e66
 8008c54:	62666666 	.word	0x62666666
 8008c58:	66666666 	.word	0x66666666
 8008c5c:	66666666 	.word	0x66666666
 8008c60:	19662866 	.word	0x19662866
 8008c64:	6666      	.short	0x6666
 8008c66:	7c          	.byte	0x7c
 8008c67:	00          	.byte	0x00
      flags |= ZEROPAD;
 8008c68:	f04f 0901 	mov.w	r9, #1
 8008c6c:	e7dd      	b.n	8008c2a <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8008c6e:	a805      	add	r0, sp, #20
 8008c70:	f7ff ff16 	bl	8008aa0 <ee_skip_atoi>
 8008c74:	4605      	mov	r5, r0
 8008c76:	e7de      	b.n	8008c36 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8008c78:	230a      	movs	r3, #10
 8008c7a:	e031      	b.n	8008ce0 <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8008c7c:	2320      	movs	r3, #32
 8008c7e:	f804 3b01 	strb.w	r3, [r4], #1
 8008c82:	3d01      	subs	r5, #1
 8008c84:	2d00      	cmp	r5, #0
 8008c86:	dcf9      	bgt.n	8008c7c <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8008c88:	9b04      	ldr	r3, [sp, #16]
 8008c8a:	1d1a      	adds	r2, r3, #4
 8008c8c:	9204      	str	r2, [sp, #16]
 8008c8e:	781b      	ldrb	r3, [r3, #0]
 8008c90:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8008c94:	e7af      	b.n	8008bf6 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8008c96:	9b04      	ldr	r3, [sp, #16]
 8008c98:	1d1a      	adds	r2, r3, #4
 8008c9a:	9204      	str	r2, [sp, #16]
 8008c9c:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8008ca0:	f1b8 0f00 	cmp.w	r8, #0
 8008ca4:	d003      	beq.n	8008cae <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8008ca6:	4640      	mov	r0, r8
 8008ca8:	f7f7 faba 	bl	8000220 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8008cac:	e006      	b.n	8008cbc <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8008cae:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8008d60 <tiny_vsnprintf_like+0x184>
 8008cb2:	e7f8      	b.n	8008ca6 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f804 2b01 	strb.w	r2, [r4], #1
 8008cba:	461d      	mov	r5, r3
 8008cbc:	1e6b      	subs	r3, r5, #1
 8008cbe:	4285      	cmp	r5, r0
 8008cc0:	dcf8      	bgt.n	8008cb4 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	e006      	b.n	8008cd4 <tiny_vsnprintf_like+0xf8>
 8008cc6:	4643      	mov	r3, r8
 8008cc8:	f813 1b01 	ldrb.w	r1, [r3], #1
 8008ccc:	f804 1b01 	strb.w	r1, [r4], #1
 8008cd0:	3201      	adds	r2, #1
 8008cd2:	4698      	mov	r8, r3
 8008cd4:	4282      	cmp	r2, r0
 8008cd6:	dbf6      	blt.n	8008cc6 <tiny_vsnprintf_like+0xea>
 8008cd8:	e78d      	b.n	8008bf6 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8008cda:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8008cde:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8008ce0:	f019 0f02 	tst.w	r9, #2
 8008ce4:	d02f      	beq.n	8008d46 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8008ce6:	9a04      	ldr	r2, [sp, #16]
 8008ce8:	1d11      	adds	r1, r2, #4
 8008cea:	9104      	str	r1, [sp, #16]
 8008cec:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8008cee:	1ba1      	subs	r1, r4, r6
 8008cf0:	f8cd 9008 	str.w	r9, [sp, #8]
 8008cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cf8:	9001      	str	r0, [sp, #4]
 8008cfa:	9500      	str	r5, [sp, #0]
 8008cfc:	eba8 0101 	sub.w	r1, r8, r1
 8008d00:	4620      	mov	r0, r4
 8008d02:	f7ff fee1 	bl	8008ac8 <ee_number>
 8008d06:	4604      	mov	r4, r0
 8008d08:	e775      	b.n	8008bf6 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8008d0a:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8008d0e:	230a      	movs	r3, #10
 8008d10:	e7e6      	b.n	8008ce0 <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8008d12:	2a25      	cmp	r2, #37	; 0x25
 8008d14:	d002      	beq.n	8008d1c <tiny_vsnprintf_like+0x140>
 8008d16:	2325      	movs	r3, #37	; 0x25
 8008d18:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8008d1c:	1ba3      	subs	r3, r4, r6
 8008d1e:	4598      	cmp	r8, r3
 8008d20:	dd0f      	ble.n	8008d42 <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8008d22:	9b05      	ldr	r3, [sp, #20]
 8008d24:	781a      	ldrb	r2, [r3, #0]
 8008d26:	b13a      	cbz	r2, 8008d38 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8008d28:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8008d2c:	1ba3      	subs	r3, r4, r6
 8008d2e:	4598      	cmp	r8, r3
 8008d30:	f73f af61 	bgt.w	8008bf6 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8008d34:	230a      	movs	r3, #10
 8008d36:	e7d3      	b.n	8008ce0 <tiny_vsnprintf_like+0x104>
          --fmt;
 8008d38:	3b01      	subs	r3, #1
 8008d3a:	9305      	str	r3, [sp, #20]
 8008d3c:	e7f6      	b.n	8008d2c <tiny_vsnprintf_like+0x150>
        base = 16;
 8008d3e:	2310      	movs	r3, #16
 8008d40:	e7ce      	b.n	8008ce0 <tiny_vsnprintf_like+0x104>
    base = 10;
 8008d42:	230a      	movs	r3, #10
 8008d44:	e7cc      	b.n	8008ce0 <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8008d46:	9a04      	ldr	r2, [sp, #16]
 8008d48:	1d11      	adds	r1, r2, #4
 8008d4a:	9104      	str	r1, [sp, #16]
 8008d4c:	6812      	ldr	r2, [r2, #0]
 8008d4e:	e7ce      	b.n	8008cee <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8008d50:	2300      	movs	r3, #0
 8008d52:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8008d54:	1ba0      	subs	r0, r4, r6
}
 8008d56:	b007      	add	sp, #28
 8008d58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8008d5c:	2000      	movs	r0, #0
 8008d5e:	e7fa      	b.n	8008d56 <tiny_vsnprintf_like+0x17a>
 8008d60:	0800de7c 	.word	0x0800de7c

08008d64 <srand>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	4b10      	ldr	r3, [pc, #64]	; (8008da8 <srand+0x44>)
 8008d68:	681d      	ldr	r5, [r3, #0]
 8008d6a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008d6c:	4604      	mov	r4, r0
 8008d6e:	b9b3      	cbnz	r3, 8008d9e <srand+0x3a>
 8008d70:	2018      	movs	r0, #24
 8008d72:	f001 ff4f 	bl	800ac14 <malloc>
 8008d76:	4602      	mov	r2, r0
 8008d78:	6328      	str	r0, [r5, #48]	; 0x30
 8008d7a:	b920      	cbnz	r0, 8008d86 <srand+0x22>
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <srand+0x48>)
 8008d7e:	480c      	ldr	r0, [pc, #48]	; (8008db0 <srand+0x4c>)
 8008d80:	2146      	movs	r1, #70	; 0x46
 8008d82:	f001 f879 	bl	8009e78 <__assert_func>
 8008d86:	490b      	ldr	r1, [pc, #44]	; (8008db4 <srand+0x50>)
 8008d88:	4b0b      	ldr	r3, [pc, #44]	; (8008db8 <srand+0x54>)
 8008d8a:	e9c0 1300 	strd	r1, r3, [r0]
 8008d8e:	4b0b      	ldr	r3, [pc, #44]	; (8008dbc <srand+0x58>)
 8008d90:	6083      	str	r3, [r0, #8]
 8008d92:	230b      	movs	r3, #11
 8008d94:	8183      	strh	r3, [r0, #12]
 8008d96:	2100      	movs	r1, #0
 8008d98:	2001      	movs	r0, #1
 8008d9a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008d9e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008da0:	2200      	movs	r2, #0
 8008da2:	611c      	str	r4, [r3, #16]
 8008da4:	615a      	str	r2, [r3, #20]
 8008da6:	bd38      	pop	{r3, r4, r5, pc}
 8008da8:	20000070 	.word	0x20000070
 8008dac:	0800de83 	.word	0x0800de83
 8008db0:	0800de9a 	.word	0x0800de9a
 8008db4:	abcd330e 	.word	0xabcd330e
 8008db8:	e66d1234 	.word	0xe66d1234
 8008dbc:	0005deec 	.word	0x0005deec

08008dc0 <rand>:
 8008dc0:	4b16      	ldr	r3, [pc, #88]	; (8008e1c <rand+0x5c>)
 8008dc2:	b510      	push	{r4, lr}
 8008dc4:	681c      	ldr	r4, [r3, #0]
 8008dc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008dc8:	b9b3      	cbnz	r3, 8008df8 <rand+0x38>
 8008dca:	2018      	movs	r0, #24
 8008dcc:	f001 ff22 	bl	800ac14 <malloc>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	6320      	str	r0, [r4, #48]	; 0x30
 8008dd4:	b920      	cbnz	r0, 8008de0 <rand+0x20>
 8008dd6:	4b12      	ldr	r3, [pc, #72]	; (8008e20 <rand+0x60>)
 8008dd8:	4812      	ldr	r0, [pc, #72]	; (8008e24 <rand+0x64>)
 8008dda:	2152      	movs	r1, #82	; 0x52
 8008ddc:	f001 f84c 	bl	8009e78 <__assert_func>
 8008de0:	4911      	ldr	r1, [pc, #68]	; (8008e28 <rand+0x68>)
 8008de2:	4b12      	ldr	r3, [pc, #72]	; (8008e2c <rand+0x6c>)
 8008de4:	e9c0 1300 	strd	r1, r3, [r0]
 8008de8:	4b11      	ldr	r3, [pc, #68]	; (8008e30 <rand+0x70>)
 8008dea:	6083      	str	r3, [r0, #8]
 8008dec:	230b      	movs	r3, #11
 8008dee:	8183      	strh	r3, [r0, #12]
 8008df0:	2100      	movs	r1, #0
 8008df2:	2001      	movs	r0, #1
 8008df4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008df8:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008dfa:	480e      	ldr	r0, [pc, #56]	; (8008e34 <rand+0x74>)
 8008dfc:	690b      	ldr	r3, [r1, #16]
 8008dfe:	694c      	ldr	r4, [r1, #20]
 8008e00:	4a0d      	ldr	r2, [pc, #52]	; (8008e38 <rand+0x78>)
 8008e02:	4358      	muls	r0, r3
 8008e04:	fb02 0004 	mla	r0, r2, r4, r0
 8008e08:	fba3 3202 	umull	r3, r2, r3, r2
 8008e0c:	3301      	adds	r3, #1
 8008e0e:	eb40 0002 	adc.w	r0, r0, r2
 8008e12:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8008e16:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008e1a:	bd10      	pop	{r4, pc}
 8008e1c:	20000070 	.word	0x20000070
 8008e20:	0800de83 	.word	0x0800de83
 8008e24:	0800de9a 	.word	0x0800de9a
 8008e28:	abcd330e 	.word	0xabcd330e
 8008e2c:	e66d1234 	.word	0xe66d1234
 8008e30:	0005deec 	.word	0x0005deec
 8008e34:	5851f42d 	.word	0x5851f42d
 8008e38:	4c957f2d 	.word	0x4c957f2d

08008e3c <__cvt>:
 8008e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e40:	b088      	sub	sp, #32
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	461f      	mov	r7, r3
 8008e46:	4614      	mov	r4, r2
 8008e48:	bfb8      	it	lt
 8008e4a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8008e4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e50:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8008e52:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8008e56:	bfb6      	itet	lt
 8008e58:	461f      	movlt	r7, r3
 8008e5a:	2300      	movge	r3, #0
 8008e5c:	232d      	movlt	r3, #45	; 0x2d
 8008e5e:	7013      	strb	r3, [r2, #0]
 8008e60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008e62:	f023 0820 	bic.w	r8, r3, #32
 8008e66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008e6a:	d005      	beq.n	8008e78 <__cvt+0x3c>
 8008e6c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008e70:	d100      	bne.n	8008e74 <__cvt+0x38>
 8008e72:	3501      	adds	r5, #1
 8008e74:	2302      	movs	r3, #2
 8008e76:	e000      	b.n	8008e7a <__cvt+0x3e>
 8008e78:	2303      	movs	r3, #3
 8008e7a:	aa07      	add	r2, sp, #28
 8008e7c:	9204      	str	r2, [sp, #16]
 8008e7e:	aa06      	add	r2, sp, #24
 8008e80:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008e84:	e9cd 3500 	strd	r3, r5, [sp]
 8008e88:	4622      	mov	r2, r4
 8008e8a:	463b      	mov	r3, r7
 8008e8c:	f001 f898 	bl	8009fc0 <_dtoa_r>
 8008e90:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008e94:	4606      	mov	r6, r0
 8008e96:	d102      	bne.n	8008e9e <__cvt+0x62>
 8008e98:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e9a:	07db      	lsls	r3, r3, #31
 8008e9c:	d522      	bpl.n	8008ee4 <__cvt+0xa8>
 8008e9e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008ea2:	eb06 0905 	add.w	r9, r6, r5
 8008ea6:	d110      	bne.n	8008eca <__cvt+0x8e>
 8008ea8:	7833      	ldrb	r3, [r6, #0]
 8008eaa:	2b30      	cmp	r3, #48	; 0x30
 8008eac:	d10a      	bne.n	8008ec4 <__cvt+0x88>
 8008eae:	2200      	movs	r2, #0
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	4620      	mov	r0, r4
 8008eb4:	4639      	mov	r1, r7
 8008eb6:	f7f7 fddf 	bl	8000a78 <__aeabi_dcmpeq>
 8008eba:	b918      	cbnz	r0, 8008ec4 <__cvt+0x88>
 8008ebc:	f1c5 0501 	rsb	r5, r5, #1
 8008ec0:	f8ca 5000 	str.w	r5, [sl]
 8008ec4:	f8da 3000 	ldr.w	r3, [sl]
 8008ec8:	4499      	add	r9, r3
 8008eca:	2200      	movs	r2, #0
 8008ecc:	2300      	movs	r3, #0
 8008ece:	4620      	mov	r0, r4
 8008ed0:	4639      	mov	r1, r7
 8008ed2:	f7f7 fdd1 	bl	8000a78 <__aeabi_dcmpeq>
 8008ed6:	b108      	cbz	r0, 8008edc <__cvt+0xa0>
 8008ed8:	f8cd 901c 	str.w	r9, [sp, #28]
 8008edc:	2230      	movs	r2, #48	; 0x30
 8008ede:	9b07      	ldr	r3, [sp, #28]
 8008ee0:	454b      	cmp	r3, r9
 8008ee2:	d307      	bcc.n	8008ef4 <__cvt+0xb8>
 8008ee4:	9b07      	ldr	r3, [sp, #28]
 8008ee6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008ee8:	1b9b      	subs	r3, r3, r6
 8008eea:	4630      	mov	r0, r6
 8008eec:	6013      	str	r3, [r2, #0]
 8008eee:	b008      	add	sp, #32
 8008ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef4:	1c59      	adds	r1, r3, #1
 8008ef6:	9107      	str	r1, [sp, #28]
 8008ef8:	701a      	strb	r2, [r3, #0]
 8008efa:	e7f0      	b.n	8008ede <__cvt+0xa2>

08008efc <__exponent>:
 8008efc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008efe:	4603      	mov	r3, r0
 8008f00:	2900      	cmp	r1, #0
 8008f02:	bfb8      	it	lt
 8008f04:	4249      	neglt	r1, r1
 8008f06:	f803 2b02 	strb.w	r2, [r3], #2
 8008f0a:	bfb4      	ite	lt
 8008f0c:	222d      	movlt	r2, #45	; 0x2d
 8008f0e:	222b      	movge	r2, #43	; 0x2b
 8008f10:	2909      	cmp	r1, #9
 8008f12:	7042      	strb	r2, [r0, #1]
 8008f14:	dd2a      	ble.n	8008f6c <__exponent+0x70>
 8008f16:	f10d 0207 	add.w	r2, sp, #7
 8008f1a:	4617      	mov	r7, r2
 8008f1c:	260a      	movs	r6, #10
 8008f1e:	4694      	mov	ip, r2
 8008f20:	fb91 f5f6 	sdiv	r5, r1, r6
 8008f24:	fb06 1415 	mls	r4, r6, r5, r1
 8008f28:	3430      	adds	r4, #48	; 0x30
 8008f2a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008f2e:	460c      	mov	r4, r1
 8008f30:	2c63      	cmp	r4, #99	; 0x63
 8008f32:	f102 32ff 	add.w	r2, r2, #4294967295
 8008f36:	4629      	mov	r1, r5
 8008f38:	dcf1      	bgt.n	8008f1e <__exponent+0x22>
 8008f3a:	3130      	adds	r1, #48	; 0x30
 8008f3c:	f1ac 0402 	sub.w	r4, ip, #2
 8008f40:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008f44:	1c41      	adds	r1, r0, #1
 8008f46:	4622      	mov	r2, r4
 8008f48:	42ba      	cmp	r2, r7
 8008f4a:	d30a      	bcc.n	8008f62 <__exponent+0x66>
 8008f4c:	f10d 0209 	add.w	r2, sp, #9
 8008f50:	eba2 020c 	sub.w	r2, r2, ip
 8008f54:	42bc      	cmp	r4, r7
 8008f56:	bf88      	it	hi
 8008f58:	2200      	movhi	r2, #0
 8008f5a:	4413      	add	r3, r2
 8008f5c:	1a18      	subs	r0, r3, r0
 8008f5e:	b003      	add	sp, #12
 8008f60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f62:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008f66:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008f6a:	e7ed      	b.n	8008f48 <__exponent+0x4c>
 8008f6c:	2330      	movs	r3, #48	; 0x30
 8008f6e:	3130      	adds	r1, #48	; 0x30
 8008f70:	7083      	strb	r3, [r0, #2]
 8008f72:	70c1      	strb	r1, [r0, #3]
 8008f74:	1d03      	adds	r3, r0, #4
 8008f76:	e7f1      	b.n	8008f5c <__exponent+0x60>

08008f78 <_printf_float>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	b091      	sub	sp, #68	; 0x44
 8008f7e:	460c      	mov	r4, r1
 8008f80:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8008f84:	4616      	mov	r6, r2
 8008f86:	461f      	mov	r7, r3
 8008f88:	4605      	mov	r5, r0
 8008f8a:	f000 feeb 	bl	8009d64 <_localeconv_r>
 8008f8e:	6803      	ldr	r3, [r0, #0]
 8008f90:	9309      	str	r3, [sp, #36]	; 0x24
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7f7 f944 	bl	8000220 <strlen>
 8008f98:	2300      	movs	r3, #0
 8008f9a:	930e      	str	r3, [sp, #56]	; 0x38
 8008f9c:	f8d8 3000 	ldr.w	r3, [r8]
 8008fa0:	900a      	str	r0, [sp, #40]	; 0x28
 8008fa2:	3307      	adds	r3, #7
 8008fa4:	f023 0307 	bic.w	r3, r3, #7
 8008fa8:	f103 0208 	add.w	r2, r3, #8
 8008fac:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008fb0:	f8d4 b000 	ldr.w	fp, [r4]
 8008fb4:	f8c8 2000 	str.w	r2, [r8]
 8008fb8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8008fbc:	4652      	mov	r2, sl
 8008fbe:	4643      	mov	r3, r8
 8008fc0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008fc4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8008fc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008fca:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fcc:	4b9c      	ldr	r3, [pc, #624]	; (8009240 <_printf_float+0x2c8>)
 8008fce:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd2:	4650      	mov	r0, sl
 8008fd4:	f7f7 fd82 	bl	8000adc <__aeabi_dcmpun>
 8008fd8:	bb70      	cbnz	r0, 8009038 <_printf_float+0xc0>
 8008fda:	4b99      	ldr	r3, [pc, #612]	; (8009240 <_printf_float+0x2c8>)
 8008fdc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008fde:	f04f 32ff 	mov.w	r2, #4294967295
 8008fe2:	4650      	mov	r0, sl
 8008fe4:	f7f7 fd5c 	bl	8000aa0 <__aeabi_dcmple>
 8008fe8:	bb30      	cbnz	r0, 8009038 <_printf_float+0xc0>
 8008fea:	2200      	movs	r2, #0
 8008fec:	2300      	movs	r3, #0
 8008fee:	4650      	mov	r0, sl
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	f7f7 fd4b 	bl	8000a8c <__aeabi_dcmplt>
 8008ff6:	b110      	cbz	r0, 8008ffe <_printf_float+0x86>
 8008ff8:	232d      	movs	r3, #45	; 0x2d
 8008ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ffe:	4a91      	ldr	r2, [pc, #580]	; (8009244 <_printf_float+0x2cc>)
 8009000:	4b91      	ldr	r3, [pc, #580]	; (8009248 <_printf_float+0x2d0>)
 8009002:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009006:	bf94      	ite	ls
 8009008:	4690      	movls	r8, r2
 800900a:	4698      	movhi	r8, r3
 800900c:	2303      	movs	r3, #3
 800900e:	6123      	str	r3, [r4, #16]
 8009010:	f02b 0304 	bic.w	r3, fp, #4
 8009014:	6023      	str	r3, [r4, #0]
 8009016:	f04f 0a00 	mov.w	sl, #0
 800901a:	9700      	str	r7, [sp, #0]
 800901c:	4633      	mov	r3, r6
 800901e:	aa0f      	add	r2, sp, #60	; 0x3c
 8009020:	4621      	mov	r1, r4
 8009022:	4628      	mov	r0, r5
 8009024:	f000 f9d4 	bl	80093d0 <_printf_common>
 8009028:	3001      	adds	r0, #1
 800902a:	f040 808f 	bne.w	800914c <_printf_float+0x1d4>
 800902e:	f04f 30ff 	mov.w	r0, #4294967295
 8009032:	b011      	add	sp, #68	; 0x44
 8009034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009038:	4652      	mov	r2, sl
 800903a:	4643      	mov	r3, r8
 800903c:	4650      	mov	r0, sl
 800903e:	4641      	mov	r1, r8
 8009040:	f7f7 fd4c 	bl	8000adc <__aeabi_dcmpun>
 8009044:	b140      	cbz	r0, 8009058 <_printf_float+0xe0>
 8009046:	f1b8 0f00 	cmp.w	r8, #0
 800904a:	bfbc      	itt	lt
 800904c:	232d      	movlt	r3, #45	; 0x2d
 800904e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009052:	4a7e      	ldr	r2, [pc, #504]	; (800924c <_printf_float+0x2d4>)
 8009054:	4b7e      	ldr	r3, [pc, #504]	; (8009250 <_printf_float+0x2d8>)
 8009056:	e7d4      	b.n	8009002 <_printf_float+0x8a>
 8009058:	6863      	ldr	r3, [r4, #4]
 800905a:	1c5a      	adds	r2, r3, #1
 800905c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009060:	d142      	bne.n	80090e8 <_printf_float+0x170>
 8009062:	2306      	movs	r3, #6
 8009064:	6063      	str	r3, [r4, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	9206      	str	r2, [sp, #24]
 800906a:	aa0e      	add	r2, sp, #56	; 0x38
 800906c:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8009070:	aa0d      	add	r2, sp, #52	; 0x34
 8009072:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8009076:	9203      	str	r2, [sp, #12]
 8009078:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800907c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009080:	6023      	str	r3, [r4, #0]
 8009082:	6863      	ldr	r3, [r4, #4]
 8009084:	9300      	str	r3, [sp, #0]
 8009086:	4652      	mov	r2, sl
 8009088:	4643      	mov	r3, r8
 800908a:	4628      	mov	r0, r5
 800908c:	910b      	str	r1, [sp, #44]	; 0x2c
 800908e:	f7ff fed5 	bl	8008e3c <__cvt>
 8009092:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009094:	2947      	cmp	r1, #71	; 0x47
 8009096:	4680      	mov	r8, r0
 8009098:	990d      	ldr	r1, [sp, #52]	; 0x34
 800909a:	d108      	bne.n	80090ae <_printf_float+0x136>
 800909c:	1cc8      	adds	r0, r1, #3
 800909e:	db02      	blt.n	80090a6 <_printf_float+0x12e>
 80090a0:	6863      	ldr	r3, [r4, #4]
 80090a2:	4299      	cmp	r1, r3
 80090a4:	dd40      	ble.n	8009128 <_printf_float+0x1b0>
 80090a6:	f1a9 0902 	sub.w	r9, r9, #2
 80090aa:	fa5f f989 	uxtb.w	r9, r9
 80090ae:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80090b2:	d81f      	bhi.n	80090f4 <_printf_float+0x17c>
 80090b4:	3901      	subs	r1, #1
 80090b6:	464a      	mov	r2, r9
 80090b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80090bc:	910d      	str	r1, [sp, #52]	; 0x34
 80090be:	f7ff ff1d 	bl	8008efc <__exponent>
 80090c2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090c4:	1813      	adds	r3, r2, r0
 80090c6:	2a01      	cmp	r2, #1
 80090c8:	4682      	mov	sl, r0
 80090ca:	6123      	str	r3, [r4, #16]
 80090cc:	dc02      	bgt.n	80090d4 <_printf_float+0x15c>
 80090ce:	6822      	ldr	r2, [r4, #0]
 80090d0:	07d2      	lsls	r2, r2, #31
 80090d2:	d501      	bpl.n	80090d8 <_printf_float+0x160>
 80090d4:	3301      	adds	r3, #1
 80090d6:	6123      	str	r3, [r4, #16]
 80090d8:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d09c      	beq.n	800901a <_printf_float+0xa2>
 80090e0:	232d      	movs	r3, #45	; 0x2d
 80090e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090e6:	e798      	b.n	800901a <_printf_float+0xa2>
 80090e8:	2947      	cmp	r1, #71	; 0x47
 80090ea:	d1bc      	bne.n	8009066 <_printf_float+0xee>
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d1ba      	bne.n	8009066 <_printf_float+0xee>
 80090f0:	2301      	movs	r3, #1
 80090f2:	e7b7      	b.n	8009064 <_printf_float+0xec>
 80090f4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80090f8:	d118      	bne.n	800912c <_printf_float+0x1b4>
 80090fa:	2900      	cmp	r1, #0
 80090fc:	6863      	ldr	r3, [r4, #4]
 80090fe:	dd0b      	ble.n	8009118 <_printf_float+0x1a0>
 8009100:	6121      	str	r1, [r4, #16]
 8009102:	b913      	cbnz	r3, 800910a <_printf_float+0x192>
 8009104:	6822      	ldr	r2, [r4, #0]
 8009106:	07d0      	lsls	r0, r2, #31
 8009108:	d502      	bpl.n	8009110 <_printf_float+0x198>
 800910a:	3301      	adds	r3, #1
 800910c:	440b      	add	r3, r1
 800910e:	6123      	str	r3, [r4, #16]
 8009110:	65a1      	str	r1, [r4, #88]	; 0x58
 8009112:	f04f 0a00 	mov.w	sl, #0
 8009116:	e7df      	b.n	80090d8 <_printf_float+0x160>
 8009118:	b913      	cbnz	r3, 8009120 <_printf_float+0x1a8>
 800911a:	6822      	ldr	r2, [r4, #0]
 800911c:	07d2      	lsls	r2, r2, #31
 800911e:	d501      	bpl.n	8009124 <_printf_float+0x1ac>
 8009120:	3302      	adds	r3, #2
 8009122:	e7f4      	b.n	800910e <_printf_float+0x196>
 8009124:	2301      	movs	r3, #1
 8009126:	e7f2      	b.n	800910e <_printf_float+0x196>
 8009128:	f04f 0967 	mov.w	r9, #103	; 0x67
 800912c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800912e:	4299      	cmp	r1, r3
 8009130:	db05      	blt.n	800913e <_printf_float+0x1c6>
 8009132:	6823      	ldr	r3, [r4, #0]
 8009134:	6121      	str	r1, [r4, #16]
 8009136:	07d8      	lsls	r0, r3, #31
 8009138:	d5ea      	bpl.n	8009110 <_printf_float+0x198>
 800913a:	1c4b      	adds	r3, r1, #1
 800913c:	e7e7      	b.n	800910e <_printf_float+0x196>
 800913e:	2900      	cmp	r1, #0
 8009140:	bfd4      	ite	le
 8009142:	f1c1 0202 	rsble	r2, r1, #2
 8009146:	2201      	movgt	r2, #1
 8009148:	4413      	add	r3, r2
 800914a:	e7e0      	b.n	800910e <_printf_float+0x196>
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	055a      	lsls	r2, r3, #21
 8009150:	d407      	bmi.n	8009162 <_printf_float+0x1ea>
 8009152:	6923      	ldr	r3, [r4, #16]
 8009154:	4642      	mov	r2, r8
 8009156:	4631      	mov	r1, r6
 8009158:	4628      	mov	r0, r5
 800915a:	47b8      	blx	r7
 800915c:	3001      	adds	r0, #1
 800915e:	d12b      	bne.n	80091b8 <_printf_float+0x240>
 8009160:	e765      	b.n	800902e <_printf_float+0xb6>
 8009162:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009166:	f240 80dc 	bls.w	8009322 <_printf_float+0x3aa>
 800916a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800916e:	2200      	movs	r2, #0
 8009170:	2300      	movs	r3, #0
 8009172:	f7f7 fc81 	bl	8000a78 <__aeabi_dcmpeq>
 8009176:	2800      	cmp	r0, #0
 8009178:	d033      	beq.n	80091e2 <_printf_float+0x26a>
 800917a:	4a36      	ldr	r2, [pc, #216]	; (8009254 <_printf_float+0x2dc>)
 800917c:	2301      	movs	r3, #1
 800917e:	4631      	mov	r1, r6
 8009180:	4628      	mov	r0, r5
 8009182:	47b8      	blx	r7
 8009184:	3001      	adds	r0, #1
 8009186:	f43f af52 	beq.w	800902e <_printf_float+0xb6>
 800918a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800918e:	429a      	cmp	r2, r3
 8009190:	db02      	blt.n	8009198 <_printf_float+0x220>
 8009192:	6823      	ldr	r3, [r4, #0]
 8009194:	07d8      	lsls	r0, r3, #31
 8009196:	d50f      	bpl.n	80091b8 <_printf_float+0x240>
 8009198:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800919c:	4631      	mov	r1, r6
 800919e:	4628      	mov	r0, r5
 80091a0:	47b8      	blx	r7
 80091a2:	3001      	adds	r0, #1
 80091a4:	f43f af43 	beq.w	800902e <_printf_float+0xb6>
 80091a8:	f04f 0800 	mov.w	r8, #0
 80091ac:	f104 091a 	add.w	r9, r4, #26
 80091b0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80091b2:	3b01      	subs	r3, #1
 80091b4:	4543      	cmp	r3, r8
 80091b6:	dc09      	bgt.n	80091cc <_printf_float+0x254>
 80091b8:	6823      	ldr	r3, [r4, #0]
 80091ba:	079b      	lsls	r3, r3, #30
 80091bc:	f100 8103 	bmi.w	80093c6 <_printf_float+0x44e>
 80091c0:	68e0      	ldr	r0, [r4, #12]
 80091c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091c4:	4298      	cmp	r0, r3
 80091c6:	bfb8      	it	lt
 80091c8:	4618      	movlt	r0, r3
 80091ca:	e732      	b.n	8009032 <_printf_float+0xba>
 80091cc:	2301      	movs	r3, #1
 80091ce:	464a      	mov	r2, r9
 80091d0:	4631      	mov	r1, r6
 80091d2:	4628      	mov	r0, r5
 80091d4:	47b8      	blx	r7
 80091d6:	3001      	adds	r0, #1
 80091d8:	f43f af29 	beq.w	800902e <_printf_float+0xb6>
 80091dc:	f108 0801 	add.w	r8, r8, #1
 80091e0:	e7e6      	b.n	80091b0 <_printf_float+0x238>
 80091e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dc37      	bgt.n	8009258 <_printf_float+0x2e0>
 80091e8:	4a1a      	ldr	r2, [pc, #104]	; (8009254 <_printf_float+0x2dc>)
 80091ea:	2301      	movs	r3, #1
 80091ec:	4631      	mov	r1, r6
 80091ee:	4628      	mov	r0, r5
 80091f0:	47b8      	blx	r7
 80091f2:	3001      	adds	r0, #1
 80091f4:	f43f af1b 	beq.w	800902e <_printf_float+0xb6>
 80091f8:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80091fc:	4313      	orrs	r3, r2
 80091fe:	d102      	bne.n	8009206 <_printf_float+0x28e>
 8009200:	6823      	ldr	r3, [r4, #0]
 8009202:	07d9      	lsls	r1, r3, #31
 8009204:	d5d8      	bpl.n	80091b8 <_printf_float+0x240>
 8009206:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800920a:	4631      	mov	r1, r6
 800920c:	4628      	mov	r0, r5
 800920e:	47b8      	blx	r7
 8009210:	3001      	adds	r0, #1
 8009212:	f43f af0c 	beq.w	800902e <_printf_float+0xb6>
 8009216:	f04f 0900 	mov.w	r9, #0
 800921a:	f104 0a1a 	add.w	sl, r4, #26
 800921e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009220:	425b      	negs	r3, r3
 8009222:	454b      	cmp	r3, r9
 8009224:	dc01      	bgt.n	800922a <_printf_float+0x2b2>
 8009226:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009228:	e794      	b.n	8009154 <_printf_float+0x1dc>
 800922a:	2301      	movs	r3, #1
 800922c:	4652      	mov	r2, sl
 800922e:	4631      	mov	r1, r6
 8009230:	4628      	mov	r0, r5
 8009232:	47b8      	blx	r7
 8009234:	3001      	adds	r0, #1
 8009236:	f43f aefa 	beq.w	800902e <_printf_float+0xb6>
 800923a:	f109 0901 	add.w	r9, r9, #1
 800923e:	e7ee      	b.n	800921e <_printf_float+0x2a6>
 8009240:	7fefffff 	.word	0x7fefffff
 8009244:	0800def2 	.word	0x0800def2
 8009248:	0800def6 	.word	0x0800def6
 800924c:	0800defa 	.word	0x0800defa
 8009250:	0800defe 	.word	0x0800defe
 8009254:	0800df02 	.word	0x0800df02
 8009258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800925a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800925c:	429a      	cmp	r2, r3
 800925e:	bfa8      	it	ge
 8009260:	461a      	movge	r2, r3
 8009262:	2a00      	cmp	r2, #0
 8009264:	4691      	mov	r9, r2
 8009266:	dc37      	bgt.n	80092d8 <_printf_float+0x360>
 8009268:	f04f 0b00 	mov.w	fp, #0
 800926c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009270:	f104 021a 	add.w	r2, r4, #26
 8009274:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8009278:	ebaa 0309 	sub.w	r3, sl, r9
 800927c:	455b      	cmp	r3, fp
 800927e:	dc33      	bgt.n	80092e8 <_printf_float+0x370>
 8009280:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009284:	429a      	cmp	r2, r3
 8009286:	db3b      	blt.n	8009300 <_printf_float+0x388>
 8009288:	6823      	ldr	r3, [r4, #0]
 800928a:	07da      	lsls	r2, r3, #31
 800928c:	d438      	bmi.n	8009300 <_printf_float+0x388>
 800928e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8009292:	eba2 0903 	sub.w	r9, r2, r3
 8009296:	eba2 020a 	sub.w	r2, r2, sl
 800929a:	4591      	cmp	r9, r2
 800929c:	bfa8      	it	ge
 800929e:	4691      	movge	r9, r2
 80092a0:	f1b9 0f00 	cmp.w	r9, #0
 80092a4:	dc34      	bgt.n	8009310 <_printf_float+0x398>
 80092a6:	f04f 0800 	mov.w	r8, #0
 80092aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092ae:	f104 0a1a 	add.w	sl, r4, #26
 80092b2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80092b6:	1a9b      	subs	r3, r3, r2
 80092b8:	eba3 0309 	sub.w	r3, r3, r9
 80092bc:	4543      	cmp	r3, r8
 80092be:	f77f af7b 	ble.w	80091b8 <_printf_float+0x240>
 80092c2:	2301      	movs	r3, #1
 80092c4:	4652      	mov	r2, sl
 80092c6:	4631      	mov	r1, r6
 80092c8:	4628      	mov	r0, r5
 80092ca:	47b8      	blx	r7
 80092cc:	3001      	adds	r0, #1
 80092ce:	f43f aeae 	beq.w	800902e <_printf_float+0xb6>
 80092d2:	f108 0801 	add.w	r8, r8, #1
 80092d6:	e7ec      	b.n	80092b2 <_printf_float+0x33a>
 80092d8:	4613      	mov	r3, r2
 80092da:	4631      	mov	r1, r6
 80092dc:	4642      	mov	r2, r8
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	d1c0      	bne.n	8009268 <_printf_float+0x2f0>
 80092e6:	e6a2      	b.n	800902e <_printf_float+0xb6>
 80092e8:	2301      	movs	r3, #1
 80092ea:	4631      	mov	r1, r6
 80092ec:	4628      	mov	r0, r5
 80092ee:	920b      	str	r2, [sp, #44]	; 0x2c
 80092f0:	47b8      	blx	r7
 80092f2:	3001      	adds	r0, #1
 80092f4:	f43f ae9b 	beq.w	800902e <_printf_float+0xb6>
 80092f8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80092fa:	f10b 0b01 	add.w	fp, fp, #1
 80092fe:	e7b9      	b.n	8009274 <_printf_float+0x2fc>
 8009300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009304:	4631      	mov	r1, r6
 8009306:	4628      	mov	r0, r5
 8009308:	47b8      	blx	r7
 800930a:	3001      	adds	r0, #1
 800930c:	d1bf      	bne.n	800928e <_printf_float+0x316>
 800930e:	e68e      	b.n	800902e <_printf_float+0xb6>
 8009310:	464b      	mov	r3, r9
 8009312:	eb08 020a 	add.w	r2, r8, sl
 8009316:	4631      	mov	r1, r6
 8009318:	4628      	mov	r0, r5
 800931a:	47b8      	blx	r7
 800931c:	3001      	adds	r0, #1
 800931e:	d1c2      	bne.n	80092a6 <_printf_float+0x32e>
 8009320:	e685      	b.n	800902e <_printf_float+0xb6>
 8009322:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009324:	2a01      	cmp	r2, #1
 8009326:	dc01      	bgt.n	800932c <_printf_float+0x3b4>
 8009328:	07db      	lsls	r3, r3, #31
 800932a:	d539      	bpl.n	80093a0 <_printf_float+0x428>
 800932c:	2301      	movs	r3, #1
 800932e:	4642      	mov	r2, r8
 8009330:	4631      	mov	r1, r6
 8009332:	4628      	mov	r0, r5
 8009334:	47b8      	blx	r7
 8009336:	3001      	adds	r0, #1
 8009338:	f43f ae79 	beq.w	800902e <_printf_float+0xb6>
 800933c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009340:	4631      	mov	r1, r6
 8009342:	4628      	mov	r0, r5
 8009344:	47b8      	blx	r7
 8009346:	3001      	adds	r0, #1
 8009348:	f43f ae71 	beq.w	800902e <_printf_float+0xb6>
 800934c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009350:	2200      	movs	r2, #0
 8009352:	2300      	movs	r3, #0
 8009354:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8009358:	f7f7 fb8e 	bl	8000a78 <__aeabi_dcmpeq>
 800935c:	b9d8      	cbnz	r0, 8009396 <_printf_float+0x41e>
 800935e:	f109 33ff 	add.w	r3, r9, #4294967295
 8009362:	f108 0201 	add.w	r2, r8, #1
 8009366:	4631      	mov	r1, r6
 8009368:	4628      	mov	r0, r5
 800936a:	47b8      	blx	r7
 800936c:	3001      	adds	r0, #1
 800936e:	d10e      	bne.n	800938e <_printf_float+0x416>
 8009370:	e65d      	b.n	800902e <_printf_float+0xb6>
 8009372:	2301      	movs	r3, #1
 8009374:	464a      	mov	r2, r9
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	47b8      	blx	r7
 800937c:	3001      	adds	r0, #1
 800937e:	f43f ae56 	beq.w	800902e <_printf_float+0xb6>
 8009382:	f108 0801 	add.w	r8, r8, #1
 8009386:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009388:	3b01      	subs	r3, #1
 800938a:	4543      	cmp	r3, r8
 800938c:	dcf1      	bgt.n	8009372 <_printf_float+0x3fa>
 800938e:	4653      	mov	r3, sl
 8009390:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009394:	e6df      	b.n	8009156 <_printf_float+0x1de>
 8009396:	f04f 0800 	mov.w	r8, #0
 800939a:	f104 091a 	add.w	r9, r4, #26
 800939e:	e7f2      	b.n	8009386 <_printf_float+0x40e>
 80093a0:	2301      	movs	r3, #1
 80093a2:	4642      	mov	r2, r8
 80093a4:	e7df      	b.n	8009366 <_printf_float+0x3ee>
 80093a6:	2301      	movs	r3, #1
 80093a8:	464a      	mov	r2, r9
 80093aa:	4631      	mov	r1, r6
 80093ac:	4628      	mov	r0, r5
 80093ae:	47b8      	blx	r7
 80093b0:	3001      	adds	r0, #1
 80093b2:	f43f ae3c 	beq.w	800902e <_printf_float+0xb6>
 80093b6:	f108 0801 	add.w	r8, r8, #1
 80093ba:	68e3      	ldr	r3, [r4, #12]
 80093bc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80093be:	1a5b      	subs	r3, r3, r1
 80093c0:	4543      	cmp	r3, r8
 80093c2:	dcf0      	bgt.n	80093a6 <_printf_float+0x42e>
 80093c4:	e6fc      	b.n	80091c0 <_printf_float+0x248>
 80093c6:	f04f 0800 	mov.w	r8, #0
 80093ca:	f104 0919 	add.w	r9, r4, #25
 80093ce:	e7f4      	b.n	80093ba <_printf_float+0x442>

080093d0 <_printf_common>:
 80093d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d4:	4616      	mov	r6, r2
 80093d6:	4699      	mov	r9, r3
 80093d8:	688a      	ldr	r2, [r1, #8]
 80093da:	690b      	ldr	r3, [r1, #16]
 80093dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80093e0:	4293      	cmp	r3, r2
 80093e2:	bfb8      	it	lt
 80093e4:	4613      	movlt	r3, r2
 80093e6:	6033      	str	r3, [r6, #0]
 80093e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80093ec:	4607      	mov	r7, r0
 80093ee:	460c      	mov	r4, r1
 80093f0:	b10a      	cbz	r2, 80093f6 <_printf_common+0x26>
 80093f2:	3301      	adds	r3, #1
 80093f4:	6033      	str	r3, [r6, #0]
 80093f6:	6823      	ldr	r3, [r4, #0]
 80093f8:	0699      	lsls	r1, r3, #26
 80093fa:	bf42      	ittt	mi
 80093fc:	6833      	ldrmi	r3, [r6, #0]
 80093fe:	3302      	addmi	r3, #2
 8009400:	6033      	strmi	r3, [r6, #0]
 8009402:	6825      	ldr	r5, [r4, #0]
 8009404:	f015 0506 	ands.w	r5, r5, #6
 8009408:	d106      	bne.n	8009418 <_printf_common+0x48>
 800940a:	f104 0a19 	add.w	sl, r4, #25
 800940e:	68e3      	ldr	r3, [r4, #12]
 8009410:	6832      	ldr	r2, [r6, #0]
 8009412:	1a9b      	subs	r3, r3, r2
 8009414:	42ab      	cmp	r3, r5
 8009416:	dc26      	bgt.n	8009466 <_printf_common+0x96>
 8009418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800941c:	1e13      	subs	r3, r2, #0
 800941e:	6822      	ldr	r2, [r4, #0]
 8009420:	bf18      	it	ne
 8009422:	2301      	movne	r3, #1
 8009424:	0692      	lsls	r2, r2, #26
 8009426:	d42b      	bmi.n	8009480 <_printf_common+0xb0>
 8009428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800942c:	4649      	mov	r1, r9
 800942e:	4638      	mov	r0, r7
 8009430:	47c0      	blx	r8
 8009432:	3001      	adds	r0, #1
 8009434:	d01e      	beq.n	8009474 <_printf_common+0xa4>
 8009436:	6823      	ldr	r3, [r4, #0]
 8009438:	6922      	ldr	r2, [r4, #16]
 800943a:	f003 0306 	and.w	r3, r3, #6
 800943e:	2b04      	cmp	r3, #4
 8009440:	bf02      	ittt	eq
 8009442:	68e5      	ldreq	r5, [r4, #12]
 8009444:	6833      	ldreq	r3, [r6, #0]
 8009446:	1aed      	subeq	r5, r5, r3
 8009448:	68a3      	ldr	r3, [r4, #8]
 800944a:	bf0c      	ite	eq
 800944c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009450:	2500      	movne	r5, #0
 8009452:	4293      	cmp	r3, r2
 8009454:	bfc4      	itt	gt
 8009456:	1a9b      	subgt	r3, r3, r2
 8009458:	18ed      	addgt	r5, r5, r3
 800945a:	2600      	movs	r6, #0
 800945c:	341a      	adds	r4, #26
 800945e:	42b5      	cmp	r5, r6
 8009460:	d11a      	bne.n	8009498 <_printf_common+0xc8>
 8009462:	2000      	movs	r0, #0
 8009464:	e008      	b.n	8009478 <_printf_common+0xa8>
 8009466:	2301      	movs	r3, #1
 8009468:	4652      	mov	r2, sl
 800946a:	4649      	mov	r1, r9
 800946c:	4638      	mov	r0, r7
 800946e:	47c0      	blx	r8
 8009470:	3001      	adds	r0, #1
 8009472:	d103      	bne.n	800947c <_printf_common+0xac>
 8009474:	f04f 30ff 	mov.w	r0, #4294967295
 8009478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800947c:	3501      	adds	r5, #1
 800947e:	e7c6      	b.n	800940e <_printf_common+0x3e>
 8009480:	18e1      	adds	r1, r4, r3
 8009482:	1c5a      	adds	r2, r3, #1
 8009484:	2030      	movs	r0, #48	; 0x30
 8009486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800948a:	4422      	add	r2, r4
 800948c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009494:	3302      	adds	r3, #2
 8009496:	e7c7      	b.n	8009428 <_printf_common+0x58>
 8009498:	2301      	movs	r3, #1
 800949a:	4622      	mov	r2, r4
 800949c:	4649      	mov	r1, r9
 800949e:	4638      	mov	r0, r7
 80094a0:	47c0      	blx	r8
 80094a2:	3001      	adds	r0, #1
 80094a4:	d0e6      	beq.n	8009474 <_printf_common+0xa4>
 80094a6:	3601      	adds	r6, #1
 80094a8:	e7d9      	b.n	800945e <_printf_common+0x8e>
	...

080094ac <_printf_i>:
 80094ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80094b0:	7e0f      	ldrb	r7, [r1, #24]
 80094b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80094b4:	2f78      	cmp	r7, #120	; 0x78
 80094b6:	4691      	mov	r9, r2
 80094b8:	4680      	mov	r8, r0
 80094ba:	460c      	mov	r4, r1
 80094bc:	469a      	mov	sl, r3
 80094be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80094c2:	d807      	bhi.n	80094d4 <_printf_i+0x28>
 80094c4:	2f62      	cmp	r7, #98	; 0x62
 80094c6:	d80a      	bhi.n	80094de <_printf_i+0x32>
 80094c8:	2f00      	cmp	r7, #0
 80094ca:	f000 80d4 	beq.w	8009676 <_printf_i+0x1ca>
 80094ce:	2f58      	cmp	r7, #88	; 0x58
 80094d0:	f000 80c0 	beq.w	8009654 <_printf_i+0x1a8>
 80094d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80094d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80094dc:	e03a      	b.n	8009554 <_printf_i+0xa8>
 80094de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80094e2:	2b15      	cmp	r3, #21
 80094e4:	d8f6      	bhi.n	80094d4 <_printf_i+0x28>
 80094e6:	a101      	add	r1, pc, #4	; (adr r1, 80094ec <_printf_i+0x40>)
 80094e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80094ec:	08009545 	.word	0x08009545
 80094f0:	08009559 	.word	0x08009559
 80094f4:	080094d5 	.word	0x080094d5
 80094f8:	080094d5 	.word	0x080094d5
 80094fc:	080094d5 	.word	0x080094d5
 8009500:	080094d5 	.word	0x080094d5
 8009504:	08009559 	.word	0x08009559
 8009508:	080094d5 	.word	0x080094d5
 800950c:	080094d5 	.word	0x080094d5
 8009510:	080094d5 	.word	0x080094d5
 8009514:	080094d5 	.word	0x080094d5
 8009518:	0800965d 	.word	0x0800965d
 800951c:	08009585 	.word	0x08009585
 8009520:	08009617 	.word	0x08009617
 8009524:	080094d5 	.word	0x080094d5
 8009528:	080094d5 	.word	0x080094d5
 800952c:	0800967f 	.word	0x0800967f
 8009530:	080094d5 	.word	0x080094d5
 8009534:	08009585 	.word	0x08009585
 8009538:	080094d5 	.word	0x080094d5
 800953c:	080094d5 	.word	0x080094d5
 8009540:	0800961f 	.word	0x0800961f
 8009544:	682b      	ldr	r3, [r5, #0]
 8009546:	1d1a      	adds	r2, r3, #4
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	602a      	str	r2, [r5, #0]
 800954c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009554:	2301      	movs	r3, #1
 8009556:	e09f      	b.n	8009698 <_printf_i+0x1ec>
 8009558:	6820      	ldr	r0, [r4, #0]
 800955a:	682b      	ldr	r3, [r5, #0]
 800955c:	0607      	lsls	r7, r0, #24
 800955e:	f103 0104 	add.w	r1, r3, #4
 8009562:	6029      	str	r1, [r5, #0]
 8009564:	d501      	bpl.n	800956a <_printf_i+0xbe>
 8009566:	681e      	ldr	r6, [r3, #0]
 8009568:	e003      	b.n	8009572 <_printf_i+0xc6>
 800956a:	0646      	lsls	r6, r0, #25
 800956c:	d5fb      	bpl.n	8009566 <_printf_i+0xba>
 800956e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009572:	2e00      	cmp	r6, #0
 8009574:	da03      	bge.n	800957e <_printf_i+0xd2>
 8009576:	232d      	movs	r3, #45	; 0x2d
 8009578:	4276      	negs	r6, r6
 800957a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800957e:	485a      	ldr	r0, [pc, #360]	; (80096e8 <_printf_i+0x23c>)
 8009580:	230a      	movs	r3, #10
 8009582:	e012      	b.n	80095aa <_printf_i+0xfe>
 8009584:	682b      	ldr	r3, [r5, #0]
 8009586:	6820      	ldr	r0, [r4, #0]
 8009588:	1d19      	adds	r1, r3, #4
 800958a:	6029      	str	r1, [r5, #0]
 800958c:	0605      	lsls	r5, r0, #24
 800958e:	d501      	bpl.n	8009594 <_printf_i+0xe8>
 8009590:	681e      	ldr	r6, [r3, #0]
 8009592:	e002      	b.n	800959a <_printf_i+0xee>
 8009594:	0641      	lsls	r1, r0, #25
 8009596:	d5fb      	bpl.n	8009590 <_printf_i+0xe4>
 8009598:	881e      	ldrh	r6, [r3, #0]
 800959a:	4853      	ldr	r0, [pc, #332]	; (80096e8 <_printf_i+0x23c>)
 800959c:	2f6f      	cmp	r7, #111	; 0x6f
 800959e:	bf0c      	ite	eq
 80095a0:	2308      	moveq	r3, #8
 80095a2:	230a      	movne	r3, #10
 80095a4:	2100      	movs	r1, #0
 80095a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80095aa:	6865      	ldr	r5, [r4, #4]
 80095ac:	60a5      	str	r5, [r4, #8]
 80095ae:	2d00      	cmp	r5, #0
 80095b0:	bfa2      	ittt	ge
 80095b2:	6821      	ldrge	r1, [r4, #0]
 80095b4:	f021 0104 	bicge.w	r1, r1, #4
 80095b8:	6021      	strge	r1, [r4, #0]
 80095ba:	b90e      	cbnz	r6, 80095c0 <_printf_i+0x114>
 80095bc:	2d00      	cmp	r5, #0
 80095be:	d04b      	beq.n	8009658 <_printf_i+0x1ac>
 80095c0:	4615      	mov	r5, r2
 80095c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80095c6:	fb03 6711 	mls	r7, r3, r1, r6
 80095ca:	5dc7      	ldrb	r7, [r0, r7]
 80095cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80095d0:	4637      	mov	r7, r6
 80095d2:	42bb      	cmp	r3, r7
 80095d4:	460e      	mov	r6, r1
 80095d6:	d9f4      	bls.n	80095c2 <_printf_i+0x116>
 80095d8:	2b08      	cmp	r3, #8
 80095da:	d10b      	bne.n	80095f4 <_printf_i+0x148>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	07de      	lsls	r6, r3, #31
 80095e0:	d508      	bpl.n	80095f4 <_printf_i+0x148>
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	6861      	ldr	r1, [r4, #4]
 80095e6:	4299      	cmp	r1, r3
 80095e8:	bfde      	ittt	le
 80095ea:	2330      	movle	r3, #48	; 0x30
 80095ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80095f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80095f4:	1b52      	subs	r2, r2, r5
 80095f6:	6122      	str	r2, [r4, #16]
 80095f8:	f8cd a000 	str.w	sl, [sp]
 80095fc:	464b      	mov	r3, r9
 80095fe:	aa03      	add	r2, sp, #12
 8009600:	4621      	mov	r1, r4
 8009602:	4640      	mov	r0, r8
 8009604:	f7ff fee4 	bl	80093d0 <_printf_common>
 8009608:	3001      	adds	r0, #1
 800960a:	d14a      	bne.n	80096a2 <_printf_i+0x1f6>
 800960c:	f04f 30ff 	mov.w	r0, #4294967295
 8009610:	b004      	add	sp, #16
 8009612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	f043 0320 	orr.w	r3, r3, #32
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	4833      	ldr	r0, [pc, #204]	; (80096ec <_printf_i+0x240>)
 8009620:	2778      	movs	r7, #120	; 0x78
 8009622:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009626:	6823      	ldr	r3, [r4, #0]
 8009628:	6829      	ldr	r1, [r5, #0]
 800962a:	061f      	lsls	r7, r3, #24
 800962c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009630:	d402      	bmi.n	8009638 <_printf_i+0x18c>
 8009632:	065f      	lsls	r7, r3, #25
 8009634:	bf48      	it	mi
 8009636:	b2b6      	uxthmi	r6, r6
 8009638:	07df      	lsls	r7, r3, #31
 800963a:	bf48      	it	mi
 800963c:	f043 0320 	orrmi.w	r3, r3, #32
 8009640:	6029      	str	r1, [r5, #0]
 8009642:	bf48      	it	mi
 8009644:	6023      	strmi	r3, [r4, #0]
 8009646:	b91e      	cbnz	r6, 8009650 <_printf_i+0x1a4>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	f023 0320 	bic.w	r3, r3, #32
 800964e:	6023      	str	r3, [r4, #0]
 8009650:	2310      	movs	r3, #16
 8009652:	e7a7      	b.n	80095a4 <_printf_i+0xf8>
 8009654:	4824      	ldr	r0, [pc, #144]	; (80096e8 <_printf_i+0x23c>)
 8009656:	e7e4      	b.n	8009622 <_printf_i+0x176>
 8009658:	4615      	mov	r5, r2
 800965a:	e7bd      	b.n	80095d8 <_printf_i+0x12c>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	6826      	ldr	r6, [r4, #0]
 8009660:	6961      	ldr	r1, [r4, #20]
 8009662:	1d18      	adds	r0, r3, #4
 8009664:	6028      	str	r0, [r5, #0]
 8009666:	0635      	lsls	r5, r6, #24
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	d501      	bpl.n	8009670 <_printf_i+0x1c4>
 800966c:	6019      	str	r1, [r3, #0]
 800966e:	e002      	b.n	8009676 <_printf_i+0x1ca>
 8009670:	0670      	lsls	r0, r6, #25
 8009672:	d5fb      	bpl.n	800966c <_printf_i+0x1c0>
 8009674:	8019      	strh	r1, [r3, #0]
 8009676:	2300      	movs	r3, #0
 8009678:	6123      	str	r3, [r4, #16]
 800967a:	4615      	mov	r5, r2
 800967c:	e7bc      	b.n	80095f8 <_printf_i+0x14c>
 800967e:	682b      	ldr	r3, [r5, #0]
 8009680:	1d1a      	adds	r2, r3, #4
 8009682:	602a      	str	r2, [r5, #0]
 8009684:	681d      	ldr	r5, [r3, #0]
 8009686:	6862      	ldr	r2, [r4, #4]
 8009688:	2100      	movs	r1, #0
 800968a:	4628      	mov	r0, r5
 800968c:	f7f6 fd78 	bl	8000180 <memchr>
 8009690:	b108      	cbz	r0, 8009696 <_printf_i+0x1ea>
 8009692:	1b40      	subs	r0, r0, r5
 8009694:	6060      	str	r0, [r4, #4]
 8009696:	6863      	ldr	r3, [r4, #4]
 8009698:	6123      	str	r3, [r4, #16]
 800969a:	2300      	movs	r3, #0
 800969c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80096a0:	e7aa      	b.n	80095f8 <_printf_i+0x14c>
 80096a2:	6923      	ldr	r3, [r4, #16]
 80096a4:	462a      	mov	r2, r5
 80096a6:	4649      	mov	r1, r9
 80096a8:	4640      	mov	r0, r8
 80096aa:	47d0      	blx	sl
 80096ac:	3001      	adds	r0, #1
 80096ae:	d0ad      	beq.n	800960c <_printf_i+0x160>
 80096b0:	6823      	ldr	r3, [r4, #0]
 80096b2:	079b      	lsls	r3, r3, #30
 80096b4:	d413      	bmi.n	80096de <_printf_i+0x232>
 80096b6:	68e0      	ldr	r0, [r4, #12]
 80096b8:	9b03      	ldr	r3, [sp, #12]
 80096ba:	4298      	cmp	r0, r3
 80096bc:	bfb8      	it	lt
 80096be:	4618      	movlt	r0, r3
 80096c0:	e7a6      	b.n	8009610 <_printf_i+0x164>
 80096c2:	2301      	movs	r3, #1
 80096c4:	4632      	mov	r2, r6
 80096c6:	4649      	mov	r1, r9
 80096c8:	4640      	mov	r0, r8
 80096ca:	47d0      	blx	sl
 80096cc:	3001      	adds	r0, #1
 80096ce:	d09d      	beq.n	800960c <_printf_i+0x160>
 80096d0:	3501      	adds	r5, #1
 80096d2:	68e3      	ldr	r3, [r4, #12]
 80096d4:	9903      	ldr	r1, [sp, #12]
 80096d6:	1a5b      	subs	r3, r3, r1
 80096d8:	42ab      	cmp	r3, r5
 80096da:	dcf2      	bgt.n	80096c2 <_printf_i+0x216>
 80096dc:	e7eb      	b.n	80096b6 <_printf_i+0x20a>
 80096de:	2500      	movs	r5, #0
 80096e0:	f104 0619 	add.w	r6, r4, #25
 80096e4:	e7f5      	b.n	80096d2 <_printf_i+0x226>
 80096e6:	bf00      	nop
 80096e8:	0800df04 	.word	0x0800df04
 80096ec:	0800df15 	.word	0x0800df15

080096f0 <_scanf_float>:
 80096f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096f4:	b087      	sub	sp, #28
 80096f6:	4617      	mov	r7, r2
 80096f8:	9303      	str	r3, [sp, #12]
 80096fa:	688b      	ldr	r3, [r1, #8]
 80096fc:	1e5a      	subs	r2, r3, #1
 80096fe:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009702:	bf83      	ittte	hi
 8009704:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009708:	195b      	addhi	r3, r3, r5
 800970a:	9302      	strhi	r3, [sp, #8]
 800970c:	2300      	movls	r3, #0
 800970e:	bf86      	itte	hi
 8009710:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009714:	608b      	strhi	r3, [r1, #8]
 8009716:	9302      	strls	r3, [sp, #8]
 8009718:	680b      	ldr	r3, [r1, #0]
 800971a:	468b      	mov	fp, r1
 800971c:	2500      	movs	r5, #0
 800971e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009722:	f84b 3b1c 	str.w	r3, [fp], #28
 8009726:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800972a:	4680      	mov	r8, r0
 800972c:	460c      	mov	r4, r1
 800972e:	465e      	mov	r6, fp
 8009730:	46aa      	mov	sl, r5
 8009732:	46a9      	mov	r9, r5
 8009734:	9501      	str	r5, [sp, #4]
 8009736:	68a2      	ldr	r2, [r4, #8]
 8009738:	b152      	cbz	r2, 8009750 <_scanf_float+0x60>
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	781b      	ldrb	r3, [r3, #0]
 800973e:	2b4e      	cmp	r3, #78	; 0x4e
 8009740:	d864      	bhi.n	800980c <_scanf_float+0x11c>
 8009742:	2b40      	cmp	r3, #64	; 0x40
 8009744:	d83c      	bhi.n	80097c0 <_scanf_float+0xd0>
 8009746:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800974a:	b2c8      	uxtb	r0, r1
 800974c:	280e      	cmp	r0, #14
 800974e:	d93a      	bls.n	80097c6 <_scanf_float+0xd6>
 8009750:	f1b9 0f00 	cmp.w	r9, #0
 8009754:	d003      	beq.n	800975e <_scanf_float+0x6e>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009762:	f1ba 0f01 	cmp.w	sl, #1
 8009766:	f200 8113 	bhi.w	8009990 <_scanf_float+0x2a0>
 800976a:	455e      	cmp	r6, fp
 800976c:	f200 8105 	bhi.w	800997a <_scanf_float+0x28a>
 8009770:	2501      	movs	r5, #1
 8009772:	4628      	mov	r0, r5
 8009774:	b007      	add	sp, #28
 8009776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800977a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800977e:	2a0d      	cmp	r2, #13
 8009780:	d8e6      	bhi.n	8009750 <_scanf_float+0x60>
 8009782:	a101      	add	r1, pc, #4	; (adr r1, 8009788 <_scanf_float+0x98>)
 8009784:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009788:	080098c7 	.word	0x080098c7
 800978c:	08009751 	.word	0x08009751
 8009790:	08009751 	.word	0x08009751
 8009794:	08009751 	.word	0x08009751
 8009798:	08009927 	.word	0x08009927
 800979c:	080098ff 	.word	0x080098ff
 80097a0:	08009751 	.word	0x08009751
 80097a4:	08009751 	.word	0x08009751
 80097a8:	080098d5 	.word	0x080098d5
 80097ac:	08009751 	.word	0x08009751
 80097b0:	08009751 	.word	0x08009751
 80097b4:	08009751 	.word	0x08009751
 80097b8:	08009751 	.word	0x08009751
 80097bc:	0800988d 	.word	0x0800988d
 80097c0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80097c4:	e7db      	b.n	800977e <_scanf_float+0x8e>
 80097c6:	290e      	cmp	r1, #14
 80097c8:	d8c2      	bhi.n	8009750 <_scanf_float+0x60>
 80097ca:	a001      	add	r0, pc, #4	; (adr r0, 80097d0 <_scanf_float+0xe0>)
 80097cc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80097d0:	0800987f 	.word	0x0800987f
 80097d4:	08009751 	.word	0x08009751
 80097d8:	0800987f 	.word	0x0800987f
 80097dc:	08009913 	.word	0x08009913
 80097e0:	08009751 	.word	0x08009751
 80097e4:	0800982d 	.word	0x0800982d
 80097e8:	08009869 	.word	0x08009869
 80097ec:	08009869 	.word	0x08009869
 80097f0:	08009869 	.word	0x08009869
 80097f4:	08009869 	.word	0x08009869
 80097f8:	08009869 	.word	0x08009869
 80097fc:	08009869 	.word	0x08009869
 8009800:	08009869 	.word	0x08009869
 8009804:	08009869 	.word	0x08009869
 8009808:	08009869 	.word	0x08009869
 800980c:	2b6e      	cmp	r3, #110	; 0x6e
 800980e:	d809      	bhi.n	8009824 <_scanf_float+0x134>
 8009810:	2b60      	cmp	r3, #96	; 0x60
 8009812:	d8b2      	bhi.n	800977a <_scanf_float+0x8a>
 8009814:	2b54      	cmp	r3, #84	; 0x54
 8009816:	d077      	beq.n	8009908 <_scanf_float+0x218>
 8009818:	2b59      	cmp	r3, #89	; 0x59
 800981a:	d199      	bne.n	8009750 <_scanf_float+0x60>
 800981c:	2d07      	cmp	r5, #7
 800981e:	d197      	bne.n	8009750 <_scanf_float+0x60>
 8009820:	2508      	movs	r5, #8
 8009822:	e029      	b.n	8009878 <_scanf_float+0x188>
 8009824:	2b74      	cmp	r3, #116	; 0x74
 8009826:	d06f      	beq.n	8009908 <_scanf_float+0x218>
 8009828:	2b79      	cmp	r3, #121	; 0x79
 800982a:	e7f6      	b.n	800981a <_scanf_float+0x12a>
 800982c:	6821      	ldr	r1, [r4, #0]
 800982e:	05c8      	lsls	r0, r1, #23
 8009830:	d51a      	bpl.n	8009868 <_scanf_float+0x178>
 8009832:	9b02      	ldr	r3, [sp, #8]
 8009834:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009838:	6021      	str	r1, [r4, #0]
 800983a:	f109 0901 	add.w	r9, r9, #1
 800983e:	b11b      	cbz	r3, 8009848 <_scanf_float+0x158>
 8009840:	3b01      	subs	r3, #1
 8009842:	3201      	adds	r2, #1
 8009844:	9302      	str	r3, [sp, #8]
 8009846:	60a2      	str	r2, [r4, #8]
 8009848:	68a3      	ldr	r3, [r4, #8]
 800984a:	3b01      	subs	r3, #1
 800984c:	60a3      	str	r3, [r4, #8]
 800984e:	6923      	ldr	r3, [r4, #16]
 8009850:	3301      	adds	r3, #1
 8009852:	6123      	str	r3, [r4, #16]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	3b01      	subs	r3, #1
 8009858:	2b00      	cmp	r3, #0
 800985a:	607b      	str	r3, [r7, #4]
 800985c:	f340 8084 	ble.w	8009968 <_scanf_float+0x278>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	603b      	str	r3, [r7, #0]
 8009866:	e766      	b.n	8009736 <_scanf_float+0x46>
 8009868:	eb1a 0f05 	cmn.w	sl, r5
 800986c:	f47f af70 	bne.w	8009750 <_scanf_float+0x60>
 8009870:	6822      	ldr	r2, [r4, #0]
 8009872:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009876:	6022      	str	r2, [r4, #0]
 8009878:	f806 3b01 	strb.w	r3, [r6], #1
 800987c:	e7e4      	b.n	8009848 <_scanf_float+0x158>
 800987e:	6822      	ldr	r2, [r4, #0]
 8009880:	0610      	lsls	r0, r2, #24
 8009882:	f57f af65 	bpl.w	8009750 <_scanf_float+0x60>
 8009886:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800988a:	e7f4      	b.n	8009876 <_scanf_float+0x186>
 800988c:	f1ba 0f00 	cmp.w	sl, #0
 8009890:	d10e      	bne.n	80098b0 <_scanf_float+0x1c0>
 8009892:	f1b9 0f00 	cmp.w	r9, #0
 8009896:	d10e      	bne.n	80098b6 <_scanf_float+0x1c6>
 8009898:	6822      	ldr	r2, [r4, #0]
 800989a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800989e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80098a2:	d108      	bne.n	80098b6 <_scanf_float+0x1c6>
 80098a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098a8:	6022      	str	r2, [r4, #0]
 80098aa:	f04f 0a01 	mov.w	sl, #1
 80098ae:	e7e3      	b.n	8009878 <_scanf_float+0x188>
 80098b0:	f1ba 0f02 	cmp.w	sl, #2
 80098b4:	d055      	beq.n	8009962 <_scanf_float+0x272>
 80098b6:	2d01      	cmp	r5, #1
 80098b8:	d002      	beq.n	80098c0 <_scanf_float+0x1d0>
 80098ba:	2d04      	cmp	r5, #4
 80098bc:	f47f af48 	bne.w	8009750 <_scanf_float+0x60>
 80098c0:	3501      	adds	r5, #1
 80098c2:	b2ed      	uxtb	r5, r5
 80098c4:	e7d8      	b.n	8009878 <_scanf_float+0x188>
 80098c6:	f1ba 0f01 	cmp.w	sl, #1
 80098ca:	f47f af41 	bne.w	8009750 <_scanf_float+0x60>
 80098ce:	f04f 0a02 	mov.w	sl, #2
 80098d2:	e7d1      	b.n	8009878 <_scanf_float+0x188>
 80098d4:	b97d      	cbnz	r5, 80098f6 <_scanf_float+0x206>
 80098d6:	f1b9 0f00 	cmp.w	r9, #0
 80098da:	f47f af3c 	bne.w	8009756 <_scanf_float+0x66>
 80098de:	6822      	ldr	r2, [r4, #0]
 80098e0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80098e4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80098e8:	f47f af39 	bne.w	800975e <_scanf_float+0x6e>
 80098ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80098f0:	6022      	str	r2, [r4, #0]
 80098f2:	2501      	movs	r5, #1
 80098f4:	e7c0      	b.n	8009878 <_scanf_float+0x188>
 80098f6:	2d03      	cmp	r5, #3
 80098f8:	d0e2      	beq.n	80098c0 <_scanf_float+0x1d0>
 80098fa:	2d05      	cmp	r5, #5
 80098fc:	e7de      	b.n	80098bc <_scanf_float+0x1cc>
 80098fe:	2d02      	cmp	r5, #2
 8009900:	f47f af26 	bne.w	8009750 <_scanf_float+0x60>
 8009904:	2503      	movs	r5, #3
 8009906:	e7b7      	b.n	8009878 <_scanf_float+0x188>
 8009908:	2d06      	cmp	r5, #6
 800990a:	f47f af21 	bne.w	8009750 <_scanf_float+0x60>
 800990e:	2507      	movs	r5, #7
 8009910:	e7b2      	b.n	8009878 <_scanf_float+0x188>
 8009912:	6822      	ldr	r2, [r4, #0]
 8009914:	0591      	lsls	r1, r2, #22
 8009916:	f57f af1b 	bpl.w	8009750 <_scanf_float+0x60>
 800991a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800991e:	6022      	str	r2, [r4, #0]
 8009920:	f8cd 9004 	str.w	r9, [sp, #4]
 8009924:	e7a8      	b.n	8009878 <_scanf_float+0x188>
 8009926:	6822      	ldr	r2, [r4, #0]
 8009928:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800992c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009930:	d006      	beq.n	8009940 <_scanf_float+0x250>
 8009932:	0550      	lsls	r0, r2, #21
 8009934:	f57f af0c 	bpl.w	8009750 <_scanf_float+0x60>
 8009938:	f1b9 0f00 	cmp.w	r9, #0
 800993c:	f43f af0f 	beq.w	800975e <_scanf_float+0x6e>
 8009940:	0591      	lsls	r1, r2, #22
 8009942:	bf58      	it	pl
 8009944:	9901      	ldrpl	r1, [sp, #4]
 8009946:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800994a:	bf58      	it	pl
 800994c:	eba9 0101 	subpl.w	r1, r9, r1
 8009950:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009954:	bf58      	it	pl
 8009956:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800995a:	6022      	str	r2, [r4, #0]
 800995c:	f04f 0900 	mov.w	r9, #0
 8009960:	e78a      	b.n	8009878 <_scanf_float+0x188>
 8009962:	f04f 0a03 	mov.w	sl, #3
 8009966:	e787      	b.n	8009878 <_scanf_float+0x188>
 8009968:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800996c:	4639      	mov	r1, r7
 800996e:	4640      	mov	r0, r8
 8009970:	4798      	blx	r3
 8009972:	2800      	cmp	r0, #0
 8009974:	f43f aedf 	beq.w	8009736 <_scanf_float+0x46>
 8009978:	e6ea      	b.n	8009750 <_scanf_float+0x60>
 800997a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800997e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009982:	463a      	mov	r2, r7
 8009984:	4640      	mov	r0, r8
 8009986:	4798      	blx	r3
 8009988:	6923      	ldr	r3, [r4, #16]
 800998a:	3b01      	subs	r3, #1
 800998c:	6123      	str	r3, [r4, #16]
 800998e:	e6ec      	b.n	800976a <_scanf_float+0x7a>
 8009990:	1e6b      	subs	r3, r5, #1
 8009992:	2b06      	cmp	r3, #6
 8009994:	d825      	bhi.n	80099e2 <_scanf_float+0x2f2>
 8009996:	2d02      	cmp	r5, #2
 8009998:	d836      	bhi.n	8009a08 <_scanf_float+0x318>
 800999a:	455e      	cmp	r6, fp
 800999c:	f67f aee8 	bls.w	8009770 <_scanf_float+0x80>
 80099a0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099a4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099a8:	463a      	mov	r2, r7
 80099aa:	4640      	mov	r0, r8
 80099ac:	4798      	blx	r3
 80099ae:	6923      	ldr	r3, [r4, #16]
 80099b0:	3b01      	subs	r3, #1
 80099b2:	6123      	str	r3, [r4, #16]
 80099b4:	e7f1      	b.n	800999a <_scanf_float+0x2aa>
 80099b6:	9802      	ldr	r0, [sp, #8]
 80099b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099bc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80099c0:	9002      	str	r0, [sp, #8]
 80099c2:	463a      	mov	r2, r7
 80099c4:	4640      	mov	r0, r8
 80099c6:	4798      	blx	r3
 80099c8:	6923      	ldr	r3, [r4, #16]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	6123      	str	r3, [r4, #16]
 80099ce:	f10a 3aff 	add.w	sl, sl, #4294967295
 80099d2:	fa5f fa8a 	uxtb.w	sl, sl
 80099d6:	f1ba 0f02 	cmp.w	sl, #2
 80099da:	d1ec      	bne.n	80099b6 <_scanf_float+0x2c6>
 80099dc:	3d03      	subs	r5, #3
 80099de:	b2ed      	uxtb	r5, r5
 80099e0:	1b76      	subs	r6, r6, r5
 80099e2:	6823      	ldr	r3, [r4, #0]
 80099e4:	05da      	lsls	r2, r3, #23
 80099e6:	d52f      	bpl.n	8009a48 <_scanf_float+0x358>
 80099e8:	055b      	lsls	r3, r3, #21
 80099ea:	d510      	bpl.n	8009a0e <_scanf_float+0x31e>
 80099ec:	455e      	cmp	r6, fp
 80099ee:	f67f aebf 	bls.w	8009770 <_scanf_float+0x80>
 80099f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099fa:	463a      	mov	r2, r7
 80099fc:	4640      	mov	r0, r8
 80099fe:	4798      	blx	r3
 8009a00:	6923      	ldr	r3, [r4, #16]
 8009a02:	3b01      	subs	r3, #1
 8009a04:	6123      	str	r3, [r4, #16]
 8009a06:	e7f1      	b.n	80099ec <_scanf_float+0x2fc>
 8009a08:	46aa      	mov	sl, r5
 8009a0a:	9602      	str	r6, [sp, #8]
 8009a0c:	e7df      	b.n	80099ce <_scanf_float+0x2de>
 8009a0e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a12:	6923      	ldr	r3, [r4, #16]
 8009a14:	2965      	cmp	r1, #101	; 0x65
 8009a16:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a1a:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a1e:	6123      	str	r3, [r4, #16]
 8009a20:	d00c      	beq.n	8009a3c <_scanf_float+0x34c>
 8009a22:	2945      	cmp	r1, #69	; 0x45
 8009a24:	d00a      	beq.n	8009a3c <_scanf_float+0x34c>
 8009a26:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a2a:	463a      	mov	r2, r7
 8009a2c:	4640      	mov	r0, r8
 8009a2e:	4798      	blx	r3
 8009a30:	6923      	ldr	r3, [r4, #16]
 8009a32:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009a36:	3b01      	subs	r3, #1
 8009a38:	1eb5      	subs	r5, r6, #2
 8009a3a:	6123      	str	r3, [r4, #16]
 8009a3c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a40:	463a      	mov	r2, r7
 8009a42:	4640      	mov	r0, r8
 8009a44:	4798      	blx	r3
 8009a46:	462e      	mov	r6, r5
 8009a48:	6825      	ldr	r5, [r4, #0]
 8009a4a:	f015 0510 	ands.w	r5, r5, #16
 8009a4e:	d155      	bne.n	8009afc <_scanf_float+0x40c>
 8009a50:	7035      	strb	r5, [r6, #0]
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a5c:	d11d      	bne.n	8009a9a <_scanf_float+0x3aa>
 8009a5e:	9b01      	ldr	r3, [sp, #4]
 8009a60:	454b      	cmp	r3, r9
 8009a62:	eba3 0209 	sub.w	r2, r3, r9
 8009a66:	d125      	bne.n	8009ab4 <_scanf_float+0x3c4>
 8009a68:	2200      	movs	r2, #0
 8009a6a:	4659      	mov	r1, fp
 8009a6c:	4640      	mov	r0, r8
 8009a6e:	f002 fc33 	bl	800c2d8 <_strtod_r>
 8009a72:	9b03      	ldr	r3, [sp, #12]
 8009a74:	f8d4 c000 	ldr.w	ip, [r4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f01c 0f02 	tst.w	ip, #2
 8009a7e:	4606      	mov	r6, r0
 8009a80:	460f      	mov	r7, r1
 8009a82:	f103 0204 	add.w	r2, r3, #4
 8009a86:	d020      	beq.n	8009aca <_scanf_float+0x3da>
 8009a88:	9903      	ldr	r1, [sp, #12]
 8009a8a:	600a      	str	r2, [r1, #0]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	e9c3 6700 	strd	r6, r7, [r3]
 8009a92:	68e3      	ldr	r3, [r4, #12]
 8009a94:	3301      	adds	r3, #1
 8009a96:	60e3      	str	r3, [r4, #12]
 8009a98:	e66b      	b.n	8009772 <_scanf_float+0x82>
 8009a9a:	9b04      	ldr	r3, [sp, #16]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d0e3      	beq.n	8009a68 <_scanf_float+0x378>
 8009aa0:	9905      	ldr	r1, [sp, #20]
 8009aa2:	230a      	movs	r3, #10
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	3101      	adds	r1, #1
 8009aa8:	4640      	mov	r0, r8
 8009aaa:	f002 fc99 	bl	800c3e0 <_strtol_r>
 8009aae:	9b04      	ldr	r3, [sp, #16]
 8009ab0:	9e05      	ldr	r6, [sp, #20]
 8009ab2:	1ac2      	subs	r2, r0, r3
 8009ab4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009ab8:	429e      	cmp	r6, r3
 8009aba:	bf28      	it	cs
 8009abc:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009ac0:	490f      	ldr	r1, [pc, #60]	; (8009b00 <_scanf_float+0x410>)
 8009ac2:	4630      	mov	r0, r6
 8009ac4:	f000 f8e2 	bl	8009c8c <siprintf>
 8009ac8:	e7ce      	b.n	8009a68 <_scanf_float+0x378>
 8009aca:	f01c 0f04 	tst.w	ip, #4
 8009ace:	d1db      	bne.n	8009a88 <_scanf_float+0x398>
 8009ad0:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8009ad4:	f8cc 2000 	str.w	r2, [ip]
 8009ad8:	f8d3 8000 	ldr.w	r8, [r3]
 8009adc:	4602      	mov	r2, r0
 8009ade:	460b      	mov	r3, r1
 8009ae0:	f7f6 fffc 	bl	8000adc <__aeabi_dcmpun>
 8009ae4:	b128      	cbz	r0, 8009af2 <_scanf_float+0x402>
 8009ae6:	4807      	ldr	r0, [pc, #28]	; (8009b04 <_scanf_float+0x414>)
 8009ae8:	f000 f9c2 	bl	8009e70 <nanf>
 8009aec:	f8c8 0000 	str.w	r0, [r8]
 8009af0:	e7cf      	b.n	8009a92 <_scanf_float+0x3a2>
 8009af2:	4630      	mov	r0, r6
 8009af4:	4639      	mov	r1, r7
 8009af6:	f7f7 f84f 	bl	8000b98 <__aeabi_d2f>
 8009afa:	e7f7      	b.n	8009aec <_scanf_float+0x3fc>
 8009afc:	2500      	movs	r5, #0
 8009afe:	e638      	b.n	8009772 <_scanf_float+0x82>
 8009b00:	0800df26 	.word	0x0800df26
 8009b04:	0800df66 	.word	0x0800df66

08009b08 <std>:
 8009b08:	2300      	movs	r3, #0
 8009b0a:	b510      	push	{r4, lr}
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	e9c0 3300 	strd	r3, r3, [r0]
 8009b12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b16:	6083      	str	r3, [r0, #8]
 8009b18:	8181      	strh	r1, [r0, #12]
 8009b1a:	6643      	str	r3, [r0, #100]	; 0x64
 8009b1c:	81c2      	strh	r2, [r0, #14]
 8009b1e:	6183      	str	r3, [r0, #24]
 8009b20:	4619      	mov	r1, r3
 8009b22:	2208      	movs	r2, #8
 8009b24:	305c      	adds	r0, #92	; 0x5c
 8009b26:	f000 f914 	bl	8009d52 <memset>
 8009b2a:	4b0d      	ldr	r3, [pc, #52]	; (8009b60 <std+0x58>)
 8009b2c:	6263      	str	r3, [r4, #36]	; 0x24
 8009b2e:	4b0d      	ldr	r3, [pc, #52]	; (8009b64 <std+0x5c>)
 8009b30:	62a3      	str	r3, [r4, #40]	; 0x28
 8009b32:	4b0d      	ldr	r3, [pc, #52]	; (8009b68 <std+0x60>)
 8009b34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009b36:	4b0d      	ldr	r3, [pc, #52]	; (8009b6c <std+0x64>)
 8009b38:	6323      	str	r3, [r4, #48]	; 0x30
 8009b3a:	4b0d      	ldr	r3, [pc, #52]	; (8009b70 <std+0x68>)
 8009b3c:	6224      	str	r4, [r4, #32]
 8009b3e:	429c      	cmp	r4, r3
 8009b40:	d006      	beq.n	8009b50 <std+0x48>
 8009b42:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009b46:	4294      	cmp	r4, r2
 8009b48:	d002      	beq.n	8009b50 <std+0x48>
 8009b4a:	33d0      	adds	r3, #208	; 0xd0
 8009b4c:	429c      	cmp	r4, r3
 8009b4e:	d105      	bne.n	8009b5c <std+0x54>
 8009b50:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009b58:	f000 b978 	b.w	8009e4c <__retarget_lock_init_recursive>
 8009b5c:	bd10      	pop	{r4, pc}
 8009b5e:	bf00      	nop
 8009b60:	08009ccd 	.word	0x08009ccd
 8009b64:	08009cef 	.word	0x08009cef
 8009b68:	08009d27 	.word	0x08009d27
 8009b6c:	08009d4b 	.word	0x08009d4b
 8009b70:	200009b4 	.word	0x200009b4

08009b74 <stdio_exit_handler>:
 8009b74:	4a02      	ldr	r2, [pc, #8]	; (8009b80 <stdio_exit_handler+0xc>)
 8009b76:	4903      	ldr	r1, [pc, #12]	; (8009b84 <stdio_exit_handler+0x10>)
 8009b78:	4803      	ldr	r0, [pc, #12]	; (8009b88 <stdio_exit_handler+0x14>)
 8009b7a:	f000 b869 	b.w	8009c50 <_fwalk_sglue>
 8009b7e:	bf00      	nop
 8009b80:	20000018 	.word	0x20000018
 8009b84:	0800c799 	.word	0x0800c799
 8009b88:	20000024 	.word	0x20000024

08009b8c <cleanup_stdio>:
 8009b8c:	6841      	ldr	r1, [r0, #4]
 8009b8e:	4b0c      	ldr	r3, [pc, #48]	; (8009bc0 <cleanup_stdio+0x34>)
 8009b90:	4299      	cmp	r1, r3
 8009b92:	b510      	push	{r4, lr}
 8009b94:	4604      	mov	r4, r0
 8009b96:	d001      	beq.n	8009b9c <cleanup_stdio+0x10>
 8009b98:	f002 fdfe 	bl	800c798 <_fflush_r>
 8009b9c:	68a1      	ldr	r1, [r4, #8]
 8009b9e:	4b09      	ldr	r3, [pc, #36]	; (8009bc4 <cleanup_stdio+0x38>)
 8009ba0:	4299      	cmp	r1, r3
 8009ba2:	d002      	beq.n	8009baa <cleanup_stdio+0x1e>
 8009ba4:	4620      	mov	r0, r4
 8009ba6:	f002 fdf7 	bl	800c798 <_fflush_r>
 8009baa:	68e1      	ldr	r1, [r4, #12]
 8009bac:	4b06      	ldr	r3, [pc, #24]	; (8009bc8 <cleanup_stdio+0x3c>)
 8009bae:	4299      	cmp	r1, r3
 8009bb0:	d004      	beq.n	8009bbc <cleanup_stdio+0x30>
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bb8:	f002 bdee 	b.w	800c798 <_fflush_r>
 8009bbc:	bd10      	pop	{r4, pc}
 8009bbe:	bf00      	nop
 8009bc0:	200009b4 	.word	0x200009b4
 8009bc4:	20000a1c 	.word	0x20000a1c
 8009bc8:	20000a84 	.word	0x20000a84

08009bcc <global_stdio_init.part.0>:
 8009bcc:	b510      	push	{r4, lr}
 8009bce:	4b0b      	ldr	r3, [pc, #44]	; (8009bfc <global_stdio_init.part.0+0x30>)
 8009bd0:	4c0b      	ldr	r4, [pc, #44]	; (8009c00 <global_stdio_init.part.0+0x34>)
 8009bd2:	4a0c      	ldr	r2, [pc, #48]	; (8009c04 <global_stdio_init.part.0+0x38>)
 8009bd4:	601a      	str	r2, [r3, #0]
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2104      	movs	r1, #4
 8009bdc:	f7ff ff94 	bl	8009b08 <std>
 8009be0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009be4:	2201      	movs	r2, #1
 8009be6:	2109      	movs	r1, #9
 8009be8:	f7ff ff8e 	bl	8009b08 <std>
 8009bec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009bf0:	2202      	movs	r2, #2
 8009bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bf6:	2112      	movs	r1, #18
 8009bf8:	f7ff bf86 	b.w	8009b08 <std>
 8009bfc:	20000aec 	.word	0x20000aec
 8009c00:	200009b4 	.word	0x200009b4
 8009c04:	08009b75 	.word	0x08009b75

08009c08 <__sfp_lock_acquire>:
 8009c08:	4801      	ldr	r0, [pc, #4]	; (8009c10 <__sfp_lock_acquire+0x8>)
 8009c0a:	f000 b920 	b.w	8009e4e <__retarget_lock_acquire_recursive>
 8009c0e:	bf00      	nop
 8009c10:	20000af5 	.word	0x20000af5

08009c14 <__sfp_lock_release>:
 8009c14:	4801      	ldr	r0, [pc, #4]	; (8009c1c <__sfp_lock_release+0x8>)
 8009c16:	f000 b91b 	b.w	8009e50 <__retarget_lock_release_recursive>
 8009c1a:	bf00      	nop
 8009c1c:	20000af5 	.word	0x20000af5

08009c20 <__sinit>:
 8009c20:	b510      	push	{r4, lr}
 8009c22:	4604      	mov	r4, r0
 8009c24:	f7ff fff0 	bl	8009c08 <__sfp_lock_acquire>
 8009c28:	6a23      	ldr	r3, [r4, #32]
 8009c2a:	b11b      	cbz	r3, 8009c34 <__sinit+0x14>
 8009c2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c30:	f7ff bff0 	b.w	8009c14 <__sfp_lock_release>
 8009c34:	4b04      	ldr	r3, [pc, #16]	; (8009c48 <__sinit+0x28>)
 8009c36:	6223      	str	r3, [r4, #32]
 8009c38:	4b04      	ldr	r3, [pc, #16]	; (8009c4c <__sinit+0x2c>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1f5      	bne.n	8009c2c <__sinit+0xc>
 8009c40:	f7ff ffc4 	bl	8009bcc <global_stdio_init.part.0>
 8009c44:	e7f2      	b.n	8009c2c <__sinit+0xc>
 8009c46:	bf00      	nop
 8009c48:	08009b8d 	.word	0x08009b8d
 8009c4c:	20000aec 	.word	0x20000aec

08009c50 <_fwalk_sglue>:
 8009c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c54:	4607      	mov	r7, r0
 8009c56:	4688      	mov	r8, r1
 8009c58:	4614      	mov	r4, r2
 8009c5a:	2600      	movs	r6, #0
 8009c5c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009c60:	f1b9 0901 	subs.w	r9, r9, #1
 8009c64:	d505      	bpl.n	8009c72 <_fwalk_sglue+0x22>
 8009c66:	6824      	ldr	r4, [r4, #0]
 8009c68:	2c00      	cmp	r4, #0
 8009c6a:	d1f7      	bne.n	8009c5c <_fwalk_sglue+0xc>
 8009c6c:	4630      	mov	r0, r6
 8009c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c72:	89ab      	ldrh	r3, [r5, #12]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d907      	bls.n	8009c88 <_fwalk_sglue+0x38>
 8009c78:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	d003      	beq.n	8009c88 <_fwalk_sglue+0x38>
 8009c80:	4629      	mov	r1, r5
 8009c82:	4638      	mov	r0, r7
 8009c84:	47c0      	blx	r8
 8009c86:	4306      	orrs	r6, r0
 8009c88:	3568      	adds	r5, #104	; 0x68
 8009c8a:	e7e9      	b.n	8009c60 <_fwalk_sglue+0x10>

08009c8c <siprintf>:
 8009c8c:	b40e      	push	{r1, r2, r3}
 8009c8e:	b500      	push	{lr}
 8009c90:	b09c      	sub	sp, #112	; 0x70
 8009c92:	ab1d      	add	r3, sp, #116	; 0x74
 8009c94:	9002      	str	r0, [sp, #8]
 8009c96:	9006      	str	r0, [sp, #24]
 8009c98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c9c:	4809      	ldr	r0, [pc, #36]	; (8009cc4 <siprintf+0x38>)
 8009c9e:	9107      	str	r1, [sp, #28]
 8009ca0:	9104      	str	r1, [sp, #16]
 8009ca2:	4909      	ldr	r1, [pc, #36]	; (8009cc8 <siprintf+0x3c>)
 8009ca4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ca8:	9105      	str	r1, [sp, #20]
 8009caa:	6800      	ldr	r0, [r0, #0]
 8009cac:	9301      	str	r3, [sp, #4]
 8009cae:	a902      	add	r1, sp, #8
 8009cb0:	f002 fbf2 	bl	800c498 <_svfiprintf_r>
 8009cb4:	9b02      	ldr	r3, [sp, #8]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	701a      	strb	r2, [r3, #0]
 8009cba:	b01c      	add	sp, #112	; 0x70
 8009cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cc0:	b003      	add	sp, #12
 8009cc2:	4770      	bx	lr
 8009cc4:	20000070 	.word	0x20000070
 8009cc8:	ffff0208 	.word	0xffff0208

08009ccc <__sread>:
 8009ccc:	b510      	push	{r4, lr}
 8009cce:	460c      	mov	r4, r1
 8009cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cd4:	f000 f86c 	bl	8009db0 <_read_r>
 8009cd8:	2800      	cmp	r0, #0
 8009cda:	bfab      	itete	ge
 8009cdc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cde:	89a3      	ldrhlt	r3, [r4, #12]
 8009ce0:	181b      	addge	r3, r3, r0
 8009ce2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009ce6:	bfac      	ite	ge
 8009ce8:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cea:	81a3      	strhlt	r3, [r4, #12]
 8009cec:	bd10      	pop	{r4, pc}

08009cee <__swrite>:
 8009cee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cf2:	461f      	mov	r7, r3
 8009cf4:	898b      	ldrh	r3, [r1, #12]
 8009cf6:	05db      	lsls	r3, r3, #23
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	460c      	mov	r4, r1
 8009cfc:	4616      	mov	r6, r2
 8009cfe:	d505      	bpl.n	8009d0c <__swrite+0x1e>
 8009d00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d04:	2302      	movs	r3, #2
 8009d06:	2200      	movs	r2, #0
 8009d08:	f000 f840 	bl	8009d8c <_lseek_r>
 8009d0c:	89a3      	ldrh	r3, [r4, #12]
 8009d0e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d12:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d16:	81a3      	strh	r3, [r4, #12]
 8009d18:	4632      	mov	r2, r6
 8009d1a:	463b      	mov	r3, r7
 8009d1c:	4628      	mov	r0, r5
 8009d1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d22:	f000 b857 	b.w	8009dd4 <_write_r>

08009d26 <__sseek>:
 8009d26:	b510      	push	{r4, lr}
 8009d28:	460c      	mov	r4, r1
 8009d2a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d2e:	f000 f82d 	bl	8009d8c <_lseek_r>
 8009d32:	1c43      	adds	r3, r0, #1
 8009d34:	89a3      	ldrh	r3, [r4, #12]
 8009d36:	bf15      	itete	ne
 8009d38:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d3a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d3e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d42:	81a3      	strheq	r3, [r4, #12]
 8009d44:	bf18      	it	ne
 8009d46:	81a3      	strhne	r3, [r4, #12]
 8009d48:	bd10      	pop	{r4, pc}

08009d4a <__sclose>:
 8009d4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d4e:	f000 b80d 	b.w	8009d6c <_close_r>

08009d52 <memset>:
 8009d52:	4402      	add	r2, r0
 8009d54:	4603      	mov	r3, r0
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d100      	bne.n	8009d5c <memset+0xa>
 8009d5a:	4770      	bx	lr
 8009d5c:	f803 1b01 	strb.w	r1, [r3], #1
 8009d60:	e7f9      	b.n	8009d56 <memset+0x4>
	...

08009d64 <_localeconv_r>:
 8009d64:	4800      	ldr	r0, [pc, #0]	; (8009d68 <_localeconv_r+0x4>)
 8009d66:	4770      	bx	lr
 8009d68:	20000164 	.word	0x20000164

08009d6c <_close_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4d06      	ldr	r5, [pc, #24]	; (8009d88 <_close_r+0x1c>)
 8009d70:	2300      	movs	r3, #0
 8009d72:	4604      	mov	r4, r0
 8009d74:	4608      	mov	r0, r1
 8009d76:	602b      	str	r3, [r5, #0]
 8009d78:	f7f7 fc7c 	bl	8001674 <_close>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_close_r+0x1a>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_close_r+0x1a>
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	20000af0 	.word	0x20000af0

08009d8c <_lseek_r>:
 8009d8c:	b538      	push	{r3, r4, r5, lr}
 8009d8e:	4d07      	ldr	r5, [pc, #28]	; (8009dac <_lseek_r+0x20>)
 8009d90:	4604      	mov	r4, r0
 8009d92:	4608      	mov	r0, r1
 8009d94:	4611      	mov	r1, r2
 8009d96:	2200      	movs	r2, #0
 8009d98:	602a      	str	r2, [r5, #0]
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f7f7 fc74 	bl	8001688 <_lseek>
 8009da0:	1c43      	adds	r3, r0, #1
 8009da2:	d102      	bne.n	8009daa <_lseek_r+0x1e>
 8009da4:	682b      	ldr	r3, [r5, #0]
 8009da6:	b103      	cbz	r3, 8009daa <_lseek_r+0x1e>
 8009da8:	6023      	str	r3, [r4, #0]
 8009daa:	bd38      	pop	{r3, r4, r5, pc}
 8009dac:	20000af0 	.word	0x20000af0

08009db0 <_read_r>:
 8009db0:	b538      	push	{r3, r4, r5, lr}
 8009db2:	4d07      	ldr	r5, [pc, #28]	; (8009dd0 <_read_r+0x20>)
 8009db4:	4604      	mov	r4, r0
 8009db6:	4608      	mov	r0, r1
 8009db8:	4611      	mov	r1, r2
 8009dba:	2200      	movs	r2, #0
 8009dbc:	602a      	str	r2, [r5, #0]
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	f7f7 fc3a 	bl	8001638 <_read>
 8009dc4:	1c43      	adds	r3, r0, #1
 8009dc6:	d102      	bne.n	8009dce <_read_r+0x1e>
 8009dc8:	682b      	ldr	r3, [r5, #0]
 8009dca:	b103      	cbz	r3, 8009dce <_read_r+0x1e>
 8009dcc:	6023      	str	r3, [r4, #0]
 8009dce:	bd38      	pop	{r3, r4, r5, pc}
 8009dd0:	20000af0 	.word	0x20000af0

08009dd4 <_write_r>:
 8009dd4:	b538      	push	{r3, r4, r5, lr}
 8009dd6:	4d07      	ldr	r5, [pc, #28]	; (8009df4 <_write_r+0x20>)
 8009dd8:	4604      	mov	r4, r0
 8009dda:	4608      	mov	r0, r1
 8009ddc:	4611      	mov	r1, r2
 8009dde:	2200      	movs	r2, #0
 8009de0:	602a      	str	r2, [r5, #0]
 8009de2:	461a      	mov	r2, r3
 8009de4:	f7f7 fc38 	bl	8001658 <_write>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_write_r+0x1e>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_write_r+0x1e>
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	20000af0 	.word	0x20000af0

08009df8 <__errno>:
 8009df8:	4b01      	ldr	r3, [pc, #4]	; (8009e00 <__errno+0x8>)
 8009dfa:	6818      	ldr	r0, [r3, #0]
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop
 8009e00:	20000070 	.word	0x20000070

08009e04 <__libc_init_array>:
 8009e04:	b570      	push	{r4, r5, r6, lr}
 8009e06:	4d0d      	ldr	r5, [pc, #52]	; (8009e3c <__libc_init_array+0x38>)
 8009e08:	4c0d      	ldr	r4, [pc, #52]	; (8009e40 <__libc_init_array+0x3c>)
 8009e0a:	1b64      	subs	r4, r4, r5
 8009e0c:	10a4      	asrs	r4, r4, #2
 8009e0e:	2600      	movs	r6, #0
 8009e10:	42a6      	cmp	r6, r4
 8009e12:	d109      	bne.n	8009e28 <__libc_init_array+0x24>
 8009e14:	4d0b      	ldr	r5, [pc, #44]	; (8009e44 <__libc_init_array+0x40>)
 8009e16:	4c0c      	ldr	r4, [pc, #48]	; (8009e48 <__libc_init_array+0x44>)
 8009e18:	f003 fba2 	bl	800d560 <_init>
 8009e1c:	1b64      	subs	r4, r4, r5
 8009e1e:	10a4      	asrs	r4, r4, #2
 8009e20:	2600      	movs	r6, #0
 8009e22:	42a6      	cmp	r6, r4
 8009e24:	d105      	bne.n	8009e32 <__libc_init_array+0x2e>
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e2c:	4798      	blx	r3
 8009e2e:	3601      	adds	r6, #1
 8009e30:	e7ee      	b.n	8009e10 <__libc_init_array+0xc>
 8009e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8009e36:	4798      	blx	r3
 8009e38:	3601      	adds	r6, #1
 8009e3a:	e7f2      	b.n	8009e22 <__libc_init_array+0x1e>
 8009e3c:	0800e310 	.word	0x0800e310
 8009e40:	0800e310 	.word	0x0800e310
 8009e44:	0800e310 	.word	0x0800e310
 8009e48:	0800e314 	.word	0x0800e314

08009e4c <__retarget_lock_init_recursive>:
 8009e4c:	4770      	bx	lr

08009e4e <__retarget_lock_acquire_recursive>:
 8009e4e:	4770      	bx	lr

08009e50 <__retarget_lock_release_recursive>:
 8009e50:	4770      	bx	lr

08009e52 <memcpy>:
 8009e52:	440a      	add	r2, r1
 8009e54:	4291      	cmp	r1, r2
 8009e56:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e5a:	d100      	bne.n	8009e5e <memcpy+0xc>
 8009e5c:	4770      	bx	lr
 8009e5e:	b510      	push	{r4, lr}
 8009e60:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e64:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e68:	4291      	cmp	r1, r2
 8009e6a:	d1f9      	bne.n	8009e60 <memcpy+0xe>
 8009e6c:	bd10      	pop	{r4, pc}
	...

08009e70 <nanf>:
 8009e70:	4800      	ldr	r0, [pc, #0]	; (8009e74 <nanf+0x4>)
 8009e72:	4770      	bx	lr
 8009e74:	7fc00000 	.word	0x7fc00000

08009e78 <__assert_func>:
 8009e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e7a:	4614      	mov	r4, r2
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	4b09      	ldr	r3, [pc, #36]	; (8009ea4 <__assert_func+0x2c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4605      	mov	r5, r0
 8009e84:	68d8      	ldr	r0, [r3, #12]
 8009e86:	b14c      	cbz	r4, 8009e9c <__assert_func+0x24>
 8009e88:	4b07      	ldr	r3, [pc, #28]	; (8009ea8 <__assert_func+0x30>)
 8009e8a:	9100      	str	r1, [sp, #0]
 8009e8c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e90:	4906      	ldr	r1, [pc, #24]	; (8009eac <__assert_func+0x34>)
 8009e92:	462b      	mov	r3, r5
 8009e94:	f002 fca8 	bl	800c7e8 <fiprintf>
 8009e98:	f002 fcfa 	bl	800c890 <abort>
 8009e9c:	4b04      	ldr	r3, [pc, #16]	; (8009eb0 <__assert_func+0x38>)
 8009e9e:	461c      	mov	r4, r3
 8009ea0:	e7f3      	b.n	8009e8a <__assert_func+0x12>
 8009ea2:	bf00      	nop
 8009ea4:	20000070 	.word	0x20000070
 8009ea8:	0800df2b 	.word	0x0800df2b
 8009eac:	0800df38 	.word	0x0800df38
 8009eb0:	0800df66 	.word	0x0800df66

08009eb4 <quorem>:
 8009eb4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb8:	6903      	ldr	r3, [r0, #16]
 8009eba:	690c      	ldr	r4, [r1, #16]
 8009ebc:	42a3      	cmp	r3, r4
 8009ebe:	4607      	mov	r7, r0
 8009ec0:	db7b      	blt.n	8009fba <quorem+0x106>
 8009ec2:	3c01      	subs	r4, #1
 8009ec4:	f101 0814 	add.w	r8, r1, #20
 8009ec8:	f100 0514 	add.w	r5, r0, #20
 8009ecc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ed0:	9301      	str	r3, [sp, #4]
 8009ed2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ed6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009eda:	3301      	adds	r3, #1
 8009edc:	429a      	cmp	r2, r3
 8009ede:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009ee2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009ee6:	fbb2 f6f3 	udiv	r6, r2, r3
 8009eea:	d32e      	bcc.n	8009f4a <quorem+0x96>
 8009eec:	f04f 0e00 	mov.w	lr, #0
 8009ef0:	4640      	mov	r0, r8
 8009ef2:	46ac      	mov	ip, r5
 8009ef4:	46f2      	mov	sl, lr
 8009ef6:	f850 2b04 	ldr.w	r2, [r0], #4
 8009efa:	b293      	uxth	r3, r2
 8009efc:	fb06 e303 	mla	r3, r6, r3, lr
 8009f00:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f04:	0c1a      	lsrs	r2, r3, #16
 8009f06:	b29b      	uxth	r3, r3
 8009f08:	fb06 220e 	mla	r2, r6, lr, r2
 8009f0c:	ebaa 0303 	sub.w	r3, sl, r3
 8009f10:	f8dc a000 	ldr.w	sl, [ip]
 8009f14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f18:	b292      	uxth	r2, r2
 8009f1a:	fa13 f38a 	uxtah	r3, r3, sl
 8009f1e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f2c:	4581      	cmp	r9, r0
 8009f2e:	f84c 3b04 	str.w	r3, [ip], #4
 8009f32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009f36:	d2de      	bcs.n	8009ef6 <quorem+0x42>
 8009f38:	f855 300b 	ldr.w	r3, [r5, fp]
 8009f3c:	b92b      	cbnz	r3, 8009f4a <quorem+0x96>
 8009f3e:	9b01      	ldr	r3, [sp, #4]
 8009f40:	3b04      	subs	r3, #4
 8009f42:	429d      	cmp	r5, r3
 8009f44:	461a      	mov	r2, r3
 8009f46:	d32c      	bcc.n	8009fa2 <quorem+0xee>
 8009f48:	613c      	str	r4, [r7, #16]
 8009f4a:	4638      	mov	r0, r7
 8009f4c:	f001 f9dc 	bl	800b308 <__mcmp>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	db22      	blt.n	8009f9a <quorem+0xe6>
 8009f54:	3601      	adds	r6, #1
 8009f56:	4629      	mov	r1, r5
 8009f58:	2000      	movs	r0, #0
 8009f5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8009f5e:	f8d1 c000 	ldr.w	ip, [r1]
 8009f62:	b293      	uxth	r3, r2
 8009f64:	1ac3      	subs	r3, r0, r3
 8009f66:	0c12      	lsrs	r2, r2, #16
 8009f68:	fa13 f38c 	uxtah	r3, r3, ip
 8009f6c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009f70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009f74:	b29b      	uxth	r3, r3
 8009f76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009f7a:	45c1      	cmp	r9, r8
 8009f7c:	f841 3b04 	str.w	r3, [r1], #4
 8009f80:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009f84:	d2e9      	bcs.n	8009f5a <quorem+0xa6>
 8009f86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f8e:	b922      	cbnz	r2, 8009f9a <quorem+0xe6>
 8009f90:	3b04      	subs	r3, #4
 8009f92:	429d      	cmp	r5, r3
 8009f94:	461a      	mov	r2, r3
 8009f96:	d30a      	bcc.n	8009fae <quorem+0xfa>
 8009f98:	613c      	str	r4, [r7, #16]
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	b003      	add	sp, #12
 8009f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fa2:	6812      	ldr	r2, [r2, #0]
 8009fa4:	3b04      	subs	r3, #4
 8009fa6:	2a00      	cmp	r2, #0
 8009fa8:	d1ce      	bne.n	8009f48 <quorem+0x94>
 8009faa:	3c01      	subs	r4, #1
 8009fac:	e7c9      	b.n	8009f42 <quorem+0x8e>
 8009fae:	6812      	ldr	r2, [r2, #0]
 8009fb0:	3b04      	subs	r3, #4
 8009fb2:	2a00      	cmp	r2, #0
 8009fb4:	d1f0      	bne.n	8009f98 <quorem+0xe4>
 8009fb6:	3c01      	subs	r4, #1
 8009fb8:	e7eb      	b.n	8009f92 <quorem+0xde>
 8009fba:	2000      	movs	r0, #0
 8009fbc:	e7ee      	b.n	8009f9c <quorem+0xe8>
	...

08009fc0 <_dtoa_r>:
 8009fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	69c4      	ldr	r4, [r0, #28]
 8009fc6:	b099      	sub	sp, #100	; 0x64
 8009fc8:	4616      	mov	r6, r2
 8009fca:	461f      	mov	r7, r3
 8009fcc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8009fd0:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8009fd4:	4605      	mov	r5, r0
 8009fd6:	b974      	cbnz	r4, 8009ff6 <_dtoa_r+0x36>
 8009fd8:	2010      	movs	r0, #16
 8009fda:	f000 fe1b 	bl	800ac14 <malloc>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	61e8      	str	r0, [r5, #28]
 8009fe2:	b920      	cbnz	r0, 8009fee <_dtoa_r+0x2e>
 8009fe4:	4baa      	ldr	r3, [pc, #680]	; (800a290 <_dtoa_r+0x2d0>)
 8009fe6:	21ef      	movs	r1, #239	; 0xef
 8009fe8:	48aa      	ldr	r0, [pc, #680]	; (800a294 <_dtoa_r+0x2d4>)
 8009fea:	f7ff ff45 	bl	8009e78 <__assert_func>
 8009fee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ff2:	6004      	str	r4, [r0, #0]
 8009ff4:	60c4      	str	r4, [r0, #12]
 8009ff6:	69eb      	ldr	r3, [r5, #28]
 8009ff8:	6819      	ldr	r1, [r3, #0]
 8009ffa:	b151      	cbz	r1, 800a012 <_dtoa_r+0x52>
 8009ffc:	685a      	ldr	r2, [r3, #4]
 8009ffe:	604a      	str	r2, [r1, #4]
 800a000:	2301      	movs	r3, #1
 800a002:	4093      	lsls	r3, r2
 800a004:	608b      	str	r3, [r1, #8]
 800a006:	4628      	mov	r0, r5
 800a008:	f000 fef8 	bl	800adfc <_Bfree>
 800a00c:	69eb      	ldr	r3, [r5, #28]
 800a00e:	2200      	movs	r2, #0
 800a010:	601a      	str	r2, [r3, #0]
 800a012:	1e3b      	subs	r3, r7, #0
 800a014:	bfb9      	ittee	lt
 800a016:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a01a:	9305      	strlt	r3, [sp, #20]
 800a01c:	2300      	movge	r3, #0
 800a01e:	f8c8 3000 	strge.w	r3, [r8]
 800a022:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800a026:	4b9c      	ldr	r3, [pc, #624]	; (800a298 <_dtoa_r+0x2d8>)
 800a028:	bfbc      	itt	lt
 800a02a:	2201      	movlt	r2, #1
 800a02c:	f8c8 2000 	strlt.w	r2, [r8]
 800a030:	ea33 0309 	bics.w	r3, r3, r9
 800a034:	d119      	bne.n	800a06a <_dtoa_r+0xaa>
 800a036:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a038:	f242 730f 	movw	r3, #9999	; 0x270f
 800a03c:	6013      	str	r3, [r2, #0]
 800a03e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a042:	4333      	orrs	r3, r6
 800a044:	f000 8587 	beq.w	800ab56 <_dtoa_r+0xb96>
 800a048:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a04a:	b953      	cbnz	r3, 800a062 <_dtoa_r+0xa2>
 800a04c:	4b93      	ldr	r3, [pc, #588]	; (800a29c <_dtoa_r+0x2dc>)
 800a04e:	e023      	b.n	800a098 <_dtoa_r+0xd8>
 800a050:	4b93      	ldr	r3, [pc, #588]	; (800a2a0 <_dtoa_r+0x2e0>)
 800a052:	9303      	str	r3, [sp, #12]
 800a054:	3308      	adds	r3, #8
 800a056:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a058:	6013      	str	r3, [r2, #0]
 800a05a:	9803      	ldr	r0, [sp, #12]
 800a05c:	b019      	add	sp, #100	; 0x64
 800a05e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a062:	4b8e      	ldr	r3, [pc, #568]	; (800a29c <_dtoa_r+0x2dc>)
 800a064:	9303      	str	r3, [sp, #12]
 800a066:	3303      	adds	r3, #3
 800a068:	e7f5      	b.n	800a056 <_dtoa_r+0x96>
 800a06a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a06e:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800a072:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a076:	2200      	movs	r2, #0
 800a078:	2300      	movs	r3, #0
 800a07a:	f7f6 fcfd 	bl	8000a78 <__aeabi_dcmpeq>
 800a07e:	4680      	mov	r8, r0
 800a080:	b160      	cbz	r0, 800a09c <_dtoa_r+0xdc>
 800a082:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a084:	2301      	movs	r3, #1
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	f000 8560 	beq.w	800ab50 <_dtoa_r+0xb90>
 800a090:	4b84      	ldr	r3, [pc, #528]	; (800a2a4 <_dtoa_r+0x2e4>)
 800a092:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a094:	6013      	str	r3, [r2, #0]
 800a096:	3b01      	subs	r3, #1
 800a098:	9303      	str	r3, [sp, #12]
 800a09a:	e7de      	b.n	800a05a <_dtoa_r+0x9a>
 800a09c:	ab16      	add	r3, sp, #88	; 0x58
 800a09e:	9301      	str	r3, [sp, #4]
 800a0a0:	ab17      	add	r3, sp, #92	; 0x5c
 800a0a2:	9300      	str	r3, [sp, #0]
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800a0aa:	f001 fa39 	bl	800b520 <__d2b>
 800a0ae:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a0b2:	4682      	mov	sl, r0
 800a0b4:	2c00      	cmp	r4, #0
 800a0b6:	d07d      	beq.n	800a1b4 <_dtoa_r+0x1f4>
 800a0b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a0ba:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800a0be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a0c6:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a0ca:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a0ce:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800a0d2:	4619      	mov	r1, r3
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	4b74      	ldr	r3, [pc, #464]	; (800a2a8 <_dtoa_r+0x2e8>)
 800a0d8:	f7f6 f8ae 	bl	8000238 <__aeabi_dsub>
 800a0dc:	a366      	add	r3, pc, #408	; (adr r3, 800a278 <_dtoa_r+0x2b8>)
 800a0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e2:	f7f6 fa61 	bl	80005a8 <__aeabi_dmul>
 800a0e6:	a366      	add	r3, pc, #408	; (adr r3, 800a280 <_dtoa_r+0x2c0>)
 800a0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0ec:	f7f6 f8a6 	bl	800023c <__adddf3>
 800a0f0:	4606      	mov	r6, r0
 800a0f2:	4620      	mov	r0, r4
 800a0f4:	460f      	mov	r7, r1
 800a0f6:	f7f6 f9ed 	bl	80004d4 <__aeabi_i2d>
 800a0fa:	a363      	add	r3, pc, #396	; (adr r3, 800a288 <_dtoa_r+0x2c8>)
 800a0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a100:	f7f6 fa52 	bl	80005a8 <__aeabi_dmul>
 800a104:	4602      	mov	r2, r0
 800a106:	460b      	mov	r3, r1
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 f896 	bl	800023c <__adddf3>
 800a110:	4606      	mov	r6, r0
 800a112:	460f      	mov	r7, r1
 800a114:	f7f6 fcf8 	bl	8000b08 <__aeabi_d2iz>
 800a118:	2200      	movs	r2, #0
 800a11a:	4683      	mov	fp, r0
 800a11c:	2300      	movs	r3, #0
 800a11e:	4630      	mov	r0, r6
 800a120:	4639      	mov	r1, r7
 800a122:	f7f6 fcb3 	bl	8000a8c <__aeabi_dcmplt>
 800a126:	b148      	cbz	r0, 800a13c <_dtoa_r+0x17c>
 800a128:	4658      	mov	r0, fp
 800a12a:	f7f6 f9d3 	bl	80004d4 <__aeabi_i2d>
 800a12e:	4632      	mov	r2, r6
 800a130:	463b      	mov	r3, r7
 800a132:	f7f6 fca1 	bl	8000a78 <__aeabi_dcmpeq>
 800a136:	b908      	cbnz	r0, 800a13c <_dtoa_r+0x17c>
 800a138:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a13c:	f1bb 0f16 	cmp.w	fp, #22
 800a140:	d856      	bhi.n	800a1f0 <_dtoa_r+0x230>
 800a142:	4b5a      	ldr	r3, [pc, #360]	; (800a2ac <_dtoa_r+0x2ec>)
 800a144:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a14c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a150:	f7f6 fc9c 	bl	8000a8c <__aeabi_dcmplt>
 800a154:	2800      	cmp	r0, #0
 800a156:	d04d      	beq.n	800a1f4 <_dtoa_r+0x234>
 800a158:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a15c:	2300      	movs	r3, #0
 800a15e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a160:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a162:	1b1b      	subs	r3, r3, r4
 800a164:	1e5a      	subs	r2, r3, #1
 800a166:	bf44      	itt	mi
 800a168:	f1c3 0901 	rsbmi	r9, r3, #1
 800a16c:	2300      	movmi	r3, #0
 800a16e:	9209      	str	r2, [sp, #36]	; 0x24
 800a170:	bf54      	ite	pl
 800a172:	f04f 0900 	movpl.w	r9, #0
 800a176:	9309      	strmi	r3, [sp, #36]	; 0x24
 800a178:	f1bb 0f00 	cmp.w	fp, #0
 800a17c:	db3c      	blt.n	800a1f8 <_dtoa_r+0x238>
 800a17e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a180:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800a184:	445b      	add	r3, fp
 800a186:	9309      	str	r3, [sp, #36]	; 0x24
 800a188:	2300      	movs	r3, #0
 800a18a:	930a      	str	r3, [sp, #40]	; 0x28
 800a18c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a18e:	2b09      	cmp	r3, #9
 800a190:	d866      	bhi.n	800a260 <_dtoa_r+0x2a0>
 800a192:	2b05      	cmp	r3, #5
 800a194:	bfc4      	itt	gt
 800a196:	3b04      	subgt	r3, #4
 800a198:	9322      	strgt	r3, [sp, #136]	; 0x88
 800a19a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a19c:	f1a3 0302 	sub.w	r3, r3, #2
 800a1a0:	bfcc      	ite	gt
 800a1a2:	2400      	movgt	r4, #0
 800a1a4:	2401      	movle	r4, #1
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	f200 8084 	bhi.w	800a2b4 <_dtoa_r+0x2f4>
 800a1ac:	e8df f003 	tbb	[pc, r3]
 800a1b0:	5637392c 	.word	0x5637392c
 800a1b4:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800a1b8:	441c      	add	r4, r3
 800a1ba:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800a1be:	2b20      	cmp	r3, #32
 800a1c0:	bfc1      	itttt	gt
 800a1c2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a1c6:	fa09 f903 	lslgt.w	r9, r9, r3
 800a1ca:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 800a1ce:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a1d2:	bfd6      	itet	le
 800a1d4:	f1c3 0320 	rsble	r3, r3, #32
 800a1d8:	ea49 0003 	orrgt.w	r0, r9, r3
 800a1dc:	fa06 f003 	lslle.w	r0, r6, r3
 800a1e0:	f7f6 f968 	bl	80004b4 <__aeabi_ui2d>
 800a1e4:	2201      	movs	r2, #1
 800a1e6:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a1ea:	3c01      	subs	r4, #1
 800a1ec:	9213      	str	r2, [sp, #76]	; 0x4c
 800a1ee:	e770      	b.n	800a0d2 <_dtoa_r+0x112>
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e7b4      	b.n	800a15e <_dtoa_r+0x19e>
 800a1f4:	900f      	str	r0, [sp, #60]	; 0x3c
 800a1f6:	e7b3      	b.n	800a160 <_dtoa_r+0x1a0>
 800a1f8:	f1cb 0300 	rsb	r3, fp, #0
 800a1fc:	930a      	str	r3, [sp, #40]	; 0x28
 800a1fe:	2300      	movs	r3, #0
 800a200:	eba9 090b 	sub.w	r9, r9, fp
 800a204:	930e      	str	r3, [sp, #56]	; 0x38
 800a206:	e7c1      	b.n	800a18c <_dtoa_r+0x1cc>
 800a208:	2300      	movs	r3, #0
 800a20a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a20c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a20e:	2b00      	cmp	r3, #0
 800a210:	dc53      	bgt.n	800a2ba <_dtoa_r+0x2fa>
 800a212:	2301      	movs	r3, #1
 800a214:	9306      	str	r3, [sp, #24]
 800a216:	9308      	str	r3, [sp, #32]
 800a218:	461a      	mov	r2, r3
 800a21a:	9223      	str	r2, [sp, #140]	; 0x8c
 800a21c:	e00b      	b.n	800a236 <_dtoa_r+0x276>
 800a21e:	2301      	movs	r3, #1
 800a220:	e7f3      	b.n	800a20a <_dtoa_r+0x24a>
 800a222:	2300      	movs	r3, #0
 800a224:	930b      	str	r3, [sp, #44]	; 0x2c
 800a226:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a228:	445b      	add	r3, fp
 800a22a:	9306      	str	r3, [sp, #24]
 800a22c:	3301      	adds	r3, #1
 800a22e:	2b01      	cmp	r3, #1
 800a230:	9308      	str	r3, [sp, #32]
 800a232:	bfb8      	it	lt
 800a234:	2301      	movlt	r3, #1
 800a236:	69e8      	ldr	r0, [r5, #28]
 800a238:	2100      	movs	r1, #0
 800a23a:	2204      	movs	r2, #4
 800a23c:	f102 0614 	add.w	r6, r2, #20
 800a240:	429e      	cmp	r6, r3
 800a242:	d93e      	bls.n	800a2c2 <_dtoa_r+0x302>
 800a244:	6041      	str	r1, [r0, #4]
 800a246:	4628      	mov	r0, r5
 800a248:	f000 fd98 	bl	800ad7c <_Balloc>
 800a24c:	9003      	str	r0, [sp, #12]
 800a24e:	2800      	cmp	r0, #0
 800a250:	d13a      	bne.n	800a2c8 <_dtoa_r+0x308>
 800a252:	4b17      	ldr	r3, [pc, #92]	; (800a2b0 <_dtoa_r+0x2f0>)
 800a254:	4602      	mov	r2, r0
 800a256:	f240 11af 	movw	r1, #431	; 0x1af
 800a25a:	e6c5      	b.n	8009fe8 <_dtoa_r+0x28>
 800a25c:	2301      	movs	r3, #1
 800a25e:	e7e1      	b.n	800a224 <_dtoa_r+0x264>
 800a260:	2401      	movs	r4, #1
 800a262:	2300      	movs	r3, #0
 800a264:	9322      	str	r3, [sp, #136]	; 0x88
 800a266:	940b      	str	r4, [sp, #44]	; 0x2c
 800a268:	f04f 33ff 	mov.w	r3, #4294967295
 800a26c:	9306      	str	r3, [sp, #24]
 800a26e:	9308      	str	r3, [sp, #32]
 800a270:	2200      	movs	r2, #0
 800a272:	2312      	movs	r3, #18
 800a274:	e7d1      	b.n	800a21a <_dtoa_r+0x25a>
 800a276:	bf00      	nop
 800a278:	636f4361 	.word	0x636f4361
 800a27c:	3fd287a7 	.word	0x3fd287a7
 800a280:	8b60c8b3 	.word	0x8b60c8b3
 800a284:	3fc68a28 	.word	0x3fc68a28
 800a288:	509f79fb 	.word	0x509f79fb
 800a28c:	3fd34413 	.word	0x3fd34413
 800a290:	0800de83 	.word	0x0800de83
 800a294:	0800df74 	.word	0x0800df74
 800a298:	7ff00000 	.word	0x7ff00000
 800a29c:	0800df70 	.word	0x0800df70
 800a2a0:	0800df67 	.word	0x0800df67
 800a2a4:	0800df03 	.word	0x0800df03
 800a2a8:	3ff80000 	.word	0x3ff80000
 800a2ac:	0800e060 	.word	0x0800e060
 800a2b0:	0800dfcc 	.word	0x0800dfcc
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2b8:	e7d6      	b.n	800a268 <_dtoa_r+0x2a8>
 800a2ba:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a2bc:	9306      	str	r3, [sp, #24]
 800a2be:	9308      	str	r3, [sp, #32]
 800a2c0:	e7b9      	b.n	800a236 <_dtoa_r+0x276>
 800a2c2:	3101      	adds	r1, #1
 800a2c4:	0052      	lsls	r2, r2, #1
 800a2c6:	e7b9      	b.n	800a23c <_dtoa_r+0x27c>
 800a2c8:	69eb      	ldr	r3, [r5, #28]
 800a2ca:	9a03      	ldr	r2, [sp, #12]
 800a2cc:	601a      	str	r2, [r3, #0]
 800a2ce:	9b08      	ldr	r3, [sp, #32]
 800a2d0:	2b0e      	cmp	r3, #14
 800a2d2:	f200 80a8 	bhi.w	800a426 <_dtoa_r+0x466>
 800a2d6:	2c00      	cmp	r4, #0
 800a2d8:	f000 80a5 	beq.w	800a426 <_dtoa_r+0x466>
 800a2dc:	f1bb 0f00 	cmp.w	fp, #0
 800a2e0:	dd34      	ble.n	800a34c <_dtoa_r+0x38c>
 800a2e2:	4b9a      	ldr	r3, [pc, #616]	; (800a54c <_dtoa_r+0x58c>)
 800a2e4:	f00b 020f 	and.w	r2, fp, #15
 800a2e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a2ec:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a2f0:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a2f4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a2f8:	ea4f 142b 	mov.w	r4, fp, asr #4
 800a2fc:	d016      	beq.n	800a32c <_dtoa_r+0x36c>
 800a2fe:	4b94      	ldr	r3, [pc, #592]	; (800a550 <_dtoa_r+0x590>)
 800a300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a304:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a308:	f7f6 fa78 	bl	80007fc <__aeabi_ddiv>
 800a30c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a310:	f004 040f 	and.w	r4, r4, #15
 800a314:	2703      	movs	r7, #3
 800a316:	4e8e      	ldr	r6, [pc, #568]	; (800a550 <_dtoa_r+0x590>)
 800a318:	b954      	cbnz	r4, 800a330 <_dtoa_r+0x370>
 800a31a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a31e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a322:	f7f6 fa6b 	bl	80007fc <__aeabi_ddiv>
 800a326:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a32a:	e029      	b.n	800a380 <_dtoa_r+0x3c0>
 800a32c:	2702      	movs	r7, #2
 800a32e:	e7f2      	b.n	800a316 <_dtoa_r+0x356>
 800a330:	07e1      	lsls	r1, r4, #31
 800a332:	d508      	bpl.n	800a346 <_dtoa_r+0x386>
 800a334:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a338:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a33c:	f7f6 f934 	bl	80005a8 <__aeabi_dmul>
 800a340:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a344:	3701      	adds	r7, #1
 800a346:	1064      	asrs	r4, r4, #1
 800a348:	3608      	adds	r6, #8
 800a34a:	e7e5      	b.n	800a318 <_dtoa_r+0x358>
 800a34c:	f000 80a5 	beq.w	800a49a <_dtoa_r+0x4da>
 800a350:	f1cb 0400 	rsb	r4, fp, #0
 800a354:	4b7d      	ldr	r3, [pc, #500]	; (800a54c <_dtoa_r+0x58c>)
 800a356:	4e7e      	ldr	r6, [pc, #504]	; (800a550 <_dtoa_r+0x590>)
 800a358:	f004 020f 	and.w	r2, r4, #15
 800a35c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a364:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800a368:	f7f6 f91e 	bl	80005a8 <__aeabi_dmul>
 800a36c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a370:	1124      	asrs	r4, r4, #4
 800a372:	2300      	movs	r3, #0
 800a374:	2702      	movs	r7, #2
 800a376:	2c00      	cmp	r4, #0
 800a378:	f040 8084 	bne.w	800a484 <_dtoa_r+0x4c4>
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1d2      	bne.n	800a326 <_dtoa_r+0x366>
 800a380:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800a384:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800a388:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	f000 8087 	beq.w	800a49e <_dtoa_r+0x4de>
 800a390:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a394:	4b6f      	ldr	r3, [pc, #444]	; (800a554 <_dtoa_r+0x594>)
 800a396:	2200      	movs	r2, #0
 800a398:	f7f6 fb78 	bl	8000a8c <__aeabi_dcmplt>
 800a39c:	2800      	cmp	r0, #0
 800a39e:	d07e      	beq.n	800a49e <_dtoa_r+0x4de>
 800a3a0:	9b08      	ldr	r3, [sp, #32]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d07b      	beq.n	800a49e <_dtoa_r+0x4de>
 800a3a6:	9b06      	ldr	r3, [sp, #24]
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	dd38      	ble.n	800a41e <_dtoa_r+0x45e>
 800a3ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a3b0:	4b69      	ldr	r3, [pc, #420]	; (800a558 <_dtoa_r+0x598>)
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f7f6 f8f8 	bl	80005a8 <__aeabi_dmul>
 800a3b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a3bc:	9c06      	ldr	r4, [sp, #24]
 800a3be:	f10b 38ff 	add.w	r8, fp, #4294967295
 800a3c2:	3701      	adds	r7, #1
 800a3c4:	4638      	mov	r0, r7
 800a3c6:	f7f6 f885 	bl	80004d4 <__aeabi_i2d>
 800a3ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a3ce:	f7f6 f8eb 	bl	80005a8 <__aeabi_dmul>
 800a3d2:	4b62      	ldr	r3, [pc, #392]	; (800a55c <_dtoa_r+0x59c>)
 800a3d4:	2200      	movs	r2, #0
 800a3d6:	f7f5 ff31 	bl	800023c <__adddf3>
 800a3da:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800a3de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a3e2:	9611      	str	r6, [sp, #68]	; 0x44
 800a3e4:	2c00      	cmp	r4, #0
 800a3e6:	d15d      	bne.n	800a4a4 <_dtoa_r+0x4e4>
 800a3e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a3ec:	4b5c      	ldr	r3, [pc, #368]	; (800a560 <_dtoa_r+0x5a0>)
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f7f5 ff22 	bl	8000238 <__aeabi_dsub>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	460b      	mov	r3, r1
 800a3f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a3fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a3fe:	4633      	mov	r3, r6
 800a400:	f7f6 fb62 	bl	8000ac8 <__aeabi_dcmpgt>
 800a404:	2800      	cmp	r0, #0
 800a406:	f040 8295 	bne.w	800a934 <_dtoa_r+0x974>
 800a40a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a40e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800a410:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800a414:	f7f6 fb3a 	bl	8000a8c <__aeabi_dcmplt>
 800a418:	2800      	cmp	r0, #0
 800a41a:	f040 8289 	bne.w	800a930 <_dtoa_r+0x970>
 800a41e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800a422:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a426:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a428:	2b00      	cmp	r3, #0
 800a42a:	f2c0 8151 	blt.w	800a6d0 <_dtoa_r+0x710>
 800a42e:	f1bb 0f0e 	cmp.w	fp, #14
 800a432:	f300 814d 	bgt.w	800a6d0 <_dtoa_r+0x710>
 800a436:	4b45      	ldr	r3, [pc, #276]	; (800a54c <_dtoa_r+0x58c>)
 800a438:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a43c:	e9d3 3400 	ldrd	r3, r4, [r3]
 800a440:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800a444:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a446:	2b00      	cmp	r3, #0
 800a448:	f280 80da 	bge.w	800a600 <_dtoa_r+0x640>
 800a44c:	9b08      	ldr	r3, [sp, #32]
 800a44e:	2b00      	cmp	r3, #0
 800a450:	f300 80d6 	bgt.w	800a600 <_dtoa_r+0x640>
 800a454:	f040 826b 	bne.w	800a92e <_dtoa_r+0x96e>
 800a458:	4b41      	ldr	r3, [pc, #260]	; (800a560 <_dtoa_r+0x5a0>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a460:	f7f6 f8a2 	bl	80005a8 <__aeabi_dmul>
 800a464:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a468:	f7f6 fb24 	bl	8000ab4 <__aeabi_dcmpge>
 800a46c:	9c08      	ldr	r4, [sp, #32]
 800a46e:	4626      	mov	r6, r4
 800a470:	2800      	cmp	r0, #0
 800a472:	f040 8241 	bne.w	800a8f8 <_dtoa_r+0x938>
 800a476:	9f03      	ldr	r7, [sp, #12]
 800a478:	2331      	movs	r3, #49	; 0x31
 800a47a:	f807 3b01 	strb.w	r3, [r7], #1
 800a47e:	f10b 0b01 	add.w	fp, fp, #1
 800a482:	e23d      	b.n	800a900 <_dtoa_r+0x940>
 800a484:	07e2      	lsls	r2, r4, #31
 800a486:	d505      	bpl.n	800a494 <_dtoa_r+0x4d4>
 800a488:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a48c:	f7f6 f88c 	bl	80005a8 <__aeabi_dmul>
 800a490:	3701      	adds	r7, #1
 800a492:	2301      	movs	r3, #1
 800a494:	1064      	asrs	r4, r4, #1
 800a496:	3608      	adds	r6, #8
 800a498:	e76d      	b.n	800a376 <_dtoa_r+0x3b6>
 800a49a:	2702      	movs	r7, #2
 800a49c:	e770      	b.n	800a380 <_dtoa_r+0x3c0>
 800a49e:	9c08      	ldr	r4, [sp, #32]
 800a4a0:	46d8      	mov	r8, fp
 800a4a2:	e78f      	b.n	800a3c4 <_dtoa_r+0x404>
 800a4a4:	9903      	ldr	r1, [sp, #12]
 800a4a6:	4b29      	ldr	r3, [pc, #164]	; (800a54c <_dtoa_r+0x58c>)
 800a4a8:	4421      	add	r1, r4
 800a4aa:	9112      	str	r1, [sp, #72]	; 0x48
 800a4ac:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a4ae:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a4b2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800a4b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a4ba:	2900      	cmp	r1, #0
 800a4bc:	d054      	beq.n	800a568 <_dtoa_r+0x5a8>
 800a4be:	4929      	ldr	r1, [pc, #164]	; (800a564 <_dtoa_r+0x5a4>)
 800a4c0:	2000      	movs	r0, #0
 800a4c2:	f7f6 f99b 	bl	80007fc <__aeabi_ddiv>
 800a4c6:	463b      	mov	r3, r7
 800a4c8:	4632      	mov	r2, r6
 800a4ca:	f7f5 feb5 	bl	8000238 <__aeabi_dsub>
 800a4ce:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a4d2:	9f03      	ldr	r7, [sp, #12]
 800a4d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4d8:	f7f6 fb16 	bl	8000b08 <__aeabi_d2iz>
 800a4dc:	4604      	mov	r4, r0
 800a4de:	f7f5 fff9 	bl	80004d4 <__aeabi_i2d>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	460b      	mov	r3, r1
 800a4e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a4ea:	f7f5 fea5 	bl	8000238 <__aeabi_dsub>
 800a4ee:	3430      	adds	r4, #48	; 0x30
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	460b      	mov	r3, r1
 800a4f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a4f8:	f807 4b01 	strb.w	r4, [r7], #1
 800a4fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a500:	f7f6 fac4 	bl	8000a8c <__aeabi_dcmplt>
 800a504:	2800      	cmp	r0, #0
 800a506:	d173      	bne.n	800a5f0 <_dtoa_r+0x630>
 800a508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a50c:	4911      	ldr	r1, [pc, #68]	; (800a554 <_dtoa_r+0x594>)
 800a50e:	2000      	movs	r0, #0
 800a510:	f7f5 fe92 	bl	8000238 <__aeabi_dsub>
 800a514:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a518:	f7f6 fab8 	bl	8000a8c <__aeabi_dcmplt>
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f040 80b6 	bne.w	800a68e <_dtoa_r+0x6ce>
 800a522:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a524:	429f      	cmp	r7, r3
 800a526:	f43f af7a 	beq.w	800a41e <_dtoa_r+0x45e>
 800a52a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a52e:	4b0a      	ldr	r3, [pc, #40]	; (800a558 <_dtoa_r+0x598>)
 800a530:	2200      	movs	r2, #0
 800a532:	f7f6 f839 	bl	80005a8 <__aeabi_dmul>
 800a536:	4b08      	ldr	r3, [pc, #32]	; (800a558 <_dtoa_r+0x598>)
 800a538:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a53c:	2200      	movs	r2, #0
 800a53e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a542:	f7f6 f831 	bl	80005a8 <__aeabi_dmul>
 800a546:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a54a:	e7c3      	b.n	800a4d4 <_dtoa_r+0x514>
 800a54c:	0800e060 	.word	0x0800e060
 800a550:	0800e038 	.word	0x0800e038
 800a554:	3ff00000 	.word	0x3ff00000
 800a558:	40240000 	.word	0x40240000
 800a55c:	401c0000 	.word	0x401c0000
 800a560:	40140000 	.word	0x40140000
 800a564:	3fe00000 	.word	0x3fe00000
 800a568:	4630      	mov	r0, r6
 800a56a:	4639      	mov	r1, r7
 800a56c:	f7f6 f81c 	bl	80005a8 <__aeabi_dmul>
 800a570:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800a574:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a576:	9c03      	ldr	r4, [sp, #12]
 800a578:	9314      	str	r3, [sp, #80]	; 0x50
 800a57a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a57e:	f7f6 fac3 	bl	8000b08 <__aeabi_d2iz>
 800a582:	9015      	str	r0, [sp, #84]	; 0x54
 800a584:	f7f5 ffa6 	bl	80004d4 <__aeabi_i2d>
 800a588:	4602      	mov	r2, r0
 800a58a:	460b      	mov	r3, r1
 800a58c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a590:	f7f5 fe52 	bl	8000238 <__aeabi_dsub>
 800a594:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a596:	3330      	adds	r3, #48	; 0x30
 800a598:	f804 3b01 	strb.w	r3, [r4], #1
 800a59c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a59e:	429c      	cmp	r4, r3
 800a5a0:	4606      	mov	r6, r0
 800a5a2:	460f      	mov	r7, r1
 800a5a4:	f04f 0200 	mov.w	r2, #0
 800a5a8:	d124      	bne.n	800a5f4 <_dtoa_r+0x634>
 800a5aa:	4bb0      	ldr	r3, [pc, #704]	; (800a86c <_dtoa_r+0x8ac>)
 800a5ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800a5b0:	f7f5 fe44 	bl	800023c <__adddf3>
 800a5b4:	4602      	mov	r2, r0
 800a5b6:	460b      	mov	r3, r1
 800a5b8:	4630      	mov	r0, r6
 800a5ba:	4639      	mov	r1, r7
 800a5bc:	f7f6 fa84 	bl	8000ac8 <__aeabi_dcmpgt>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d163      	bne.n	800a68c <_dtoa_r+0x6cc>
 800a5c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a5c8:	49a8      	ldr	r1, [pc, #672]	; (800a86c <_dtoa_r+0x8ac>)
 800a5ca:	2000      	movs	r0, #0
 800a5cc:	f7f5 fe34 	bl	8000238 <__aeabi_dsub>
 800a5d0:	4602      	mov	r2, r0
 800a5d2:	460b      	mov	r3, r1
 800a5d4:	4630      	mov	r0, r6
 800a5d6:	4639      	mov	r1, r7
 800a5d8:	f7f6 fa58 	bl	8000a8c <__aeabi_dcmplt>
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	f43f af1e 	beq.w	800a41e <_dtoa_r+0x45e>
 800a5e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800a5e4:	1e7b      	subs	r3, r7, #1
 800a5e6:	9314      	str	r3, [sp, #80]	; 0x50
 800a5e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800a5ec:	2b30      	cmp	r3, #48	; 0x30
 800a5ee:	d0f8      	beq.n	800a5e2 <_dtoa_r+0x622>
 800a5f0:	46c3      	mov	fp, r8
 800a5f2:	e03b      	b.n	800a66c <_dtoa_r+0x6ac>
 800a5f4:	4b9e      	ldr	r3, [pc, #632]	; (800a870 <_dtoa_r+0x8b0>)
 800a5f6:	f7f5 ffd7 	bl	80005a8 <__aeabi_dmul>
 800a5fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a5fe:	e7bc      	b.n	800a57a <_dtoa_r+0x5ba>
 800a600:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800a604:	9f03      	ldr	r7, [sp, #12]
 800a606:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a60a:	4640      	mov	r0, r8
 800a60c:	4649      	mov	r1, r9
 800a60e:	f7f6 f8f5 	bl	80007fc <__aeabi_ddiv>
 800a612:	f7f6 fa79 	bl	8000b08 <__aeabi_d2iz>
 800a616:	4604      	mov	r4, r0
 800a618:	f7f5 ff5c 	bl	80004d4 <__aeabi_i2d>
 800a61c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a620:	f7f5 ffc2 	bl	80005a8 <__aeabi_dmul>
 800a624:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800a628:	4602      	mov	r2, r0
 800a62a:	460b      	mov	r3, r1
 800a62c:	4640      	mov	r0, r8
 800a62e:	4649      	mov	r1, r9
 800a630:	f7f5 fe02 	bl	8000238 <__aeabi_dsub>
 800a634:	f807 6b01 	strb.w	r6, [r7], #1
 800a638:	9e03      	ldr	r6, [sp, #12]
 800a63a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800a63e:	1bbe      	subs	r6, r7, r6
 800a640:	45b4      	cmp	ip, r6
 800a642:	4602      	mov	r2, r0
 800a644:	460b      	mov	r3, r1
 800a646:	d136      	bne.n	800a6b6 <_dtoa_r+0x6f6>
 800a648:	f7f5 fdf8 	bl	800023c <__adddf3>
 800a64c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a650:	4680      	mov	r8, r0
 800a652:	4689      	mov	r9, r1
 800a654:	f7f6 fa38 	bl	8000ac8 <__aeabi_dcmpgt>
 800a658:	bb58      	cbnz	r0, 800a6b2 <_dtoa_r+0x6f2>
 800a65a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a65e:	4640      	mov	r0, r8
 800a660:	4649      	mov	r1, r9
 800a662:	f7f6 fa09 	bl	8000a78 <__aeabi_dcmpeq>
 800a666:	b108      	cbz	r0, 800a66c <_dtoa_r+0x6ac>
 800a668:	07e3      	lsls	r3, r4, #31
 800a66a:	d422      	bmi.n	800a6b2 <_dtoa_r+0x6f2>
 800a66c:	4651      	mov	r1, sl
 800a66e:	4628      	mov	r0, r5
 800a670:	f000 fbc4 	bl	800adfc <_Bfree>
 800a674:	2300      	movs	r3, #0
 800a676:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a678:	703b      	strb	r3, [r7, #0]
 800a67a:	f10b 0301 	add.w	r3, fp, #1
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a682:	2b00      	cmp	r3, #0
 800a684:	f43f ace9 	beq.w	800a05a <_dtoa_r+0x9a>
 800a688:	601f      	str	r7, [r3, #0]
 800a68a:	e4e6      	b.n	800a05a <_dtoa_r+0x9a>
 800a68c:	4627      	mov	r7, r4
 800a68e:	463b      	mov	r3, r7
 800a690:	461f      	mov	r7, r3
 800a692:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a696:	2a39      	cmp	r2, #57	; 0x39
 800a698:	d107      	bne.n	800a6aa <_dtoa_r+0x6ea>
 800a69a:	9a03      	ldr	r2, [sp, #12]
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d1f7      	bne.n	800a690 <_dtoa_r+0x6d0>
 800a6a0:	9903      	ldr	r1, [sp, #12]
 800a6a2:	2230      	movs	r2, #48	; 0x30
 800a6a4:	f108 0801 	add.w	r8, r8, #1
 800a6a8:	700a      	strb	r2, [r1, #0]
 800a6aa:	781a      	ldrb	r2, [r3, #0]
 800a6ac:	3201      	adds	r2, #1
 800a6ae:	701a      	strb	r2, [r3, #0]
 800a6b0:	e79e      	b.n	800a5f0 <_dtoa_r+0x630>
 800a6b2:	46d8      	mov	r8, fp
 800a6b4:	e7eb      	b.n	800a68e <_dtoa_r+0x6ce>
 800a6b6:	4b6e      	ldr	r3, [pc, #440]	; (800a870 <_dtoa_r+0x8b0>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f7f5 ff75 	bl	80005a8 <__aeabi_dmul>
 800a6be:	2200      	movs	r2, #0
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	4680      	mov	r8, r0
 800a6c4:	4689      	mov	r9, r1
 800a6c6:	f7f6 f9d7 	bl	8000a78 <__aeabi_dcmpeq>
 800a6ca:	2800      	cmp	r0, #0
 800a6cc:	d09b      	beq.n	800a606 <_dtoa_r+0x646>
 800a6ce:	e7cd      	b.n	800a66c <_dtoa_r+0x6ac>
 800a6d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a6d2:	2a00      	cmp	r2, #0
 800a6d4:	f000 80c4 	beq.w	800a860 <_dtoa_r+0x8a0>
 800a6d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a6da:	2a01      	cmp	r2, #1
 800a6dc:	f300 80a8 	bgt.w	800a830 <_dtoa_r+0x870>
 800a6e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a6e2:	2a00      	cmp	r2, #0
 800a6e4:	f000 80a0 	beq.w	800a828 <_dtoa_r+0x868>
 800a6e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a6ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a6ee:	464f      	mov	r7, r9
 800a6f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	441a      	add	r2, r3
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	4499      	add	r9, r3
 800a6fa:	9209      	str	r2, [sp, #36]	; 0x24
 800a6fc:	f000 fc7e 	bl	800affc <__i2b>
 800a700:	4606      	mov	r6, r0
 800a702:	b15f      	cbz	r7, 800a71c <_dtoa_r+0x75c>
 800a704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a706:	2b00      	cmp	r3, #0
 800a708:	dd08      	ble.n	800a71c <_dtoa_r+0x75c>
 800a70a:	42bb      	cmp	r3, r7
 800a70c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a70e:	bfa8      	it	ge
 800a710:	463b      	movge	r3, r7
 800a712:	eba9 0903 	sub.w	r9, r9, r3
 800a716:	1aff      	subs	r7, r7, r3
 800a718:	1ad3      	subs	r3, r2, r3
 800a71a:	9309      	str	r3, [sp, #36]	; 0x24
 800a71c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a71e:	b1f3      	cbz	r3, 800a75e <_dtoa_r+0x79e>
 800a720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a722:	2b00      	cmp	r3, #0
 800a724:	f000 80a0 	beq.w	800a868 <_dtoa_r+0x8a8>
 800a728:	2c00      	cmp	r4, #0
 800a72a:	dd10      	ble.n	800a74e <_dtoa_r+0x78e>
 800a72c:	4631      	mov	r1, r6
 800a72e:	4622      	mov	r2, r4
 800a730:	4628      	mov	r0, r5
 800a732:	f000 fd23 	bl	800b17c <__pow5mult>
 800a736:	4652      	mov	r2, sl
 800a738:	4601      	mov	r1, r0
 800a73a:	4606      	mov	r6, r0
 800a73c:	4628      	mov	r0, r5
 800a73e:	f000 fc73 	bl	800b028 <__multiply>
 800a742:	4651      	mov	r1, sl
 800a744:	4680      	mov	r8, r0
 800a746:	4628      	mov	r0, r5
 800a748:	f000 fb58 	bl	800adfc <_Bfree>
 800a74c:	46c2      	mov	sl, r8
 800a74e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a750:	1b1a      	subs	r2, r3, r4
 800a752:	d004      	beq.n	800a75e <_dtoa_r+0x79e>
 800a754:	4651      	mov	r1, sl
 800a756:	4628      	mov	r0, r5
 800a758:	f000 fd10 	bl	800b17c <__pow5mult>
 800a75c:	4682      	mov	sl, r0
 800a75e:	2101      	movs	r1, #1
 800a760:	4628      	mov	r0, r5
 800a762:	f000 fc4b 	bl	800affc <__i2b>
 800a766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a768:	2b00      	cmp	r3, #0
 800a76a:	4604      	mov	r4, r0
 800a76c:	f340 8082 	ble.w	800a874 <_dtoa_r+0x8b4>
 800a770:	461a      	mov	r2, r3
 800a772:	4601      	mov	r1, r0
 800a774:	4628      	mov	r0, r5
 800a776:	f000 fd01 	bl	800b17c <__pow5mult>
 800a77a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	4604      	mov	r4, r0
 800a780:	dd7b      	ble.n	800a87a <_dtoa_r+0x8ba>
 800a782:	f04f 0800 	mov.w	r8, #0
 800a786:	6923      	ldr	r3, [r4, #16]
 800a788:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a78c:	6918      	ldr	r0, [r3, #16]
 800a78e:	f000 fbe7 	bl	800af60 <__hi0bits>
 800a792:	f1c0 0020 	rsb	r0, r0, #32
 800a796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a798:	4418      	add	r0, r3
 800a79a:	f010 001f 	ands.w	r0, r0, #31
 800a79e:	f000 8092 	beq.w	800a8c6 <_dtoa_r+0x906>
 800a7a2:	f1c0 0320 	rsb	r3, r0, #32
 800a7a6:	2b04      	cmp	r3, #4
 800a7a8:	f340 8085 	ble.w	800a8b6 <_dtoa_r+0x8f6>
 800a7ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ae:	f1c0 001c 	rsb	r0, r0, #28
 800a7b2:	4403      	add	r3, r0
 800a7b4:	4481      	add	r9, r0
 800a7b6:	4407      	add	r7, r0
 800a7b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a7ba:	f1b9 0f00 	cmp.w	r9, #0
 800a7be:	dd05      	ble.n	800a7cc <_dtoa_r+0x80c>
 800a7c0:	4651      	mov	r1, sl
 800a7c2:	464a      	mov	r2, r9
 800a7c4:	4628      	mov	r0, r5
 800a7c6:	f000 fd33 	bl	800b230 <__lshift>
 800a7ca:	4682      	mov	sl, r0
 800a7cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	dd05      	ble.n	800a7de <_dtoa_r+0x81e>
 800a7d2:	4621      	mov	r1, r4
 800a7d4:	461a      	mov	r2, r3
 800a7d6:	4628      	mov	r0, r5
 800a7d8:	f000 fd2a 	bl	800b230 <__lshift>
 800a7dc:	4604      	mov	r4, r0
 800a7de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d072      	beq.n	800a8ca <_dtoa_r+0x90a>
 800a7e4:	4621      	mov	r1, r4
 800a7e6:	4650      	mov	r0, sl
 800a7e8:	f000 fd8e 	bl	800b308 <__mcmp>
 800a7ec:	2800      	cmp	r0, #0
 800a7ee:	da6c      	bge.n	800a8ca <_dtoa_r+0x90a>
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	4651      	mov	r1, sl
 800a7f4:	220a      	movs	r2, #10
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f000 fb22 	bl	800ae40 <__multadd>
 800a7fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7fe:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a802:	4682      	mov	sl, r0
 800a804:	2b00      	cmp	r3, #0
 800a806:	f000 81ad 	beq.w	800ab64 <_dtoa_r+0xba4>
 800a80a:	2300      	movs	r3, #0
 800a80c:	4631      	mov	r1, r6
 800a80e:	220a      	movs	r2, #10
 800a810:	4628      	mov	r0, r5
 800a812:	f000 fb15 	bl	800ae40 <__multadd>
 800a816:	9b06      	ldr	r3, [sp, #24]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	4606      	mov	r6, r0
 800a81c:	f300 8093 	bgt.w	800a946 <_dtoa_r+0x986>
 800a820:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a822:	2b02      	cmp	r3, #2
 800a824:	dc59      	bgt.n	800a8da <_dtoa_r+0x91a>
 800a826:	e08e      	b.n	800a946 <_dtoa_r+0x986>
 800a828:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a82a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a82e:	e75d      	b.n	800a6ec <_dtoa_r+0x72c>
 800a830:	9b08      	ldr	r3, [sp, #32]
 800a832:	1e5c      	subs	r4, r3, #1
 800a834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a836:	42a3      	cmp	r3, r4
 800a838:	bfbf      	itttt	lt
 800a83a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a83c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800a83e:	940a      	strlt	r4, [sp, #40]	; 0x28
 800a840:	1ae3      	sublt	r3, r4, r3
 800a842:	bfb4      	ite	lt
 800a844:	18d2      	addlt	r2, r2, r3
 800a846:	1b1c      	subge	r4, r3, r4
 800a848:	9b08      	ldr	r3, [sp, #32]
 800a84a:	bfbc      	itt	lt
 800a84c:	920e      	strlt	r2, [sp, #56]	; 0x38
 800a84e:	2400      	movlt	r4, #0
 800a850:	2b00      	cmp	r3, #0
 800a852:	bfb5      	itete	lt
 800a854:	eba9 0703 	sublt.w	r7, r9, r3
 800a858:	9b08      	ldrge	r3, [sp, #32]
 800a85a:	2300      	movlt	r3, #0
 800a85c:	464f      	movge	r7, r9
 800a85e:	e747      	b.n	800a6f0 <_dtoa_r+0x730>
 800a860:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a862:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800a864:	464f      	mov	r7, r9
 800a866:	e74c      	b.n	800a702 <_dtoa_r+0x742>
 800a868:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a86a:	e773      	b.n	800a754 <_dtoa_r+0x794>
 800a86c:	3fe00000 	.word	0x3fe00000
 800a870:	40240000 	.word	0x40240000
 800a874:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a876:	2b01      	cmp	r3, #1
 800a878:	dc18      	bgt.n	800a8ac <_dtoa_r+0x8ec>
 800a87a:	9b04      	ldr	r3, [sp, #16]
 800a87c:	b9b3      	cbnz	r3, 800a8ac <_dtoa_r+0x8ec>
 800a87e:	9b05      	ldr	r3, [sp, #20]
 800a880:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a884:	b993      	cbnz	r3, 800a8ac <_dtoa_r+0x8ec>
 800a886:	9b05      	ldr	r3, [sp, #20]
 800a888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a88c:	0d1b      	lsrs	r3, r3, #20
 800a88e:	051b      	lsls	r3, r3, #20
 800a890:	b17b      	cbz	r3, 800a8b2 <_dtoa_r+0x8f2>
 800a892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a894:	3301      	adds	r3, #1
 800a896:	f109 0901 	add.w	r9, r9, #1
 800a89a:	9309      	str	r3, [sp, #36]	; 0x24
 800a89c:	f04f 0801 	mov.w	r8, #1
 800a8a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	f47f af6f 	bne.w	800a786 <_dtoa_r+0x7c6>
 800a8a8:	2001      	movs	r0, #1
 800a8aa:	e774      	b.n	800a796 <_dtoa_r+0x7d6>
 800a8ac:	f04f 0800 	mov.w	r8, #0
 800a8b0:	e7f6      	b.n	800a8a0 <_dtoa_r+0x8e0>
 800a8b2:	4698      	mov	r8, r3
 800a8b4:	e7f4      	b.n	800a8a0 <_dtoa_r+0x8e0>
 800a8b6:	d080      	beq.n	800a7ba <_dtoa_r+0x7fa>
 800a8b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8ba:	331c      	adds	r3, #28
 800a8bc:	441a      	add	r2, r3
 800a8be:	4499      	add	r9, r3
 800a8c0:	441f      	add	r7, r3
 800a8c2:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c4:	e779      	b.n	800a7ba <_dtoa_r+0x7fa>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	e7f6      	b.n	800a8b8 <_dtoa_r+0x8f8>
 800a8ca:	9b08      	ldr	r3, [sp, #32]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	dc34      	bgt.n	800a93a <_dtoa_r+0x97a>
 800a8d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a8d2:	2b02      	cmp	r3, #2
 800a8d4:	dd31      	ble.n	800a93a <_dtoa_r+0x97a>
 800a8d6:	9b08      	ldr	r3, [sp, #32]
 800a8d8:	9306      	str	r3, [sp, #24]
 800a8da:	9b06      	ldr	r3, [sp, #24]
 800a8dc:	b963      	cbnz	r3, 800a8f8 <_dtoa_r+0x938>
 800a8de:	4621      	mov	r1, r4
 800a8e0:	2205      	movs	r2, #5
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	f000 faac 	bl	800ae40 <__multadd>
 800a8e8:	4601      	mov	r1, r0
 800a8ea:	4604      	mov	r4, r0
 800a8ec:	4650      	mov	r0, sl
 800a8ee:	f000 fd0b 	bl	800b308 <__mcmp>
 800a8f2:	2800      	cmp	r0, #0
 800a8f4:	f73f adbf 	bgt.w	800a476 <_dtoa_r+0x4b6>
 800a8f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a8fa:	9f03      	ldr	r7, [sp, #12]
 800a8fc:	ea6f 0b03 	mvn.w	fp, r3
 800a900:	f04f 0800 	mov.w	r8, #0
 800a904:	4621      	mov	r1, r4
 800a906:	4628      	mov	r0, r5
 800a908:	f000 fa78 	bl	800adfc <_Bfree>
 800a90c:	2e00      	cmp	r6, #0
 800a90e:	f43f aead 	beq.w	800a66c <_dtoa_r+0x6ac>
 800a912:	f1b8 0f00 	cmp.w	r8, #0
 800a916:	d005      	beq.n	800a924 <_dtoa_r+0x964>
 800a918:	45b0      	cmp	r8, r6
 800a91a:	d003      	beq.n	800a924 <_dtoa_r+0x964>
 800a91c:	4641      	mov	r1, r8
 800a91e:	4628      	mov	r0, r5
 800a920:	f000 fa6c 	bl	800adfc <_Bfree>
 800a924:	4631      	mov	r1, r6
 800a926:	4628      	mov	r0, r5
 800a928:	f000 fa68 	bl	800adfc <_Bfree>
 800a92c:	e69e      	b.n	800a66c <_dtoa_r+0x6ac>
 800a92e:	2400      	movs	r4, #0
 800a930:	4626      	mov	r6, r4
 800a932:	e7e1      	b.n	800a8f8 <_dtoa_r+0x938>
 800a934:	46c3      	mov	fp, r8
 800a936:	4626      	mov	r6, r4
 800a938:	e59d      	b.n	800a476 <_dtoa_r+0x4b6>
 800a93a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	f000 80c8 	beq.w	800aad2 <_dtoa_r+0xb12>
 800a942:	9b08      	ldr	r3, [sp, #32]
 800a944:	9306      	str	r3, [sp, #24]
 800a946:	2f00      	cmp	r7, #0
 800a948:	dd05      	ble.n	800a956 <_dtoa_r+0x996>
 800a94a:	4631      	mov	r1, r6
 800a94c:	463a      	mov	r2, r7
 800a94e:	4628      	mov	r0, r5
 800a950:	f000 fc6e 	bl	800b230 <__lshift>
 800a954:	4606      	mov	r6, r0
 800a956:	f1b8 0f00 	cmp.w	r8, #0
 800a95a:	d05b      	beq.n	800aa14 <_dtoa_r+0xa54>
 800a95c:	6871      	ldr	r1, [r6, #4]
 800a95e:	4628      	mov	r0, r5
 800a960:	f000 fa0c 	bl	800ad7c <_Balloc>
 800a964:	4607      	mov	r7, r0
 800a966:	b928      	cbnz	r0, 800a974 <_dtoa_r+0x9b4>
 800a968:	4b82      	ldr	r3, [pc, #520]	; (800ab74 <_dtoa_r+0xbb4>)
 800a96a:	4602      	mov	r2, r0
 800a96c:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a970:	f7ff bb3a 	b.w	8009fe8 <_dtoa_r+0x28>
 800a974:	6932      	ldr	r2, [r6, #16]
 800a976:	3202      	adds	r2, #2
 800a978:	0092      	lsls	r2, r2, #2
 800a97a:	f106 010c 	add.w	r1, r6, #12
 800a97e:	300c      	adds	r0, #12
 800a980:	f7ff fa67 	bl	8009e52 <memcpy>
 800a984:	2201      	movs	r2, #1
 800a986:	4639      	mov	r1, r7
 800a988:	4628      	mov	r0, r5
 800a98a:	f000 fc51 	bl	800b230 <__lshift>
 800a98e:	9b03      	ldr	r3, [sp, #12]
 800a990:	9a03      	ldr	r2, [sp, #12]
 800a992:	3301      	adds	r3, #1
 800a994:	9308      	str	r3, [sp, #32]
 800a996:	9b06      	ldr	r3, [sp, #24]
 800a998:	4413      	add	r3, r2
 800a99a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a99c:	9b04      	ldr	r3, [sp, #16]
 800a99e:	f003 0301 	and.w	r3, r3, #1
 800a9a2:	46b0      	mov	r8, r6
 800a9a4:	930a      	str	r3, [sp, #40]	; 0x28
 800a9a6:	4606      	mov	r6, r0
 800a9a8:	9b08      	ldr	r3, [sp, #32]
 800a9aa:	4621      	mov	r1, r4
 800a9ac:	3b01      	subs	r3, #1
 800a9ae:	4650      	mov	r0, sl
 800a9b0:	9304      	str	r3, [sp, #16]
 800a9b2:	f7ff fa7f 	bl	8009eb4 <quorem>
 800a9b6:	4641      	mov	r1, r8
 800a9b8:	9006      	str	r0, [sp, #24]
 800a9ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a9be:	4650      	mov	r0, sl
 800a9c0:	f000 fca2 	bl	800b308 <__mcmp>
 800a9c4:	4632      	mov	r2, r6
 800a9c6:	9009      	str	r0, [sp, #36]	; 0x24
 800a9c8:	4621      	mov	r1, r4
 800a9ca:	4628      	mov	r0, r5
 800a9cc:	f000 fcb8 	bl	800b340 <__mdiff>
 800a9d0:	68c2      	ldr	r2, [r0, #12]
 800a9d2:	4607      	mov	r7, r0
 800a9d4:	bb02      	cbnz	r2, 800aa18 <_dtoa_r+0xa58>
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	4650      	mov	r0, sl
 800a9da:	f000 fc95 	bl	800b308 <__mcmp>
 800a9de:	4602      	mov	r2, r0
 800a9e0:	4639      	mov	r1, r7
 800a9e2:	4628      	mov	r0, r5
 800a9e4:	920c      	str	r2, [sp, #48]	; 0x30
 800a9e6:	f000 fa09 	bl	800adfc <_Bfree>
 800a9ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a9ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a9ee:	9f08      	ldr	r7, [sp, #32]
 800a9f0:	ea43 0102 	orr.w	r1, r3, r2
 800a9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f6:	4319      	orrs	r1, r3
 800a9f8:	d110      	bne.n	800aa1c <_dtoa_r+0xa5c>
 800a9fa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800a9fe:	d029      	beq.n	800aa54 <_dtoa_r+0xa94>
 800aa00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	dd02      	ble.n	800aa0c <_dtoa_r+0xa4c>
 800aa06:	9b06      	ldr	r3, [sp, #24]
 800aa08:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aa0c:	9b04      	ldr	r3, [sp, #16]
 800aa0e:	f883 9000 	strb.w	r9, [r3]
 800aa12:	e777      	b.n	800a904 <_dtoa_r+0x944>
 800aa14:	4630      	mov	r0, r6
 800aa16:	e7ba      	b.n	800a98e <_dtoa_r+0x9ce>
 800aa18:	2201      	movs	r2, #1
 800aa1a:	e7e1      	b.n	800a9e0 <_dtoa_r+0xa20>
 800aa1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	db04      	blt.n	800aa2c <_dtoa_r+0xa6c>
 800aa22:	9922      	ldr	r1, [sp, #136]	; 0x88
 800aa24:	430b      	orrs	r3, r1
 800aa26:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa28:	430b      	orrs	r3, r1
 800aa2a:	d120      	bne.n	800aa6e <_dtoa_r+0xaae>
 800aa2c:	2a00      	cmp	r2, #0
 800aa2e:	dded      	ble.n	800aa0c <_dtoa_r+0xa4c>
 800aa30:	4651      	mov	r1, sl
 800aa32:	2201      	movs	r2, #1
 800aa34:	4628      	mov	r0, r5
 800aa36:	f000 fbfb 	bl	800b230 <__lshift>
 800aa3a:	4621      	mov	r1, r4
 800aa3c:	4682      	mov	sl, r0
 800aa3e:	f000 fc63 	bl	800b308 <__mcmp>
 800aa42:	2800      	cmp	r0, #0
 800aa44:	dc03      	bgt.n	800aa4e <_dtoa_r+0xa8e>
 800aa46:	d1e1      	bne.n	800aa0c <_dtoa_r+0xa4c>
 800aa48:	f019 0f01 	tst.w	r9, #1
 800aa4c:	d0de      	beq.n	800aa0c <_dtoa_r+0xa4c>
 800aa4e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa52:	d1d8      	bne.n	800aa06 <_dtoa_r+0xa46>
 800aa54:	9a04      	ldr	r2, [sp, #16]
 800aa56:	2339      	movs	r3, #57	; 0x39
 800aa58:	7013      	strb	r3, [r2, #0]
 800aa5a:	463b      	mov	r3, r7
 800aa5c:	461f      	mov	r7, r3
 800aa5e:	3b01      	subs	r3, #1
 800aa60:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800aa64:	2a39      	cmp	r2, #57	; 0x39
 800aa66:	d06c      	beq.n	800ab42 <_dtoa_r+0xb82>
 800aa68:	3201      	adds	r2, #1
 800aa6a:	701a      	strb	r2, [r3, #0]
 800aa6c:	e74a      	b.n	800a904 <_dtoa_r+0x944>
 800aa6e:	2a00      	cmp	r2, #0
 800aa70:	dd07      	ble.n	800aa82 <_dtoa_r+0xac2>
 800aa72:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aa76:	d0ed      	beq.n	800aa54 <_dtoa_r+0xa94>
 800aa78:	9a04      	ldr	r2, [sp, #16]
 800aa7a:	f109 0301 	add.w	r3, r9, #1
 800aa7e:	7013      	strb	r3, [r2, #0]
 800aa80:	e740      	b.n	800a904 <_dtoa_r+0x944>
 800aa82:	9b08      	ldr	r3, [sp, #32]
 800aa84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa86:	f803 9c01 	strb.w	r9, [r3, #-1]
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d043      	beq.n	800ab16 <_dtoa_r+0xb56>
 800aa8e:	4651      	mov	r1, sl
 800aa90:	2300      	movs	r3, #0
 800aa92:	220a      	movs	r2, #10
 800aa94:	4628      	mov	r0, r5
 800aa96:	f000 f9d3 	bl	800ae40 <__multadd>
 800aa9a:	45b0      	cmp	r8, r6
 800aa9c:	4682      	mov	sl, r0
 800aa9e:	f04f 0300 	mov.w	r3, #0
 800aaa2:	f04f 020a 	mov.w	r2, #10
 800aaa6:	4641      	mov	r1, r8
 800aaa8:	4628      	mov	r0, r5
 800aaaa:	d107      	bne.n	800aabc <_dtoa_r+0xafc>
 800aaac:	f000 f9c8 	bl	800ae40 <__multadd>
 800aab0:	4680      	mov	r8, r0
 800aab2:	4606      	mov	r6, r0
 800aab4:	9b08      	ldr	r3, [sp, #32]
 800aab6:	3301      	adds	r3, #1
 800aab8:	9308      	str	r3, [sp, #32]
 800aaba:	e775      	b.n	800a9a8 <_dtoa_r+0x9e8>
 800aabc:	f000 f9c0 	bl	800ae40 <__multadd>
 800aac0:	4631      	mov	r1, r6
 800aac2:	4680      	mov	r8, r0
 800aac4:	2300      	movs	r3, #0
 800aac6:	220a      	movs	r2, #10
 800aac8:	4628      	mov	r0, r5
 800aaca:	f000 f9b9 	bl	800ae40 <__multadd>
 800aace:	4606      	mov	r6, r0
 800aad0:	e7f0      	b.n	800aab4 <_dtoa_r+0xaf4>
 800aad2:	9b08      	ldr	r3, [sp, #32]
 800aad4:	9306      	str	r3, [sp, #24]
 800aad6:	9f03      	ldr	r7, [sp, #12]
 800aad8:	4621      	mov	r1, r4
 800aada:	4650      	mov	r0, sl
 800aadc:	f7ff f9ea 	bl	8009eb4 <quorem>
 800aae0:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aae4:	9b03      	ldr	r3, [sp, #12]
 800aae6:	f807 9b01 	strb.w	r9, [r7], #1
 800aaea:	1afa      	subs	r2, r7, r3
 800aaec:	9b06      	ldr	r3, [sp, #24]
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	dd07      	ble.n	800ab02 <_dtoa_r+0xb42>
 800aaf2:	4651      	mov	r1, sl
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	220a      	movs	r2, #10
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f000 f9a1 	bl	800ae40 <__multadd>
 800aafe:	4682      	mov	sl, r0
 800ab00:	e7ea      	b.n	800aad8 <_dtoa_r+0xb18>
 800ab02:	9b06      	ldr	r3, [sp, #24]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	bfc8      	it	gt
 800ab08:	461f      	movgt	r7, r3
 800ab0a:	9b03      	ldr	r3, [sp, #12]
 800ab0c:	bfd8      	it	le
 800ab0e:	2701      	movle	r7, #1
 800ab10:	441f      	add	r7, r3
 800ab12:	f04f 0800 	mov.w	r8, #0
 800ab16:	4651      	mov	r1, sl
 800ab18:	2201      	movs	r2, #1
 800ab1a:	4628      	mov	r0, r5
 800ab1c:	f000 fb88 	bl	800b230 <__lshift>
 800ab20:	4621      	mov	r1, r4
 800ab22:	4682      	mov	sl, r0
 800ab24:	f000 fbf0 	bl	800b308 <__mcmp>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	dc96      	bgt.n	800aa5a <_dtoa_r+0xa9a>
 800ab2c:	d102      	bne.n	800ab34 <_dtoa_r+0xb74>
 800ab2e:	f019 0f01 	tst.w	r9, #1
 800ab32:	d192      	bne.n	800aa5a <_dtoa_r+0xa9a>
 800ab34:	463b      	mov	r3, r7
 800ab36:	461f      	mov	r7, r3
 800ab38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ab3c:	2a30      	cmp	r2, #48	; 0x30
 800ab3e:	d0fa      	beq.n	800ab36 <_dtoa_r+0xb76>
 800ab40:	e6e0      	b.n	800a904 <_dtoa_r+0x944>
 800ab42:	9a03      	ldr	r2, [sp, #12]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d189      	bne.n	800aa5c <_dtoa_r+0xa9c>
 800ab48:	f10b 0b01 	add.w	fp, fp, #1
 800ab4c:	2331      	movs	r3, #49	; 0x31
 800ab4e:	e796      	b.n	800aa7e <_dtoa_r+0xabe>
 800ab50:	4b09      	ldr	r3, [pc, #36]	; (800ab78 <_dtoa_r+0xbb8>)
 800ab52:	f7ff baa1 	b.w	800a098 <_dtoa_r+0xd8>
 800ab56:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	f47f aa79 	bne.w	800a050 <_dtoa_r+0x90>
 800ab5e:	4b07      	ldr	r3, [pc, #28]	; (800ab7c <_dtoa_r+0xbbc>)
 800ab60:	f7ff ba9a 	b.w	800a098 <_dtoa_r+0xd8>
 800ab64:	9b06      	ldr	r3, [sp, #24]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	dcb5      	bgt.n	800aad6 <_dtoa_r+0xb16>
 800ab6a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ab6c:	2b02      	cmp	r3, #2
 800ab6e:	f73f aeb4 	bgt.w	800a8da <_dtoa_r+0x91a>
 800ab72:	e7b0      	b.n	800aad6 <_dtoa_r+0xb16>
 800ab74:	0800dfcc 	.word	0x0800dfcc
 800ab78:	0800df02 	.word	0x0800df02
 800ab7c:	0800df67 	.word	0x0800df67

0800ab80 <_free_r>:
 800ab80:	b538      	push	{r3, r4, r5, lr}
 800ab82:	4605      	mov	r5, r0
 800ab84:	2900      	cmp	r1, #0
 800ab86:	d041      	beq.n	800ac0c <_free_r+0x8c>
 800ab88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab8c:	1f0c      	subs	r4, r1, #4
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	bfb8      	it	lt
 800ab92:	18e4      	addlt	r4, r4, r3
 800ab94:	f000 f8e6 	bl	800ad64 <__malloc_lock>
 800ab98:	4a1d      	ldr	r2, [pc, #116]	; (800ac10 <_free_r+0x90>)
 800ab9a:	6813      	ldr	r3, [r2, #0]
 800ab9c:	b933      	cbnz	r3, 800abac <_free_r+0x2c>
 800ab9e:	6063      	str	r3, [r4, #4]
 800aba0:	6014      	str	r4, [r2, #0]
 800aba2:	4628      	mov	r0, r5
 800aba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aba8:	f000 b8e2 	b.w	800ad70 <__malloc_unlock>
 800abac:	42a3      	cmp	r3, r4
 800abae:	d908      	bls.n	800abc2 <_free_r+0x42>
 800abb0:	6820      	ldr	r0, [r4, #0]
 800abb2:	1821      	adds	r1, r4, r0
 800abb4:	428b      	cmp	r3, r1
 800abb6:	bf01      	itttt	eq
 800abb8:	6819      	ldreq	r1, [r3, #0]
 800abba:	685b      	ldreq	r3, [r3, #4]
 800abbc:	1809      	addeq	r1, r1, r0
 800abbe:	6021      	streq	r1, [r4, #0]
 800abc0:	e7ed      	b.n	800ab9e <_free_r+0x1e>
 800abc2:	461a      	mov	r2, r3
 800abc4:	685b      	ldr	r3, [r3, #4]
 800abc6:	b10b      	cbz	r3, 800abcc <_free_r+0x4c>
 800abc8:	42a3      	cmp	r3, r4
 800abca:	d9fa      	bls.n	800abc2 <_free_r+0x42>
 800abcc:	6811      	ldr	r1, [r2, #0]
 800abce:	1850      	adds	r0, r2, r1
 800abd0:	42a0      	cmp	r0, r4
 800abd2:	d10b      	bne.n	800abec <_free_r+0x6c>
 800abd4:	6820      	ldr	r0, [r4, #0]
 800abd6:	4401      	add	r1, r0
 800abd8:	1850      	adds	r0, r2, r1
 800abda:	4283      	cmp	r3, r0
 800abdc:	6011      	str	r1, [r2, #0]
 800abde:	d1e0      	bne.n	800aba2 <_free_r+0x22>
 800abe0:	6818      	ldr	r0, [r3, #0]
 800abe2:	685b      	ldr	r3, [r3, #4]
 800abe4:	6053      	str	r3, [r2, #4]
 800abe6:	4408      	add	r0, r1
 800abe8:	6010      	str	r0, [r2, #0]
 800abea:	e7da      	b.n	800aba2 <_free_r+0x22>
 800abec:	d902      	bls.n	800abf4 <_free_r+0x74>
 800abee:	230c      	movs	r3, #12
 800abf0:	602b      	str	r3, [r5, #0]
 800abf2:	e7d6      	b.n	800aba2 <_free_r+0x22>
 800abf4:	6820      	ldr	r0, [r4, #0]
 800abf6:	1821      	adds	r1, r4, r0
 800abf8:	428b      	cmp	r3, r1
 800abfa:	bf04      	itt	eq
 800abfc:	6819      	ldreq	r1, [r3, #0]
 800abfe:	685b      	ldreq	r3, [r3, #4]
 800ac00:	6063      	str	r3, [r4, #4]
 800ac02:	bf04      	itt	eq
 800ac04:	1809      	addeq	r1, r1, r0
 800ac06:	6021      	streq	r1, [r4, #0]
 800ac08:	6054      	str	r4, [r2, #4]
 800ac0a:	e7ca      	b.n	800aba2 <_free_r+0x22>
 800ac0c:	bd38      	pop	{r3, r4, r5, pc}
 800ac0e:	bf00      	nop
 800ac10:	20000af8 	.word	0x20000af8

0800ac14 <malloc>:
 800ac14:	4b02      	ldr	r3, [pc, #8]	; (800ac20 <malloc+0xc>)
 800ac16:	4601      	mov	r1, r0
 800ac18:	6818      	ldr	r0, [r3, #0]
 800ac1a:	f000 b823 	b.w	800ac64 <_malloc_r>
 800ac1e:	bf00      	nop
 800ac20:	20000070 	.word	0x20000070

0800ac24 <sbrk_aligned>:
 800ac24:	b570      	push	{r4, r5, r6, lr}
 800ac26:	4e0e      	ldr	r6, [pc, #56]	; (800ac60 <sbrk_aligned+0x3c>)
 800ac28:	460c      	mov	r4, r1
 800ac2a:	6831      	ldr	r1, [r6, #0]
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	b911      	cbnz	r1, 800ac36 <sbrk_aligned+0x12>
 800ac30:	f001 fe18 	bl	800c864 <_sbrk_r>
 800ac34:	6030      	str	r0, [r6, #0]
 800ac36:	4621      	mov	r1, r4
 800ac38:	4628      	mov	r0, r5
 800ac3a:	f001 fe13 	bl	800c864 <_sbrk_r>
 800ac3e:	1c43      	adds	r3, r0, #1
 800ac40:	d00a      	beq.n	800ac58 <sbrk_aligned+0x34>
 800ac42:	1cc4      	adds	r4, r0, #3
 800ac44:	f024 0403 	bic.w	r4, r4, #3
 800ac48:	42a0      	cmp	r0, r4
 800ac4a:	d007      	beq.n	800ac5c <sbrk_aligned+0x38>
 800ac4c:	1a21      	subs	r1, r4, r0
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f001 fe08 	bl	800c864 <_sbrk_r>
 800ac54:	3001      	adds	r0, #1
 800ac56:	d101      	bne.n	800ac5c <sbrk_aligned+0x38>
 800ac58:	f04f 34ff 	mov.w	r4, #4294967295
 800ac5c:	4620      	mov	r0, r4
 800ac5e:	bd70      	pop	{r4, r5, r6, pc}
 800ac60:	20000afc 	.word	0x20000afc

0800ac64 <_malloc_r>:
 800ac64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ac68:	1ccd      	adds	r5, r1, #3
 800ac6a:	f025 0503 	bic.w	r5, r5, #3
 800ac6e:	3508      	adds	r5, #8
 800ac70:	2d0c      	cmp	r5, #12
 800ac72:	bf38      	it	cc
 800ac74:	250c      	movcc	r5, #12
 800ac76:	2d00      	cmp	r5, #0
 800ac78:	4607      	mov	r7, r0
 800ac7a:	db01      	blt.n	800ac80 <_malloc_r+0x1c>
 800ac7c:	42a9      	cmp	r1, r5
 800ac7e:	d905      	bls.n	800ac8c <_malloc_r+0x28>
 800ac80:	230c      	movs	r3, #12
 800ac82:	603b      	str	r3, [r7, #0]
 800ac84:	2600      	movs	r6, #0
 800ac86:	4630      	mov	r0, r6
 800ac88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ad60 <_malloc_r+0xfc>
 800ac90:	f000 f868 	bl	800ad64 <__malloc_lock>
 800ac94:	f8d8 3000 	ldr.w	r3, [r8]
 800ac98:	461c      	mov	r4, r3
 800ac9a:	bb5c      	cbnz	r4, 800acf4 <_malloc_r+0x90>
 800ac9c:	4629      	mov	r1, r5
 800ac9e:	4638      	mov	r0, r7
 800aca0:	f7ff ffc0 	bl	800ac24 <sbrk_aligned>
 800aca4:	1c43      	adds	r3, r0, #1
 800aca6:	4604      	mov	r4, r0
 800aca8:	d155      	bne.n	800ad56 <_malloc_r+0xf2>
 800acaa:	f8d8 4000 	ldr.w	r4, [r8]
 800acae:	4626      	mov	r6, r4
 800acb0:	2e00      	cmp	r6, #0
 800acb2:	d145      	bne.n	800ad40 <_malloc_r+0xdc>
 800acb4:	2c00      	cmp	r4, #0
 800acb6:	d048      	beq.n	800ad4a <_malloc_r+0xe6>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	4631      	mov	r1, r6
 800acbc:	4638      	mov	r0, r7
 800acbe:	eb04 0903 	add.w	r9, r4, r3
 800acc2:	f001 fdcf 	bl	800c864 <_sbrk_r>
 800acc6:	4581      	cmp	r9, r0
 800acc8:	d13f      	bne.n	800ad4a <_malloc_r+0xe6>
 800acca:	6821      	ldr	r1, [r4, #0]
 800accc:	1a6d      	subs	r5, r5, r1
 800acce:	4629      	mov	r1, r5
 800acd0:	4638      	mov	r0, r7
 800acd2:	f7ff ffa7 	bl	800ac24 <sbrk_aligned>
 800acd6:	3001      	adds	r0, #1
 800acd8:	d037      	beq.n	800ad4a <_malloc_r+0xe6>
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	442b      	add	r3, r5
 800acde:	6023      	str	r3, [r4, #0]
 800ace0:	f8d8 3000 	ldr.w	r3, [r8]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d038      	beq.n	800ad5a <_malloc_r+0xf6>
 800ace8:	685a      	ldr	r2, [r3, #4]
 800acea:	42a2      	cmp	r2, r4
 800acec:	d12b      	bne.n	800ad46 <_malloc_r+0xe2>
 800acee:	2200      	movs	r2, #0
 800acf0:	605a      	str	r2, [r3, #4]
 800acf2:	e00f      	b.n	800ad14 <_malloc_r+0xb0>
 800acf4:	6822      	ldr	r2, [r4, #0]
 800acf6:	1b52      	subs	r2, r2, r5
 800acf8:	d41f      	bmi.n	800ad3a <_malloc_r+0xd6>
 800acfa:	2a0b      	cmp	r2, #11
 800acfc:	d917      	bls.n	800ad2e <_malloc_r+0xca>
 800acfe:	1961      	adds	r1, r4, r5
 800ad00:	42a3      	cmp	r3, r4
 800ad02:	6025      	str	r5, [r4, #0]
 800ad04:	bf18      	it	ne
 800ad06:	6059      	strne	r1, [r3, #4]
 800ad08:	6863      	ldr	r3, [r4, #4]
 800ad0a:	bf08      	it	eq
 800ad0c:	f8c8 1000 	streq.w	r1, [r8]
 800ad10:	5162      	str	r2, [r4, r5]
 800ad12:	604b      	str	r3, [r1, #4]
 800ad14:	4638      	mov	r0, r7
 800ad16:	f104 060b 	add.w	r6, r4, #11
 800ad1a:	f000 f829 	bl	800ad70 <__malloc_unlock>
 800ad1e:	f026 0607 	bic.w	r6, r6, #7
 800ad22:	1d23      	adds	r3, r4, #4
 800ad24:	1af2      	subs	r2, r6, r3
 800ad26:	d0ae      	beq.n	800ac86 <_malloc_r+0x22>
 800ad28:	1b9b      	subs	r3, r3, r6
 800ad2a:	50a3      	str	r3, [r4, r2]
 800ad2c:	e7ab      	b.n	800ac86 <_malloc_r+0x22>
 800ad2e:	42a3      	cmp	r3, r4
 800ad30:	6862      	ldr	r2, [r4, #4]
 800ad32:	d1dd      	bne.n	800acf0 <_malloc_r+0x8c>
 800ad34:	f8c8 2000 	str.w	r2, [r8]
 800ad38:	e7ec      	b.n	800ad14 <_malloc_r+0xb0>
 800ad3a:	4623      	mov	r3, r4
 800ad3c:	6864      	ldr	r4, [r4, #4]
 800ad3e:	e7ac      	b.n	800ac9a <_malloc_r+0x36>
 800ad40:	4634      	mov	r4, r6
 800ad42:	6876      	ldr	r6, [r6, #4]
 800ad44:	e7b4      	b.n	800acb0 <_malloc_r+0x4c>
 800ad46:	4613      	mov	r3, r2
 800ad48:	e7cc      	b.n	800ace4 <_malloc_r+0x80>
 800ad4a:	230c      	movs	r3, #12
 800ad4c:	603b      	str	r3, [r7, #0]
 800ad4e:	4638      	mov	r0, r7
 800ad50:	f000 f80e 	bl	800ad70 <__malloc_unlock>
 800ad54:	e797      	b.n	800ac86 <_malloc_r+0x22>
 800ad56:	6025      	str	r5, [r4, #0]
 800ad58:	e7dc      	b.n	800ad14 <_malloc_r+0xb0>
 800ad5a:	605b      	str	r3, [r3, #4]
 800ad5c:	deff      	udf	#255	; 0xff
 800ad5e:	bf00      	nop
 800ad60:	20000af8 	.word	0x20000af8

0800ad64 <__malloc_lock>:
 800ad64:	4801      	ldr	r0, [pc, #4]	; (800ad6c <__malloc_lock+0x8>)
 800ad66:	f7ff b872 	b.w	8009e4e <__retarget_lock_acquire_recursive>
 800ad6a:	bf00      	nop
 800ad6c:	20000af4 	.word	0x20000af4

0800ad70 <__malloc_unlock>:
 800ad70:	4801      	ldr	r0, [pc, #4]	; (800ad78 <__malloc_unlock+0x8>)
 800ad72:	f7ff b86d 	b.w	8009e50 <__retarget_lock_release_recursive>
 800ad76:	bf00      	nop
 800ad78:	20000af4 	.word	0x20000af4

0800ad7c <_Balloc>:
 800ad7c:	b570      	push	{r4, r5, r6, lr}
 800ad7e:	69c6      	ldr	r6, [r0, #28]
 800ad80:	4604      	mov	r4, r0
 800ad82:	460d      	mov	r5, r1
 800ad84:	b976      	cbnz	r6, 800ada4 <_Balloc+0x28>
 800ad86:	2010      	movs	r0, #16
 800ad88:	f7ff ff44 	bl	800ac14 <malloc>
 800ad8c:	4602      	mov	r2, r0
 800ad8e:	61e0      	str	r0, [r4, #28]
 800ad90:	b920      	cbnz	r0, 800ad9c <_Balloc+0x20>
 800ad92:	4b18      	ldr	r3, [pc, #96]	; (800adf4 <_Balloc+0x78>)
 800ad94:	4818      	ldr	r0, [pc, #96]	; (800adf8 <_Balloc+0x7c>)
 800ad96:	216b      	movs	r1, #107	; 0x6b
 800ad98:	f7ff f86e 	bl	8009e78 <__assert_func>
 800ad9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ada0:	6006      	str	r6, [r0, #0]
 800ada2:	60c6      	str	r6, [r0, #12]
 800ada4:	69e6      	ldr	r6, [r4, #28]
 800ada6:	68f3      	ldr	r3, [r6, #12]
 800ada8:	b183      	cbz	r3, 800adcc <_Balloc+0x50>
 800adaa:	69e3      	ldr	r3, [r4, #28]
 800adac:	68db      	ldr	r3, [r3, #12]
 800adae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800adb2:	b9b8      	cbnz	r0, 800ade4 <_Balloc+0x68>
 800adb4:	2101      	movs	r1, #1
 800adb6:	fa01 f605 	lsl.w	r6, r1, r5
 800adba:	1d72      	adds	r2, r6, #5
 800adbc:	0092      	lsls	r2, r2, #2
 800adbe:	4620      	mov	r0, r4
 800adc0:	f001 fd6d 	bl	800c89e <_calloc_r>
 800adc4:	b160      	cbz	r0, 800ade0 <_Balloc+0x64>
 800adc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800adca:	e00e      	b.n	800adea <_Balloc+0x6e>
 800adcc:	2221      	movs	r2, #33	; 0x21
 800adce:	2104      	movs	r1, #4
 800add0:	4620      	mov	r0, r4
 800add2:	f001 fd64 	bl	800c89e <_calloc_r>
 800add6:	69e3      	ldr	r3, [r4, #28]
 800add8:	60f0      	str	r0, [r6, #12]
 800adda:	68db      	ldr	r3, [r3, #12]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d1e4      	bne.n	800adaa <_Balloc+0x2e>
 800ade0:	2000      	movs	r0, #0
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	6802      	ldr	r2, [r0, #0]
 800ade6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800adea:	2300      	movs	r3, #0
 800adec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800adf0:	e7f7      	b.n	800ade2 <_Balloc+0x66>
 800adf2:	bf00      	nop
 800adf4:	0800de83 	.word	0x0800de83
 800adf8:	0800dfdd 	.word	0x0800dfdd

0800adfc <_Bfree>:
 800adfc:	b570      	push	{r4, r5, r6, lr}
 800adfe:	69c6      	ldr	r6, [r0, #28]
 800ae00:	4605      	mov	r5, r0
 800ae02:	460c      	mov	r4, r1
 800ae04:	b976      	cbnz	r6, 800ae24 <_Bfree+0x28>
 800ae06:	2010      	movs	r0, #16
 800ae08:	f7ff ff04 	bl	800ac14 <malloc>
 800ae0c:	4602      	mov	r2, r0
 800ae0e:	61e8      	str	r0, [r5, #28]
 800ae10:	b920      	cbnz	r0, 800ae1c <_Bfree+0x20>
 800ae12:	4b09      	ldr	r3, [pc, #36]	; (800ae38 <_Bfree+0x3c>)
 800ae14:	4809      	ldr	r0, [pc, #36]	; (800ae3c <_Bfree+0x40>)
 800ae16:	218f      	movs	r1, #143	; 0x8f
 800ae18:	f7ff f82e 	bl	8009e78 <__assert_func>
 800ae1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae20:	6006      	str	r6, [r0, #0]
 800ae22:	60c6      	str	r6, [r0, #12]
 800ae24:	b13c      	cbz	r4, 800ae36 <_Bfree+0x3a>
 800ae26:	69eb      	ldr	r3, [r5, #28]
 800ae28:	6862      	ldr	r2, [r4, #4]
 800ae2a:	68db      	ldr	r3, [r3, #12]
 800ae2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae30:	6021      	str	r1, [r4, #0]
 800ae32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	0800de83 	.word	0x0800de83
 800ae3c:	0800dfdd 	.word	0x0800dfdd

0800ae40 <__multadd>:
 800ae40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae44:	690d      	ldr	r5, [r1, #16]
 800ae46:	4607      	mov	r7, r0
 800ae48:	460c      	mov	r4, r1
 800ae4a:	461e      	mov	r6, r3
 800ae4c:	f101 0c14 	add.w	ip, r1, #20
 800ae50:	2000      	movs	r0, #0
 800ae52:	f8dc 3000 	ldr.w	r3, [ip]
 800ae56:	b299      	uxth	r1, r3
 800ae58:	fb02 6101 	mla	r1, r2, r1, r6
 800ae5c:	0c1e      	lsrs	r6, r3, #16
 800ae5e:	0c0b      	lsrs	r3, r1, #16
 800ae60:	fb02 3306 	mla	r3, r2, r6, r3
 800ae64:	b289      	uxth	r1, r1
 800ae66:	3001      	adds	r0, #1
 800ae68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ae6c:	4285      	cmp	r5, r0
 800ae6e:	f84c 1b04 	str.w	r1, [ip], #4
 800ae72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ae76:	dcec      	bgt.n	800ae52 <__multadd+0x12>
 800ae78:	b30e      	cbz	r6, 800aebe <__multadd+0x7e>
 800ae7a:	68a3      	ldr	r3, [r4, #8]
 800ae7c:	42ab      	cmp	r3, r5
 800ae7e:	dc19      	bgt.n	800aeb4 <__multadd+0x74>
 800ae80:	6861      	ldr	r1, [r4, #4]
 800ae82:	4638      	mov	r0, r7
 800ae84:	3101      	adds	r1, #1
 800ae86:	f7ff ff79 	bl	800ad7c <_Balloc>
 800ae8a:	4680      	mov	r8, r0
 800ae8c:	b928      	cbnz	r0, 800ae9a <__multadd+0x5a>
 800ae8e:	4602      	mov	r2, r0
 800ae90:	4b0c      	ldr	r3, [pc, #48]	; (800aec4 <__multadd+0x84>)
 800ae92:	480d      	ldr	r0, [pc, #52]	; (800aec8 <__multadd+0x88>)
 800ae94:	21ba      	movs	r1, #186	; 0xba
 800ae96:	f7fe ffef 	bl	8009e78 <__assert_func>
 800ae9a:	6922      	ldr	r2, [r4, #16]
 800ae9c:	3202      	adds	r2, #2
 800ae9e:	f104 010c 	add.w	r1, r4, #12
 800aea2:	0092      	lsls	r2, r2, #2
 800aea4:	300c      	adds	r0, #12
 800aea6:	f7fe ffd4 	bl	8009e52 <memcpy>
 800aeaa:	4621      	mov	r1, r4
 800aeac:	4638      	mov	r0, r7
 800aeae:	f7ff ffa5 	bl	800adfc <_Bfree>
 800aeb2:	4644      	mov	r4, r8
 800aeb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aeb8:	3501      	adds	r5, #1
 800aeba:	615e      	str	r6, [r3, #20]
 800aebc:	6125      	str	r5, [r4, #16]
 800aebe:	4620      	mov	r0, r4
 800aec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aec4:	0800dfcc 	.word	0x0800dfcc
 800aec8:	0800dfdd 	.word	0x0800dfdd

0800aecc <__s2b>:
 800aecc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aed0:	460c      	mov	r4, r1
 800aed2:	4615      	mov	r5, r2
 800aed4:	461f      	mov	r7, r3
 800aed6:	2209      	movs	r2, #9
 800aed8:	3308      	adds	r3, #8
 800aeda:	4606      	mov	r6, r0
 800aedc:	fb93 f3f2 	sdiv	r3, r3, r2
 800aee0:	2100      	movs	r1, #0
 800aee2:	2201      	movs	r2, #1
 800aee4:	429a      	cmp	r2, r3
 800aee6:	db09      	blt.n	800aefc <__s2b+0x30>
 800aee8:	4630      	mov	r0, r6
 800aeea:	f7ff ff47 	bl	800ad7c <_Balloc>
 800aeee:	b940      	cbnz	r0, 800af02 <__s2b+0x36>
 800aef0:	4602      	mov	r2, r0
 800aef2:	4b19      	ldr	r3, [pc, #100]	; (800af58 <__s2b+0x8c>)
 800aef4:	4819      	ldr	r0, [pc, #100]	; (800af5c <__s2b+0x90>)
 800aef6:	21d3      	movs	r1, #211	; 0xd3
 800aef8:	f7fe ffbe 	bl	8009e78 <__assert_func>
 800aefc:	0052      	lsls	r2, r2, #1
 800aefe:	3101      	adds	r1, #1
 800af00:	e7f0      	b.n	800aee4 <__s2b+0x18>
 800af02:	9b08      	ldr	r3, [sp, #32]
 800af04:	6143      	str	r3, [r0, #20]
 800af06:	2d09      	cmp	r5, #9
 800af08:	f04f 0301 	mov.w	r3, #1
 800af0c:	6103      	str	r3, [r0, #16]
 800af0e:	dd16      	ble.n	800af3e <__s2b+0x72>
 800af10:	f104 0909 	add.w	r9, r4, #9
 800af14:	46c8      	mov	r8, r9
 800af16:	442c      	add	r4, r5
 800af18:	f818 3b01 	ldrb.w	r3, [r8], #1
 800af1c:	4601      	mov	r1, r0
 800af1e:	3b30      	subs	r3, #48	; 0x30
 800af20:	220a      	movs	r2, #10
 800af22:	4630      	mov	r0, r6
 800af24:	f7ff ff8c 	bl	800ae40 <__multadd>
 800af28:	45a0      	cmp	r8, r4
 800af2a:	d1f5      	bne.n	800af18 <__s2b+0x4c>
 800af2c:	f1a5 0408 	sub.w	r4, r5, #8
 800af30:	444c      	add	r4, r9
 800af32:	1b2d      	subs	r5, r5, r4
 800af34:	1963      	adds	r3, r4, r5
 800af36:	42bb      	cmp	r3, r7
 800af38:	db04      	blt.n	800af44 <__s2b+0x78>
 800af3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af3e:	340a      	adds	r4, #10
 800af40:	2509      	movs	r5, #9
 800af42:	e7f6      	b.n	800af32 <__s2b+0x66>
 800af44:	f814 3b01 	ldrb.w	r3, [r4], #1
 800af48:	4601      	mov	r1, r0
 800af4a:	3b30      	subs	r3, #48	; 0x30
 800af4c:	220a      	movs	r2, #10
 800af4e:	4630      	mov	r0, r6
 800af50:	f7ff ff76 	bl	800ae40 <__multadd>
 800af54:	e7ee      	b.n	800af34 <__s2b+0x68>
 800af56:	bf00      	nop
 800af58:	0800dfcc 	.word	0x0800dfcc
 800af5c:	0800dfdd 	.word	0x0800dfdd

0800af60 <__hi0bits>:
 800af60:	0c02      	lsrs	r2, r0, #16
 800af62:	0412      	lsls	r2, r2, #16
 800af64:	4603      	mov	r3, r0
 800af66:	b9ca      	cbnz	r2, 800af9c <__hi0bits+0x3c>
 800af68:	0403      	lsls	r3, r0, #16
 800af6a:	2010      	movs	r0, #16
 800af6c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800af70:	bf04      	itt	eq
 800af72:	021b      	lsleq	r3, r3, #8
 800af74:	3008      	addeq	r0, #8
 800af76:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800af7a:	bf04      	itt	eq
 800af7c:	011b      	lsleq	r3, r3, #4
 800af7e:	3004      	addeq	r0, #4
 800af80:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800af84:	bf04      	itt	eq
 800af86:	009b      	lsleq	r3, r3, #2
 800af88:	3002      	addeq	r0, #2
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	db05      	blt.n	800af9a <__hi0bits+0x3a>
 800af8e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800af92:	f100 0001 	add.w	r0, r0, #1
 800af96:	bf08      	it	eq
 800af98:	2020      	moveq	r0, #32
 800af9a:	4770      	bx	lr
 800af9c:	2000      	movs	r0, #0
 800af9e:	e7e5      	b.n	800af6c <__hi0bits+0xc>

0800afa0 <__lo0bits>:
 800afa0:	6803      	ldr	r3, [r0, #0]
 800afa2:	4602      	mov	r2, r0
 800afa4:	f013 0007 	ands.w	r0, r3, #7
 800afa8:	d00b      	beq.n	800afc2 <__lo0bits+0x22>
 800afaa:	07d9      	lsls	r1, r3, #31
 800afac:	d421      	bmi.n	800aff2 <__lo0bits+0x52>
 800afae:	0798      	lsls	r0, r3, #30
 800afb0:	bf49      	itett	mi
 800afb2:	085b      	lsrmi	r3, r3, #1
 800afb4:	089b      	lsrpl	r3, r3, #2
 800afb6:	2001      	movmi	r0, #1
 800afb8:	6013      	strmi	r3, [r2, #0]
 800afba:	bf5c      	itt	pl
 800afbc:	6013      	strpl	r3, [r2, #0]
 800afbe:	2002      	movpl	r0, #2
 800afc0:	4770      	bx	lr
 800afc2:	b299      	uxth	r1, r3
 800afc4:	b909      	cbnz	r1, 800afca <__lo0bits+0x2a>
 800afc6:	0c1b      	lsrs	r3, r3, #16
 800afc8:	2010      	movs	r0, #16
 800afca:	b2d9      	uxtb	r1, r3
 800afcc:	b909      	cbnz	r1, 800afd2 <__lo0bits+0x32>
 800afce:	3008      	adds	r0, #8
 800afd0:	0a1b      	lsrs	r3, r3, #8
 800afd2:	0719      	lsls	r1, r3, #28
 800afd4:	bf04      	itt	eq
 800afd6:	091b      	lsreq	r3, r3, #4
 800afd8:	3004      	addeq	r0, #4
 800afda:	0799      	lsls	r1, r3, #30
 800afdc:	bf04      	itt	eq
 800afde:	089b      	lsreq	r3, r3, #2
 800afe0:	3002      	addeq	r0, #2
 800afe2:	07d9      	lsls	r1, r3, #31
 800afe4:	d403      	bmi.n	800afee <__lo0bits+0x4e>
 800afe6:	085b      	lsrs	r3, r3, #1
 800afe8:	f100 0001 	add.w	r0, r0, #1
 800afec:	d003      	beq.n	800aff6 <__lo0bits+0x56>
 800afee:	6013      	str	r3, [r2, #0]
 800aff0:	4770      	bx	lr
 800aff2:	2000      	movs	r0, #0
 800aff4:	4770      	bx	lr
 800aff6:	2020      	movs	r0, #32
 800aff8:	4770      	bx	lr
	...

0800affc <__i2b>:
 800affc:	b510      	push	{r4, lr}
 800affe:	460c      	mov	r4, r1
 800b000:	2101      	movs	r1, #1
 800b002:	f7ff febb 	bl	800ad7c <_Balloc>
 800b006:	4602      	mov	r2, r0
 800b008:	b928      	cbnz	r0, 800b016 <__i2b+0x1a>
 800b00a:	4b05      	ldr	r3, [pc, #20]	; (800b020 <__i2b+0x24>)
 800b00c:	4805      	ldr	r0, [pc, #20]	; (800b024 <__i2b+0x28>)
 800b00e:	f240 1145 	movw	r1, #325	; 0x145
 800b012:	f7fe ff31 	bl	8009e78 <__assert_func>
 800b016:	2301      	movs	r3, #1
 800b018:	6144      	str	r4, [r0, #20]
 800b01a:	6103      	str	r3, [r0, #16]
 800b01c:	bd10      	pop	{r4, pc}
 800b01e:	bf00      	nop
 800b020:	0800dfcc 	.word	0x0800dfcc
 800b024:	0800dfdd 	.word	0x0800dfdd

0800b028 <__multiply>:
 800b028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02c:	4691      	mov	r9, r2
 800b02e:	690a      	ldr	r2, [r1, #16]
 800b030:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b034:	429a      	cmp	r2, r3
 800b036:	bfb8      	it	lt
 800b038:	460b      	movlt	r3, r1
 800b03a:	460c      	mov	r4, r1
 800b03c:	bfbc      	itt	lt
 800b03e:	464c      	movlt	r4, r9
 800b040:	4699      	movlt	r9, r3
 800b042:	6927      	ldr	r7, [r4, #16]
 800b044:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b048:	68a3      	ldr	r3, [r4, #8]
 800b04a:	6861      	ldr	r1, [r4, #4]
 800b04c:	eb07 060a 	add.w	r6, r7, sl
 800b050:	42b3      	cmp	r3, r6
 800b052:	b085      	sub	sp, #20
 800b054:	bfb8      	it	lt
 800b056:	3101      	addlt	r1, #1
 800b058:	f7ff fe90 	bl	800ad7c <_Balloc>
 800b05c:	b930      	cbnz	r0, 800b06c <__multiply+0x44>
 800b05e:	4602      	mov	r2, r0
 800b060:	4b44      	ldr	r3, [pc, #272]	; (800b174 <__multiply+0x14c>)
 800b062:	4845      	ldr	r0, [pc, #276]	; (800b178 <__multiply+0x150>)
 800b064:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b068:	f7fe ff06 	bl	8009e78 <__assert_func>
 800b06c:	f100 0514 	add.w	r5, r0, #20
 800b070:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b074:	462b      	mov	r3, r5
 800b076:	2200      	movs	r2, #0
 800b078:	4543      	cmp	r3, r8
 800b07a:	d321      	bcc.n	800b0c0 <__multiply+0x98>
 800b07c:	f104 0314 	add.w	r3, r4, #20
 800b080:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b084:	f109 0314 	add.w	r3, r9, #20
 800b088:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b08c:	9202      	str	r2, [sp, #8]
 800b08e:	1b3a      	subs	r2, r7, r4
 800b090:	3a15      	subs	r2, #21
 800b092:	f022 0203 	bic.w	r2, r2, #3
 800b096:	3204      	adds	r2, #4
 800b098:	f104 0115 	add.w	r1, r4, #21
 800b09c:	428f      	cmp	r7, r1
 800b09e:	bf38      	it	cc
 800b0a0:	2204      	movcc	r2, #4
 800b0a2:	9201      	str	r2, [sp, #4]
 800b0a4:	9a02      	ldr	r2, [sp, #8]
 800b0a6:	9303      	str	r3, [sp, #12]
 800b0a8:	429a      	cmp	r2, r3
 800b0aa:	d80c      	bhi.n	800b0c6 <__multiply+0x9e>
 800b0ac:	2e00      	cmp	r6, #0
 800b0ae:	dd03      	ble.n	800b0b8 <__multiply+0x90>
 800b0b0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d05a      	beq.n	800b16e <__multiply+0x146>
 800b0b8:	6106      	str	r6, [r0, #16]
 800b0ba:	b005      	add	sp, #20
 800b0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0c0:	f843 2b04 	str.w	r2, [r3], #4
 800b0c4:	e7d8      	b.n	800b078 <__multiply+0x50>
 800b0c6:	f8b3 a000 	ldrh.w	sl, [r3]
 800b0ca:	f1ba 0f00 	cmp.w	sl, #0
 800b0ce:	d023      	beq.n	800b118 <__multiply+0xf0>
 800b0d0:	f104 0e14 	add.w	lr, r4, #20
 800b0d4:	46a9      	mov	r9, r5
 800b0d6:	f04f 0c00 	mov.w	ip, #0
 800b0da:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b0de:	f8d9 1000 	ldr.w	r1, [r9]
 800b0e2:	fa1f fb82 	uxth.w	fp, r2
 800b0e6:	b289      	uxth	r1, r1
 800b0e8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b0ec:	4461      	add	r1, ip
 800b0ee:	f8d9 c000 	ldr.w	ip, [r9]
 800b0f2:	0c12      	lsrs	r2, r2, #16
 800b0f4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b0f8:	fb0a c202 	mla	r2, sl, r2, ip
 800b0fc:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b100:	b289      	uxth	r1, r1
 800b102:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b106:	4577      	cmp	r7, lr
 800b108:	f849 1b04 	str.w	r1, [r9], #4
 800b10c:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b110:	d8e3      	bhi.n	800b0da <__multiply+0xb2>
 800b112:	9a01      	ldr	r2, [sp, #4]
 800b114:	f845 c002 	str.w	ip, [r5, r2]
 800b118:	9a03      	ldr	r2, [sp, #12]
 800b11a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b11e:	3304      	adds	r3, #4
 800b120:	f1b9 0f00 	cmp.w	r9, #0
 800b124:	d021      	beq.n	800b16a <__multiply+0x142>
 800b126:	6829      	ldr	r1, [r5, #0]
 800b128:	f104 0c14 	add.w	ip, r4, #20
 800b12c:	46ae      	mov	lr, r5
 800b12e:	f04f 0a00 	mov.w	sl, #0
 800b132:	f8bc b000 	ldrh.w	fp, [ip]
 800b136:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b13a:	fb09 220b 	mla	r2, r9, fp, r2
 800b13e:	4452      	add	r2, sl
 800b140:	b289      	uxth	r1, r1
 800b142:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b146:	f84e 1b04 	str.w	r1, [lr], #4
 800b14a:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b14e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b152:	f8be 1000 	ldrh.w	r1, [lr]
 800b156:	fb09 110a 	mla	r1, r9, sl, r1
 800b15a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b15e:	4567      	cmp	r7, ip
 800b160:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b164:	d8e5      	bhi.n	800b132 <__multiply+0x10a>
 800b166:	9a01      	ldr	r2, [sp, #4]
 800b168:	50a9      	str	r1, [r5, r2]
 800b16a:	3504      	adds	r5, #4
 800b16c:	e79a      	b.n	800b0a4 <__multiply+0x7c>
 800b16e:	3e01      	subs	r6, #1
 800b170:	e79c      	b.n	800b0ac <__multiply+0x84>
 800b172:	bf00      	nop
 800b174:	0800dfcc 	.word	0x0800dfcc
 800b178:	0800dfdd 	.word	0x0800dfdd

0800b17c <__pow5mult>:
 800b17c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b180:	4615      	mov	r5, r2
 800b182:	f012 0203 	ands.w	r2, r2, #3
 800b186:	4606      	mov	r6, r0
 800b188:	460f      	mov	r7, r1
 800b18a:	d007      	beq.n	800b19c <__pow5mult+0x20>
 800b18c:	4c25      	ldr	r4, [pc, #148]	; (800b224 <__pow5mult+0xa8>)
 800b18e:	3a01      	subs	r2, #1
 800b190:	2300      	movs	r3, #0
 800b192:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b196:	f7ff fe53 	bl	800ae40 <__multadd>
 800b19a:	4607      	mov	r7, r0
 800b19c:	10ad      	asrs	r5, r5, #2
 800b19e:	d03d      	beq.n	800b21c <__pow5mult+0xa0>
 800b1a0:	69f4      	ldr	r4, [r6, #28]
 800b1a2:	b97c      	cbnz	r4, 800b1c4 <__pow5mult+0x48>
 800b1a4:	2010      	movs	r0, #16
 800b1a6:	f7ff fd35 	bl	800ac14 <malloc>
 800b1aa:	4602      	mov	r2, r0
 800b1ac:	61f0      	str	r0, [r6, #28]
 800b1ae:	b928      	cbnz	r0, 800b1bc <__pow5mult+0x40>
 800b1b0:	4b1d      	ldr	r3, [pc, #116]	; (800b228 <__pow5mult+0xac>)
 800b1b2:	481e      	ldr	r0, [pc, #120]	; (800b22c <__pow5mult+0xb0>)
 800b1b4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b1b8:	f7fe fe5e 	bl	8009e78 <__assert_func>
 800b1bc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b1c0:	6004      	str	r4, [r0, #0]
 800b1c2:	60c4      	str	r4, [r0, #12]
 800b1c4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b1c8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b1cc:	b94c      	cbnz	r4, 800b1e2 <__pow5mult+0x66>
 800b1ce:	f240 2171 	movw	r1, #625	; 0x271
 800b1d2:	4630      	mov	r0, r6
 800b1d4:	f7ff ff12 	bl	800affc <__i2b>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	f8c8 0008 	str.w	r0, [r8, #8]
 800b1de:	4604      	mov	r4, r0
 800b1e0:	6003      	str	r3, [r0, #0]
 800b1e2:	f04f 0900 	mov.w	r9, #0
 800b1e6:	07eb      	lsls	r3, r5, #31
 800b1e8:	d50a      	bpl.n	800b200 <__pow5mult+0x84>
 800b1ea:	4639      	mov	r1, r7
 800b1ec:	4622      	mov	r2, r4
 800b1ee:	4630      	mov	r0, r6
 800b1f0:	f7ff ff1a 	bl	800b028 <__multiply>
 800b1f4:	4639      	mov	r1, r7
 800b1f6:	4680      	mov	r8, r0
 800b1f8:	4630      	mov	r0, r6
 800b1fa:	f7ff fdff 	bl	800adfc <_Bfree>
 800b1fe:	4647      	mov	r7, r8
 800b200:	106d      	asrs	r5, r5, #1
 800b202:	d00b      	beq.n	800b21c <__pow5mult+0xa0>
 800b204:	6820      	ldr	r0, [r4, #0]
 800b206:	b938      	cbnz	r0, 800b218 <__pow5mult+0x9c>
 800b208:	4622      	mov	r2, r4
 800b20a:	4621      	mov	r1, r4
 800b20c:	4630      	mov	r0, r6
 800b20e:	f7ff ff0b 	bl	800b028 <__multiply>
 800b212:	6020      	str	r0, [r4, #0]
 800b214:	f8c0 9000 	str.w	r9, [r0]
 800b218:	4604      	mov	r4, r0
 800b21a:	e7e4      	b.n	800b1e6 <__pow5mult+0x6a>
 800b21c:	4638      	mov	r0, r7
 800b21e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b222:	bf00      	nop
 800b224:	0800e128 	.word	0x0800e128
 800b228:	0800de83 	.word	0x0800de83
 800b22c:	0800dfdd 	.word	0x0800dfdd

0800b230 <__lshift>:
 800b230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b234:	460c      	mov	r4, r1
 800b236:	6849      	ldr	r1, [r1, #4]
 800b238:	6923      	ldr	r3, [r4, #16]
 800b23a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b23e:	68a3      	ldr	r3, [r4, #8]
 800b240:	4607      	mov	r7, r0
 800b242:	4691      	mov	r9, r2
 800b244:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b248:	f108 0601 	add.w	r6, r8, #1
 800b24c:	42b3      	cmp	r3, r6
 800b24e:	db0b      	blt.n	800b268 <__lshift+0x38>
 800b250:	4638      	mov	r0, r7
 800b252:	f7ff fd93 	bl	800ad7c <_Balloc>
 800b256:	4605      	mov	r5, r0
 800b258:	b948      	cbnz	r0, 800b26e <__lshift+0x3e>
 800b25a:	4602      	mov	r2, r0
 800b25c:	4b28      	ldr	r3, [pc, #160]	; (800b300 <__lshift+0xd0>)
 800b25e:	4829      	ldr	r0, [pc, #164]	; (800b304 <__lshift+0xd4>)
 800b260:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b264:	f7fe fe08 	bl	8009e78 <__assert_func>
 800b268:	3101      	adds	r1, #1
 800b26a:	005b      	lsls	r3, r3, #1
 800b26c:	e7ee      	b.n	800b24c <__lshift+0x1c>
 800b26e:	2300      	movs	r3, #0
 800b270:	f100 0114 	add.w	r1, r0, #20
 800b274:	f100 0210 	add.w	r2, r0, #16
 800b278:	4618      	mov	r0, r3
 800b27a:	4553      	cmp	r3, sl
 800b27c:	db33      	blt.n	800b2e6 <__lshift+0xb6>
 800b27e:	6920      	ldr	r0, [r4, #16]
 800b280:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b284:	f104 0314 	add.w	r3, r4, #20
 800b288:	f019 091f 	ands.w	r9, r9, #31
 800b28c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b290:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b294:	d02b      	beq.n	800b2ee <__lshift+0xbe>
 800b296:	f1c9 0e20 	rsb	lr, r9, #32
 800b29a:	468a      	mov	sl, r1
 800b29c:	2200      	movs	r2, #0
 800b29e:	6818      	ldr	r0, [r3, #0]
 800b2a0:	fa00 f009 	lsl.w	r0, r0, r9
 800b2a4:	4310      	orrs	r0, r2
 800b2a6:	f84a 0b04 	str.w	r0, [sl], #4
 800b2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ae:	459c      	cmp	ip, r3
 800b2b0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b2b4:	d8f3      	bhi.n	800b29e <__lshift+0x6e>
 800b2b6:	ebac 0304 	sub.w	r3, ip, r4
 800b2ba:	3b15      	subs	r3, #21
 800b2bc:	f023 0303 	bic.w	r3, r3, #3
 800b2c0:	3304      	adds	r3, #4
 800b2c2:	f104 0015 	add.w	r0, r4, #21
 800b2c6:	4584      	cmp	ip, r0
 800b2c8:	bf38      	it	cc
 800b2ca:	2304      	movcc	r3, #4
 800b2cc:	50ca      	str	r2, [r1, r3]
 800b2ce:	b10a      	cbz	r2, 800b2d4 <__lshift+0xa4>
 800b2d0:	f108 0602 	add.w	r6, r8, #2
 800b2d4:	3e01      	subs	r6, #1
 800b2d6:	4638      	mov	r0, r7
 800b2d8:	612e      	str	r6, [r5, #16]
 800b2da:	4621      	mov	r1, r4
 800b2dc:	f7ff fd8e 	bl	800adfc <_Bfree>
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b2ea:	3301      	adds	r3, #1
 800b2ec:	e7c5      	b.n	800b27a <__lshift+0x4a>
 800b2ee:	3904      	subs	r1, #4
 800b2f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b2f8:	459c      	cmp	ip, r3
 800b2fa:	d8f9      	bhi.n	800b2f0 <__lshift+0xc0>
 800b2fc:	e7ea      	b.n	800b2d4 <__lshift+0xa4>
 800b2fe:	bf00      	nop
 800b300:	0800dfcc 	.word	0x0800dfcc
 800b304:	0800dfdd 	.word	0x0800dfdd

0800b308 <__mcmp>:
 800b308:	690a      	ldr	r2, [r1, #16]
 800b30a:	4603      	mov	r3, r0
 800b30c:	6900      	ldr	r0, [r0, #16]
 800b30e:	1a80      	subs	r0, r0, r2
 800b310:	b530      	push	{r4, r5, lr}
 800b312:	d10d      	bne.n	800b330 <__mcmp+0x28>
 800b314:	3314      	adds	r3, #20
 800b316:	3114      	adds	r1, #20
 800b318:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b31c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b320:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b324:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b328:	4295      	cmp	r5, r2
 800b32a:	d002      	beq.n	800b332 <__mcmp+0x2a>
 800b32c:	d304      	bcc.n	800b338 <__mcmp+0x30>
 800b32e:	2001      	movs	r0, #1
 800b330:	bd30      	pop	{r4, r5, pc}
 800b332:	42a3      	cmp	r3, r4
 800b334:	d3f4      	bcc.n	800b320 <__mcmp+0x18>
 800b336:	e7fb      	b.n	800b330 <__mcmp+0x28>
 800b338:	f04f 30ff 	mov.w	r0, #4294967295
 800b33c:	e7f8      	b.n	800b330 <__mcmp+0x28>
	...

0800b340 <__mdiff>:
 800b340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b344:	460d      	mov	r5, r1
 800b346:	4607      	mov	r7, r0
 800b348:	4611      	mov	r1, r2
 800b34a:	4628      	mov	r0, r5
 800b34c:	4614      	mov	r4, r2
 800b34e:	f7ff ffdb 	bl	800b308 <__mcmp>
 800b352:	1e06      	subs	r6, r0, #0
 800b354:	d111      	bne.n	800b37a <__mdiff+0x3a>
 800b356:	4631      	mov	r1, r6
 800b358:	4638      	mov	r0, r7
 800b35a:	f7ff fd0f 	bl	800ad7c <_Balloc>
 800b35e:	4602      	mov	r2, r0
 800b360:	b928      	cbnz	r0, 800b36e <__mdiff+0x2e>
 800b362:	4b39      	ldr	r3, [pc, #228]	; (800b448 <__mdiff+0x108>)
 800b364:	f240 2137 	movw	r1, #567	; 0x237
 800b368:	4838      	ldr	r0, [pc, #224]	; (800b44c <__mdiff+0x10c>)
 800b36a:	f7fe fd85 	bl	8009e78 <__assert_func>
 800b36e:	2301      	movs	r3, #1
 800b370:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800b374:	4610      	mov	r0, r2
 800b376:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b37a:	bfa4      	itt	ge
 800b37c:	4623      	movge	r3, r4
 800b37e:	462c      	movge	r4, r5
 800b380:	4638      	mov	r0, r7
 800b382:	6861      	ldr	r1, [r4, #4]
 800b384:	bfa6      	itte	ge
 800b386:	461d      	movge	r5, r3
 800b388:	2600      	movge	r6, #0
 800b38a:	2601      	movlt	r6, #1
 800b38c:	f7ff fcf6 	bl	800ad7c <_Balloc>
 800b390:	4602      	mov	r2, r0
 800b392:	b918      	cbnz	r0, 800b39c <__mdiff+0x5c>
 800b394:	4b2c      	ldr	r3, [pc, #176]	; (800b448 <__mdiff+0x108>)
 800b396:	f240 2145 	movw	r1, #581	; 0x245
 800b39a:	e7e5      	b.n	800b368 <__mdiff+0x28>
 800b39c:	6927      	ldr	r7, [r4, #16]
 800b39e:	60c6      	str	r6, [r0, #12]
 800b3a0:	692e      	ldr	r6, [r5, #16]
 800b3a2:	f104 0014 	add.w	r0, r4, #20
 800b3a6:	f105 0914 	add.w	r9, r5, #20
 800b3aa:	f102 0e14 	add.w	lr, r2, #20
 800b3ae:	eb00 0c87 	add.w	ip, r0, r7, lsl #2
 800b3b2:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b3b6:	3410      	adds	r4, #16
 800b3b8:	46f2      	mov	sl, lr
 800b3ba:	2100      	movs	r1, #0
 800b3bc:	f859 3b04 	ldr.w	r3, [r9], #4
 800b3c0:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800b3c4:	fa11 f88b 	uxtah	r8, r1, fp
 800b3c8:	b299      	uxth	r1, r3
 800b3ca:	0c1b      	lsrs	r3, r3, #16
 800b3cc:	eba8 0801 	sub.w	r8, r8, r1
 800b3d0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b3d4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b3d8:	fa1f f888 	uxth.w	r8, r8
 800b3dc:	1419      	asrs	r1, r3, #16
 800b3de:	454e      	cmp	r6, r9
 800b3e0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b3e4:	f84a 3b04 	str.w	r3, [sl], #4
 800b3e8:	d8e8      	bhi.n	800b3bc <__mdiff+0x7c>
 800b3ea:	1b73      	subs	r3, r6, r5
 800b3ec:	3b15      	subs	r3, #21
 800b3ee:	f023 0303 	bic.w	r3, r3, #3
 800b3f2:	3304      	adds	r3, #4
 800b3f4:	3515      	adds	r5, #21
 800b3f6:	42ae      	cmp	r6, r5
 800b3f8:	bf38      	it	cc
 800b3fa:	2304      	movcc	r3, #4
 800b3fc:	4418      	add	r0, r3
 800b3fe:	4473      	add	r3, lr
 800b400:	469e      	mov	lr, r3
 800b402:	4606      	mov	r6, r0
 800b404:	4566      	cmp	r6, ip
 800b406:	d30e      	bcc.n	800b426 <__mdiff+0xe6>
 800b408:	f10c 0103 	add.w	r1, ip, #3
 800b40c:	1a09      	subs	r1, r1, r0
 800b40e:	f021 0103 	bic.w	r1, r1, #3
 800b412:	3803      	subs	r0, #3
 800b414:	4584      	cmp	ip, r0
 800b416:	bf38      	it	cc
 800b418:	2100      	movcc	r1, #0
 800b41a:	440b      	add	r3, r1
 800b41c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b420:	b179      	cbz	r1, 800b442 <__mdiff+0x102>
 800b422:	6117      	str	r7, [r2, #16]
 800b424:	e7a6      	b.n	800b374 <__mdiff+0x34>
 800b426:	f856 8b04 	ldr.w	r8, [r6], #4
 800b42a:	fa11 f488 	uxtah	r4, r1, r8
 800b42e:	1425      	asrs	r5, r4, #16
 800b430:	eb05 4518 	add.w	r5, r5, r8, lsr #16
 800b434:	b2a4      	uxth	r4, r4
 800b436:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800b43a:	f84e 4b04 	str.w	r4, [lr], #4
 800b43e:	1429      	asrs	r1, r5, #16
 800b440:	e7e0      	b.n	800b404 <__mdiff+0xc4>
 800b442:	3f01      	subs	r7, #1
 800b444:	e7ea      	b.n	800b41c <__mdiff+0xdc>
 800b446:	bf00      	nop
 800b448:	0800dfcc 	.word	0x0800dfcc
 800b44c:	0800dfdd 	.word	0x0800dfdd

0800b450 <__ulp>:
 800b450:	4b0e      	ldr	r3, [pc, #56]	; (800b48c <__ulp+0x3c>)
 800b452:	400b      	ands	r3, r1
 800b454:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b458:	2b00      	cmp	r3, #0
 800b45a:	dc08      	bgt.n	800b46e <__ulp+0x1e>
 800b45c:	425b      	negs	r3, r3
 800b45e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b462:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b466:	da04      	bge.n	800b472 <__ulp+0x22>
 800b468:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b46c:	4113      	asrs	r3, r2
 800b46e:	2200      	movs	r2, #0
 800b470:	e008      	b.n	800b484 <__ulp+0x34>
 800b472:	f1a2 0314 	sub.w	r3, r2, #20
 800b476:	2b1e      	cmp	r3, #30
 800b478:	bfda      	itte	le
 800b47a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b47e:	40da      	lsrle	r2, r3
 800b480:	2201      	movgt	r2, #1
 800b482:	2300      	movs	r3, #0
 800b484:	4619      	mov	r1, r3
 800b486:	4610      	mov	r0, r2
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop
 800b48c:	7ff00000 	.word	0x7ff00000

0800b490 <__b2d>:
 800b490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b492:	6905      	ldr	r5, [r0, #16]
 800b494:	f100 0714 	add.w	r7, r0, #20
 800b498:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b49c:	1f2e      	subs	r6, r5, #4
 800b49e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f7ff fd5c 	bl	800af60 <__hi0bits>
 800b4a8:	f1c0 0220 	rsb	r2, r0, #32
 800b4ac:	280a      	cmp	r0, #10
 800b4ae:	f8df c06c 	ldr.w	ip, [pc, #108]	; 800b51c <__b2d+0x8c>
 800b4b2:	600a      	str	r2, [r1, #0]
 800b4b4:	4603      	mov	r3, r0
 800b4b6:	dc12      	bgt.n	800b4de <__b2d+0x4e>
 800b4b8:	f1c0 0e0b 	rsb	lr, r0, #11
 800b4bc:	fa24 f20e 	lsr.w	r2, r4, lr
 800b4c0:	42b7      	cmp	r7, r6
 800b4c2:	ea42 010c 	orr.w	r1, r2, ip
 800b4c6:	bf34      	ite	cc
 800b4c8:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b4cc:	2200      	movcs	r2, #0
 800b4ce:	3315      	adds	r3, #21
 800b4d0:	fa04 f303 	lsl.w	r3, r4, r3
 800b4d4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b4d8:	431a      	orrs	r2, r3
 800b4da:	4610      	mov	r0, r2
 800b4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4de:	42b7      	cmp	r7, r6
 800b4e0:	bf3a      	itte	cc
 800b4e2:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 800b4e6:	f1a5 0608 	subcc.w	r6, r5, #8
 800b4ea:	2200      	movcs	r2, #0
 800b4ec:	3b0b      	subs	r3, #11
 800b4ee:	d012      	beq.n	800b516 <__b2d+0x86>
 800b4f0:	f1c3 0520 	rsb	r5, r3, #32
 800b4f4:	fa22 f105 	lsr.w	r1, r2, r5
 800b4f8:	409c      	lsls	r4, r3
 800b4fa:	430c      	orrs	r4, r1
 800b4fc:	42be      	cmp	r6, r7
 800b4fe:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 800b502:	bf8c      	ite	hi
 800b504:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b508:	2400      	movls	r4, #0
 800b50a:	409a      	lsls	r2, r3
 800b50c:	40ec      	lsrs	r4, r5
 800b50e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b512:	4322      	orrs	r2, r4
 800b514:	e7e1      	b.n	800b4da <__b2d+0x4a>
 800b516:	ea44 010c 	orr.w	r1, r4, ip
 800b51a:	e7de      	b.n	800b4da <__b2d+0x4a>
 800b51c:	3ff00000 	.word	0x3ff00000

0800b520 <__d2b>:
 800b520:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b522:	2101      	movs	r1, #1
 800b524:	9e08      	ldr	r6, [sp, #32]
 800b526:	4617      	mov	r7, r2
 800b528:	461c      	mov	r4, r3
 800b52a:	f7ff fc27 	bl	800ad7c <_Balloc>
 800b52e:	4605      	mov	r5, r0
 800b530:	b930      	cbnz	r0, 800b540 <__d2b+0x20>
 800b532:	4602      	mov	r2, r0
 800b534:	4b23      	ldr	r3, [pc, #140]	; (800b5c4 <__d2b+0xa4>)
 800b536:	4824      	ldr	r0, [pc, #144]	; (800b5c8 <__d2b+0xa8>)
 800b538:	f240 310f 	movw	r1, #783	; 0x30f
 800b53c:	f7fe fc9c 	bl	8009e78 <__assert_func>
 800b540:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800b544:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800b548:	bb24      	cbnz	r4, 800b594 <__d2b+0x74>
 800b54a:	2f00      	cmp	r7, #0
 800b54c:	9301      	str	r3, [sp, #4]
 800b54e:	d026      	beq.n	800b59e <__d2b+0x7e>
 800b550:	4668      	mov	r0, sp
 800b552:	9700      	str	r7, [sp, #0]
 800b554:	f7ff fd24 	bl	800afa0 <__lo0bits>
 800b558:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b55c:	b1e8      	cbz	r0, 800b59a <__d2b+0x7a>
 800b55e:	f1c0 0320 	rsb	r3, r0, #32
 800b562:	fa02 f303 	lsl.w	r3, r2, r3
 800b566:	430b      	orrs	r3, r1
 800b568:	40c2      	lsrs	r2, r0
 800b56a:	616b      	str	r3, [r5, #20]
 800b56c:	9201      	str	r2, [sp, #4]
 800b56e:	9b01      	ldr	r3, [sp, #4]
 800b570:	61ab      	str	r3, [r5, #24]
 800b572:	2b00      	cmp	r3, #0
 800b574:	bf14      	ite	ne
 800b576:	2102      	movne	r1, #2
 800b578:	2101      	moveq	r1, #1
 800b57a:	6129      	str	r1, [r5, #16]
 800b57c:	b1bc      	cbz	r4, 800b5ae <__d2b+0x8e>
 800b57e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800b582:	4404      	add	r4, r0
 800b584:	6034      	str	r4, [r6, #0]
 800b586:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b58a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b58c:	6018      	str	r0, [r3, #0]
 800b58e:	4628      	mov	r0, r5
 800b590:	b003      	add	sp, #12
 800b592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b598:	e7d7      	b.n	800b54a <__d2b+0x2a>
 800b59a:	6169      	str	r1, [r5, #20]
 800b59c:	e7e7      	b.n	800b56e <__d2b+0x4e>
 800b59e:	a801      	add	r0, sp, #4
 800b5a0:	f7ff fcfe 	bl	800afa0 <__lo0bits>
 800b5a4:	9b01      	ldr	r3, [sp, #4]
 800b5a6:	616b      	str	r3, [r5, #20]
 800b5a8:	3020      	adds	r0, #32
 800b5aa:	2101      	movs	r1, #1
 800b5ac:	e7e5      	b.n	800b57a <__d2b+0x5a>
 800b5ae:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800b5b2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b5b6:	6030      	str	r0, [r6, #0]
 800b5b8:	6918      	ldr	r0, [r3, #16]
 800b5ba:	f7ff fcd1 	bl	800af60 <__hi0bits>
 800b5be:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800b5c2:	e7e2      	b.n	800b58a <__d2b+0x6a>
 800b5c4:	0800dfcc 	.word	0x0800dfcc
 800b5c8:	0800dfdd 	.word	0x0800dfdd

0800b5cc <__ratio>:
 800b5cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d0:	4688      	mov	r8, r1
 800b5d2:	4669      	mov	r1, sp
 800b5d4:	4681      	mov	r9, r0
 800b5d6:	f7ff ff5b 	bl	800b490 <__b2d>
 800b5da:	460f      	mov	r7, r1
 800b5dc:	4604      	mov	r4, r0
 800b5de:	460d      	mov	r5, r1
 800b5e0:	4640      	mov	r0, r8
 800b5e2:	a901      	add	r1, sp, #4
 800b5e4:	f7ff ff54 	bl	800b490 <__b2d>
 800b5e8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5ec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b5f0:	eba3 0c02 	sub.w	ip, r3, r2
 800b5f4:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b5f8:	1a9b      	subs	r3, r3, r2
 800b5fa:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	bfd5      	itete	le
 800b602:	460a      	movle	r2, r1
 800b604:	462a      	movgt	r2, r5
 800b606:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b60a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b60e:	468b      	mov	fp, r1
 800b610:	bfd8      	it	le
 800b612:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b616:	465b      	mov	r3, fp
 800b618:	4602      	mov	r2, r0
 800b61a:	4639      	mov	r1, r7
 800b61c:	4620      	mov	r0, r4
 800b61e:	f7f5 f8ed 	bl	80007fc <__aeabi_ddiv>
 800b622:	b003      	add	sp, #12
 800b624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b628 <__copybits>:
 800b628:	3901      	subs	r1, #1
 800b62a:	b570      	push	{r4, r5, r6, lr}
 800b62c:	1149      	asrs	r1, r1, #5
 800b62e:	6914      	ldr	r4, [r2, #16]
 800b630:	3101      	adds	r1, #1
 800b632:	f102 0314 	add.w	r3, r2, #20
 800b636:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b63a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b63e:	1f05      	subs	r5, r0, #4
 800b640:	42a3      	cmp	r3, r4
 800b642:	d30c      	bcc.n	800b65e <__copybits+0x36>
 800b644:	1aa3      	subs	r3, r4, r2
 800b646:	3b11      	subs	r3, #17
 800b648:	f023 0303 	bic.w	r3, r3, #3
 800b64c:	3211      	adds	r2, #17
 800b64e:	42a2      	cmp	r2, r4
 800b650:	bf88      	it	hi
 800b652:	2300      	movhi	r3, #0
 800b654:	4418      	add	r0, r3
 800b656:	2300      	movs	r3, #0
 800b658:	4288      	cmp	r0, r1
 800b65a:	d305      	bcc.n	800b668 <__copybits+0x40>
 800b65c:	bd70      	pop	{r4, r5, r6, pc}
 800b65e:	f853 6b04 	ldr.w	r6, [r3], #4
 800b662:	f845 6f04 	str.w	r6, [r5, #4]!
 800b666:	e7eb      	b.n	800b640 <__copybits+0x18>
 800b668:	f840 3b04 	str.w	r3, [r0], #4
 800b66c:	e7f4      	b.n	800b658 <__copybits+0x30>

0800b66e <__any_on>:
 800b66e:	f100 0214 	add.w	r2, r0, #20
 800b672:	6900      	ldr	r0, [r0, #16]
 800b674:	114b      	asrs	r3, r1, #5
 800b676:	4298      	cmp	r0, r3
 800b678:	b510      	push	{r4, lr}
 800b67a:	db11      	blt.n	800b6a0 <__any_on+0x32>
 800b67c:	dd0a      	ble.n	800b694 <__any_on+0x26>
 800b67e:	f011 011f 	ands.w	r1, r1, #31
 800b682:	d007      	beq.n	800b694 <__any_on+0x26>
 800b684:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b688:	fa24 f001 	lsr.w	r0, r4, r1
 800b68c:	fa00 f101 	lsl.w	r1, r0, r1
 800b690:	428c      	cmp	r4, r1
 800b692:	d10b      	bne.n	800b6ac <__any_on+0x3e>
 800b694:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b698:	4293      	cmp	r3, r2
 800b69a:	d803      	bhi.n	800b6a4 <__any_on+0x36>
 800b69c:	2000      	movs	r0, #0
 800b69e:	bd10      	pop	{r4, pc}
 800b6a0:	4603      	mov	r3, r0
 800b6a2:	e7f7      	b.n	800b694 <__any_on+0x26>
 800b6a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b6a8:	2900      	cmp	r1, #0
 800b6aa:	d0f5      	beq.n	800b698 <__any_on+0x2a>
 800b6ac:	2001      	movs	r0, #1
 800b6ae:	e7f6      	b.n	800b69e <__any_on+0x30>

0800b6b0 <sulp>:
 800b6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	4690      	mov	r8, r2
 800b6b8:	f7ff feca 	bl	800b450 <__ulp>
 800b6bc:	4604      	mov	r4, r0
 800b6be:	460d      	mov	r5, r1
 800b6c0:	f1b8 0f00 	cmp.w	r8, #0
 800b6c4:	d011      	beq.n	800b6ea <sulp+0x3a>
 800b6c6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800b6ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	dd0b      	ble.n	800b6ea <sulp+0x3a>
 800b6d2:	051b      	lsls	r3, r3, #20
 800b6d4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b6d8:	2400      	movs	r4, #0
 800b6da:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b6de:	4622      	mov	r2, r4
 800b6e0:	462b      	mov	r3, r5
 800b6e2:	f7f4 ff61 	bl	80005a8 <__aeabi_dmul>
 800b6e6:	4604      	mov	r4, r0
 800b6e8:	460d      	mov	r5, r1
 800b6ea:	4620      	mov	r0, r4
 800b6ec:	4629      	mov	r1, r5
 800b6ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6f2:	0000      	movs	r0, r0
 800b6f4:	0000      	movs	r0, r0
	...

0800b6f8 <_strtod_l>:
 800b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6fc:	b09f      	sub	sp, #124	; 0x7c
 800b6fe:	4604      	mov	r4, r0
 800b700:	9217      	str	r2, [sp, #92]	; 0x5c
 800b702:	2200      	movs	r2, #0
 800b704:	921a      	str	r2, [sp, #104]	; 0x68
 800b706:	460d      	mov	r5, r1
 800b708:	f04f 0800 	mov.w	r8, #0
 800b70c:	f04f 0900 	mov.w	r9, #0
 800b710:	460a      	mov	r2, r1
 800b712:	9219      	str	r2, [sp, #100]	; 0x64
 800b714:	7811      	ldrb	r1, [r2, #0]
 800b716:	292b      	cmp	r1, #43	; 0x2b
 800b718:	d04a      	beq.n	800b7b0 <_strtod_l+0xb8>
 800b71a:	d838      	bhi.n	800b78e <_strtod_l+0x96>
 800b71c:	290d      	cmp	r1, #13
 800b71e:	d832      	bhi.n	800b786 <_strtod_l+0x8e>
 800b720:	2908      	cmp	r1, #8
 800b722:	d832      	bhi.n	800b78a <_strtod_l+0x92>
 800b724:	2900      	cmp	r1, #0
 800b726:	d03b      	beq.n	800b7a0 <_strtod_l+0xa8>
 800b728:	2200      	movs	r2, #0
 800b72a:	920e      	str	r2, [sp, #56]	; 0x38
 800b72c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800b72e:	7832      	ldrb	r2, [r6, #0]
 800b730:	2a30      	cmp	r2, #48	; 0x30
 800b732:	f040 80b2 	bne.w	800b89a <_strtod_l+0x1a2>
 800b736:	7872      	ldrb	r2, [r6, #1]
 800b738:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b73c:	2a58      	cmp	r2, #88	; 0x58
 800b73e:	d16e      	bne.n	800b81e <_strtod_l+0x126>
 800b740:	9302      	str	r3, [sp, #8]
 800b742:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b744:	9301      	str	r3, [sp, #4]
 800b746:	ab1a      	add	r3, sp, #104	; 0x68
 800b748:	9300      	str	r3, [sp, #0]
 800b74a:	4a8d      	ldr	r2, [pc, #564]	; (800b980 <_strtod_l+0x288>)
 800b74c:	ab1b      	add	r3, sp, #108	; 0x6c
 800b74e:	a919      	add	r1, sp, #100	; 0x64
 800b750:	4620      	mov	r0, r4
 800b752:	f001 f91f 	bl	800c994 <__gethex>
 800b756:	f010 070f 	ands.w	r7, r0, #15
 800b75a:	4605      	mov	r5, r0
 800b75c:	d005      	beq.n	800b76a <_strtod_l+0x72>
 800b75e:	2f06      	cmp	r7, #6
 800b760:	d128      	bne.n	800b7b4 <_strtod_l+0xbc>
 800b762:	3601      	adds	r6, #1
 800b764:	2300      	movs	r3, #0
 800b766:	9619      	str	r6, [sp, #100]	; 0x64
 800b768:	930e      	str	r3, [sp, #56]	; 0x38
 800b76a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f040 859c 	bne.w	800c2aa <_strtod_l+0xbb2>
 800b772:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b774:	b1cb      	cbz	r3, 800b7aa <_strtod_l+0xb2>
 800b776:	4642      	mov	r2, r8
 800b778:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b77c:	4610      	mov	r0, r2
 800b77e:	4619      	mov	r1, r3
 800b780:	b01f      	add	sp, #124	; 0x7c
 800b782:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b786:	2920      	cmp	r1, #32
 800b788:	d1ce      	bne.n	800b728 <_strtod_l+0x30>
 800b78a:	3201      	adds	r2, #1
 800b78c:	e7c1      	b.n	800b712 <_strtod_l+0x1a>
 800b78e:	292d      	cmp	r1, #45	; 0x2d
 800b790:	d1ca      	bne.n	800b728 <_strtod_l+0x30>
 800b792:	2101      	movs	r1, #1
 800b794:	910e      	str	r1, [sp, #56]	; 0x38
 800b796:	1c51      	adds	r1, r2, #1
 800b798:	9119      	str	r1, [sp, #100]	; 0x64
 800b79a:	7852      	ldrb	r2, [r2, #1]
 800b79c:	2a00      	cmp	r2, #0
 800b79e:	d1c5      	bne.n	800b72c <_strtod_l+0x34>
 800b7a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b7a2:	9519      	str	r5, [sp, #100]	; 0x64
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	f040 857e 	bne.w	800c2a6 <_strtod_l+0xbae>
 800b7aa:	4642      	mov	r2, r8
 800b7ac:	464b      	mov	r3, r9
 800b7ae:	e7e5      	b.n	800b77c <_strtod_l+0x84>
 800b7b0:	2100      	movs	r1, #0
 800b7b2:	e7ef      	b.n	800b794 <_strtod_l+0x9c>
 800b7b4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b7b6:	b13a      	cbz	r2, 800b7c8 <_strtod_l+0xd0>
 800b7b8:	2135      	movs	r1, #53	; 0x35
 800b7ba:	a81c      	add	r0, sp, #112	; 0x70
 800b7bc:	f7ff ff34 	bl	800b628 <__copybits>
 800b7c0:	991a      	ldr	r1, [sp, #104]	; 0x68
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f7ff fb1a 	bl	800adfc <_Bfree>
 800b7c8:	3f01      	subs	r7, #1
 800b7ca:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b7cc:	2f04      	cmp	r7, #4
 800b7ce:	d806      	bhi.n	800b7de <_strtod_l+0xe6>
 800b7d0:	e8df f007 	tbb	[pc, r7]
 800b7d4:	201d0314 	.word	0x201d0314
 800b7d8:	14          	.byte	0x14
 800b7d9:	00          	.byte	0x00
 800b7da:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800b7de:	05e9      	lsls	r1, r5, #23
 800b7e0:	bf48      	it	mi
 800b7e2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b7e6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b7ea:	0d1b      	lsrs	r3, r3, #20
 800b7ec:	051b      	lsls	r3, r3, #20
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d1bb      	bne.n	800b76a <_strtod_l+0x72>
 800b7f2:	f7fe fb01 	bl	8009df8 <__errno>
 800b7f6:	2322      	movs	r3, #34	; 0x22
 800b7f8:	6003      	str	r3, [r0, #0]
 800b7fa:	e7b6      	b.n	800b76a <_strtod_l+0x72>
 800b7fc:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800b800:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b804:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b808:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b80c:	e7e7      	b.n	800b7de <_strtod_l+0xe6>
 800b80e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 800b984 <_strtod_l+0x28c>
 800b812:	e7e4      	b.n	800b7de <_strtod_l+0xe6>
 800b814:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b818:	f04f 38ff 	mov.w	r8, #4294967295
 800b81c:	e7df      	b.n	800b7de <_strtod_l+0xe6>
 800b81e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b820:	1c5a      	adds	r2, r3, #1
 800b822:	9219      	str	r2, [sp, #100]	; 0x64
 800b824:	785b      	ldrb	r3, [r3, #1]
 800b826:	2b30      	cmp	r3, #48	; 0x30
 800b828:	d0f9      	beq.n	800b81e <_strtod_l+0x126>
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d09d      	beq.n	800b76a <_strtod_l+0x72>
 800b82e:	2301      	movs	r3, #1
 800b830:	f04f 0a00 	mov.w	sl, #0
 800b834:	9305      	str	r3, [sp, #20]
 800b836:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b838:	930b      	str	r3, [sp, #44]	; 0x2c
 800b83a:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800b83e:	46d3      	mov	fp, sl
 800b840:	220a      	movs	r2, #10
 800b842:	9819      	ldr	r0, [sp, #100]	; 0x64
 800b844:	7806      	ldrb	r6, [r0, #0]
 800b846:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b84a:	b2d9      	uxtb	r1, r3
 800b84c:	2909      	cmp	r1, #9
 800b84e:	d926      	bls.n	800b89e <_strtod_l+0x1a6>
 800b850:	494d      	ldr	r1, [pc, #308]	; (800b988 <_strtod_l+0x290>)
 800b852:	2201      	movs	r2, #1
 800b854:	f000 fff4 	bl	800c840 <strncmp>
 800b858:	2800      	cmp	r0, #0
 800b85a:	d030      	beq.n	800b8be <_strtod_l+0x1c6>
 800b85c:	2000      	movs	r0, #0
 800b85e:	4632      	mov	r2, r6
 800b860:	9008      	str	r0, [sp, #32]
 800b862:	465e      	mov	r6, fp
 800b864:	4603      	mov	r3, r0
 800b866:	2a65      	cmp	r2, #101	; 0x65
 800b868:	d001      	beq.n	800b86e <_strtod_l+0x176>
 800b86a:	2a45      	cmp	r2, #69	; 0x45
 800b86c:	d113      	bne.n	800b896 <_strtod_l+0x19e>
 800b86e:	b91e      	cbnz	r6, 800b878 <_strtod_l+0x180>
 800b870:	9a05      	ldr	r2, [sp, #20]
 800b872:	4302      	orrs	r2, r0
 800b874:	d094      	beq.n	800b7a0 <_strtod_l+0xa8>
 800b876:	2600      	movs	r6, #0
 800b878:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800b87a:	1c6a      	adds	r2, r5, #1
 800b87c:	9219      	str	r2, [sp, #100]	; 0x64
 800b87e:	786a      	ldrb	r2, [r5, #1]
 800b880:	2a2b      	cmp	r2, #43	; 0x2b
 800b882:	d074      	beq.n	800b96e <_strtod_l+0x276>
 800b884:	2a2d      	cmp	r2, #45	; 0x2d
 800b886:	d078      	beq.n	800b97a <_strtod_l+0x282>
 800b888:	f04f 0c00 	mov.w	ip, #0
 800b88c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b890:	2909      	cmp	r1, #9
 800b892:	d97f      	bls.n	800b994 <_strtod_l+0x29c>
 800b894:	9519      	str	r5, [sp, #100]	; 0x64
 800b896:	2700      	movs	r7, #0
 800b898:	e09e      	b.n	800b9d8 <_strtod_l+0x2e0>
 800b89a:	2300      	movs	r3, #0
 800b89c:	e7c8      	b.n	800b830 <_strtod_l+0x138>
 800b89e:	f1bb 0f08 	cmp.w	fp, #8
 800b8a2:	bfd8      	it	le
 800b8a4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 800b8a6:	f100 0001 	add.w	r0, r0, #1
 800b8aa:	bfda      	itte	le
 800b8ac:	fb02 3301 	mlale	r3, r2, r1, r3
 800b8b0:	930a      	strle	r3, [sp, #40]	; 0x28
 800b8b2:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b8b6:	f10b 0b01 	add.w	fp, fp, #1
 800b8ba:	9019      	str	r0, [sp, #100]	; 0x64
 800b8bc:	e7c1      	b.n	800b842 <_strtod_l+0x14a>
 800b8be:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8c0:	1c5a      	adds	r2, r3, #1
 800b8c2:	9219      	str	r2, [sp, #100]	; 0x64
 800b8c4:	785a      	ldrb	r2, [r3, #1]
 800b8c6:	f1bb 0f00 	cmp.w	fp, #0
 800b8ca:	d037      	beq.n	800b93c <_strtod_l+0x244>
 800b8cc:	9008      	str	r0, [sp, #32]
 800b8ce:	465e      	mov	r6, fp
 800b8d0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b8d4:	2b09      	cmp	r3, #9
 800b8d6:	d912      	bls.n	800b8fe <_strtod_l+0x206>
 800b8d8:	2301      	movs	r3, #1
 800b8da:	e7c4      	b.n	800b866 <_strtod_l+0x16e>
 800b8dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8de:	1c5a      	adds	r2, r3, #1
 800b8e0:	9219      	str	r2, [sp, #100]	; 0x64
 800b8e2:	785a      	ldrb	r2, [r3, #1]
 800b8e4:	3001      	adds	r0, #1
 800b8e6:	2a30      	cmp	r2, #48	; 0x30
 800b8e8:	d0f8      	beq.n	800b8dc <_strtod_l+0x1e4>
 800b8ea:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b8ee:	2b08      	cmp	r3, #8
 800b8f0:	f200 84e0 	bhi.w	800c2b4 <_strtod_l+0xbbc>
 800b8f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b8f6:	9008      	str	r0, [sp, #32]
 800b8f8:	2000      	movs	r0, #0
 800b8fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	3a30      	subs	r2, #48	; 0x30
 800b900:	f100 0301 	add.w	r3, r0, #1
 800b904:	d014      	beq.n	800b930 <_strtod_l+0x238>
 800b906:	9908      	ldr	r1, [sp, #32]
 800b908:	4419      	add	r1, r3
 800b90a:	9108      	str	r1, [sp, #32]
 800b90c:	4633      	mov	r3, r6
 800b90e:	eb00 0c06 	add.w	ip, r0, r6
 800b912:	210a      	movs	r1, #10
 800b914:	4563      	cmp	r3, ip
 800b916:	d113      	bne.n	800b940 <_strtod_l+0x248>
 800b918:	1833      	adds	r3, r6, r0
 800b91a:	2b08      	cmp	r3, #8
 800b91c:	f106 0601 	add.w	r6, r6, #1
 800b920:	4406      	add	r6, r0
 800b922:	dc1a      	bgt.n	800b95a <_strtod_l+0x262>
 800b924:	990a      	ldr	r1, [sp, #40]	; 0x28
 800b926:	230a      	movs	r3, #10
 800b928:	fb03 2301 	mla	r3, r3, r1, r2
 800b92c:	930a      	str	r3, [sp, #40]	; 0x28
 800b92e:	2300      	movs	r3, #0
 800b930:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b932:	1c51      	adds	r1, r2, #1
 800b934:	9119      	str	r1, [sp, #100]	; 0x64
 800b936:	7852      	ldrb	r2, [r2, #1]
 800b938:	4618      	mov	r0, r3
 800b93a:	e7c9      	b.n	800b8d0 <_strtod_l+0x1d8>
 800b93c:	4658      	mov	r0, fp
 800b93e:	e7d2      	b.n	800b8e6 <_strtod_l+0x1ee>
 800b940:	2b08      	cmp	r3, #8
 800b942:	f103 0301 	add.w	r3, r3, #1
 800b946:	dc03      	bgt.n	800b950 <_strtod_l+0x258>
 800b948:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800b94a:	434f      	muls	r7, r1
 800b94c:	970a      	str	r7, [sp, #40]	; 0x28
 800b94e:	e7e1      	b.n	800b914 <_strtod_l+0x21c>
 800b950:	2b10      	cmp	r3, #16
 800b952:	bfd8      	it	le
 800b954:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b958:	e7dc      	b.n	800b914 <_strtod_l+0x21c>
 800b95a:	2e10      	cmp	r6, #16
 800b95c:	bfdc      	itt	le
 800b95e:	230a      	movle	r3, #10
 800b960:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b964:	e7e3      	b.n	800b92e <_strtod_l+0x236>
 800b966:	2300      	movs	r3, #0
 800b968:	9308      	str	r3, [sp, #32]
 800b96a:	2301      	movs	r3, #1
 800b96c:	e780      	b.n	800b870 <_strtod_l+0x178>
 800b96e:	f04f 0c00 	mov.w	ip, #0
 800b972:	1caa      	adds	r2, r5, #2
 800b974:	9219      	str	r2, [sp, #100]	; 0x64
 800b976:	78aa      	ldrb	r2, [r5, #2]
 800b978:	e788      	b.n	800b88c <_strtod_l+0x194>
 800b97a:	f04f 0c01 	mov.w	ip, #1
 800b97e:	e7f8      	b.n	800b972 <_strtod_l+0x27a>
 800b980:	0800e138 	.word	0x0800e138
 800b984:	7ff00000 	.word	0x7ff00000
 800b988:	0800e134 	.word	0x0800e134
 800b98c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b98e:	1c51      	adds	r1, r2, #1
 800b990:	9119      	str	r1, [sp, #100]	; 0x64
 800b992:	7852      	ldrb	r2, [r2, #1]
 800b994:	2a30      	cmp	r2, #48	; 0x30
 800b996:	d0f9      	beq.n	800b98c <_strtod_l+0x294>
 800b998:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b99c:	2908      	cmp	r1, #8
 800b99e:	f63f af7a 	bhi.w	800b896 <_strtod_l+0x19e>
 800b9a2:	3a30      	subs	r2, #48	; 0x30
 800b9a4:	9209      	str	r2, [sp, #36]	; 0x24
 800b9a6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b9a8:	920c      	str	r2, [sp, #48]	; 0x30
 800b9aa:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b9ac:	1c57      	adds	r7, r2, #1
 800b9ae:	9719      	str	r7, [sp, #100]	; 0x64
 800b9b0:	7852      	ldrb	r2, [r2, #1]
 800b9b2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b9b6:	f1be 0f09 	cmp.w	lr, #9
 800b9ba:	d938      	bls.n	800ba2e <_strtod_l+0x336>
 800b9bc:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b9be:	1a7f      	subs	r7, r7, r1
 800b9c0:	2f08      	cmp	r7, #8
 800b9c2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b9c6:	dc03      	bgt.n	800b9d0 <_strtod_l+0x2d8>
 800b9c8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b9ca:	428f      	cmp	r7, r1
 800b9cc:	bfa8      	it	ge
 800b9ce:	460f      	movge	r7, r1
 800b9d0:	f1bc 0f00 	cmp.w	ip, #0
 800b9d4:	d000      	beq.n	800b9d8 <_strtod_l+0x2e0>
 800b9d6:	427f      	negs	r7, r7
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	d14f      	bne.n	800ba7c <_strtod_l+0x384>
 800b9dc:	9905      	ldr	r1, [sp, #20]
 800b9de:	4301      	orrs	r1, r0
 800b9e0:	f47f aec3 	bne.w	800b76a <_strtod_l+0x72>
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	f47f aedb 	bne.w	800b7a0 <_strtod_l+0xa8>
 800b9ea:	2a69      	cmp	r2, #105	; 0x69
 800b9ec:	d029      	beq.n	800ba42 <_strtod_l+0x34a>
 800b9ee:	dc26      	bgt.n	800ba3e <_strtod_l+0x346>
 800b9f0:	2a49      	cmp	r2, #73	; 0x49
 800b9f2:	d026      	beq.n	800ba42 <_strtod_l+0x34a>
 800b9f4:	2a4e      	cmp	r2, #78	; 0x4e
 800b9f6:	f47f aed3 	bne.w	800b7a0 <_strtod_l+0xa8>
 800b9fa:	499a      	ldr	r1, [pc, #616]	; (800bc64 <_strtod_l+0x56c>)
 800b9fc:	a819      	add	r0, sp, #100	; 0x64
 800b9fe:	f001 fa0b 	bl	800ce18 <__match>
 800ba02:	2800      	cmp	r0, #0
 800ba04:	f43f aecc 	beq.w	800b7a0 <_strtod_l+0xa8>
 800ba08:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	2b28      	cmp	r3, #40	; 0x28
 800ba0e:	d12f      	bne.n	800ba70 <_strtod_l+0x378>
 800ba10:	4995      	ldr	r1, [pc, #596]	; (800bc68 <_strtod_l+0x570>)
 800ba12:	aa1c      	add	r2, sp, #112	; 0x70
 800ba14:	a819      	add	r0, sp, #100	; 0x64
 800ba16:	f001 fa13 	bl	800ce40 <__hexnan>
 800ba1a:	2805      	cmp	r0, #5
 800ba1c:	d128      	bne.n	800ba70 <_strtod_l+0x378>
 800ba1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ba20:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800ba24:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800ba28:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800ba2c:	e69d      	b.n	800b76a <_strtod_l+0x72>
 800ba2e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ba30:	210a      	movs	r1, #10
 800ba32:	fb01 2107 	mla	r1, r1, r7, r2
 800ba36:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800ba3a:	9209      	str	r2, [sp, #36]	; 0x24
 800ba3c:	e7b5      	b.n	800b9aa <_strtod_l+0x2b2>
 800ba3e:	2a6e      	cmp	r2, #110	; 0x6e
 800ba40:	e7d9      	b.n	800b9f6 <_strtod_l+0x2fe>
 800ba42:	498a      	ldr	r1, [pc, #552]	; (800bc6c <_strtod_l+0x574>)
 800ba44:	a819      	add	r0, sp, #100	; 0x64
 800ba46:	f001 f9e7 	bl	800ce18 <__match>
 800ba4a:	2800      	cmp	r0, #0
 800ba4c:	f43f aea8 	beq.w	800b7a0 <_strtod_l+0xa8>
 800ba50:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba52:	4987      	ldr	r1, [pc, #540]	; (800bc70 <_strtod_l+0x578>)
 800ba54:	3b01      	subs	r3, #1
 800ba56:	a819      	add	r0, sp, #100	; 0x64
 800ba58:	9319      	str	r3, [sp, #100]	; 0x64
 800ba5a:	f001 f9dd 	bl	800ce18 <__match>
 800ba5e:	b910      	cbnz	r0, 800ba66 <_strtod_l+0x36e>
 800ba60:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ba62:	3301      	adds	r3, #1
 800ba64:	9319      	str	r3, [sp, #100]	; 0x64
 800ba66:	f8df 920c 	ldr.w	r9, [pc, #524]	; 800bc74 <_strtod_l+0x57c>
 800ba6a:	f04f 0800 	mov.w	r8, #0
 800ba6e:	e67c      	b.n	800b76a <_strtod_l+0x72>
 800ba70:	4881      	ldr	r0, [pc, #516]	; (800bc78 <_strtod_l+0x580>)
 800ba72:	f000 ff07 	bl	800c884 <nan>
 800ba76:	4680      	mov	r8, r0
 800ba78:	4689      	mov	r9, r1
 800ba7a:	e676      	b.n	800b76a <_strtod_l+0x72>
 800ba7c:	9b08      	ldr	r3, [sp, #32]
 800ba7e:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ba80:	1afb      	subs	r3, r7, r3
 800ba82:	f1bb 0f00 	cmp.w	fp, #0
 800ba86:	bf08      	it	eq
 800ba88:	46b3      	moveq	fp, r6
 800ba8a:	2e10      	cmp	r6, #16
 800ba8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba8e:	4635      	mov	r5, r6
 800ba90:	bfa8      	it	ge
 800ba92:	2510      	movge	r5, #16
 800ba94:	f7f4 fd0e 	bl	80004b4 <__aeabi_ui2d>
 800ba98:	2e09      	cmp	r6, #9
 800ba9a:	4680      	mov	r8, r0
 800ba9c:	4689      	mov	r9, r1
 800ba9e:	dd13      	ble.n	800bac8 <_strtod_l+0x3d0>
 800baa0:	4b76      	ldr	r3, [pc, #472]	; (800bc7c <_strtod_l+0x584>)
 800baa2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800baa6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800baaa:	f7f4 fd7d 	bl	80005a8 <__aeabi_dmul>
 800baae:	4680      	mov	r8, r0
 800bab0:	4650      	mov	r0, sl
 800bab2:	4689      	mov	r9, r1
 800bab4:	f7f4 fcfe 	bl	80004b4 <__aeabi_ui2d>
 800bab8:	4602      	mov	r2, r0
 800baba:	460b      	mov	r3, r1
 800babc:	4640      	mov	r0, r8
 800babe:	4649      	mov	r1, r9
 800bac0:	f7f4 fbbc 	bl	800023c <__adddf3>
 800bac4:	4680      	mov	r8, r0
 800bac6:	4689      	mov	r9, r1
 800bac8:	2e0f      	cmp	r6, #15
 800baca:	dc36      	bgt.n	800bb3a <_strtod_l+0x442>
 800bacc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bace:	2b00      	cmp	r3, #0
 800bad0:	f43f ae4b 	beq.w	800b76a <_strtod_l+0x72>
 800bad4:	dd22      	ble.n	800bb1c <_strtod_l+0x424>
 800bad6:	2b16      	cmp	r3, #22
 800bad8:	dc09      	bgt.n	800baee <_strtod_l+0x3f6>
 800bada:	4968      	ldr	r1, [pc, #416]	; (800bc7c <_strtod_l+0x584>)
 800badc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bae0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bae4:	4642      	mov	r2, r8
 800bae6:	464b      	mov	r3, r9
 800bae8:	f7f4 fd5e 	bl	80005a8 <__aeabi_dmul>
 800baec:	e7c3      	b.n	800ba76 <_strtod_l+0x37e>
 800baee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800baf0:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800baf4:	4293      	cmp	r3, r2
 800baf6:	db20      	blt.n	800bb3a <_strtod_l+0x442>
 800baf8:	4c60      	ldr	r4, [pc, #384]	; (800bc7c <_strtod_l+0x584>)
 800bafa:	f1c6 060f 	rsb	r6, r6, #15
 800bafe:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bb02:	4642      	mov	r2, r8
 800bb04:	464b      	mov	r3, r9
 800bb06:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb0a:	f7f4 fd4d 	bl	80005a8 <__aeabi_dmul>
 800bb0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb10:	1b9e      	subs	r6, r3, r6
 800bb12:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bb16:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bb1a:	e7e5      	b.n	800bae8 <_strtod_l+0x3f0>
 800bb1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb1e:	3316      	adds	r3, #22
 800bb20:	db0b      	blt.n	800bb3a <_strtod_l+0x442>
 800bb22:	9b08      	ldr	r3, [sp, #32]
 800bb24:	1bdf      	subs	r7, r3, r7
 800bb26:	4b55      	ldr	r3, [pc, #340]	; (800bc7c <_strtod_l+0x584>)
 800bb28:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bb2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb30:	4640      	mov	r0, r8
 800bb32:	4649      	mov	r1, r9
 800bb34:	f7f4 fe62 	bl	80007fc <__aeabi_ddiv>
 800bb38:	e79d      	b.n	800ba76 <_strtod_l+0x37e>
 800bb3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb3c:	1b75      	subs	r5, r6, r5
 800bb3e:	441d      	add	r5, r3
 800bb40:	2d00      	cmp	r5, #0
 800bb42:	dd70      	ble.n	800bc26 <_strtod_l+0x52e>
 800bb44:	f015 030f 	ands.w	r3, r5, #15
 800bb48:	d00a      	beq.n	800bb60 <_strtod_l+0x468>
 800bb4a:	494c      	ldr	r1, [pc, #304]	; (800bc7c <_strtod_l+0x584>)
 800bb4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bb50:	4642      	mov	r2, r8
 800bb52:	464b      	mov	r3, r9
 800bb54:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bb58:	f7f4 fd26 	bl	80005a8 <__aeabi_dmul>
 800bb5c:	4680      	mov	r8, r0
 800bb5e:	4689      	mov	r9, r1
 800bb60:	f035 050f 	bics.w	r5, r5, #15
 800bb64:	d04d      	beq.n	800bc02 <_strtod_l+0x50a>
 800bb66:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bb6a:	dd22      	ble.n	800bbb2 <_strtod_l+0x4ba>
 800bb6c:	2600      	movs	r6, #0
 800bb6e:	46b3      	mov	fp, r6
 800bb70:	960b      	str	r6, [sp, #44]	; 0x2c
 800bb72:	9608      	str	r6, [sp, #32]
 800bb74:	2322      	movs	r3, #34	; 0x22
 800bb76:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 800bc74 <_strtod_l+0x57c>
 800bb7a:	6023      	str	r3, [r4, #0]
 800bb7c:	f04f 0800 	mov.w	r8, #0
 800bb80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	f43f adf1 	beq.w	800b76a <_strtod_l+0x72>
 800bb88:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	f7ff f936 	bl	800adfc <_Bfree>
 800bb90:	9908      	ldr	r1, [sp, #32]
 800bb92:	4620      	mov	r0, r4
 800bb94:	f7ff f932 	bl	800adfc <_Bfree>
 800bb98:	4659      	mov	r1, fp
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f7ff f92e 	bl	800adfc <_Bfree>
 800bba0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bba2:	4620      	mov	r0, r4
 800bba4:	f7ff f92a 	bl	800adfc <_Bfree>
 800bba8:	4631      	mov	r1, r6
 800bbaa:	4620      	mov	r0, r4
 800bbac:	f7ff f926 	bl	800adfc <_Bfree>
 800bbb0:	e5db      	b.n	800b76a <_strtod_l+0x72>
 800bbb2:	4b33      	ldr	r3, [pc, #204]	; (800bc80 <_strtod_l+0x588>)
 800bbb4:	9305      	str	r3, [sp, #20]
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	112d      	asrs	r5, r5, #4
 800bbba:	4640      	mov	r0, r8
 800bbbc:	4649      	mov	r1, r9
 800bbbe:	469a      	mov	sl, r3
 800bbc0:	2d01      	cmp	r5, #1
 800bbc2:	dc21      	bgt.n	800bc08 <_strtod_l+0x510>
 800bbc4:	b10b      	cbz	r3, 800bbca <_strtod_l+0x4d2>
 800bbc6:	4680      	mov	r8, r0
 800bbc8:	4689      	mov	r9, r1
 800bbca:	492d      	ldr	r1, [pc, #180]	; (800bc80 <_strtod_l+0x588>)
 800bbcc:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bbd0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bbd4:	4642      	mov	r2, r8
 800bbd6:	464b      	mov	r3, r9
 800bbd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbdc:	f7f4 fce4 	bl	80005a8 <__aeabi_dmul>
 800bbe0:	4b24      	ldr	r3, [pc, #144]	; (800bc74 <_strtod_l+0x57c>)
 800bbe2:	460a      	mov	r2, r1
 800bbe4:	400b      	ands	r3, r1
 800bbe6:	4927      	ldr	r1, [pc, #156]	; (800bc84 <_strtod_l+0x58c>)
 800bbe8:	428b      	cmp	r3, r1
 800bbea:	4680      	mov	r8, r0
 800bbec:	d8be      	bhi.n	800bb6c <_strtod_l+0x474>
 800bbee:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bbf2:	428b      	cmp	r3, r1
 800bbf4:	bf86      	itte	hi
 800bbf6:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bc88 <_strtod_l+0x590>
 800bbfa:	f04f 38ff 	movhi.w	r8, #4294967295
 800bbfe:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bc02:	2300      	movs	r3, #0
 800bc04:	9305      	str	r3, [sp, #20]
 800bc06:	e07b      	b.n	800bd00 <_strtod_l+0x608>
 800bc08:	07ea      	lsls	r2, r5, #31
 800bc0a:	d505      	bpl.n	800bc18 <_strtod_l+0x520>
 800bc0c:	9b05      	ldr	r3, [sp, #20]
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	f7f4 fcc9 	bl	80005a8 <__aeabi_dmul>
 800bc16:	2301      	movs	r3, #1
 800bc18:	9a05      	ldr	r2, [sp, #20]
 800bc1a:	3208      	adds	r2, #8
 800bc1c:	f10a 0a01 	add.w	sl, sl, #1
 800bc20:	106d      	asrs	r5, r5, #1
 800bc22:	9205      	str	r2, [sp, #20]
 800bc24:	e7cc      	b.n	800bbc0 <_strtod_l+0x4c8>
 800bc26:	d0ec      	beq.n	800bc02 <_strtod_l+0x50a>
 800bc28:	426d      	negs	r5, r5
 800bc2a:	f015 020f 	ands.w	r2, r5, #15
 800bc2e:	d00a      	beq.n	800bc46 <_strtod_l+0x54e>
 800bc30:	4b12      	ldr	r3, [pc, #72]	; (800bc7c <_strtod_l+0x584>)
 800bc32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bc36:	4640      	mov	r0, r8
 800bc38:	4649      	mov	r1, r9
 800bc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3e:	f7f4 fddd 	bl	80007fc <__aeabi_ddiv>
 800bc42:	4680      	mov	r8, r0
 800bc44:	4689      	mov	r9, r1
 800bc46:	112d      	asrs	r5, r5, #4
 800bc48:	d0db      	beq.n	800bc02 <_strtod_l+0x50a>
 800bc4a:	2d1f      	cmp	r5, #31
 800bc4c:	dd1e      	ble.n	800bc8c <_strtod_l+0x594>
 800bc4e:	2600      	movs	r6, #0
 800bc50:	46b3      	mov	fp, r6
 800bc52:	960b      	str	r6, [sp, #44]	; 0x2c
 800bc54:	9608      	str	r6, [sp, #32]
 800bc56:	2322      	movs	r3, #34	; 0x22
 800bc58:	f04f 0800 	mov.w	r8, #0
 800bc5c:	f04f 0900 	mov.w	r9, #0
 800bc60:	6023      	str	r3, [r4, #0]
 800bc62:	e78d      	b.n	800bb80 <_strtod_l+0x488>
 800bc64:	0800deff 	.word	0x0800deff
 800bc68:	0800e14c 	.word	0x0800e14c
 800bc6c:	0800def7 	.word	0x0800def7
 800bc70:	0800df6a 	.word	0x0800df6a
 800bc74:	7ff00000 	.word	0x7ff00000
 800bc78:	0800df66 	.word	0x0800df66
 800bc7c:	0800e060 	.word	0x0800e060
 800bc80:	0800e038 	.word	0x0800e038
 800bc84:	7ca00000 	.word	0x7ca00000
 800bc88:	7fefffff 	.word	0x7fefffff
 800bc8c:	f015 0310 	ands.w	r3, r5, #16
 800bc90:	bf18      	it	ne
 800bc92:	236a      	movne	r3, #106	; 0x6a
 800bc94:	f8df a2cc 	ldr.w	sl, [pc, #716]	; 800bf64 <_strtod_l+0x86c>
 800bc98:	9305      	str	r3, [sp, #20]
 800bc9a:	4640      	mov	r0, r8
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	2300      	movs	r3, #0
 800bca0:	07ea      	lsls	r2, r5, #31
 800bca2:	d504      	bpl.n	800bcae <_strtod_l+0x5b6>
 800bca4:	e9da 2300 	ldrd	r2, r3, [sl]
 800bca8:	f7f4 fc7e 	bl	80005a8 <__aeabi_dmul>
 800bcac:	2301      	movs	r3, #1
 800bcae:	106d      	asrs	r5, r5, #1
 800bcb0:	f10a 0a08 	add.w	sl, sl, #8
 800bcb4:	d1f4      	bne.n	800bca0 <_strtod_l+0x5a8>
 800bcb6:	b10b      	cbz	r3, 800bcbc <_strtod_l+0x5c4>
 800bcb8:	4680      	mov	r8, r0
 800bcba:	4689      	mov	r9, r1
 800bcbc:	9b05      	ldr	r3, [sp, #20]
 800bcbe:	b1bb      	cbz	r3, 800bcf0 <_strtod_l+0x5f8>
 800bcc0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bcc4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	4649      	mov	r1, r9
 800bccc:	dd10      	ble.n	800bcf0 <_strtod_l+0x5f8>
 800bcce:	2b1f      	cmp	r3, #31
 800bcd0:	f340 8125 	ble.w	800bf1e <_strtod_l+0x826>
 800bcd4:	2b34      	cmp	r3, #52	; 0x34
 800bcd6:	bfde      	ittt	le
 800bcd8:	f04f 33ff 	movle.w	r3, #4294967295
 800bcdc:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bce0:	4093      	lslle	r3, r2
 800bce2:	f04f 0800 	mov.w	r8, #0
 800bce6:	bfcc      	ite	gt
 800bce8:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bcec:	ea03 0901 	andle.w	r9, r3, r1
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	4640      	mov	r0, r8
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	f7f4 febe 	bl	8000a78 <__aeabi_dcmpeq>
 800bcfc:	2800      	cmp	r0, #0
 800bcfe:	d1a6      	bne.n	800bc4e <_strtod_l+0x556>
 800bd00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd02:	9300      	str	r3, [sp, #0]
 800bd04:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bd06:	4633      	mov	r3, r6
 800bd08:	465a      	mov	r2, fp
 800bd0a:	4620      	mov	r0, r4
 800bd0c:	f7ff f8de 	bl	800aecc <__s2b>
 800bd10:	900b      	str	r0, [sp, #44]	; 0x2c
 800bd12:	2800      	cmp	r0, #0
 800bd14:	f43f af2a 	beq.w	800bb6c <_strtod_l+0x474>
 800bd18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd1a:	9b08      	ldr	r3, [sp, #32]
 800bd1c:	2a00      	cmp	r2, #0
 800bd1e:	eba3 0307 	sub.w	r3, r3, r7
 800bd22:	bfa8      	it	ge
 800bd24:	2300      	movge	r3, #0
 800bd26:	9312      	str	r3, [sp, #72]	; 0x48
 800bd28:	2600      	movs	r6, #0
 800bd2a:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bd2e:	9316      	str	r3, [sp, #88]	; 0x58
 800bd30:	46b3      	mov	fp, r6
 800bd32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd34:	4620      	mov	r0, r4
 800bd36:	6859      	ldr	r1, [r3, #4]
 800bd38:	f7ff f820 	bl	800ad7c <_Balloc>
 800bd3c:	9008      	str	r0, [sp, #32]
 800bd3e:	2800      	cmp	r0, #0
 800bd40:	f43f af18 	beq.w	800bb74 <_strtod_l+0x47c>
 800bd44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd46:	691a      	ldr	r2, [r3, #16]
 800bd48:	3202      	adds	r2, #2
 800bd4a:	f103 010c 	add.w	r1, r3, #12
 800bd4e:	0092      	lsls	r2, r2, #2
 800bd50:	300c      	adds	r0, #12
 800bd52:	f7fe f87e 	bl	8009e52 <memcpy>
 800bd56:	ab1c      	add	r3, sp, #112	; 0x70
 800bd58:	9301      	str	r3, [sp, #4]
 800bd5a:	ab1b      	add	r3, sp, #108	; 0x6c
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	4642      	mov	r2, r8
 800bd60:	464b      	mov	r3, r9
 800bd62:	4620      	mov	r0, r4
 800bd64:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 800bd68:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800bd6c:	f7ff fbd8 	bl	800b520 <__d2b>
 800bd70:	901a      	str	r0, [sp, #104]	; 0x68
 800bd72:	2800      	cmp	r0, #0
 800bd74:	f43f aefe 	beq.w	800bb74 <_strtod_l+0x47c>
 800bd78:	2101      	movs	r1, #1
 800bd7a:	4620      	mov	r0, r4
 800bd7c:	f7ff f93e 	bl	800affc <__i2b>
 800bd80:	4683      	mov	fp, r0
 800bd82:	2800      	cmp	r0, #0
 800bd84:	f43f aef6 	beq.w	800bb74 <_strtod_l+0x47c>
 800bd88:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 800bd8a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800bd8c:	2f00      	cmp	r7, #0
 800bd8e:	bfab      	itete	ge
 800bd90:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 800bd92:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800bd94:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800bd96:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 800bd9a:	bfac      	ite	ge
 800bd9c:	eb07 0a03 	addge.w	sl, r7, r3
 800bda0:	1bdd      	sublt	r5, r3, r7
 800bda2:	9b05      	ldr	r3, [sp, #20]
 800bda4:	1aff      	subs	r7, r7, r3
 800bda6:	4417      	add	r7, r2
 800bda8:	4b6f      	ldr	r3, [pc, #444]	; (800bf68 <_strtod_l+0x870>)
 800bdaa:	3f01      	subs	r7, #1
 800bdac:	429f      	cmp	r7, r3
 800bdae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bdb2:	f280 80c7 	bge.w	800bf44 <_strtod_l+0x84c>
 800bdb6:	1bdb      	subs	r3, r3, r7
 800bdb8:	2b1f      	cmp	r3, #31
 800bdba:	eba2 0203 	sub.w	r2, r2, r3
 800bdbe:	f04f 0101 	mov.w	r1, #1
 800bdc2:	f300 80b3 	bgt.w	800bf2c <_strtod_l+0x834>
 800bdc6:	fa01 f303 	lsl.w	r3, r1, r3
 800bdca:	9313      	str	r3, [sp, #76]	; 0x4c
 800bdcc:	2300      	movs	r3, #0
 800bdce:	9310      	str	r3, [sp, #64]	; 0x40
 800bdd0:	eb0a 0702 	add.w	r7, sl, r2
 800bdd4:	9b05      	ldr	r3, [sp, #20]
 800bdd6:	45ba      	cmp	sl, r7
 800bdd8:	4415      	add	r5, r2
 800bdda:	441d      	add	r5, r3
 800bddc:	4653      	mov	r3, sl
 800bdde:	bfa8      	it	ge
 800bde0:	463b      	movge	r3, r7
 800bde2:	42ab      	cmp	r3, r5
 800bde4:	bfa8      	it	ge
 800bde6:	462b      	movge	r3, r5
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	bfc2      	ittt	gt
 800bdec:	1aff      	subgt	r7, r7, r3
 800bdee:	1aed      	subgt	r5, r5, r3
 800bdf0:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bdf4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	dd17      	ble.n	800be2a <_strtod_l+0x732>
 800bdfa:	4659      	mov	r1, fp
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	4620      	mov	r0, r4
 800be00:	f7ff f9bc 	bl	800b17c <__pow5mult>
 800be04:	4683      	mov	fp, r0
 800be06:	2800      	cmp	r0, #0
 800be08:	f43f aeb4 	beq.w	800bb74 <_strtod_l+0x47c>
 800be0c:	4601      	mov	r1, r0
 800be0e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800be10:	4620      	mov	r0, r4
 800be12:	f7ff f909 	bl	800b028 <__multiply>
 800be16:	900a      	str	r0, [sp, #40]	; 0x28
 800be18:	2800      	cmp	r0, #0
 800be1a:	f43f aeab 	beq.w	800bb74 <_strtod_l+0x47c>
 800be1e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800be20:	4620      	mov	r0, r4
 800be22:	f7fe ffeb 	bl	800adfc <_Bfree>
 800be26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be28:	931a      	str	r3, [sp, #104]	; 0x68
 800be2a:	2f00      	cmp	r7, #0
 800be2c:	f300 808f 	bgt.w	800bf4e <_strtod_l+0x856>
 800be30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be32:	2b00      	cmp	r3, #0
 800be34:	dd08      	ble.n	800be48 <_strtod_l+0x750>
 800be36:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800be38:	9908      	ldr	r1, [sp, #32]
 800be3a:	4620      	mov	r0, r4
 800be3c:	f7ff f99e 	bl	800b17c <__pow5mult>
 800be40:	9008      	str	r0, [sp, #32]
 800be42:	2800      	cmp	r0, #0
 800be44:	f43f ae96 	beq.w	800bb74 <_strtod_l+0x47c>
 800be48:	2d00      	cmp	r5, #0
 800be4a:	dd08      	ble.n	800be5e <_strtod_l+0x766>
 800be4c:	9908      	ldr	r1, [sp, #32]
 800be4e:	462a      	mov	r2, r5
 800be50:	4620      	mov	r0, r4
 800be52:	f7ff f9ed 	bl	800b230 <__lshift>
 800be56:	9008      	str	r0, [sp, #32]
 800be58:	2800      	cmp	r0, #0
 800be5a:	f43f ae8b 	beq.w	800bb74 <_strtod_l+0x47c>
 800be5e:	f1ba 0f00 	cmp.w	sl, #0
 800be62:	dd08      	ble.n	800be76 <_strtod_l+0x77e>
 800be64:	4659      	mov	r1, fp
 800be66:	4652      	mov	r2, sl
 800be68:	4620      	mov	r0, r4
 800be6a:	f7ff f9e1 	bl	800b230 <__lshift>
 800be6e:	4683      	mov	fp, r0
 800be70:	2800      	cmp	r0, #0
 800be72:	f43f ae7f 	beq.w	800bb74 <_strtod_l+0x47c>
 800be76:	9a08      	ldr	r2, [sp, #32]
 800be78:	991a      	ldr	r1, [sp, #104]	; 0x68
 800be7a:	4620      	mov	r0, r4
 800be7c:	f7ff fa60 	bl	800b340 <__mdiff>
 800be80:	4606      	mov	r6, r0
 800be82:	2800      	cmp	r0, #0
 800be84:	f43f ae76 	beq.w	800bb74 <_strtod_l+0x47c>
 800be88:	2500      	movs	r5, #0
 800be8a:	68c3      	ldr	r3, [r0, #12]
 800be8c:	60c5      	str	r5, [r0, #12]
 800be8e:	4659      	mov	r1, fp
 800be90:	930a      	str	r3, [sp, #40]	; 0x28
 800be92:	f7ff fa39 	bl	800b308 <__mcmp>
 800be96:	42a8      	cmp	r0, r5
 800be98:	da6c      	bge.n	800bf74 <_strtod_l+0x87c>
 800be9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be9c:	ea53 0308 	orrs.w	r3, r3, r8
 800bea0:	f040 8090 	bne.w	800bfc4 <_strtod_l+0x8cc>
 800bea4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	f040 808b 	bne.w	800bfc4 <_strtod_l+0x8cc>
 800beae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800beb2:	0d1b      	lsrs	r3, r3, #20
 800beb4:	051b      	lsls	r3, r3, #20
 800beb6:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800beba:	f240 8083 	bls.w	800bfc4 <_strtod_l+0x8cc>
 800bebe:	6973      	ldr	r3, [r6, #20]
 800bec0:	b913      	cbnz	r3, 800bec8 <_strtod_l+0x7d0>
 800bec2:	6933      	ldr	r3, [r6, #16]
 800bec4:	2b01      	cmp	r3, #1
 800bec6:	dd7d      	ble.n	800bfc4 <_strtod_l+0x8cc>
 800bec8:	4631      	mov	r1, r6
 800beca:	2201      	movs	r2, #1
 800becc:	4620      	mov	r0, r4
 800bece:	f7ff f9af 	bl	800b230 <__lshift>
 800bed2:	4659      	mov	r1, fp
 800bed4:	4606      	mov	r6, r0
 800bed6:	f7ff fa17 	bl	800b308 <__mcmp>
 800beda:	2800      	cmp	r0, #0
 800bedc:	dd72      	ble.n	800bfc4 <_strtod_l+0x8cc>
 800bede:	9905      	ldr	r1, [sp, #20]
 800bee0:	4a22      	ldr	r2, [pc, #136]	; (800bf6c <_strtod_l+0x874>)
 800bee2:	464b      	mov	r3, r9
 800bee4:	2900      	cmp	r1, #0
 800bee6:	f000 808e 	beq.w	800c006 <_strtod_l+0x90e>
 800beea:	ea02 0109 	and.w	r1, r2, r9
 800beee:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bef2:	f300 8088 	bgt.w	800c006 <_strtod_l+0x90e>
 800bef6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800befa:	f77f aeac 	ble.w	800bc56 <_strtod_l+0x55e>
 800befe:	4b1c      	ldr	r3, [pc, #112]	; (800bf70 <_strtod_l+0x878>)
 800bf00:	4640      	mov	r0, r8
 800bf02:	4649      	mov	r1, r9
 800bf04:	2200      	movs	r2, #0
 800bf06:	f7f4 fb4f 	bl	80005a8 <__aeabi_dmul>
 800bf0a:	4b18      	ldr	r3, [pc, #96]	; (800bf6c <_strtod_l+0x874>)
 800bf0c:	400b      	ands	r3, r1
 800bf0e:	4680      	mov	r8, r0
 800bf10:	4689      	mov	r9, r1
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	f47f ae38 	bne.w	800bb88 <_strtod_l+0x490>
 800bf18:	2322      	movs	r3, #34	; 0x22
 800bf1a:	6023      	str	r3, [r4, #0]
 800bf1c:	e634      	b.n	800bb88 <_strtod_l+0x490>
 800bf1e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf22:	fa02 f303 	lsl.w	r3, r2, r3
 800bf26:	ea03 0808 	and.w	r8, r3, r8
 800bf2a:	e6e1      	b.n	800bcf0 <_strtod_l+0x5f8>
 800bf2c:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 800bf30:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800bf34:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800bf38:	37e2      	adds	r7, #226	; 0xe2
 800bf3a:	fa01 f307 	lsl.w	r3, r1, r7
 800bf3e:	9310      	str	r3, [sp, #64]	; 0x40
 800bf40:	9113      	str	r1, [sp, #76]	; 0x4c
 800bf42:	e745      	b.n	800bdd0 <_strtod_l+0x6d8>
 800bf44:	2300      	movs	r3, #0
 800bf46:	9310      	str	r3, [sp, #64]	; 0x40
 800bf48:	2301      	movs	r3, #1
 800bf4a:	9313      	str	r3, [sp, #76]	; 0x4c
 800bf4c:	e740      	b.n	800bdd0 <_strtod_l+0x6d8>
 800bf4e:	991a      	ldr	r1, [sp, #104]	; 0x68
 800bf50:	463a      	mov	r2, r7
 800bf52:	4620      	mov	r0, r4
 800bf54:	f7ff f96c 	bl	800b230 <__lshift>
 800bf58:	901a      	str	r0, [sp, #104]	; 0x68
 800bf5a:	2800      	cmp	r0, #0
 800bf5c:	f47f af68 	bne.w	800be30 <_strtod_l+0x738>
 800bf60:	e608      	b.n	800bb74 <_strtod_l+0x47c>
 800bf62:	bf00      	nop
 800bf64:	0800e160 	.word	0x0800e160
 800bf68:	fffffc02 	.word	0xfffffc02
 800bf6c:	7ff00000 	.word	0x7ff00000
 800bf70:	39500000 	.word	0x39500000
 800bf74:	46ca      	mov	sl, r9
 800bf76:	d165      	bne.n	800c044 <_strtod_l+0x94c>
 800bf78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf7a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf7e:	b352      	cbz	r2, 800bfd6 <_strtod_l+0x8de>
 800bf80:	4a9d      	ldr	r2, [pc, #628]	; (800c1f8 <_strtod_l+0xb00>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d12a      	bne.n	800bfdc <_strtod_l+0x8e4>
 800bf86:	9b05      	ldr	r3, [sp, #20]
 800bf88:	4641      	mov	r1, r8
 800bf8a:	b1fb      	cbz	r3, 800bfcc <_strtod_l+0x8d4>
 800bf8c:	4b9b      	ldr	r3, [pc, #620]	; (800c1fc <_strtod_l+0xb04>)
 800bf8e:	ea09 0303 	and.w	r3, r9, r3
 800bf92:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800bf96:	f04f 32ff 	mov.w	r2, #4294967295
 800bf9a:	d81a      	bhi.n	800bfd2 <_strtod_l+0x8da>
 800bf9c:	0d1b      	lsrs	r3, r3, #20
 800bf9e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800bfa2:	fa02 f303 	lsl.w	r3, r2, r3
 800bfa6:	4299      	cmp	r1, r3
 800bfa8:	d118      	bne.n	800bfdc <_strtod_l+0x8e4>
 800bfaa:	4b95      	ldr	r3, [pc, #596]	; (800c200 <_strtod_l+0xb08>)
 800bfac:	459a      	cmp	sl, r3
 800bfae:	d102      	bne.n	800bfb6 <_strtod_l+0x8be>
 800bfb0:	3101      	adds	r1, #1
 800bfb2:	f43f addf 	beq.w	800bb74 <_strtod_l+0x47c>
 800bfb6:	4b91      	ldr	r3, [pc, #580]	; (800c1fc <_strtod_l+0xb04>)
 800bfb8:	ea0a 0303 	and.w	r3, sl, r3
 800bfbc:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800bfc0:	f04f 0800 	mov.w	r8, #0
 800bfc4:	9b05      	ldr	r3, [sp, #20]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d199      	bne.n	800befe <_strtod_l+0x806>
 800bfca:	e5dd      	b.n	800bb88 <_strtod_l+0x490>
 800bfcc:	f04f 33ff 	mov.w	r3, #4294967295
 800bfd0:	e7e9      	b.n	800bfa6 <_strtod_l+0x8ae>
 800bfd2:	4613      	mov	r3, r2
 800bfd4:	e7e7      	b.n	800bfa6 <_strtod_l+0x8ae>
 800bfd6:	ea53 0308 	orrs.w	r3, r3, r8
 800bfda:	d080      	beq.n	800bede <_strtod_l+0x7e6>
 800bfdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfde:	b1e3      	cbz	r3, 800c01a <_strtod_l+0x922>
 800bfe0:	ea13 0f0a 	tst.w	r3, sl
 800bfe4:	d0ee      	beq.n	800bfc4 <_strtod_l+0x8cc>
 800bfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfe8:	9a05      	ldr	r2, [sp, #20]
 800bfea:	4640      	mov	r0, r8
 800bfec:	4649      	mov	r1, r9
 800bfee:	b1c3      	cbz	r3, 800c022 <_strtod_l+0x92a>
 800bff0:	f7ff fb5e 	bl	800b6b0 <sulp>
 800bff4:	4602      	mov	r2, r0
 800bff6:	460b      	mov	r3, r1
 800bff8:	980c      	ldr	r0, [sp, #48]	; 0x30
 800bffa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bffc:	f7f4 f91e 	bl	800023c <__adddf3>
 800c000:	4680      	mov	r8, r0
 800c002:	4689      	mov	r9, r1
 800c004:	e7de      	b.n	800bfc4 <_strtod_l+0x8cc>
 800c006:	4013      	ands	r3, r2
 800c008:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c00c:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c010:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c014:	f04f 38ff 	mov.w	r8, #4294967295
 800c018:	e7d4      	b.n	800bfc4 <_strtod_l+0x8cc>
 800c01a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c01c:	ea13 0f08 	tst.w	r3, r8
 800c020:	e7e0      	b.n	800bfe4 <_strtod_l+0x8ec>
 800c022:	f7ff fb45 	bl	800b6b0 <sulp>
 800c026:	4602      	mov	r2, r0
 800c028:	460b      	mov	r3, r1
 800c02a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c02c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c02e:	f7f4 f903 	bl	8000238 <__aeabi_dsub>
 800c032:	2200      	movs	r2, #0
 800c034:	2300      	movs	r3, #0
 800c036:	4680      	mov	r8, r0
 800c038:	4689      	mov	r9, r1
 800c03a:	f7f4 fd1d 	bl	8000a78 <__aeabi_dcmpeq>
 800c03e:	2800      	cmp	r0, #0
 800c040:	d0c0      	beq.n	800bfc4 <_strtod_l+0x8cc>
 800c042:	e608      	b.n	800bc56 <_strtod_l+0x55e>
 800c044:	4659      	mov	r1, fp
 800c046:	4630      	mov	r0, r6
 800c048:	f7ff fac0 	bl	800b5cc <__ratio>
 800c04c:	4602      	mov	r2, r0
 800c04e:	460b      	mov	r3, r1
 800c050:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c054:	2200      	movs	r2, #0
 800c056:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c05a:	f7f4 fd21 	bl	8000aa0 <__aeabi_dcmple>
 800c05e:	2800      	cmp	r0, #0
 800c060:	d06f      	beq.n	800c142 <_strtod_l+0xa4a>
 800c062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c064:	2b00      	cmp	r3, #0
 800c066:	d17c      	bne.n	800c162 <_strtod_l+0xa6a>
 800c068:	f1b8 0f00 	cmp.w	r8, #0
 800c06c:	d159      	bne.n	800c122 <_strtod_l+0xa2a>
 800c06e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c072:	2b00      	cmp	r3, #0
 800c074:	d17b      	bne.n	800c16e <_strtod_l+0xa76>
 800c076:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c07a:	4b62      	ldr	r3, [pc, #392]	; (800c204 <_strtod_l+0xb0c>)
 800c07c:	2200      	movs	r2, #0
 800c07e:	f7f4 fd05 	bl	8000a8c <__aeabi_dcmplt>
 800c082:	2800      	cmp	r0, #0
 800c084:	d15a      	bne.n	800c13c <_strtod_l+0xa44>
 800c086:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c08a:	4b5f      	ldr	r3, [pc, #380]	; (800c208 <_strtod_l+0xb10>)
 800c08c:	2200      	movs	r2, #0
 800c08e:	f7f4 fa8b 	bl	80005a8 <__aeabi_dmul>
 800c092:	4605      	mov	r5, r0
 800c094:	460f      	mov	r7, r1
 800c096:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c09a:	9506      	str	r5, [sp, #24]
 800c09c:	9307      	str	r3, [sp, #28]
 800c09e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0a2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c0a6:	4b55      	ldr	r3, [pc, #340]	; (800c1fc <_strtod_l+0xb04>)
 800c0a8:	4a54      	ldr	r2, [pc, #336]	; (800c1fc <_strtod_l+0xb04>)
 800c0aa:	ea0a 0303 	and.w	r3, sl, r3
 800c0ae:	9313      	str	r3, [sp, #76]	; 0x4c
 800c0b0:	4b56      	ldr	r3, [pc, #344]	; (800c20c <_strtod_l+0xb14>)
 800c0b2:	ea0a 0202 	and.w	r2, sl, r2
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	f040 80ae 	bne.w	800c218 <_strtod_l+0xb20>
 800c0bc:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c0c0:	4640      	mov	r0, r8
 800c0c2:	4649      	mov	r1, r9
 800c0c4:	f7ff f9c4 	bl	800b450 <__ulp>
 800c0c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0cc:	f7f4 fa6c 	bl	80005a8 <__aeabi_dmul>
 800c0d0:	4642      	mov	r2, r8
 800c0d2:	464b      	mov	r3, r9
 800c0d4:	f7f4 f8b2 	bl	800023c <__adddf3>
 800c0d8:	f8df a120 	ldr.w	sl, [pc, #288]	; 800c1fc <_strtod_l+0xb04>
 800c0dc:	4a4c      	ldr	r2, [pc, #304]	; (800c210 <_strtod_l+0xb18>)
 800c0de:	ea01 0a0a 	and.w	sl, r1, sl
 800c0e2:	4592      	cmp	sl, r2
 800c0e4:	4680      	mov	r8, r0
 800c0e6:	d948      	bls.n	800c17a <_strtod_l+0xa82>
 800c0e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c0ea:	4b45      	ldr	r3, [pc, #276]	; (800c200 <_strtod_l+0xb08>)
 800c0ec:	429a      	cmp	r2, r3
 800c0ee:	d103      	bne.n	800c0f8 <_strtod_l+0xa00>
 800c0f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c0f2:	3301      	adds	r3, #1
 800c0f4:	f43f ad3e 	beq.w	800bb74 <_strtod_l+0x47c>
 800c0f8:	f8df 9104 	ldr.w	r9, [pc, #260]	; 800c200 <_strtod_l+0xb08>
 800c0fc:	f04f 38ff 	mov.w	r8, #4294967295
 800c100:	991a      	ldr	r1, [sp, #104]	; 0x68
 800c102:	4620      	mov	r0, r4
 800c104:	f7fe fe7a 	bl	800adfc <_Bfree>
 800c108:	9908      	ldr	r1, [sp, #32]
 800c10a:	4620      	mov	r0, r4
 800c10c:	f7fe fe76 	bl	800adfc <_Bfree>
 800c110:	4659      	mov	r1, fp
 800c112:	4620      	mov	r0, r4
 800c114:	f7fe fe72 	bl	800adfc <_Bfree>
 800c118:	4631      	mov	r1, r6
 800c11a:	4620      	mov	r0, r4
 800c11c:	f7fe fe6e 	bl	800adfc <_Bfree>
 800c120:	e607      	b.n	800bd32 <_strtod_l+0x63a>
 800c122:	f1b8 0f01 	cmp.w	r8, #1
 800c126:	d103      	bne.n	800c130 <_strtod_l+0xa38>
 800c128:	f1b9 0f00 	cmp.w	r9, #0
 800c12c:	f43f ad93 	beq.w	800bc56 <_strtod_l+0x55e>
 800c130:	4b38      	ldr	r3, [pc, #224]	; (800c214 <_strtod_l+0xb1c>)
 800c132:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c134:	2200      	movs	r2, #0
 800c136:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c13a:	e016      	b.n	800c16a <_strtod_l+0xa72>
 800c13c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800c13e:	4f32      	ldr	r7, [pc, #200]	; (800c208 <_strtod_l+0xb10>)
 800c140:	e7a9      	b.n	800c096 <_strtod_l+0x99e>
 800c142:	4b31      	ldr	r3, [pc, #196]	; (800c208 <_strtod_l+0xb10>)
 800c144:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c148:	2200      	movs	r2, #0
 800c14a:	f7f4 fa2d 	bl	80005a8 <__aeabi_dmul>
 800c14e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c150:	4605      	mov	r5, r0
 800c152:	460f      	mov	r7, r1
 800c154:	2b00      	cmp	r3, #0
 800c156:	d09e      	beq.n	800c096 <_strtod_l+0x99e>
 800c158:	4602      	mov	r2, r0
 800c15a:	460b      	mov	r3, r1
 800c15c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c160:	e79d      	b.n	800c09e <_strtod_l+0x9a6>
 800c162:	4b28      	ldr	r3, [pc, #160]	; (800c204 <_strtod_l+0xb0c>)
 800c164:	2200      	movs	r2, #0
 800c166:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c16a:	4f26      	ldr	r7, [pc, #152]	; (800c204 <_strtod_l+0xb0c>)
 800c16c:	e797      	b.n	800c09e <_strtod_l+0x9a6>
 800c16e:	4b29      	ldr	r3, [pc, #164]	; (800c214 <_strtod_l+0xb1c>)
 800c170:	2200      	movs	r2, #0
 800c172:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c176:	4645      	mov	r5, r8
 800c178:	e7f7      	b.n	800c16a <_strtod_l+0xa72>
 800c17a:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 800c17e:	9b05      	ldr	r3, [sp, #20]
 800c180:	46ca      	mov	sl, r9
 800c182:	2b00      	cmp	r3, #0
 800c184:	d1bc      	bne.n	800c100 <_strtod_l+0xa08>
 800c186:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c18a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c18c:	0d1b      	lsrs	r3, r3, #20
 800c18e:	051b      	lsls	r3, r3, #20
 800c190:	429a      	cmp	r2, r3
 800c192:	d1b5      	bne.n	800c100 <_strtod_l+0xa08>
 800c194:	4628      	mov	r0, r5
 800c196:	4639      	mov	r1, r7
 800c198:	f7f4 fd66 	bl	8000c68 <__aeabi_d2lz>
 800c19c:	f7f4 f9d6 	bl	800054c <__aeabi_l2d>
 800c1a0:	4602      	mov	r2, r0
 800c1a2:	460b      	mov	r3, r1
 800c1a4:	4628      	mov	r0, r5
 800c1a6:	4639      	mov	r1, r7
 800c1a8:	f7f4 f846 	bl	8000238 <__aeabi_dsub>
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4602      	mov	r2, r0
 800c1b0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800c1b4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 800c1b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1ba:	ea4a 0a08 	orr.w	sl, sl, r8
 800c1be:	ea5a 0a03 	orrs.w	sl, sl, r3
 800c1c2:	d06a      	beq.n	800c29a <_strtod_l+0xba2>
 800c1c4:	a308      	add	r3, pc, #32	; (adr r3, 800c1e8 <_strtod_l+0xaf0>)
 800c1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1ca:	f7f4 fc5f 	bl	8000a8c <__aeabi_dcmplt>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f47f acda 	bne.w	800bb88 <_strtod_l+0x490>
 800c1d4:	a306      	add	r3, pc, #24	; (adr r3, 800c1f0 <_strtod_l+0xaf8>)
 800c1d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1da:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c1de:	f7f4 fc73 	bl	8000ac8 <__aeabi_dcmpgt>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d08c      	beq.n	800c100 <_strtod_l+0xa08>
 800c1e6:	e4cf      	b.n	800bb88 <_strtod_l+0x490>
 800c1e8:	94a03595 	.word	0x94a03595
 800c1ec:	3fdfffff 	.word	0x3fdfffff
 800c1f0:	35afe535 	.word	0x35afe535
 800c1f4:	3fe00000 	.word	0x3fe00000
 800c1f8:	000fffff 	.word	0x000fffff
 800c1fc:	7ff00000 	.word	0x7ff00000
 800c200:	7fefffff 	.word	0x7fefffff
 800c204:	3ff00000 	.word	0x3ff00000
 800c208:	3fe00000 	.word	0x3fe00000
 800c20c:	7fe00000 	.word	0x7fe00000
 800c210:	7c9fffff 	.word	0x7c9fffff
 800c214:	bff00000 	.word	0xbff00000
 800c218:	9b05      	ldr	r3, [sp, #20]
 800c21a:	b333      	cbz	r3, 800c26a <_strtod_l+0xb72>
 800c21c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c21e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c222:	d822      	bhi.n	800c26a <_strtod_l+0xb72>
 800c224:	a328      	add	r3, pc, #160	; (adr r3, 800c2c8 <_strtod_l+0xbd0>)
 800c226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c22a:	4628      	mov	r0, r5
 800c22c:	4639      	mov	r1, r7
 800c22e:	f7f4 fc37 	bl	8000aa0 <__aeabi_dcmple>
 800c232:	b1a0      	cbz	r0, 800c25e <_strtod_l+0xb66>
 800c234:	4639      	mov	r1, r7
 800c236:	4628      	mov	r0, r5
 800c238:	f7f4 fc8e 	bl	8000b58 <__aeabi_d2uiz>
 800c23c:	2801      	cmp	r0, #1
 800c23e:	bf38      	it	cc
 800c240:	2001      	movcc	r0, #1
 800c242:	f7f4 f937 	bl	80004b4 <__aeabi_ui2d>
 800c246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c248:	4605      	mov	r5, r0
 800c24a:	460f      	mov	r7, r1
 800c24c:	bb03      	cbnz	r3, 800c290 <_strtod_l+0xb98>
 800c24e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c252:	9014      	str	r0, [sp, #80]	; 0x50
 800c254:	9315      	str	r3, [sp, #84]	; 0x54
 800c256:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c25a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800c25e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c260:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c262:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c266:	1a9b      	subs	r3, r3, r2
 800c268:	9311      	str	r3, [sp, #68]	; 0x44
 800c26a:	980c      	ldr	r0, [sp, #48]	; 0x30
 800c26c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c26e:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800c272:	f7ff f8ed 	bl	800b450 <__ulp>
 800c276:	4602      	mov	r2, r0
 800c278:	460b      	mov	r3, r1
 800c27a:	4640      	mov	r0, r8
 800c27c:	4649      	mov	r1, r9
 800c27e:	f7f4 f993 	bl	80005a8 <__aeabi_dmul>
 800c282:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c284:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c286:	f7f3 ffd9 	bl	800023c <__adddf3>
 800c28a:	4680      	mov	r8, r0
 800c28c:	4689      	mov	r9, r1
 800c28e:	e776      	b.n	800c17e <_strtod_l+0xa86>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800c298:	e7dd      	b.n	800c256 <_strtod_l+0xb5e>
 800c29a:	a30d      	add	r3, pc, #52	; (adr r3, 800c2d0 <_strtod_l+0xbd8>)
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	f7f4 fbf4 	bl	8000a8c <__aeabi_dcmplt>
 800c2a4:	e79d      	b.n	800c1e2 <_strtod_l+0xaea>
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	930e      	str	r3, [sp, #56]	; 0x38
 800c2aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800c2ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c2ae:	6013      	str	r3, [r2, #0]
 800c2b0:	f7ff ba5f 	b.w	800b772 <_strtod_l+0x7a>
 800c2b4:	2a65      	cmp	r2, #101	; 0x65
 800c2b6:	f43f ab56 	beq.w	800b966 <_strtod_l+0x26e>
 800c2ba:	2a45      	cmp	r2, #69	; 0x45
 800c2bc:	f43f ab53 	beq.w	800b966 <_strtod_l+0x26e>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	f7ff bb8b 	b.w	800b9dc <_strtod_l+0x2e4>
 800c2c6:	bf00      	nop
 800c2c8:	ffc00000 	.word	0xffc00000
 800c2cc:	41dfffff 	.word	0x41dfffff
 800c2d0:	94a03595 	.word	0x94a03595
 800c2d4:	3fcfffff 	.word	0x3fcfffff

0800c2d8 <_strtod_r>:
 800c2d8:	4b01      	ldr	r3, [pc, #4]	; (800c2e0 <_strtod_r+0x8>)
 800c2da:	f7ff ba0d 	b.w	800b6f8 <_strtod_l>
 800c2de:	bf00      	nop
 800c2e0:	20000074 	.word	0x20000074

0800c2e4 <_strtol_l.constprop.0>:
 800c2e4:	2b01      	cmp	r3, #1
 800c2e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2ea:	4686      	mov	lr, r0
 800c2ec:	4690      	mov	r8, r2
 800c2ee:	d001      	beq.n	800c2f4 <_strtol_l.constprop.0+0x10>
 800c2f0:	2b24      	cmp	r3, #36	; 0x24
 800c2f2:	d906      	bls.n	800c302 <_strtol_l.constprop.0+0x1e>
 800c2f4:	f7fd fd80 	bl	8009df8 <__errno>
 800c2f8:	2316      	movs	r3, #22
 800c2fa:	6003      	str	r3, [r0, #0]
 800c2fc:	2000      	movs	r0, #0
 800c2fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c302:	4836      	ldr	r0, [pc, #216]	; (800c3dc <_strtol_l.constprop.0+0xf8>)
 800c304:	460d      	mov	r5, r1
 800c306:	462a      	mov	r2, r5
 800c308:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c30c:	5d06      	ldrb	r6, [r0, r4]
 800c30e:	f016 0608 	ands.w	r6, r6, #8
 800c312:	d1f8      	bne.n	800c306 <_strtol_l.constprop.0+0x22>
 800c314:	2c2d      	cmp	r4, #45	; 0x2d
 800c316:	d12e      	bne.n	800c376 <_strtol_l.constprop.0+0x92>
 800c318:	782c      	ldrb	r4, [r5, #0]
 800c31a:	2601      	movs	r6, #1
 800c31c:	1c95      	adds	r5, r2, #2
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d057      	beq.n	800c3d2 <_strtol_l.constprop.0+0xee>
 800c322:	2b10      	cmp	r3, #16
 800c324:	d109      	bne.n	800c33a <_strtol_l.constprop.0+0x56>
 800c326:	2c30      	cmp	r4, #48	; 0x30
 800c328:	d107      	bne.n	800c33a <_strtol_l.constprop.0+0x56>
 800c32a:	782a      	ldrb	r2, [r5, #0]
 800c32c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800c330:	2a58      	cmp	r2, #88	; 0x58
 800c332:	d149      	bne.n	800c3c8 <_strtol_l.constprop.0+0xe4>
 800c334:	786c      	ldrb	r4, [r5, #1]
 800c336:	2310      	movs	r3, #16
 800c338:	3502      	adds	r5, #2
 800c33a:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 800c33e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c342:	2200      	movs	r2, #0
 800c344:	fbbc f9f3 	udiv	r9, ip, r3
 800c348:	4610      	mov	r0, r2
 800c34a:	fb03 ca19 	mls	sl, r3, r9, ip
 800c34e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c352:	2f09      	cmp	r7, #9
 800c354:	d814      	bhi.n	800c380 <_strtol_l.constprop.0+0x9c>
 800c356:	463c      	mov	r4, r7
 800c358:	42a3      	cmp	r3, r4
 800c35a:	dd20      	ble.n	800c39e <_strtol_l.constprop.0+0xba>
 800c35c:	1c57      	adds	r7, r2, #1
 800c35e:	d007      	beq.n	800c370 <_strtol_l.constprop.0+0x8c>
 800c360:	4581      	cmp	r9, r0
 800c362:	d319      	bcc.n	800c398 <_strtol_l.constprop.0+0xb4>
 800c364:	d101      	bne.n	800c36a <_strtol_l.constprop.0+0x86>
 800c366:	45a2      	cmp	sl, r4
 800c368:	db16      	blt.n	800c398 <_strtol_l.constprop.0+0xb4>
 800c36a:	fb00 4003 	mla	r0, r0, r3, r4
 800c36e:	2201      	movs	r2, #1
 800c370:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c374:	e7eb      	b.n	800c34e <_strtol_l.constprop.0+0x6a>
 800c376:	2c2b      	cmp	r4, #43	; 0x2b
 800c378:	bf04      	itt	eq
 800c37a:	782c      	ldrbeq	r4, [r5, #0]
 800c37c:	1c95      	addeq	r5, r2, #2
 800c37e:	e7ce      	b.n	800c31e <_strtol_l.constprop.0+0x3a>
 800c380:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c384:	2f19      	cmp	r7, #25
 800c386:	d801      	bhi.n	800c38c <_strtol_l.constprop.0+0xa8>
 800c388:	3c37      	subs	r4, #55	; 0x37
 800c38a:	e7e5      	b.n	800c358 <_strtol_l.constprop.0+0x74>
 800c38c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c390:	2f19      	cmp	r7, #25
 800c392:	d804      	bhi.n	800c39e <_strtol_l.constprop.0+0xba>
 800c394:	3c57      	subs	r4, #87	; 0x57
 800c396:	e7df      	b.n	800c358 <_strtol_l.constprop.0+0x74>
 800c398:	f04f 32ff 	mov.w	r2, #4294967295
 800c39c:	e7e8      	b.n	800c370 <_strtol_l.constprop.0+0x8c>
 800c39e:	1c53      	adds	r3, r2, #1
 800c3a0:	d108      	bne.n	800c3b4 <_strtol_l.constprop.0+0xd0>
 800c3a2:	2322      	movs	r3, #34	; 0x22
 800c3a4:	f8ce 3000 	str.w	r3, [lr]
 800c3a8:	4660      	mov	r0, ip
 800c3aa:	f1b8 0f00 	cmp.w	r8, #0
 800c3ae:	d0a6      	beq.n	800c2fe <_strtol_l.constprop.0+0x1a>
 800c3b0:	1e69      	subs	r1, r5, #1
 800c3b2:	e006      	b.n	800c3c2 <_strtol_l.constprop.0+0xde>
 800c3b4:	b106      	cbz	r6, 800c3b8 <_strtol_l.constprop.0+0xd4>
 800c3b6:	4240      	negs	r0, r0
 800c3b8:	f1b8 0f00 	cmp.w	r8, #0
 800c3bc:	d09f      	beq.n	800c2fe <_strtol_l.constprop.0+0x1a>
 800c3be:	2a00      	cmp	r2, #0
 800c3c0:	d1f6      	bne.n	800c3b0 <_strtol_l.constprop.0+0xcc>
 800c3c2:	f8c8 1000 	str.w	r1, [r8]
 800c3c6:	e79a      	b.n	800c2fe <_strtol_l.constprop.0+0x1a>
 800c3c8:	2430      	movs	r4, #48	; 0x30
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d1b5      	bne.n	800c33a <_strtol_l.constprop.0+0x56>
 800c3ce:	2308      	movs	r3, #8
 800c3d0:	e7b3      	b.n	800c33a <_strtol_l.constprop.0+0x56>
 800c3d2:	2c30      	cmp	r4, #48	; 0x30
 800c3d4:	d0a9      	beq.n	800c32a <_strtol_l.constprop.0+0x46>
 800c3d6:	230a      	movs	r3, #10
 800c3d8:	e7af      	b.n	800c33a <_strtol_l.constprop.0+0x56>
 800c3da:	bf00      	nop
 800c3dc:	0800e189 	.word	0x0800e189

0800c3e0 <_strtol_r>:
 800c3e0:	f7ff bf80 	b.w	800c2e4 <_strtol_l.constprop.0>

0800c3e4 <__ssputs_r>:
 800c3e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3e8:	688e      	ldr	r6, [r1, #8]
 800c3ea:	461f      	mov	r7, r3
 800c3ec:	42be      	cmp	r6, r7
 800c3ee:	680b      	ldr	r3, [r1, #0]
 800c3f0:	4682      	mov	sl, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	4690      	mov	r8, r2
 800c3f6:	d82c      	bhi.n	800c452 <__ssputs_r+0x6e>
 800c3f8:	898a      	ldrh	r2, [r1, #12]
 800c3fa:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3fe:	d026      	beq.n	800c44e <__ssputs_r+0x6a>
 800c400:	6965      	ldr	r5, [r4, #20]
 800c402:	6909      	ldr	r1, [r1, #16]
 800c404:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c408:	eba3 0901 	sub.w	r9, r3, r1
 800c40c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c410:	1c7b      	adds	r3, r7, #1
 800c412:	444b      	add	r3, r9
 800c414:	106d      	asrs	r5, r5, #1
 800c416:	429d      	cmp	r5, r3
 800c418:	bf38      	it	cc
 800c41a:	461d      	movcc	r5, r3
 800c41c:	0553      	lsls	r3, r2, #21
 800c41e:	d527      	bpl.n	800c470 <__ssputs_r+0x8c>
 800c420:	4629      	mov	r1, r5
 800c422:	f7fe fc1f 	bl	800ac64 <_malloc_r>
 800c426:	4606      	mov	r6, r0
 800c428:	b360      	cbz	r0, 800c484 <__ssputs_r+0xa0>
 800c42a:	6921      	ldr	r1, [r4, #16]
 800c42c:	464a      	mov	r2, r9
 800c42e:	f7fd fd10 	bl	8009e52 <memcpy>
 800c432:	89a3      	ldrh	r3, [r4, #12]
 800c434:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c43c:	81a3      	strh	r3, [r4, #12]
 800c43e:	6126      	str	r6, [r4, #16]
 800c440:	6165      	str	r5, [r4, #20]
 800c442:	444e      	add	r6, r9
 800c444:	eba5 0509 	sub.w	r5, r5, r9
 800c448:	6026      	str	r6, [r4, #0]
 800c44a:	60a5      	str	r5, [r4, #8]
 800c44c:	463e      	mov	r6, r7
 800c44e:	42be      	cmp	r6, r7
 800c450:	d900      	bls.n	800c454 <__ssputs_r+0x70>
 800c452:	463e      	mov	r6, r7
 800c454:	6820      	ldr	r0, [r4, #0]
 800c456:	4632      	mov	r2, r6
 800c458:	4641      	mov	r1, r8
 800c45a:	f000 f9d7 	bl	800c80c <memmove>
 800c45e:	68a3      	ldr	r3, [r4, #8]
 800c460:	1b9b      	subs	r3, r3, r6
 800c462:	60a3      	str	r3, [r4, #8]
 800c464:	6823      	ldr	r3, [r4, #0]
 800c466:	4433      	add	r3, r6
 800c468:	6023      	str	r3, [r4, #0]
 800c46a:	2000      	movs	r0, #0
 800c46c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c470:	462a      	mov	r2, r5
 800c472:	f000 fd92 	bl	800cf9a <_realloc_r>
 800c476:	4606      	mov	r6, r0
 800c478:	2800      	cmp	r0, #0
 800c47a:	d1e0      	bne.n	800c43e <__ssputs_r+0x5a>
 800c47c:	6921      	ldr	r1, [r4, #16]
 800c47e:	4650      	mov	r0, sl
 800c480:	f7fe fb7e 	bl	800ab80 <_free_r>
 800c484:	230c      	movs	r3, #12
 800c486:	f8ca 3000 	str.w	r3, [sl]
 800c48a:	89a3      	ldrh	r3, [r4, #12]
 800c48c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c490:	81a3      	strh	r3, [r4, #12]
 800c492:	f04f 30ff 	mov.w	r0, #4294967295
 800c496:	e7e9      	b.n	800c46c <__ssputs_r+0x88>

0800c498 <_svfiprintf_r>:
 800c498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c49c:	4698      	mov	r8, r3
 800c49e:	898b      	ldrh	r3, [r1, #12]
 800c4a0:	061b      	lsls	r3, r3, #24
 800c4a2:	b09d      	sub	sp, #116	; 0x74
 800c4a4:	4607      	mov	r7, r0
 800c4a6:	460d      	mov	r5, r1
 800c4a8:	4614      	mov	r4, r2
 800c4aa:	d50e      	bpl.n	800c4ca <_svfiprintf_r+0x32>
 800c4ac:	690b      	ldr	r3, [r1, #16]
 800c4ae:	b963      	cbnz	r3, 800c4ca <_svfiprintf_r+0x32>
 800c4b0:	2140      	movs	r1, #64	; 0x40
 800c4b2:	f7fe fbd7 	bl	800ac64 <_malloc_r>
 800c4b6:	6028      	str	r0, [r5, #0]
 800c4b8:	6128      	str	r0, [r5, #16]
 800c4ba:	b920      	cbnz	r0, 800c4c6 <_svfiprintf_r+0x2e>
 800c4bc:	230c      	movs	r3, #12
 800c4be:	603b      	str	r3, [r7, #0]
 800c4c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4c4:	e0d0      	b.n	800c668 <_svfiprintf_r+0x1d0>
 800c4c6:	2340      	movs	r3, #64	; 0x40
 800c4c8:	616b      	str	r3, [r5, #20]
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800c4ce:	2320      	movs	r3, #32
 800c4d0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c4d8:	2330      	movs	r3, #48	; 0x30
 800c4da:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c680 <_svfiprintf_r+0x1e8>
 800c4de:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c4e2:	f04f 0901 	mov.w	r9, #1
 800c4e6:	4623      	mov	r3, r4
 800c4e8:	469a      	mov	sl, r3
 800c4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4ee:	b10a      	cbz	r2, 800c4f4 <_svfiprintf_r+0x5c>
 800c4f0:	2a25      	cmp	r2, #37	; 0x25
 800c4f2:	d1f9      	bne.n	800c4e8 <_svfiprintf_r+0x50>
 800c4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800c4f8:	d00b      	beq.n	800c512 <_svfiprintf_r+0x7a>
 800c4fa:	465b      	mov	r3, fp
 800c4fc:	4622      	mov	r2, r4
 800c4fe:	4629      	mov	r1, r5
 800c500:	4638      	mov	r0, r7
 800c502:	f7ff ff6f 	bl	800c3e4 <__ssputs_r>
 800c506:	3001      	adds	r0, #1
 800c508:	f000 80a9 	beq.w	800c65e <_svfiprintf_r+0x1c6>
 800c50c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c50e:	445a      	add	r2, fp
 800c510:	9209      	str	r2, [sp, #36]	; 0x24
 800c512:	f89a 3000 	ldrb.w	r3, [sl]
 800c516:	2b00      	cmp	r3, #0
 800c518:	f000 80a1 	beq.w	800c65e <_svfiprintf_r+0x1c6>
 800c51c:	2300      	movs	r3, #0
 800c51e:	f04f 32ff 	mov.w	r2, #4294967295
 800c522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c526:	f10a 0a01 	add.w	sl, sl, #1
 800c52a:	9304      	str	r3, [sp, #16]
 800c52c:	9307      	str	r3, [sp, #28]
 800c52e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c532:	931a      	str	r3, [sp, #104]	; 0x68
 800c534:	4654      	mov	r4, sl
 800c536:	2205      	movs	r2, #5
 800c538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c53c:	4850      	ldr	r0, [pc, #320]	; (800c680 <_svfiprintf_r+0x1e8>)
 800c53e:	f7f3 fe1f 	bl	8000180 <memchr>
 800c542:	9a04      	ldr	r2, [sp, #16]
 800c544:	b9d8      	cbnz	r0, 800c57e <_svfiprintf_r+0xe6>
 800c546:	06d0      	lsls	r0, r2, #27
 800c548:	bf44      	itt	mi
 800c54a:	2320      	movmi	r3, #32
 800c54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c550:	0711      	lsls	r1, r2, #28
 800c552:	bf44      	itt	mi
 800c554:	232b      	movmi	r3, #43	; 0x2b
 800c556:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c55a:	f89a 3000 	ldrb.w	r3, [sl]
 800c55e:	2b2a      	cmp	r3, #42	; 0x2a
 800c560:	d015      	beq.n	800c58e <_svfiprintf_r+0xf6>
 800c562:	9a07      	ldr	r2, [sp, #28]
 800c564:	4654      	mov	r4, sl
 800c566:	2000      	movs	r0, #0
 800c568:	f04f 0c0a 	mov.w	ip, #10
 800c56c:	4621      	mov	r1, r4
 800c56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c572:	3b30      	subs	r3, #48	; 0x30
 800c574:	2b09      	cmp	r3, #9
 800c576:	d94d      	bls.n	800c614 <_svfiprintf_r+0x17c>
 800c578:	b1b0      	cbz	r0, 800c5a8 <_svfiprintf_r+0x110>
 800c57a:	9207      	str	r2, [sp, #28]
 800c57c:	e014      	b.n	800c5a8 <_svfiprintf_r+0x110>
 800c57e:	eba0 0308 	sub.w	r3, r0, r8
 800c582:	fa09 f303 	lsl.w	r3, r9, r3
 800c586:	4313      	orrs	r3, r2
 800c588:	9304      	str	r3, [sp, #16]
 800c58a:	46a2      	mov	sl, r4
 800c58c:	e7d2      	b.n	800c534 <_svfiprintf_r+0x9c>
 800c58e:	9b03      	ldr	r3, [sp, #12]
 800c590:	1d19      	adds	r1, r3, #4
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	9103      	str	r1, [sp, #12]
 800c596:	2b00      	cmp	r3, #0
 800c598:	bfbb      	ittet	lt
 800c59a:	425b      	neglt	r3, r3
 800c59c:	f042 0202 	orrlt.w	r2, r2, #2
 800c5a0:	9307      	strge	r3, [sp, #28]
 800c5a2:	9307      	strlt	r3, [sp, #28]
 800c5a4:	bfb8      	it	lt
 800c5a6:	9204      	strlt	r2, [sp, #16]
 800c5a8:	7823      	ldrb	r3, [r4, #0]
 800c5aa:	2b2e      	cmp	r3, #46	; 0x2e
 800c5ac:	d10c      	bne.n	800c5c8 <_svfiprintf_r+0x130>
 800c5ae:	7863      	ldrb	r3, [r4, #1]
 800c5b0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5b2:	d134      	bne.n	800c61e <_svfiprintf_r+0x186>
 800c5b4:	9b03      	ldr	r3, [sp, #12]
 800c5b6:	1d1a      	adds	r2, r3, #4
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	9203      	str	r2, [sp, #12]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	bfb8      	it	lt
 800c5c0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5c4:	3402      	adds	r4, #2
 800c5c6:	9305      	str	r3, [sp, #20]
 800c5c8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800c684 <_svfiprintf_r+0x1ec>
 800c5cc:	7821      	ldrb	r1, [r4, #0]
 800c5ce:	2203      	movs	r2, #3
 800c5d0:	4650      	mov	r0, sl
 800c5d2:	f7f3 fdd5 	bl	8000180 <memchr>
 800c5d6:	b138      	cbz	r0, 800c5e8 <_svfiprintf_r+0x150>
 800c5d8:	9b04      	ldr	r3, [sp, #16]
 800c5da:	eba0 000a 	sub.w	r0, r0, sl
 800c5de:	2240      	movs	r2, #64	; 0x40
 800c5e0:	4082      	lsls	r2, r0
 800c5e2:	4313      	orrs	r3, r2
 800c5e4:	3401      	adds	r4, #1
 800c5e6:	9304      	str	r3, [sp, #16]
 800c5e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ec:	4826      	ldr	r0, [pc, #152]	; (800c688 <_svfiprintf_r+0x1f0>)
 800c5ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5f2:	2206      	movs	r2, #6
 800c5f4:	f7f3 fdc4 	bl	8000180 <memchr>
 800c5f8:	2800      	cmp	r0, #0
 800c5fa:	d038      	beq.n	800c66e <_svfiprintf_r+0x1d6>
 800c5fc:	4b23      	ldr	r3, [pc, #140]	; (800c68c <_svfiprintf_r+0x1f4>)
 800c5fe:	bb1b      	cbnz	r3, 800c648 <_svfiprintf_r+0x1b0>
 800c600:	9b03      	ldr	r3, [sp, #12]
 800c602:	3307      	adds	r3, #7
 800c604:	f023 0307 	bic.w	r3, r3, #7
 800c608:	3308      	adds	r3, #8
 800c60a:	9303      	str	r3, [sp, #12]
 800c60c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c60e:	4433      	add	r3, r6
 800c610:	9309      	str	r3, [sp, #36]	; 0x24
 800c612:	e768      	b.n	800c4e6 <_svfiprintf_r+0x4e>
 800c614:	fb0c 3202 	mla	r2, ip, r2, r3
 800c618:	460c      	mov	r4, r1
 800c61a:	2001      	movs	r0, #1
 800c61c:	e7a6      	b.n	800c56c <_svfiprintf_r+0xd4>
 800c61e:	2300      	movs	r3, #0
 800c620:	3401      	adds	r4, #1
 800c622:	9305      	str	r3, [sp, #20]
 800c624:	4619      	mov	r1, r3
 800c626:	f04f 0c0a 	mov.w	ip, #10
 800c62a:	4620      	mov	r0, r4
 800c62c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c630:	3a30      	subs	r2, #48	; 0x30
 800c632:	2a09      	cmp	r2, #9
 800c634:	d903      	bls.n	800c63e <_svfiprintf_r+0x1a6>
 800c636:	2b00      	cmp	r3, #0
 800c638:	d0c6      	beq.n	800c5c8 <_svfiprintf_r+0x130>
 800c63a:	9105      	str	r1, [sp, #20]
 800c63c:	e7c4      	b.n	800c5c8 <_svfiprintf_r+0x130>
 800c63e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c642:	4604      	mov	r4, r0
 800c644:	2301      	movs	r3, #1
 800c646:	e7f0      	b.n	800c62a <_svfiprintf_r+0x192>
 800c648:	ab03      	add	r3, sp, #12
 800c64a:	9300      	str	r3, [sp, #0]
 800c64c:	462a      	mov	r2, r5
 800c64e:	4b10      	ldr	r3, [pc, #64]	; (800c690 <_svfiprintf_r+0x1f8>)
 800c650:	a904      	add	r1, sp, #16
 800c652:	4638      	mov	r0, r7
 800c654:	f7fc fc90 	bl	8008f78 <_printf_float>
 800c658:	1c42      	adds	r2, r0, #1
 800c65a:	4606      	mov	r6, r0
 800c65c:	d1d6      	bne.n	800c60c <_svfiprintf_r+0x174>
 800c65e:	89ab      	ldrh	r3, [r5, #12]
 800c660:	065b      	lsls	r3, r3, #25
 800c662:	f53f af2d 	bmi.w	800c4c0 <_svfiprintf_r+0x28>
 800c666:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c668:	b01d      	add	sp, #116	; 0x74
 800c66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c66e:	ab03      	add	r3, sp, #12
 800c670:	9300      	str	r3, [sp, #0]
 800c672:	462a      	mov	r2, r5
 800c674:	4b06      	ldr	r3, [pc, #24]	; (800c690 <_svfiprintf_r+0x1f8>)
 800c676:	a904      	add	r1, sp, #16
 800c678:	4638      	mov	r0, r7
 800c67a:	f7fc ff17 	bl	80094ac <_printf_i>
 800c67e:	e7eb      	b.n	800c658 <_svfiprintf_r+0x1c0>
 800c680:	0800e289 	.word	0x0800e289
 800c684:	0800e28f 	.word	0x0800e28f
 800c688:	0800e293 	.word	0x0800e293
 800c68c:	08008f79 	.word	0x08008f79
 800c690:	0800c3e5 	.word	0x0800c3e5

0800c694 <__sflush_r>:
 800c694:	898a      	ldrh	r2, [r1, #12]
 800c696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c698:	4605      	mov	r5, r0
 800c69a:	0710      	lsls	r0, r2, #28
 800c69c:	460c      	mov	r4, r1
 800c69e:	d457      	bmi.n	800c750 <__sflush_r+0xbc>
 800c6a0:	684b      	ldr	r3, [r1, #4]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	dc04      	bgt.n	800c6b0 <__sflush_r+0x1c>
 800c6a6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	dc01      	bgt.n	800c6b0 <__sflush_r+0x1c>
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6b0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6b2:	2e00      	cmp	r6, #0
 800c6b4:	d0fa      	beq.n	800c6ac <__sflush_r+0x18>
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c6bc:	682f      	ldr	r7, [r5, #0]
 800c6be:	6a21      	ldr	r1, [r4, #32]
 800c6c0:	602b      	str	r3, [r5, #0]
 800c6c2:	d032      	beq.n	800c72a <__sflush_r+0x96>
 800c6c4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c6c6:	89a3      	ldrh	r3, [r4, #12]
 800c6c8:	075a      	lsls	r2, r3, #29
 800c6ca:	d505      	bpl.n	800c6d8 <__sflush_r+0x44>
 800c6cc:	6863      	ldr	r3, [r4, #4]
 800c6ce:	1ac0      	subs	r0, r0, r3
 800c6d0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c6d2:	b10b      	cbz	r3, 800c6d8 <__sflush_r+0x44>
 800c6d4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c6d6:	1ac0      	subs	r0, r0, r3
 800c6d8:	2300      	movs	r3, #0
 800c6da:	4602      	mov	r2, r0
 800c6dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c6de:	6a21      	ldr	r1, [r4, #32]
 800c6e0:	4628      	mov	r0, r5
 800c6e2:	47b0      	blx	r6
 800c6e4:	1c43      	adds	r3, r0, #1
 800c6e6:	89a3      	ldrh	r3, [r4, #12]
 800c6e8:	d106      	bne.n	800c6f8 <__sflush_r+0x64>
 800c6ea:	6829      	ldr	r1, [r5, #0]
 800c6ec:	291d      	cmp	r1, #29
 800c6ee:	d82b      	bhi.n	800c748 <__sflush_r+0xb4>
 800c6f0:	4a28      	ldr	r2, [pc, #160]	; (800c794 <__sflush_r+0x100>)
 800c6f2:	410a      	asrs	r2, r1
 800c6f4:	07d6      	lsls	r6, r2, #31
 800c6f6:	d427      	bmi.n	800c748 <__sflush_r+0xb4>
 800c6f8:	2200      	movs	r2, #0
 800c6fa:	6062      	str	r2, [r4, #4]
 800c6fc:	04d9      	lsls	r1, r3, #19
 800c6fe:	6922      	ldr	r2, [r4, #16]
 800c700:	6022      	str	r2, [r4, #0]
 800c702:	d504      	bpl.n	800c70e <__sflush_r+0x7a>
 800c704:	1c42      	adds	r2, r0, #1
 800c706:	d101      	bne.n	800c70c <__sflush_r+0x78>
 800c708:	682b      	ldr	r3, [r5, #0]
 800c70a:	b903      	cbnz	r3, 800c70e <__sflush_r+0x7a>
 800c70c:	6560      	str	r0, [r4, #84]	; 0x54
 800c70e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c710:	602f      	str	r7, [r5, #0]
 800c712:	2900      	cmp	r1, #0
 800c714:	d0ca      	beq.n	800c6ac <__sflush_r+0x18>
 800c716:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c71a:	4299      	cmp	r1, r3
 800c71c:	d002      	beq.n	800c724 <__sflush_r+0x90>
 800c71e:	4628      	mov	r0, r5
 800c720:	f7fe fa2e 	bl	800ab80 <_free_r>
 800c724:	2000      	movs	r0, #0
 800c726:	6360      	str	r0, [r4, #52]	; 0x34
 800c728:	e7c1      	b.n	800c6ae <__sflush_r+0x1a>
 800c72a:	2301      	movs	r3, #1
 800c72c:	4628      	mov	r0, r5
 800c72e:	47b0      	blx	r6
 800c730:	1c41      	adds	r1, r0, #1
 800c732:	d1c8      	bne.n	800c6c6 <__sflush_r+0x32>
 800c734:	682b      	ldr	r3, [r5, #0]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d0c5      	beq.n	800c6c6 <__sflush_r+0x32>
 800c73a:	2b1d      	cmp	r3, #29
 800c73c:	d001      	beq.n	800c742 <__sflush_r+0xae>
 800c73e:	2b16      	cmp	r3, #22
 800c740:	d101      	bne.n	800c746 <__sflush_r+0xb2>
 800c742:	602f      	str	r7, [r5, #0]
 800c744:	e7b2      	b.n	800c6ac <__sflush_r+0x18>
 800c746:	89a3      	ldrh	r3, [r4, #12]
 800c748:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c74c:	81a3      	strh	r3, [r4, #12]
 800c74e:	e7ae      	b.n	800c6ae <__sflush_r+0x1a>
 800c750:	690f      	ldr	r7, [r1, #16]
 800c752:	2f00      	cmp	r7, #0
 800c754:	d0aa      	beq.n	800c6ac <__sflush_r+0x18>
 800c756:	0793      	lsls	r3, r2, #30
 800c758:	680e      	ldr	r6, [r1, #0]
 800c75a:	bf08      	it	eq
 800c75c:	694b      	ldreq	r3, [r1, #20]
 800c75e:	600f      	str	r7, [r1, #0]
 800c760:	bf18      	it	ne
 800c762:	2300      	movne	r3, #0
 800c764:	1bf6      	subs	r6, r6, r7
 800c766:	608b      	str	r3, [r1, #8]
 800c768:	2e00      	cmp	r6, #0
 800c76a:	dd9f      	ble.n	800c6ac <__sflush_r+0x18>
 800c76c:	6a21      	ldr	r1, [r4, #32]
 800c76e:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800c772:	4633      	mov	r3, r6
 800c774:	463a      	mov	r2, r7
 800c776:	4628      	mov	r0, r5
 800c778:	47e0      	blx	ip
 800c77a:	2800      	cmp	r0, #0
 800c77c:	dc06      	bgt.n	800c78c <__sflush_r+0xf8>
 800c77e:	89a3      	ldrh	r3, [r4, #12]
 800c780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c784:	81a3      	strh	r3, [r4, #12]
 800c786:	f04f 30ff 	mov.w	r0, #4294967295
 800c78a:	e790      	b.n	800c6ae <__sflush_r+0x1a>
 800c78c:	4407      	add	r7, r0
 800c78e:	1a36      	subs	r6, r6, r0
 800c790:	e7ea      	b.n	800c768 <__sflush_r+0xd4>
 800c792:	bf00      	nop
 800c794:	dfbffffe 	.word	0xdfbffffe

0800c798 <_fflush_r>:
 800c798:	b538      	push	{r3, r4, r5, lr}
 800c79a:	690b      	ldr	r3, [r1, #16]
 800c79c:	4605      	mov	r5, r0
 800c79e:	460c      	mov	r4, r1
 800c7a0:	b913      	cbnz	r3, 800c7a8 <_fflush_r+0x10>
 800c7a2:	2500      	movs	r5, #0
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	bd38      	pop	{r3, r4, r5, pc}
 800c7a8:	b118      	cbz	r0, 800c7b2 <_fflush_r+0x1a>
 800c7aa:	6a03      	ldr	r3, [r0, #32]
 800c7ac:	b90b      	cbnz	r3, 800c7b2 <_fflush_r+0x1a>
 800c7ae:	f7fd fa37 	bl	8009c20 <__sinit>
 800c7b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d0f3      	beq.n	800c7a2 <_fflush_r+0xa>
 800c7ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c7bc:	07d0      	lsls	r0, r2, #31
 800c7be:	d404      	bmi.n	800c7ca <_fflush_r+0x32>
 800c7c0:	0599      	lsls	r1, r3, #22
 800c7c2:	d402      	bmi.n	800c7ca <_fflush_r+0x32>
 800c7c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7c6:	f7fd fb42 	bl	8009e4e <__retarget_lock_acquire_recursive>
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	4621      	mov	r1, r4
 800c7ce:	f7ff ff61 	bl	800c694 <__sflush_r>
 800c7d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c7d4:	07da      	lsls	r2, r3, #31
 800c7d6:	4605      	mov	r5, r0
 800c7d8:	d4e4      	bmi.n	800c7a4 <_fflush_r+0xc>
 800c7da:	89a3      	ldrh	r3, [r4, #12]
 800c7dc:	059b      	lsls	r3, r3, #22
 800c7de:	d4e1      	bmi.n	800c7a4 <_fflush_r+0xc>
 800c7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c7e2:	f7fd fb35 	bl	8009e50 <__retarget_lock_release_recursive>
 800c7e6:	e7dd      	b.n	800c7a4 <_fflush_r+0xc>

0800c7e8 <fiprintf>:
 800c7e8:	b40e      	push	{r1, r2, r3}
 800c7ea:	b503      	push	{r0, r1, lr}
 800c7ec:	4601      	mov	r1, r0
 800c7ee:	ab03      	add	r3, sp, #12
 800c7f0:	4805      	ldr	r0, [pc, #20]	; (800c808 <fiprintf+0x20>)
 800c7f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7f6:	6800      	ldr	r0, [r0, #0]
 800c7f8:	9301      	str	r3, [sp, #4]
 800c7fa:	f000 fc31 	bl	800d060 <_vfiprintf_r>
 800c7fe:	b002      	add	sp, #8
 800c800:	f85d eb04 	ldr.w	lr, [sp], #4
 800c804:	b003      	add	sp, #12
 800c806:	4770      	bx	lr
 800c808:	20000070 	.word	0x20000070

0800c80c <memmove>:
 800c80c:	4288      	cmp	r0, r1
 800c80e:	b510      	push	{r4, lr}
 800c810:	eb01 0402 	add.w	r4, r1, r2
 800c814:	d902      	bls.n	800c81c <memmove+0x10>
 800c816:	4284      	cmp	r4, r0
 800c818:	4623      	mov	r3, r4
 800c81a:	d807      	bhi.n	800c82c <memmove+0x20>
 800c81c:	1e43      	subs	r3, r0, #1
 800c81e:	42a1      	cmp	r1, r4
 800c820:	d008      	beq.n	800c834 <memmove+0x28>
 800c822:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c826:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c82a:	e7f8      	b.n	800c81e <memmove+0x12>
 800c82c:	4402      	add	r2, r0
 800c82e:	4601      	mov	r1, r0
 800c830:	428a      	cmp	r2, r1
 800c832:	d100      	bne.n	800c836 <memmove+0x2a>
 800c834:	bd10      	pop	{r4, pc}
 800c836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c83a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c83e:	e7f7      	b.n	800c830 <memmove+0x24>

0800c840 <strncmp>:
 800c840:	b510      	push	{r4, lr}
 800c842:	b16a      	cbz	r2, 800c860 <strncmp+0x20>
 800c844:	3901      	subs	r1, #1
 800c846:	1884      	adds	r4, r0, r2
 800c848:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c84c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c850:	429a      	cmp	r2, r3
 800c852:	d103      	bne.n	800c85c <strncmp+0x1c>
 800c854:	42a0      	cmp	r0, r4
 800c856:	d001      	beq.n	800c85c <strncmp+0x1c>
 800c858:	2a00      	cmp	r2, #0
 800c85a:	d1f5      	bne.n	800c848 <strncmp+0x8>
 800c85c:	1ad0      	subs	r0, r2, r3
 800c85e:	bd10      	pop	{r4, pc}
 800c860:	4610      	mov	r0, r2
 800c862:	e7fc      	b.n	800c85e <strncmp+0x1e>

0800c864 <_sbrk_r>:
 800c864:	b538      	push	{r3, r4, r5, lr}
 800c866:	4d06      	ldr	r5, [pc, #24]	; (800c880 <_sbrk_r+0x1c>)
 800c868:	2300      	movs	r3, #0
 800c86a:	4604      	mov	r4, r0
 800c86c:	4608      	mov	r0, r1
 800c86e:	602b      	str	r3, [r5, #0]
 800c870:	f7f4 ff0c 	bl	800168c <_sbrk>
 800c874:	1c43      	adds	r3, r0, #1
 800c876:	d102      	bne.n	800c87e <_sbrk_r+0x1a>
 800c878:	682b      	ldr	r3, [r5, #0]
 800c87a:	b103      	cbz	r3, 800c87e <_sbrk_r+0x1a>
 800c87c:	6023      	str	r3, [r4, #0]
 800c87e:	bd38      	pop	{r3, r4, r5, pc}
 800c880:	20000af0 	.word	0x20000af0

0800c884 <nan>:
 800c884:	4901      	ldr	r1, [pc, #4]	; (800c88c <nan+0x8>)
 800c886:	2000      	movs	r0, #0
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	7ff80000 	.word	0x7ff80000

0800c890 <abort>:
 800c890:	b508      	push	{r3, lr}
 800c892:	2006      	movs	r0, #6
 800c894:	f000 fdbc 	bl	800d410 <raise>
 800c898:	2001      	movs	r0, #1
 800c89a:	f7f4 fec7 	bl	800162c <_exit>

0800c89e <_calloc_r>:
 800c89e:	b570      	push	{r4, r5, r6, lr}
 800c8a0:	fba1 5402 	umull	r5, r4, r1, r2
 800c8a4:	b934      	cbnz	r4, 800c8b4 <_calloc_r+0x16>
 800c8a6:	4629      	mov	r1, r5
 800c8a8:	f7fe f9dc 	bl	800ac64 <_malloc_r>
 800c8ac:	4606      	mov	r6, r0
 800c8ae:	b928      	cbnz	r0, 800c8bc <_calloc_r+0x1e>
 800c8b0:	4630      	mov	r0, r6
 800c8b2:	bd70      	pop	{r4, r5, r6, pc}
 800c8b4:	220c      	movs	r2, #12
 800c8b6:	6002      	str	r2, [r0, #0]
 800c8b8:	2600      	movs	r6, #0
 800c8ba:	e7f9      	b.n	800c8b0 <_calloc_r+0x12>
 800c8bc:	462a      	mov	r2, r5
 800c8be:	4621      	mov	r1, r4
 800c8c0:	f7fd fa47 	bl	8009d52 <memset>
 800c8c4:	e7f4      	b.n	800c8b0 <_calloc_r+0x12>

0800c8c6 <rshift>:
 800c8c6:	6903      	ldr	r3, [r0, #16]
 800c8c8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c8cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8d0:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c8d4:	f100 0414 	add.w	r4, r0, #20
 800c8d8:	dd45      	ble.n	800c966 <rshift+0xa0>
 800c8da:	f011 011f 	ands.w	r1, r1, #31
 800c8de:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c8e2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c8e6:	d10c      	bne.n	800c902 <rshift+0x3c>
 800c8e8:	f100 0710 	add.w	r7, r0, #16
 800c8ec:	4629      	mov	r1, r5
 800c8ee:	42b1      	cmp	r1, r6
 800c8f0:	d334      	bcc.n	800c95c <rshift+0x96>
 800c8f2:	1a9b      	subs	r3, r3, r2
 800c8f4:	009b      	lsls	r3, r3, #2
 800c8f6:	1eea      	subs	r2, r5, #3
 800c8f8:	4296      	cmp	r6, r2
 800c8fa:	bf38      	it	cc
 800c8fc:	2300      	movcc	r3, #0
 800c8fe:	4423      	add	r3, r4
 800c900:	e015      	b.n	800c92e <rshift+0x68>
 800c902:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c906:	f1c1 0820 	rsb	r8, r1, #32
 800c90a:	40cf      	lsrs	r7, r1
 800c90c:	f105 0e04 	add.w	lr, r5, #4
 800c910:	46a1      	mov	r9, r4
 800c912:	4576      	cmp	r6, lr
 800c914:	46f4      	mov	ip, lr
 800c916:	d815      	bhi.n	800c944 <rshift+0x7e>
 800c918:	1a9a      	subs	r2, r3, r2
 800c91a:	0092      	lsls	r2, r2, #2
 800c91c:	3a04      	subs	r2, #4
 800c91e:	3501      	adds	r5, #1
 800c920:	42ae      	cmp	r6, r5
 800c922:	bf38      	it	cc
 800c924:	2200      	movcc	r2, #0
 800c926:	18a3      	adds	r3, r4, r2
 800c928:	50a7      	str	r7, [r4, r2]
 800c92a:	b107      	cbz	r7, 800c92e <rshift+0x68>
 800c92c:	3304      	adds	r3, #4
 800c92e:	1b1a      	subs	r2, r3, r4
 800c930:	42a3      	cmp	r3, r4
 800c932:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c936:	bf08      	it	eq
 800c938:	2300      	moveq	r3, #0
 800c93a:	6102      	str	r2, [r0, #16]
 800c93c:	bf08      	it	eq
 800c93e:	6143      	streq	r3, [r0, #20]
 800c940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c944:	f8dc c000 	ldr.w	ip, [ip]
 800c948:	fa0c fc08 	lsl.w	ip, ip, r8
 800c94c:	ea4c 0707 	orr.w	r7, ip, r7
 800c950:	f849 7b04 	str.w	r7, [r9], #4
 800c954:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c958:	40cf      	lsrs	r7, r1
 800c95a:	e7da      	b.n	800c912 <rshift+0x4c>
 800c95c:	f851 cb04 	ldr.w	ip, [r1], #4
 800c960:	f847 cf04 	str.w	ip, [r7, #4]!
 800c964:	e7c3      	b.n	800c8ee <rshift+0x28>
 800c966:	4623      	mov	r3, r4
 800c968:	e7e1      	b.n	800c92e <rshift+0x68>

0800c96a <__hexdig_fun>:
 800c96a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c96e:	2b09      	cmp	r3, #9
 800c970:	d802      	bhi.n	800c978 <__hexdig_fun+0xe>
 800c972:	3820      	subs	r0, #32
 800c974:	b2c0      	uxtb	r0, r0
 800c976:	4770      	bx	lr
 800c978:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c97c:	2b05      	cmp	r3, #5
 800c97e:	d801      	bhi.n	800c984 <__hexdig_fun+0x1a>
 800c980:	3847      	subs	r0, #71	; 0x47
 800c982:	e7f7      	b.n	800c974 <__hexdig_fun+0xa>
 800c984:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c988:	2b05      	cmp	r3, #5
 800c98a:	d801      	bhi.n	800c990 <__hexdig_fun+0x26>
 800c98c:	3827      	subs	r0, #39	; 0x27
 800c98e:	e7f1      	b.n	800c974 <__hexdig_fun+0xa>
 800c990:	2000      	movs	r0, #0
 800c992:	4770      	bx	lr

0800c994 <__gethex>:
 800c994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c998:	4617      	mov	r7, r2
 800c99a:	680a      	ldr	r2, [r1, #0]
 800c99c:	b085      	sub	sp, #20
 800c99e:	f102 0b02 	add.w	fp, r2, #2
 800c9a2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c9a6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c9aa:	4681      	mov	r9, r0
 800c9ac:	468a      	mov	sl, r1
 800c9ae:	9302      	str	r3, [sp, #8]
 800c9b0:	32fe      	adds	r2, #254	; 0xfe
 800c9b2:	eb02 030b 	add.w	r3, r2, fp
 800c9b6:	46d8      	mov	r8, fp
 800c9b8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c9bc:	9301      	str	r3, [sp, #4]
 800c9be:	2830      	cmp	r0, #48	; 0x30
 800c9c0:	d0f7      	beq.n	800c9b2 <__gethex+0x1e>
 800c9c2:	f7ff ffd2 	bl	800c96a <__hexdig_fun>
 800c9c6:	4604      	mov	r4, r0
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d138      	bne.n	800ca3e <__gethex+0xaa>
 800c9cc:	49a8      	ldr	r1, [pc, #672]	; (800cc70 <__gethex+0x2dc>)
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	4640      	mov	r0, r8
 800c9d2:	f7ff ff35 	bl	800c840 <strncmp>
 800c9d6:	4606      	mov	r6, r0
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d169      	bne.n	800cab0 <__gethex+0x11c>
 800c9dc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c9e0:	465d      	mov	r5, fp
 800c9e2:	f7ff ffc2 	bl	800c96a <__hexdig_fun>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d064      	beq.n	800cab4 <__gethex+0x120>
 800c9ea:	465a      	mov	r2, fp
 800c9ec:	7810      	ldrb	r0, [r2, #0]
 800c9ee:	2830      	cmp	r0, #48	; 0x30
 800c9f0:	4690      	mov	r8, r2
 800c9f2:	f102 0201 	add.w	r2, r2, #1
 800c9f6:	d0f9      	beq.n	800c9ec <__gethex+0x58>
 800c9f8:	f7ff ffb7 	bl	800c96a <__hexdig_fun>
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	fab0 f480 	clz	r4, r0
 800ca02:	0964      	lsrs	r4, r4, #5
 800ca04:	465e      	mov	r6, fp
 800ca06:	9301      	str	r3, [sp, #4]
 800ca08:	4642      	mov	r2, r8
 800ca0a:	4615      	mov	r5, r2
 800ca0c:	3201      	adds	r2, #1
 800ca0e:	7828      	ldrb	r0, [r5, #0]
 800ca10:	f7ff ffab 	bl	800c96a <__hexdig_fun>
 800ca14:	2800      	cmp	r0, #0
 800ca16:	d1f8      	bne.n	800ca0a <__gethex+0x76>
 800ca18:	4995      	ldr	r1, [pc, #596]	; (800cc70 <__gethex+0x2dc>)
 800ca1a:	2201      	movs	r2, #1
 800ca1c:	4628      	mov	r0, r5
 800ca1e:	f7ff ff0f 	bl	800c840 <strncmp>
 800ca22:	b978      	cbnz	r0, 800ca44 <__gethex+0xb0>
 800ca24:	b946      	cbnz	r6, 800ca38 <__gethex+0xa4>
 800ca26:	1c6e      	adds	r6, r5, #1
 800ca28:	4632      	mov	r2, r6
 800ca2a:	4615      	mov	r5, r2
 800ca2c:	3201      	adds	r2, #1
 800ca2e:	7828      	ldrb	r0, [r5, #0]
 800ca30:	f7ff ff9b 	bl	800c96a <__hexdig_fun>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d1f8      	bne.n	800ca2a <__gethex+0x96>
 800ca38:	1b73      	subs	r3, r6, r5
 800ca3a:	009e      	lsls	r6, r3, #2
 800ca3c:	e004      	b.n	800ca48 <__gethex+0xb4>
 800ca3e:	2400      	movs	r4, #0
 800ca40:	4626      	mov	r6, r4
 800ca42:	e7e1      	b.n	800ca08 <__gethex+0x74>
 800ca44:	2e00      	cmp	r6, #0
 800ca46:	d1f7      	bne.n	800ca38 <__gethex+0xa4>
 800ca48:	782b      	ldrb	r3, [r5, #0]
 800ca4a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ca4e:	2b50      	cmp	r3, #80	; 0x50
 800ca50:	d13d      	bne.n	800cace <__gethex+0x13a>
 800ca52:	786b      	ldrb	r3, [r5, #1]
 800ca54:	2b2b      	cmp	r3, #43	; 0x2b
 800ca56:	d02f      	beq.n	800cab8 <__gethex+0x124>
 800ca58:	2b2d      	cmp	r3, #45	; 0x2d
 800ca5a:	d031      	beq.n	800cac0 <__gethex+0x12c>
 800ca5c:	1c69      	adds	r1, r5, #1
 800ca5e:	f04f 0b00 	mov.w	fp, #0
 800ca62:	7808      	ldrb	r0, [r1, #0]
 800ca64:	f7ff ff81 	bl	800c96a <__hexdig_fun>
 800ca68:	1e42      	subs	r2, r0, #1
 800ca6a:	b2d2      	uxtb	r2, r2
 800ca6c:	2a18      	cmp	r2, #24
 800ca6e:	d82e      	bhi.n	800cace <__gethex+0x13a>
 800ca70:	f1a0 0210 	sub.w	r2, r0, #16
 800ca74:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca78:	f7ff ff77 	bl	800c96a <__hexdig_fun>
 800ca7c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ca80:	fa5f fc8c 	uxtb.w	ip, ip
 800ca84:	f1bc 0f18 	cmp.w	ip, #24
 800ca88:	d91d      	bls.n	800cac6 <__gethex+0x132>
 800ca8a:	f1bb 0f00 	cmp.w	fp, #0
 800ca8e:	d000      	beq.n	800ca92 <__gethex+0xfe>
 800ca90:	4252      	negs	r2, r2
 800ca92:	4416      	add	r6, r2
 800ca94:	f8ca 1000 	str.w	r1, [sl]
 800ca98:	b1dc      	cbz	r4, 800cad2 <__gethex+0x13e>
 800ca9a:	9b01      	ldr	r3, [sp, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bf14      	ite	ne
 800caa0:	f04f 0800 	movne.w	r8, #0
 800caa4:	f04f 0806 	moveq.w	r8, #6
 800caa8:	4640      	mov	r0, r8
 800caaa:	b005      	add	sp, #20
 800caac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab0:	4645      	mov	r5, r8
 800cab2:	4626      	mov	r6, r4
 800cab4:	2401      	movs	r4, #1
 800cab6:	e7c7      	b.n	800ca48 <__gethex+0xb4>
 800cab8:	f04f 0b00 	mov.w	fp, #0
 800cabc:	1ca9      	adds	r1, r5, #2
 800cabe:	e7d0      	b.n	800ca62 <__gethex+0xce>
 800cac0:	f04f 0b01 	mov.w	fp, #1
 800cac4:	e7fa      	b.n	800cabc <__gethex+0x128>
 800cac6:	230a      	movs	r3, #10
 800cac8:	fb03 0002 	mla	r0, r3, r2, r0
 800cacc:	e7d0      	b.n	800ca70 <__gethex+0xdc>
 800cace:	4629      	mov	r1, r5
 800cad0:	e7e0      	b.n	800ca94 <__gethex+0x100>
 800cad2:	eba5 0308 	sub.w	r3, r5, r8
 800cad6:	3b01      	subs	r3, #1
 800cad8:	4621      	mov	r1, r4
 800cada:	2b07      	cmp	r3, #7
 800cadc:	dc0a      	bgt.n	800caf4 <__gethex+0x160>
 800cade:	4648      	mov	r0, r9
 800cae0:	f7fe f94c 	bl	800ad7c <_Balloc>
 800cae4:	4604      	mov	r4, r0
 800cae6:	b940      	cbnz	r0, 800cafa <__gethex+0x166>
 800cae8:	4b62      	ldr	r3, [pc, #392]	; (800cc74 <__gethex+0x2e0>)
 800caea:	4602      	mov	r2, r0
 800caec:	21e4      	movs	r1, #228	; 0xe4
 800caee:	4862      	ldr	r0, [pc, #392]	; (800cc78 <__gethex+0x2e4>)
 800caf0:	f7fd f9c2 	bl	8009e78 <__assert_func>
 800caf4:	3101      	adds	r1, #1
 800caf6:	105b      	asrs	r3, r3, #1
 800caf8:	e7ef      	b.n	800cada <__gethex+0x146>
 800cafa:	f100 0a14 	add.w	sl, r0, #20
 800cafe:	2300      	movs	r3, #0
 800cb00:	f8cd a004 	str.w	sl, [sp, #4]
 800cb04:	469b      	mov	fp, r3
 800cb06:	45a8      	cmp	r8, r5
 800cb08:	d344      	bcc.n	800cb94 <__gethex+0x200>
 800cb0a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cb0e:	f848 bb04 	str.w	fp, [r8], #4
 800cb12:	eba8 080a 	sub.w	r8, r8, sl
 800cb16:	ea4f 02a8 	mov.w	r2, r8, asr #2
 800cb1a:	6122      	str	r2, [r4, #16]
 800cb1c:	4658      	mov	r0, fp
 800cb1e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 800cb22:	f7fe fa1d 	bl	800af60 <__hi0bits>
 800cb26:	683d      	ldr	r5, [r7, #0]
 800cb28:	eba8 0800 	sub.w	r8, r8, r0
 800cb2c:	45a8      	cmp	r8, r5
 800cb2e:	dd59      	ble.n	800cbe4 <__gethex+0x250>
 800cb30:	eba8 0805 	sub.w	r8, r8, r5
 800cb34:	4641      	mov	r1, r8
 800cb36:	4620      	mov	r0, r4
 800cb38:	f7fe fd99 	bl	800b66e <__any_on>
 800cb3c:	4683      	mov	fp, r0
 800cb3e:	b1b8      	cbz	r0, 800cb70 <__gethex+0x1dc>
 800cb40:	f108 33ff 	add.w	r3, r8, #4294967295
 800cb44:	1159      	asrs	r1, r3, #5
 800cb46:	f003 021f 	and.w	r2, r3, #31
 800cb4a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cb4e:	f04f 0b01 	mov.w	fp, #1
 800cb52:	fa0b f202 	lsl.w	r2, fp, r2
 800cb56:	420a      	tst	r2, r1
 800cb58:	d00a      	beq.n	800cb70 <__gethex+0x1dc>
 800cb5a:	455b      	cmp	r3, fp
 800cb5c:	dd06      	ble.n	800cb6c <__gethex+0x1d8>
 800cb5e:	f1a8 0102 	sub.w	r1, r8, #2
 800cb62:	4620      	mov	r0, r4
 800cb64:	f7fe fd83 	bl	800b66e <__any_on>
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d138      	bne.n	800cbde <__gethex+0x24a>
 800cb6c:	f04f 0b02 	mov.w	fp, #2
 800cb70:	4641      	mov	r1, r8
 800cb72:	4620      	mov	r0, r4
 800cb74:	f7ff fea7 	bl	800c8c6 <rshift>
 800cb78:	4446      	add	r6, r8
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	42b3      	cmp	r3, r6
 800cb7e:	da41      	bge.n	800cc04 <__gethex+0x270>
 800cb80:	4621      	mov	r1, r4
 800cb82:	4648      	mov	r0, r9
 800cb84:	f7fe f93a 	bl	800adfc <_Bfree>
 800cb88:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	6013      	str	r3, [r2, #0]
 800cb8e:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cb92:	e789      	b.n	800caa8 <__gethex+0x114>
 800cb94:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cb98:	2a2e      	cmp	r2, #46	; 0x2e
 800cb9a:	d014      	beq.n	800cbc6 <__gethex+0x232>
 800cb9c:	2b20      	cmp	r3, #32
 800cb9e:	d106      	bne.n	800cbae <__gethex+0x21a>
 800cba0:	9b01      	ldr	r3, [sp, #4]
 800cba2:	f843 bb04 	str.w	fp, [r3], #4
 800cba6:	f04f 0b00 	mov.w	fp, #0
 800cbaa:	9301      	str	r3, [sp, #4]
 800cbac:	465b      	mov	r3, fp
 800cbae:	7828      	ldrb	r0, [r5, #0]
 800cbb0:	9303      	str	r3, [sp, #12]
 800cbb2:	f7ff feda 	bl	800c96a <__hexdig_fun>
 800cbb6:	9b03      	ldr	r3, [sp, #12]
 800cbb8:	f000 000f 	and.w	r0, r0, #15
 800cbbc:	4098      	lsls	r0, r3
 800cbbe:	ea4b 0b00 	orr.w	fp, fp, r0
 800cbc2:	3304      	adds	r3, #4
 800cbc4:	e79f      	b.n	800cb06 <__gethex+0x172>
 800cbc6:	45a8      	cmp	r8, r5
 800cbc8:	d8e8      	bhi.n	800cb9c <__gethex+0x208>
 800cbca:	4929      	ldr	r1, [pc, #164]	; (800cc70 <__gethex+0x2dc>)
 800cbcc:	9303      	str	r3, [sp, #12]
 800cbce:	2201      	movs	r2, #1
 800cbd0:	4628      	mov	r0, r5
 800cbd2:	f7ff fe35 	bl	800c840 <strncmp>
 800cbd6:	9b03      	ldr	r3, [sp, #12]
 800cbd8:	2800      	cmp	r0, #0
 800cbda:	d1df      	bne.n	800cb9c <__gethex+0x208>
 800cbdc:	e793      	b.n	800cb06 <__gethex+0x172>
 800cbde:	f04f 0b03 	mov.w	fp, #3
 800cbe2:	e7c5      	b.n	800cb70 <__gethex+0x1dc>
 800cbe4:	da0b      	bge.n	800cbfe <__gethex+0x26a>
 800cbe6:	eba5 0808 	sub.w	r8, r5, r8
 800cbea:	4621      	mov	r1, r4
 800cbec:	4642      	mov	r2, r8
 800cbee:	4648      	mov	r0, r9
 800cbf0:	f7fe fb1e 	bl	800b230 <__lshift>
 800cbf4:	eba6 0608 	sub.w	r6, r6, r8
 800cbf8:	4604      	mov	r4, r0
 800cbfa:	f100 0a14 	add.w	sl, r0, #20
 800cbfe:	f04f 0b00 	mov.w	fp, #0
 800cc02:	e7ba      	b.n	800cb7a <__gethex+0x1e6>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	42b3      	cmp	r3, r6
 800cc08:	dd74      	ble.n	800ccf4 <__gethex+0x360>
 800cc0a:	1b9e      	subs	r6, r3, r6
 800cc0c:	42b5      	cmp	r5, r6
 800cc0e:	dc35      	bgt.n	800cc7c <__gethex+0x2e8>
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	2b02      	cmp	r3, #2
 800cc14:	d023      	beq.n	800cc5e <__gethex+0x2ca>
 800cc16:	2b03      	cmp	r3, #3
 800cc18:	d025      	beq.n	800cc66 <__gethex+0x2d2>
 800cc1a:	2b01      	cmp	r3, #1
 800cc1c:	d115      	bne.n	800cc4a <__gethex+0x2b6>
 800cc1e:	42b5      	cmp	r5, r6
 800cc20:	d113      	bne.n	800cc4a <__gethex+0x2b6>
 800cc22:	2d01      	cmp	r5, #1
 800cc24:	d10b      	bne.n	800cc3e <__gethex+0x2aa>
 800cc26:	9a02      	ldr	r2, [sp, #8]
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	6013      	str	r3, [r2, #0]
 800cc2c:	2301      	movs	r3, #1
 800cc2e:	6123      	str	r3, [r4, #16]
 800cc30:	f8ca 3000 	str.w	r3, [sl]
 800cc34:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc36:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cc3a:	601c      	str	r4, [r3, #0]
 800cc3c:	e734      	b.n	800caa8 <__gethex+0x114>
 800cc3e:	1e69      	subs	r1, r5, #1
 800cc40:	4620      	mov	r0, r4
 800cc42:	f7fe fd14 	bl	800b66e <__any_on>
 800cc46:	2800      	cmp	r0, #0
 800cc48:	d1ed      	bne.n	800cc26 <__gethex+0x292>
 800cc4a:	4621      	mov	r1, r4
 800cc4c:	4648      	mov	r0, r9
 800cc4e:	f7fe f8d5 	bl	800adfc <_Bfree>
 800cc52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cc54:	2300      	movs	r3, #0
 800cc56:	6013      	str	r3, [r2, #0]
 800cc58:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cc5c:	e724      	b.n	800caa8 <__gethex+0x114>
 800cc5e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1f2      	bne.n	800cc4a <__gethex+0x2b6>
 800cc64:	e7df      	b.n	800cc26 <__gethex+0x292>
 800cc66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d1dc      	bne.n	800cc26 <__gethex+0x292>
 800cc6c:	e7ed      	b.n	800cc4a <__gethex+0x2b6>
 800cc6e:	bf00      	nop
 800cc70:	0800e134 	.word	0x0800e134
 800cc74:	0800dfcc 	.word	0x0800dfcc
 800cc78:	0800e2a2 	.word	0x0800e2a2
 800cc7c:	f106 38ff 	add.w	r8, r6, #4294967295
 800cc80:	f1bb 0f00 	cmp.w	fp, #0
 800cc84:	d133      	bne.n	800ccee <__gethex+0x35a>
 800cc86:	f1b8 0f00 	cmp.w	r8, #0
 800cc8a:	d004      	beq.n	800cc96 <__gethex+0x302>
 800cc8c:	4641      	mov	r1, r8
 800cc8e:	4620      	mov	r0, r4
 800cc90:	f7fe fced 	bl	800b66e <__any_on>
 800cc94:	4683      	mov	fp, r0
 800cc96:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cca0:	f008 081f 	and.w	r8, r8, #31
 800cca4:	fa03 f308 	lsl.w	r3, r3, r8
 800cca8:	4213      	tst	r3, r2
 800ccaa:	4631      	mov	r1, r6
 800ccac:	4620      	mov	r0, r4
 800ccae:	bf18      	it	ne
 800ccb0:	f04b 0b02 	orrne.w	fp, fp, #2
 800ccb4:	1bad      	subs	r5, r5, r6
 800ccb6:	f7ff fe06 	bl	800c8c6 <rshift>
 800ccba:	687e      	ldr	r6, [r7, #4]
 800ccbc:	f04f 0802 	mov.w	r8, #2
 800ccc0:	f1bb 0f00 	cmp.w	fp, #0
 800ccc4:	d04a      	beq.n	800cd5c <__gethex+0x3c8>
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2b02      	cmp	r3, #2
 800ccca:	d016      	beq.n	800ccfa <__gethex+0x366>
 800cccc:	2b03      	cmp	r3, #3
 800ccce:	d018      	beq.n	800cd02 <__gethex+0x36e>
 800ccd0:	2b01      	cmp	r3, #1
 800ccd2:	d109      	bne.n	800cce8 <__gethex+0x354>
 800ccd4:	f01b 0f02 	tst.w	fp, #2
 800ccd8:	d006      	beq.n	800cce8 <__gethex+0x354>
 800ccda:	f8da 3000 	ldr.w	r3, [sl]
 800ccde:	ea4b 0b03 	orr.w	fp, fp, r3
 800cce2:	f01b 0f01 	tst.w	fp, #1
 800cce6:	d10f      	bne.n	800cd08 <__gethex+0x374>
 800cce8:	f048 0810 	orr.w	r8, r8, #16
 800ccec:	e036      	b.n	800cd5c <__gethex+0x3c8>
 800ccee:	f04f 0b01 	mov.w	fp, #1
 800ccf2:	e7d0      	b.n	800cc96 <__gethex+0x302>
 800ccf4:	f04f 0801 	mov.w	r8, #1
 800ccf8:	e7e2      	b.n	800ccc0 <__gethex+0x32c>
 800ccfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ccfc:	f1c3 0301 	rsb	r3, r3, #1
 800cd00:	930f      	str	r3, [sp, #60]	; 0x3c
 800cd02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d0ef      	beq.n	800cce8 <__gethex+0x354>
 800cd08:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cd0c:	f104 0214 	add.w	r2, r4, #20
 800cd10:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cd14:	9301      	str	r3, [sp, #4]
 800cd16:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	4694      	mov	ip, r2
 800cd1e:	f852 1b04 	ldr.w	r1, [r2], #4
 800cd22:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cd26:	d01e      	beq.n	800cd66 <__gethex+0x3d2>
 800cd28:	3101      	adds	r1, #1
 800cd2a:	f8cc 1000 	str.w	r1, [ip]
 800cd2e:	f1b8 0f02 	cmp.w	r8, #2
 800cd32:	f104 0214 	add.w	r2, r4, #20
 800cd36:	d13d      	bne.n	800cdb4 <__gethex+0x420>
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	3b01      	subs	r3, #1
 800cd3c:	42ab      	cmp	r3, r5
 800cd3e:	d10b      	bne.n	800cd58 <__gethex+0x3c4>
 800cd40:	1169      	asrs	r1, r5, #5
 800cd42:	2301      	movs	r3, #1
 800cd44:	f005 051f 	and.w	r5, r5, #31
 800cd48:	fa03 f505 	lsl.w	r5, r3, r5
 800cd4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cd50:	421d      	tst	r5, r3
 800cd52:	bf18      	it	ne
 800cd54:	f04f 0801 	movne.w	r8, #1
 800cd58:	f048 0820 	orr.w	r8, r8, #32
 800cd5c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd5e:	601c      	str	r4, [r3, #0]
 800cd60:	9b02      	ldr	r3, [sp, #8]
 800cd62:	601e      	str	r6, [r3, #0]
 800cd64:	e6a0      	b.n	800caa8 <__gethex+0x114>
 800cd66:	4290      	cmp	r0, r2
 800cd68:	f842 3c04 	str.w	r3, [r2, #-4]
 800cd6c:	d8d6      	bhi.n	800cd1c <__gethex+0x388>
 800cd6e:	68a2      	ldr	r2, [r4, #8]
 800cd70:	4593      	cmp	fp, r2
 800cd72:	db17      	blt.n	800cda4 <__gethex+0x410>
 800cd74:	6861      	ldr	r1, [r4, #4]
 800cd76:	4648      	mov	r0, r9
 800cd78:	3101      	adds	r1, #1
 800cd7a:	f7fd ffff 	bl	800ad7c <_Balloc>
 800cd7e:	4682      	mov	sl, r0
 800cd80:	b918      	cbnz	r0, 800cd8a <__gethex+0x3f6>
 800cd82:	4b1b      	ldr	r3, [pc, #108]	; (800cdf0 <__gethex+0x45c>)
 800cd84:	4602      	mov	r2, r0
 800cd86:	2184      	movs	r1, #132	; 0x84
 800cd88:	e6b1      	b.n	800caee <__gethex+0x15a>
 800cd8a:	6922      	ldr	r2, [r4, #16]
 800cd8c:	3202      	adds	r2, #2
 800cd8e:	f104 010c 	add.w	r1, r4, #12
 800cd92:	0092      	lsls	r2, r2, #2
 800cd94:	300c      	adds	r0, #12
 800cd96:	f7fd f85c 	bl	8009e52 <memcpy>
 800cd9a:	4621      	mov	r1, r4
 800cd9c:	4648      	mov	r0, r9
 800cd9e:	f7fe f82d 	bl	800adfc <_Bfree>
 800cda2:	4654      	mov	r4, sl
 800cda4:	6922      	ldr	r2, [r4, #16]
 800cda6:	1c51      	adds	r1, r2, #1
 800cda8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cdac:	6121      	str	r1, [r4, #16]
 800cdae:	2101      	movs	r1, #1
 800cdb0:	6151      	str	r1, [r2, #20]
 800cdb2:	e7bc      	b.n	800cd2e <__gethex+0x39a>
 800cdb4:	6921      	ldr	r1, [r4, #16]
 800cdb6:	4559      	cmp	r1, fp
 800cdb8:	dd0b      	ble.n	800cdd2 <__gethex+0x43e>
 800cdba:	2101      	movs	r1, #1
 800cdbc:	4620      	mov	r0, r4
 800cdbe:	f7ff fd82 	bl	800c8c6 <rshift>
 800cdc2:	68bb      	ldr	r3, [r7, #8]
 800cdc4:	3601      	adds	r6, #1
 800cdc6:	42b3      	cmp	r3, r6
 800cdc8:	f6ff aeda 	blt.w	800cb80 <__gethex+0x1ec>
 800cdcc:	f04f 0801 	mov.w	r8, #1
 800cdd0:	e7c2      	b.n	800cd58 <__gethex+0x3c4>
 800cdd2:	f015 051f 	ands.w	r5, r5, #31
 800cdd6:	d0f9      	beq.n	800cdcc <__gethex+0x438>
 800cdd8:	9b01      	ldr	r3, [sp, #4]
 800cdda:	441a      	add	r2, r3
 800cddc:	f1c5 0520 	rsb	r5, r5, #32
 800cde0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cde4:	f7fe f8bc 	bl	800af60 <__hi0bits>
 800cde8:	42a8      	cmp	r0, r5
 800cdea:	dbe6      	blt.n	800cdba <__gethex+0x426>
 800cdec:	e7ee      	b.n	800cdcc <__gethex+0x438>
 800cdee:	bf00      	nop
 800cdf0:	0800dfcc 	.word	0x0800dfcc

0800cdf4 <L_shift>:
 800cdf4:	f1c2 0208 	rsb	r2, r2, #8
 800cdf8:	0092      	lsls	r2, r2, #2
 800cdfa:	b570      	push	{r4, r5, r6, lr}
 800cdfc:	f1c2 0620 	rsb	r6, r2, #32
 800ce00:	6843      	ldr	r3, [r0, #4]
 800ce02:	6804      	ldr	r4, [r0, #0]
 800ce04:	fa03 f506 	lsl.w	r5, r3, r6
 800ce08:	432c      	orrs	r4, r5
 800ce0a:	40d3      	lsrs	r3, r2
 800ce0c:	6004      	str	r4, [r0, #0]
 800ce0e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ce12:	4288      	cmp	r0, r1
 800ce14:	d3f4      	bcc.n	800ce00 <L_shift+0xc>
 800ce16:	bd70      	pop	{r4, r5, r6, pc}

0800ce18 <__match>:
 800ce18:	b530      	push	{r4, r5, lr}
 800ce1a:	6803      	ldr	r3, [r0, #0]
 800ce1c:	3301      	adds	r3, #1
 800ce1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce22:	b914      	cbnz	r4, 800ce2a <__match+0x12>
 800ce24:	6003      	str	r3, [r0, #0]
 800ce26:	2001      	movs	r0, #1
 800ce28:	bd30      	pop	{r4, r5, pc}
 800ce2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ce2e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800ce32:	2d19      	cmp	r5, #25
 800ce34:	bf98      	it	ls
 800ce36:	3220      	addls	r2, #32
 800ce38:	42a2      	cmp	r2, r4
 800ce3a:	d0f0      	beq.n	800ce1e <__match+0x6>
 800ce3c:	2000      	movs	r0, #0
 800ce3e:	e7f3      	b.n	800ce28 <__match+0x10>

0800ce40 <__hexnan>:
 800ce40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce44:	680b      	ldr	r3, [r1, #0]
 800ce46:	6801      	ldr	r1, [r0, #0]
 800ce48:	115e      	asrs	r6, r3, #5
 800ce4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ce4e:	f013 031f 	ands.w	r3, r3, #31
 800ce52:	b087      	sub	sp, #28
 800ce54:	bf18      	it	ne
 800ce56:	3604      	addne	r6, #4
 800ce58:	2500      	movs	r5, #0
 800ce5a:	1f37      	subs	r7, r6, #4
 800ce5c:	4682      	mov	sl, r0
 800ce5e:	4690      	mov	r8, r2
 800ce60:	9301      	str	r3, [sp, #4]
 800ce62:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce66:	46b9      	mov	r9, r7
 800ce68:	463c      	mov	r4, r7
 800ce6a:	9502      	str	r5, [sp, #8]
 800ce6c:	46ab      	mov	fp, r5
 800ce6e:	784a      	ldrb	r2, [r1, #1]
 800ce70:	1c4b      	adds	r3, r1, #1
 800ce72:	9303      	str	r3, [sp, #12]
 800ce74:	b342      	cbz	r2, 800cec8 <__hexnan+0x88>
 800ce76:	4610      	mov	r0, r2
 800ce78:	9105      	str	r1, [sp, #20]
 800ce7a:	9204      	str	r2, [sp, #16]
 800ce7c:	f7ff fd75 	bl	800c96a <__hexdig_fun>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	d14f      	bne.n	800cf24 <__hexnan+0xe4>
 800ce84:	9a04      	ldr	r2, [sp, #16]
 800ce86:	9905      	ldr	r1, [sp, #20]
 800ce88:	2a20      	cmp	r2, #32
 800ce8a:	d818      	bhi.n	800cebe <__hexnan+0x7e>
 800ce8c:	9b02      	ldr	r3, [sp, #8]
 800ce8e:	459b      	cmp	fp, r3
 800ce90:	dd13      	ble.n	800ceba <__hexnan+0x7a>
 800ce92:	454c      	cmp	r4, r9
 800ce94:	d206      	bcs.n	800cea4 <__hexnan+0x64>
 800ce96:	2d07      	cmp	r5, #7
 800ce98:	dc04      	bgt.n	800cea4 <__hexnan+0x64>
 800ce9a:	462a      	mov	r2, r5
 800ce9c:	4649      	mov	r1, r9
 800ce9e:	4620      	mov	r0, r4
 800cea0:	f7ff ffa8 	bl	800cdf4 <L_shift>
 800cea4:	4544      	cmp	r4, r8
 800cea6:	d950      	bls.n	800cf4a <__hexnan+0x10a>
 800cea8:	2300      	movs	r3, #0
 800ceaa:	f1a4 0904 	sub.w	r9, r4, #4
 800ceae:	f844 3c04 	str.w	r3, [r4, #-4]
 800ceb2:	f8cd b008 	str.w	fp, [sp, #8]
 800ceb6:	464c      	mov	r4, r9
 800ceb8:	461d      	mov	r5, r3
 800ceba:	9903      	ldr	r1, [sp, #12]
 800cebc:	e7d7      	b.n	800ce6e <__hexnan+0x2e>
 800cebe:	2a29      	cmp	r2, #41	; 0x29
 800cec0:	d155      	bne.n	800cf6e <__hexnan+0x12e>
 800cec2:	3102      	adds	r1, #2
 800cec4:	f8ca 1000 	str.w	r1, [sl]
 800cec8:	f1bb 0f00 	cmp.w	fp, #0
 800cecc:	d04f      	beq.n	800cf6e <__hexnan+0x12e>
 800cece:	454c      	cmp	r4, r9
 800ced0:	d206      	bcs.n	800cee0 <__hexnan+0xa0>
 800ced2:	2d07      	cmp	r5, #7
 800ced4:	dc04      	bgt.n	800cee0 <__hexnan+0xa0>
 800ced6:	462a      	mov	r2, r5
 800ced8:	4649      	mov	r1, r9
 800ceda:	4620      	mov	r0, r4
 800cedc:	f7ff ff8a 	bl	800cdf4 <L_shift>
 800cee0:	4544      	cmp	r4, r8
 800cee2:	d934      	bls.n	800cf4e <__hexnan+0x10e>
 800cee4:	f1a8 0204 	sub.w	r2, r8, #4
 800cee8:	4623      	mov	r3, r4
 800ceea:	f853 1b04 	ldr.w	r1, [r3], #4
 800ceee:	f842 1f04 	str.w	r1, [r2, #4]!
 800cef2:	429f      	cmp	r7, r3
 800cef4:	d2f9      	bcs.n	800ceea <__hexnan+0xaa>
 800cef6:	1b3b      	subs	r3, r7, r4
 800cef8:	f023 0303 	bic.w	r3, r3, #3
 800cefc:	3304      	adds	r3, #4
 800cefe:	3e03      	subs	r6, #3
 800cf00:	3401      	adds	r4, #1
 800cf02:	42a6      	cmp	r6, r4
 800cf04:	bf38      	it	cc
 800cf06:	2304      	movcc	r3, #4
 800cf08:	4443      	add	r3, r8
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	f843 2b04 	str.w	r2, [r3], #4
 800cf10:	429f      	cmp	r7, r3
 800cf12:	d2fb      	bcs.n	800cf0c <__hexnan+0xcc>
 800cf14:	683b      	ldr	r3, [r7, #0]
 800cf16:	b91b      	cbnz	r3, 800cf20 <__hexnan+0xe0>
 800cf18:	4547      	cmp	r7, r8
 800cf1a:	d126      	bne.n	800cf6a <__hexnan+0x12a>
 800cf1c:	2301      	movs	r3, #1
 800cf1e:	603b      	str	r3, [r7, #0]
 800cf20:	2005      	movs	r0, #5
 800cf22:	e025      	b.n	800cf70 <__hexnan+0x130>
 800cf24:	3501      	adds	r5, #1
 800cf26:	2d08      	cmp	r5, #8
 800cf28:	f10b 0b01 	add.w	fp, fp, #1
 800cf2c:	dd06      	ble.n	800cf3c <__hexnan+0xfc>
 800cf2e:	4544      	cmp	r4, r8
 800cf30:	d9c3      	bls.n	800ceba <__hexnan+0x7a>
 800cf32:	2300      	movs	r3, #0
 800cf34:	f844 3c04 	str.w	r3, [r4, #-4]
 800cf38:	2501      	movs	r5, #1
 800cf3a:	3c04      	subs	r4, #4
 800cf3c:	6822      	ldr	r2, [r4, #0]
 800cf3e:	f000 000f 	and.w	r0, r0, #15
 800cf42:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cf46:	6020      	str	r0, [r4, #0]
 800cf48:	e7b7      	b.n	800ceba <__hexnan+0x7a>
 800cf4a:	2508      	movs	r5, #8
 800cf4c:	e7b5      	b.n	800ceba <__hexnan+0x7a>
 800cf4e:	9b01      	ldr	r3, [sp, #4]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d0df      	beq.n	800cf14 <__hexnan+0xd4>
 800cf54:	f1c3 0320 	rsb	r3, r3, #32
 800cf58:	f04f 32ff 	mov.w	r2, #4294967295
 800cf5c:	40da      	lsrs	r2, r3
 800cf5e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cf62:	4013      	ands	r3, r2
 800cf64:	f846 3c04 	str.w	r3, [r6, #-4]
 800cf68:	e7d4      	b.n	800cf14 <__hexnan+0xd4>
 800cf6a:	3f04      	subs	r7, #4
 800cf6c:	e7d2      	b.n	800cf14 <__hexnan+0xd4>
 800cf6e:	2004      	movs	r0, #4
 800cf70:	b007      	add	sp, #28
 800cf72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf76 <__ascii_mbtowc>:
 800cf76:	b082      	sub	sp, #8
 800cf78:	b901      	cbnz	r1, 800cf7c <__ascii_mbtowc+0x6>
 800cf7a:	a901      	add	r1, sp, #4
 800cf7c:	b142      	cbz	r2, 800cf90 <__ascii_mbtowc+0x1a>
 800cf7e:	b14b      	cbz	r3, 800cf94 <__ascii_mbtowc+0x1e>
 800cf80:	7813      	ldrb	r3, [r2, #0]
 800cf82:	600b      	str	r3, [r1, #0]
 800cf84:	7812      	ldrb	r2, [r2, #0]
 800cf86:	1e10      	subs	r0, r2, #0
 800cf88:	bf18      	it	ne
 800cf8a:	2001      	movne	r0, #1
 800cf8c:	b002      	add	sp, #8
 800cf8e:	4770      	bx	lr
 800cf90:	4610      	mov	r0, r2
 800cf92:	e7fb      	b.n	800cf8c <__ascii_mbtowc+0x16>
 800cf94:	f06f 0001 	mvn.w	r0, #1
 800cf98:	e7f8      	b.n	800cf8c <__ascii_mbtowc+0x16>

0800cf9a <_realloc_r>:
 800cf9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf9e:	4680      	mov	r8, r0
 800cfa0:	4614      	mov	r4, r2
 800cfa2:	460e      	mov	r6, r1
 800cfa4:	b921      	cbnz	r1, 800cfb0 <_realloc_r+0x16>
 800cfa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cfaa:	4611      	mov	r1, r2
 800cfac:	f7fd be5a 	b.w	800ac64 <_malloc_r>
 800cfb0:	b92a      	cbnz	r2, 800cfbe <_realloc_r+0x24>
 800cfb2:	f7fd fde5 	bl	800ab80 <_free_r>
 800cfb6:	4625      	mov	r5, r4
 800cfb8:	4628      	mov	r0, r5
 800cfba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cfbe:	f000 fa43 	bl	800d448 <_malloc_usable_size_r>
 800cfc2:	4284      	cmp	r4, r0
 800cfc4:	4607      	mov	r7, r0
 800cfc6:	d802      	bhi.n	800cfce <_realloc_r+0x34>
 800cfc8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cfcc:	d812      	bhi.n	800cff4 <_realloc_r+0x5a>
 800cfce:	4621      	mov	r1, r4
 800cfd0:	4640      	mov	r0, r8
 800cfd2:	f7fd fe47 	bl	800ac64 <_malloc_r>
 800cfd6:	4605      	mov	r5, r0
 800cfd8:	2800      	cmp	r0, #0
 800cfda:	d0ed      	beq.n	800cfb8 <_realloc_r+0x1e>
 800cfdc:	42bc      	cmp	r4, r7
 800cfde:	4622      	mov	r2, r4
 800cfe0:	4631      	mov	r1, r6
 800cfe2:	bf28      	it	cs
 800cfe4:	463a      	movcs	r2, r7
 800cfe6:	f7fc ff34 	bl	8009e52 <memcpy>
 800cfea:	4631      	mov	r1, r6
 800cfec:	4640      	mov	r0, r8
 800cfee:	f7fd fdc7 	bl	800ab80 <_free_r>
 800cff2:	e7e1      	b.n	800cfb8 <_realloc_r+0x1e>
 800cff4:	4635      	mov	r5, r6
 800cff6:	e7df      	b.n	800cfb8 <_realloc_r+0x1e>

0800cff8 <__ascii_wctomb>:
 800cff8:	4603      	mov	r3, r0
 800cffa:	4608      	mov	r0, r1
 800cffc:	b141      	cbz	r1, 800d010 <__ascii_wctomb+0x18>
 800cffe:	2aff      	cmp	r2, #255	; 0xff
 800d000:	d904      	bls.n	800d00c <__ascii_wctomb+0x14>
 800d002:	228a      	movs	r2, #138	; 0x8a
 800d004:	601a      	str	r2, [r3, #0]
 800d006:	f04f 30ff 	mov.w	r0, #4294967295
 800d00a:	4770      	bx	lr
 800d00c:	700a      	strb	r2, [r1, #0]
 800d00e:	2001      	movs	r0, #1
 800d010:	4770      	bx	lr

0800d012 <__sfputc_r>:
 800d012:	6893      	ldr	r3, [r2, #8]
 800d014:	3b01      	subs	r3, #1
 800d016:	2b00      	cmp	r3, #0
 800d018:	b410      	push	{r4}
 800d01a:	6093      	str	r3, [r2, #8]
 800d01c:	da07      	bge.n	800d02e <__sfputc_r+0x1c>
 800d01e:	6994      	ldr	r4, [r2, #24]
 800d020:	42a3      	cmp	r3, r4
 800d022:	db01      	blt.n	800d028 <__sfputc_r+0x16>
 800d024:	290a      	cmp	r1, #10
 800d026:	d102      	bne.n	800d02e <__sfputc_r+0x1c>
 800d028:	bc10      	pop	{r4}
 800d02a:	f000 b933 	b.w	800d294 <__swbuf_r>
 800d02e:	6813      	ldr	r3, [r2, #0]
 800d030:	1c58      	adds	r0, r3, #1
 800d032:	6010      	str	r0, [r2, #0]
 800d034:	7019      	strb	r1, [r3, #0]
 800d036:	4608      	mov	r0, r1
 800d038:	bc10      	pop	{r4}
 800d03a:	4770      	bx	lr

0800d03c <__sfputs_r>:
 800d03c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d03e:	4606      	mov	r6, r0
 800d040:	460f      	mov	r7, r1
 800d042:	4614      	mov	r4, r2
 800d044:	18d5      	adds	r5, r2, r3
 800d046:	42ac      	cmp	r4, r5
 800d048:	d101      	bne.n	800d04e <__sfputs_r+0x12>
 800d04a:	2000      	movs	r0, #0
 800d04c:	e007      	b.n	800d05e <__sfputs_r+0x22>
 800d04e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d052:	463a      	mov	r2, r7
 800d054:	4630      	mov	r0, r6
 800d056:	f7ff ffdc 	bl	800d012 <__sfputc_r>
 800d05a:	1c43      	adds	r3, r0, #1
 800d05c:	d1f3      	bne.n	800d046 <__sfputs_r+0xa>
 800d05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d060 <_vfiprintf_r>:
 800d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d064:	460d      	mov	r5, r1
 800d066:	b09d      	sub	sp, #116	; 0x74
 800d068:	4614      	mov	r4, r2
 800d06a:	4698      	mov	r8, r3
 800d06c:	4606      	mov	r6, r0
 800d06e:	b118      	cbz	r0, 800d078 <_vfiprintf_r+0x18>
 800d070:	6a03      	ldr	r3, [r0, #32]
 800d072:	b90b      	cbnz	r3, 800d078 <_vfiprintf_r+0x18>
 800d074:	f7fc fdd4 	bl	8009c20 <__sinit>
 800d078:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d07a:	07d9      	lsls	r1, r3, #31
 800d07c:	d405      	bmi.n	800d08a <_vfiprintf_r+0x2a>
 800d07e:	89ab      	ldrh	r3, [r5, #12]
 800d080:	059a      	lsls	r2, r3, #22
 800d082:	d402      	bmi.n	800d08a <_vfiprintf_r+0x2a>
 800d084:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d086:	f7fc fee2 	bl	8009e4e <__retarget_lock_acquire_recursive>
 800d08a:	89ab      	ldrh	r3, [r5, #12]
 800d08c:	071b      	lsls	r3, r3, #28
 800d08e:	d501      	bpl.n	800d094 <_vfiprintf_r+0x34>
 800d090:	692b      	ldr	r3, [r5, #16]
 800d092:	b99b      	cbnz	r3, 800d0bc <_vfiprintf_r+0x5c>
 800d094:	4629      	mov	r1, r5
 800d096:	4630      	mov	r0, r6
 800d098:	f000 f93a 	bl	800d310 <__swsetup_r>
 800d09c:	b170      	cbz	r0, 800d0bc <_vfiprintf_r+0x5c>
 800d09e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0a0:	07dc      	lsls	r4, r3, #31
 800d0a2:	d504      	bpl.n	800d0ae <_vfiprintf_r+0x4e>
 800d0a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0a8:	b01d      	add	sp, #116	; 0x74
 800d0aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	0598      	lsls	r0, r3, #22
 800d0b2:	d4f7      	bmi.n	800d0a4 <_vfiprintf_r+0x44>
 800d0b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0b6:	f7fc fecb 	bl	8009e50 <__retarget_lock_release_recursive>
 800d0ba:	e7f3      	b.n	800d0a4 <_vfiprintf_r+0x44>
 800d0bc:	2300      	movs	r3, #0
 800d0be:	9309      	str	r3, [sp, #36]	; 0x24
 800d0c0:	2320      	movs	r3, #32
 800d0c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d0c6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d0ca:	2330      	movs	r3, #48	; 0x30
 800d0cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d280 <_vfiprintf_r+0x220>
 800d0d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d0d4:	f04f 0901 	mov.w	r9, #1
 800d0d8:	4623      	mov	r3, r4
 800d0da:	469a      	mov	sl, r3
 800d0dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d0e0:	b10a      	cbz	r2, 800d0e6 <_vfiprintf_r+0x86>
 800d0e2:	2a25      	cmp	r2, #37	; 0x25
 800d0e4:	d1f9      	bne.n	800d0da <_vfiprintf_r+0x7a>
 800d0e6:	ebba 0b04 	subs.w	fp, sl, r4
 800d0ea:	d00b      	beq.n	800d104 <_vfiprintf_r+0xa4>
 800d0ec:	465b      	mov	r3, fp
 800d0ee:	4622      	mov	r2, r4
 800d0f0:	4629      	mov	r1, r5
 800d0f2:	4630      	mov	r0, r6
 800d0f4:	f7ff ffa2 	bl	800d03c <__sfputs_r>
 800d0f8:	3001      	adds	r0, #1
 800d0fa:	f000 80a9 	beq.w	800d250 <_vfiprintf_r+0x1f0>
 800d0fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d100:	445a      	add	r2, fp
 800d102:	9209      	str	r2, [sp, #36]	; 0x24
 800d104:	f89a 3000 	ldrb.w	r3, [sl]
 800d108:	2b00      	cmp	r3, #0
 800d10a:	f000 80a1 	beq.w	800d250 <_vfiprintf_r+0x1f0>
 800d10e:	2300      	movs	r3, #0
 800d110:	f04f 32ff 	mov.w	r2, #4294967295
 800d114:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d118:	f10a 0a01 	add.w	sl, sl, #1
 800d11c:	9304      	str	r3, [sp, #16]
 800d11e:	9307      	str	r3, [sp, #28]
 800d120:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d124:	931a      	str	r3, [sp, #104]	; 0x68
 800d126:	4654      	mov	r4, sl
 800d128:	2205      	movs	r2, #5
 800d12a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d12e:	4854      	ldr	r0, [pc, #336]	; (800d280 <_vfiprintf_r+0x220>)
 800d130:	f7f3 f826 	bl	8000180 <memchr>
 800d134:	9a04      	ldr	r2, [sp, #16]
 800d136:	b9d8      	cbnz	r0, 800d170 <_vfiprintf_r+0x110>
 800d138:	06d1      	lsls	r1, r2, #27
 800d13a:	bf44      	itt	mi
 800d13c:	2320      	movmi	r3, #32
 800d13e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d142:	0713      	lsls	r3, r2, #28
 800d144:	bf44      	itt	mi
 800d146:	232b      	movmi	r3, #43	; 0x2b
 800d148:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d14c:	f89a 3000 	ldrb.w	r3, [sl]
 800d150:	2b2a      	cmp	r3, #42	; 0x2a
 800d152:	d015      	beq.n	800d180 <_vfiprintf_r+0x120>
 800d154:	9a07      	ldr	r2, [sp, #28]
 800d156:	4654      	mov	r4, sl
 800d158:	2000      	movs	r0, #0
 800d15a:	f04f 0c0a 	mov.w	ip, #10
 800d15e:	4621      	mov	r1, r4
 800d160:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d164:	3b30      	subs	r3, #48	; 0x30
 800d166:	2b09      	cmp	r3, #9
 800d168:	d94d      	bls.n	800d206 <_vfiprintf_r+0x1a6>
 800d16a:	b1b0      	cbz	r0, 800d19a <_vfiprintf_r+0x13a>
 800d16c:	9207      	str	r2, [sp, #28]
 800d16e:	e014      	b.n	800d19a <_vfiprintf_r+0x13a>
 800d170:	eba0 0308 	sub.w	r3, r0, r8
 800d174:	fa09 f303 	lsl.w	r3, r9, r3
 800d178:	4313      	orrs	r3, r2
 800d17a:	9304      	str	r3, [sp, #16]
 800d17c:	46a2      	mov	sl, r4
 800d17e:	e7d2      	b.n	800d126 <_vfiprintf_r+0xc6>
 800d180:	9b03      	ldr	r3, [sp, #12]
 800d182:	1d19      	adds	r1, r3, #4
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	9103      	str	r1, [sp, #12]
 800d188:	2b00      	cmp	r3, #0
 800d18a:	bfbb      	ittet	lt
 800d18c:	425b      	neglt	r3, r3
 800d18e:	f042 0202 	orrlt.w	r2, r2, #2
 800d192:	9307      	strge	r3, [sp, #28]
 800d194:	9307      	strlt	r3, [sp, #28]
 800d196:	bfb8      	it	lt
 800d198:	9204      	strlt	r2, [sp, #16]
 800d19a:	7823      	ldrb	r3, [r4, #0]
 800d19c:	2b2e      	cmp	r3, #46	; 0x2e
 800d19e:	d10c      	bne.n	800d1ba <_vfiprintf_r+0x15a>
 800d1a0:	7863      	ldrb	r3, [r4, #1]
 800d1a2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1a4:	d134      	bne.n	800d210 <_vfiprintf_r+0x1b0>
 800d1a6:	9b03      	ldr	r3, [sp, #12]
 800d1a8:	1d1a      	adds	r2, r3, #4
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	9203      	str	r2, [sp, #12]
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	bfb8      	it	lt
 800d1b2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d1b6:	3402      	adds	r4, #2
 800d1b8:	9305      	str	r3, [sp, #20]
 800d1ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d284 <_vfiprintf_r+0x224>
 800d1be:	7821      	ldrb	r1, [r4, #0]
 800d1c0:	2203      	movs	r2, #3
 800d1c2:	4650      	mov	r0, sl
 800d1c4:	f7f2 ffdc 	bl	8000180 <memchr>
 800d1c8:	b138      	cbz	r0, 800d1da <_vfiprintf_r+0x17a>
 800d1ca:	9b04      	ldr	r3, [sp, #16]
 800d1cc:	eba0 000a 	sub.w	r0, r0, sl
 800d1d0:	2240      	movs	r2, #64	; 0x40
 800d1d2:	4082      	lsls	r2, r0
 800d1d4:	4313      	orrs	r3, r2
 800d1d6:	3401      	adds	r4, #1
 800d1d8:	9304      	str	r3, [sp, #16]
 800d1da:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1de:	482a      	ldr	r0, [pc, #168]	; (800d288 <_vfiprintf_r+0x228>)
 800d1e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d1e4:	2206      	movs	r2, #6
 800d1e6:	f7f2 ffcb 	bl	8000180 <memchr>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	d03f      	beq.n	800d26e <_vfiprintf_r+0x20e>
 800d1ee:	4b27      	ldr	r3, [pc, #156]	; (800d28c <_vfiprintf_r+0x22c>)
 800d1f0:	bb1b      	cbnz	r3, 800d23a <_vfiprintf_r+0x1da>
 800d1f2:	9b03      	ldr	r3, [sp, #12]
 800d1f4:	3307      	adds	r3, #7
 800d1f6:	f023 0307 	bic.w	r3, r3, #7
 800d1fa:	3308      	adds	r3, #8
 800d1fc:	9303      	str	r3, [sp, #12]
 800d1fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d200:	443b      	add	r3, r7
 800d202:	9309      	str	r3, [sp, #36]	; 0x24
 800d204:	e768      	b.n	800d0d8 <_vfiprintf_r+0x78>
 800d206:	fb0c 3202 	mla	r2, ip, r2, r3
 800d20a:	460c      	mov	r4, r1
 800d20c:	2001      	movs	r0, #1
 800d20e:	e7a6      	b.n	800d15e <_vfiprintf_r+0xfe>
 800d210:	2300      	movs	r3, #0
 800d212:	3401      	adds	r4, #1
 800d214:	9305      	str	r3, [sp, #20]
 800d216:	4619      	mov	r1, r3
 800d218:	f04f 0c0a 	mov.w	ip, #10
 800d21c:	4620      	mov	r0, r4
 800d21e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d222:	3a30      	subs	r2, #48	; 0x30
 800d224:	2a09      	cmp	r2, #9
 800d226:	d903      	bls.n	800d230 <_vfiprintf_r+0x1d0>
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d0c6      	beq.n	800d1ba <_vfiprintf_r+0x15a>
 800d22c:	9105      	str	r1, [sp, #20]
 800d22e:	e7c4      	b.n	800d1ba <_vfiprintf_r+0x15a>
 800d230:	fb0c 2101 	mla	r1, ip, r1, r2
 800d234:	4604      	mov	r4, r0
 800d236:	2301      	movs	r3, #1
 800d238:	e7f0      	b.n	800d21c <_vfiprintf_r+0x1bc>
 800d23a:	ab03      	add	r3, sp, #12
 800d23c:	9300      	str	r3, [sp, #0]
 800d23e:	462a      	mov	r2, r5
 800d240:	4b13      	ldr	r3, [pc, #76]	; (800d290 <_vfiprintf_r+0x230>)
 800d242:	a904      	add	r1, sp, #16
 800d244:	4630      	mov	r0, r6
 800d246:	f7fb fe97 	bl	8008f78 <_printf_float>
 800d24a:	4607      	mov	r7, r0
 800d24c:	1c78      	adds	r0, r7, #1
 800d24e:	d1d6      	bne.n	800d1fe <_vfiprintf_r+0x19e>
 800d250:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d252:	07d9      	lsls	r1, r3, #31
 800d254:	d405      	bmi.n	800d262 <_vfiprintf_r+0x202>
 800d256:	89ab      	ldrh	r3, [r5, #12]
 800d258:	059a      	lsls	r2, r3, #22
 800d25a:	d402      	bmi.n	800d262 <_vfiprintf_r+0x202>
 800d25c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d25e:	f7fc fdf7 	bl	8009e50 <__retarget_lock_release_recursive>
 800d262:	89ab      	ldrh	r3, [r5, #12]
 800d264:	065b      	lsls	r3, r3, #25
 800d266:	f53f af1d 	bmi.w	800d0a4 <_vfiprintf_r+0x44>
 800d26a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d26c:	e71c      	b.n	800d0a8 <_vfiprintf_r+0x48>
 800d26e:	ab03      	add	r3, sp, #12
 800d270:	9300      	str	r3, [sp, #0]
 800d272:	462a      	mov	r2, r5
 800d274:	4b06      	ldr	r3, [pc, #24]	; (800d290 <_vfiprintf_r+0x230>)
 800d276:	a904      	add	r1, sp, #16
 800d278:	4630      	mov	r0, r6
 800d27a:	f7fc f917 	bl	80094ac <_printf_i>
 800d27e:	e7e4      	b.n	800d24a <_vfiprintf_r+0x1ea>
 800d280:	0800e289 	.word	0x0800e289
 800d284:	0800e28f 	.word	0x0800e28f
 800d288:	0800e293 	.word	0x0800e293
 800d28c:	08008f79 	.word	0x08008f79
 800d290:	0800d03d 	.word	0x0800d03d

0800d294 <__swbuf_r>:
 800d294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d296:	460e      	mov	r6, r1
 800d298:	4614      	mov	r4, r2
 800d29a:	4605      	mov	r5, r0
 800d29c:	b118      	cbz	r0, 800d2a6 <__swbuf_r+0x12>
 800d29e:	6a03      	ldr	r3, [r0, #32]
 800d2a0:	b90b      	cbnz	r3, 800d2a6 <__swbuf_r+0x12>
 800d2a2:	f7fc fcbd 	bl	8009c20 <__sinit>
 800d2a6:	69a3      	ldr	r3, [r4, #24]
 800d2a8:	60a3      	str	r3, [r4, #8]
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	071a      	lsls	r2, r3, #28
 800d2ae:	d525      	bpl.n	800d2fc <__swbuf_r+0x68>
 800d2b0:	6923      	ldr	r3, [r4, #16]
 800d2b2:	b31b      	cbz	r3, 800d2fc <__swbuf_r+0x68>
 800d2b4:	6823      	ldr	r3, [r4, #0]
 800d2b6:	6922      	ldr	r2, [r4, #16]
 800d2b8:	1a98      	subs	r0, r3, r2
 800d2ba:	6963      	ldr	r3, [r4, #20]
 800d2bc:	b2f6      	uxtb	r6, r6
 800d2be:	4283      	cmp	r3, r0
 800d2c0:	4637      	mov	r7, r6
 800d2c2:	dc04      	bgt.n	800d2ce <__swbuf_r+0x3a>
 800d2c4:	4621      	mov	r1, r4
 800d2c6:	4628      	mov	r0, r5
 800d2c8:	f7ff fa66 	bl	800c798 <_fflush_r>
 800d2cc:	b9e0      	cbnz	r0, 800d308 <__swbuf_r+0x74>
 800d2ce:	68a3      	ldr	r3, [r4, #8]
 800d2d0:	3b01      	subs	r3, #1
 800d2d2:	60a3      	str	r3, [r4, #8]
 800d2d4:	6823      	ldr	r3, [r4, #0]
 800d2d6:	1c5a      	adds	r2, r3, #1
 800d2d8:	6022      	str	r2, [r4, #0]
 800d2da:	701e      	strb	r6, [r3, #0]
 800d2dc:	6962      	ldr	r2, [r4, #20]
 800d2de:	1c43      	adds	r3, r0, #1
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d004      	beq.n	800d2ee <__swbuf_r+0x5a>
 800d2e4:	89a3      	ldrh	r3, [r4, #12]
 800d2e6:	07db      	lsls	r3, r3, #31
 800d2e8:	d506      	bpl.n	800d2f8 <__swbuf_r+0x64>
 800d2ea:	2e0a      	cmp	r6, #10
 800d2ec:	d104      	bne.n	800d2f8 <__swbuf_r+0x64>
 800d2ee:	4621      	mov	r1, r4
 800d2f0:	4628      	mov	r0, r5
 800d2f2:	f7ff fa51 	bl	800c798 <_fflush_r>
 800d2f6:	b938      	cbnz	r0, 800d308 <__swbuf_r+0x74>
 800d2f8:	4638      	mov	r0, r7
 800d2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d2fc:	4621      	mov	r1, r4
 800d2fe:	4628      	mov	r0, r5
 800d300:	f000 f806 	bl	800d310 <__swsetup_r>
 800d304:	2800      	cmp	r0, #0
 800d306:	d0d5      	beq.n	800d2b4 <__swbuf_r+0x20>
 800d308:	f04f 37ff 	mov.w	r7, #4294967295
 800d30c:	e7f4      	b.n	800d2f8 <__swbuf_r+0x64>
	...

0800d310 <__swsetup_r>:
 800d310:	b538      	push	{r3, r4, r5, lr}
 800d312:	4b2a      	ldr	r3, [pc, #168]	; (800d3bc <__swsetup_r+0xac>)
 800d314:	4605      	mov	r5, r0
 800d316:	6818      	ldr	r0, [r3, #0]
 800d318:	460c      	mov	r4, r1
 800d31a:	b118      	cbz	r0, 800d324 <__swsetup_r+0x14>
 800d31c:	6a03      	ldr	r3, [r0, #32]
 800d31e:	b90b      	cbnz	r3, 800d324 <__swsetup_r+0x14>
 800d320:	f7fc fc7e 	bl	8009c20 <__sinit>
 800d324:	89a3      	ldrh	r3, [r4, #12]
 800d326:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d32a:	0718      	lsls	r0, r3, #28
 800d32c:	d422      	bmi.n	800d374 <__swsetup_r+0x64>
 800d32e:	06d9      	lsls	r1, r3, #27
 800d330:	d407      	bmi.n	800d342 <__swsetup_r+0x32>
 800d332:	2309      	movs	r3, #9
 800d334:	602b      	str	r3, [r5, #0]
 800d336:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d33a:	81a3      	strh	r3, [r4, #12]
 800d33c:	f04f 30ff 	mov.w	r0, #4294967295
 800d340:	e034      	b.n	800d3ac <__swsetup_r+0x9c>
 800d342:	0758      	lsls	r0, r3, #29
 800d344:	d512      	bpl.n	800d36c <__swsetup_r+0x5c>
 800d346:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d348:	b141      	cbz	r1, 800d35c <__swsetup_r+0x4c>
 800d34a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d34e:	4299      	cmp	r1, r3
 800d350:	d002      	beq.n	800d358 <__swsetup_r+0x48>
 800d352:	4628      	mov	r0, r5
 800d354:	f7fd fc14 	bl	800ab80 <_free_r>
 800d358:	2300      	movs	r3, #0
 800d35a:	6363      	str	r3, [r4, #52]	; 0x34
 800d35c:	89a3      	ldrh	r3, [r4, #12]
 800d35e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d362:	81a3      	strh	r3, [r4, #12]
 800d364:	2300      	movs	r3, #0
 800d366:	6063      	str	r3, [r4, #4]
 800d368:	6923      	ldr	r3, [r4, #16]
 800d36a:	6023      	str	r3, [r4, #0]
 800d36c:	89a3      	ldrh	r3, [r4, #12]
 800d36e:	f043 0308 	orr.w	r3, r3, #8
 800d372:	81a3      	strh	r3, [r4, #12]
 800d374:	6923      	ldr	r3, [r4, #16]
 800d376:	b94b      	cbnz	r3, 800d38c <__swsetup_r+0x7c>
 800d378:	89a3      	ldrh	r3, [r4, #12]
 800d37a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d37e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d382:	d003      	beq.n	800d38c <__swsetup_r+0x7c>
 800d384:	4621      	mov	r1, r4
 800d386:	4628      	mov	r0, r5
 800d388:	f000 f88c 	bl	800d4a4 <__smakebuf_r>
 800d38c:	89a0      	ldrh	r0, [r4, #12]
 800d38e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d392:	f010 0301 	ands.w	r3, r0, #1
 800d396:	d00a      	beq.n	800d3ae <__swsetup_r+0x9e>
 800d398:	2300      	movs	r3, #0
 800d39a:	60a3      	str	r3, [r4, #8]
 800d39c:	6963      	ldr	r3, [r4, #20]
 800d39e:	425b      	negs	r3, r3
 800d3a0:	61a3      	str	r3, [r4, #24]
 800d3a2:	6923      	ldr	r3, [r4, #16]
 800d3a4:	b943      	cbnz	r3, 800d3b8 <__swsetup_r+0xa8>
 800d3a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d3aa:	d1c4      	bne.n	800d336 <__swsetup_r+0x26>
 800d3ac:	bd38      	pop	{r3, r4, r5, pc}
 800d3ae:	0781      	lsls	r1, r0, #30
 800d3b0:	bf58      	it	pl
 800d3b2:	6963      	ldrpl	r3, [r4, #20]
 800d3b4:	60a3      	str	r3, [r4, #8]
 800d3b6:	e7f4      	b.n	800d3a2 <__swsetup_r+0x92>
 800d3b8:	2000      	movs	r0, #0
 800d3ba:	e7f7      	b.n	800d3ac <__swsetup_r+0x9c>
 800d3bc:	20000070 	.word	0x20000070

0800d3c0 <_raise_r>:
 800d3c0:	291f      	cmp	r1, #31
 800d3c2:	b538      	push	{r3, r4, r5, lr}
 800d3c4:	4604      	mov	r4, r0
 800d3c6:	460d      	mov	r5, r1
 800d3c8:	d904      	bls.n	800d3d4 <_raise_r+0x14>
 800d3ca:	2316      	movs	r3, #22
 800d3cc:	6003      	str	r3, [r0, #0]
 800d3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800d3d2:	bd38      	pop	{r3, r4, r5, pc}
 800d3d4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d3d6:	b112      	cbz	r2, 800d3de <_raise_r+0x1e>
 800d3d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d3dc:	b94b      	cbnz	r3, 800d3f2 <_raise_r+0x32>
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 f830 	bl	800d444 <_getpid_r>
 800d3e4:	462a      	mov	r2, r5
 800d3e6:	4601      	mov	r1, r0
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d3ee:	f000 b817 	b.w	800d420 <_kill_r>
 800d3f2:	2b01      	cmp	r3, #1
 800d3f4:	d00a      	beq.n	800d40c <_raise_r+0x4c>
 800d3f6:	1c59      	adds	r1, r3, #1
 800d3f8:	d103      	bne.n	800d402 <_raise_r+0x42>
 800d3fa:	2316      	movs	r3, #22
 800d3fc:	6003      	str	r3, [r0, #0]
 800d3fe:	2001      	movs	r0, #1
 800d400:	e7e7      	b.n	800d3d2 <_raise_r+0x12>
 800d402:	2400      	movs	r4, #0
 800d404:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d408:	4628      	mov	r0, r5
 800d40a:	4798      	blx	r3
 800d40c:	2000      	movs	r0, #0
 800d40e:	e7e0      	b.n	800d3d2 <_raise_r+0x12>

0800d410 <raise>:
 800d410:	4b02      	ldr	r3, [pc, #8]	; (800d41c <raise+0xc>)
 800d412:	4601      	mov	r1, r0
 800d414:	6818      	ldr	r0, [r3, #0]
 800d416:	f7ff bfd3 	b.w	800d3c0 <_raise_r>
 800d41a:	bf00      	nop
 800d41c:	20000070 	.word	0x20000070

0800d420 <_kill_r>:
 800d420:	b538      	push	{r3, r4, r5, lr}
 800d422:	4d07      	ldr	r5, [pc, #28]	; (800d440 <_kill_r+0x20>)
 800d424:	2300      	movs	r3, #0
 800d426:	4604      	mov	r4, r0
 800d428:	4608      	mov	r0, r1
 800d42a:	4611      	mov	r1, r2
 800d42c:	602b      	str	r3, [r5, #0]
 800d42e:	f7f4 f8f5 	bl	800161c <_kill>
 800d432:	1c43      	adds	r3, r0, #1
 800d434:	d102      	bne.n	800d43c <_kill_r+0x1c>
 800d436:	682b      	ldr	r3, [r5, #0]
 800d438:	b103      	cbz	r3, 800d43c <_kill_r+0x1c>
 800d43a:	6023      	str	r3, [r4, #0]
 800d43c:	bd38      	pop	{r3, r4, r5, pc}
 800d43e:	bf00      	nop
 800d440:	20000af0 	.word	0x20000af0

0800d444 <_getpid_r>:
 800d444:	f7f4 b8e8 	b.w	8001618 <_getpid>

0800d448 <_malloc_usable_size_r>:
 800d448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d44c:	1f18      	subs	r0, r3, #4
 800d44e:	2b00      	cmp	r3, #0
 800d450:	bfbc      	itt	lt
 800d452:	580b      	ldrlt	r3, [r1, r0]
 800d454:	18c0      	addlt	r0, r0, r3
 800d456:	4770      	bx	lr

0800d458 <__swhatbuf_r>:
 800d458:	b570      	push	{r4, r5, r6, lr}
 800d45a:	460c      	mov	r4, r1
 800d45c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d460:	2900      	cmp	r1, #0
 800d462:	b096      	sub	sp, #88	; 0x58
 800d464:	4615      	mov	r5, r2
 800d466:	461e      	mov	r6, r3
 800d468:	da0d      	bge.n	800d486 <__swhatbuf_r+0x2e>
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d470:	f04f 0100 	mov.w	r1, #0
 800d474:	bf0c      	ite	eq
 800d476:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d47a:	2340      	movne	r3, #64	; 0x40
 800d47c:	2000      	movs	r0, #0
 800d47e:	6031      	str	r1, [r6, #0]
 800d480:	602b      	str	r3, [r5, #0]
 800d482:	b016      	add	sp, #88	; 0x58
 800d484:	bd70      	pop	{r4, r5, r6, pc}
 800d486:	466a      	mov	r2, sp
 800d488:	f000 f848 	bl	800d51c <_fstat_r>
 800d48c:	2800      	cmp	r0, #0
 800d48e:	dbec      	blt.n	800d46a <__swhatbuf_r+0x12>
 800d490:	9901      	ldr	r1, [sp, #4]
 800d492:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d496:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d49a:	4259      	negs	r1, r3
 800d49c:	4159      	adcs	r1, r3
 800d49e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d4a2:	e7eb      	b.n	800d47c <__swhatbuf_r+0x24>

0800d4a4 <__smakebuf_r>:
 800d4a4:	898b      	ldrh	r3, [r1, #12]
 800d4a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d4a8:	079d      	lsls	r5, r3, #30
 800d4aa:	4606      	mov	r6, r0
 800d4ac:	460c      	mov	r4, r1
 800d4ae:	d507      	bpl.n	800d4c0 <__smakebuf_r+0x1c>
 800d4b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d4b4:	6023      	str	r3, [r4, #0]
 800d4b6:	6123      	str	r3, [r4, #16]
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	6163      	str	r3, [r4, #20]
 800d4bc:	b002      	add	sp, #8
 800d4be:	bd70      	pop	{r4, r5, r6, pc}
 800d4c0:	ab01      	add	r3, sp, #4
 800d4c2:	466a      	mov	r2, sp
 800d4c4:	f7ff ffc8 	bl	800d458 <__swhatbuf_r>
 800d4c8:	9900      	ldr	r1, [sp, #0]
 800d4ca:	4605      	mov	r5, r0
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f7fd fbc9 	bl	800ac64 <_malloc_r>
 800d4d2:	b948      	cbnz	r0, 800d4e8 <__smakebuf_r+0x44>
 800d4d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4d8:	059a      	lsls	r2, r3, #22
 800d4da:	d4ef      	bmi.n	800d4bc <__smakebuf_r+0x18>
 800d4dc:	f023 0303 	bic.w	r3, r3, #3
 800d4e0:	f043 0302 	orr.w	r3, r3, #2
 800d4e4:	81a3      	strh	r3, [r4, #12]
 800d4e6:	e7e3      	b.n	800d4b0 <__smakebuf_r+0xc>
 800d4e8:	89a3      	ldrh	r3, [r4, #12]
 800d4ea:	6020      	str	r0, [r4, #0]
 800d4ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4f0:	81a3      	strh	r3, [r4, #12]
 800d4f2:	9b00      	ldr	r3, [sp, #0]
 800d4f4:	6163      	str	r3, [r4, #20]
 800d4f6:	9b01      	ldr	r3, [sp, #4]
 800d4f8:	6120      	str	r0, [r4, #16]
 800d4fa:	b15b      	cbz	r3, 800d514 <__smakebuf_r+0x70>
 800d4fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d500:	4630      	mov	r0, r6
 800d502:	f000 f81d 	bl	800d540 <_isatty_r>
 800d506:	b128      	cbz	r0, 800d514 <__smakebuf_r+0x70>
 800d508:	89a3      	ldrh	r3, [r4, #12]
 800d50a:	f023 0303 	bic.w	r3, r3, #3
 800d50e:	f043 0301 	orr.w	r3, r3, #1
 800d512:	81a3      	strh	r3, [r4, #12]
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	431d      	orrs	r5, r3
 800d518:	81a5      	strh	r5, [r4, #12]
 800d51a:	e7cf      	b.n	800d4bc <__smakebuf_r+0x18>

0800d51c <_fstat_r>:
 800d51c:	b538      	push	{r3, r4, r5, lr}
 800d51e:	4d07      	ldr	r5, [pc, #28]	; (800d53c <_fstat_r+0x20>)
 800d520:	2300      	movs	r3, #0
 800d522:	4604      	mov	r4, r0
 800d524:	4608      	mov	r0, r1
 800d526:	4611      	mov	r1, r2
 800d528:	602b      	str	r3, [r5, #0]
 800d52a:	f7f4 f8a6 	bl	800167a <_fstat>
 800d52e:	1c43      	adds	r3, r0, #1
 800d530:	d102      	bne.n	800d538 <_fstat_r+0x1c>
 800d532:	682b      	ldr	r3, [r5, #0]
 800d534:	b103      	cbz	r3, 800d538 <_fstat_r+0x1c>
 800d536:	6023      	str	r3, [r4, #0]
 800d538:	bd38      	pop	{r3, r4, r5, pc}
 800d53a:	bf00      	nop
 800d53c:	20000af0 	.word	0x20000af0

0800d540 <_isatty_r>:
 800d540:	b538      	push	{r3, r4, r5, lr}
 800d542:	4d06      	ldr	r5, [pc, #24]	; (800d55c <_isatty_r+0x1c>)
 800d544:	2300      	movs	r3, #0
 800d546:	4604      	mov	r4, r0
 800d548:	4608      	mov	r0, r1
 800d54a:	602b      	str	r3, [r5, #0]
 800d54c:	f7f4 f89a 	bl	8001684 <_isatty>
 800d550:	1c43      	adds	r3, r0, #1
 800d552:	d102      	bne.n	800d55a <_isatty_r+0x1a>
 800d554:	682b      	ldr	r3, [r5, #0]
 800d556:	b103      	cbz	r3, 800d55a <_isatty_r+0x1a>
 800d558:	6023      	str	r3, [r4, #0]
 800d55a:	bd38      	pop	{r3, r4, r5, pc}
 800d55c:	20000af0 	.word	0x20000af0

0800d560 <_init>:
 800d560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d562:	bf00      	nop
 800d564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d566:	bc08      	pop	{r3}
 800d568:	469e      	mov	lr, r3
 800d56a:	4770      	bx	lr

0800d56c <_fini>:
 800d56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d56e:	bf00      	nop
 800d570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d572:	bc08      	pop	{r3}
 800d574:	469e      	mov	lr, r3
 800d576:	4770      	bx	lr
